[{"position":"org.easymock.internal.matchers.Contains:40","failures":[0],"status":-1,"binaryOperator":"(\"contains(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"potentialValue":"potentialValue"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1987","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Byte>(org.easymock.Capture<java.lang.Byte>))","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"failures":[2,3,4],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,2,106,107,108,109,3,110,111,112,113,114,115,116,117,118,119,4,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,1,169,170,171,172,173,174,175],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:208","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[176],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[5,6,177,7,8,178,179,9,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,11,12,13,14,15,17,18,217,218,219,19,20,21,22,220,23,24,221,222,25,26,223,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,224,49,50,51,52,53,54,55,225,226,57,227,228,58,229,59,60,230,61,62,231,232,66,67,68,69,70,233,71,234,72,235,73,74,236,75,237,238,239,240,76,77,78,79,241,80,242,81,82,243,244,84,85,87,88,89,91,92,93,94,95,96,97,98,99,101,103,104,105,2,106,107,108,109,3,110,111,112,113,114,115,116,117,118,119,4,120,121,245,122,123,124,125,126,246,127,128,247,248,129,130,131,132,133,249,134,250,135,251,252,136,137,253,138,139,140,141,142,143,144,145,147,148,149,150,254,151,152,153,154,155,255,156,256,157,158,257,258,159,160,161,162,163,164,165,166,167,168,259,1,169,260,261,170,171,172,173,174,175],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[262,89],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"failMessage","this":"failMessage"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[285,286,287,288,289,290,291],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[209,11,292,220,23,24,221,222,25,226,228,58,61,62,66,67,68,69,70,99,103,104,105,2,106,107,108,109,3,110,293,111,112,113,114,115,116,117,118,119,4,120,121,245,122,123,124,125,247,248,132,156,294,167,168,259,1,169,260,261,170,171,172,173,295,174,175],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[296],"status":-1,"binaryOperator":"(\"endsWith(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[297,298,87,299,300,301,302,303,101,304,136,138,291],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[3],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[285,300,286,287,288,305,306,136,138,291],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1149","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[307,177,178,179,308,309,220,223,27,228,59,241,243,244,157],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"failures":[48,50],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[6,307,177,178,179,310,311,312,313,314,315,308,316,317,220,26,223,27,228,58,59,60,318,319,320,321,322,323,324,325,326,327,328,79,241,243,244,117,156,157,158],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[329],"status":-1,"binaryOperator":"((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[330],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"toMock"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[331,332,333],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"java.lang.reflect.Field.getType()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[233,234,334,335,336,337,338,339,340,341,342,343],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:556","sourceCode":"final org.easymock.internal.MocksControl org.easymock.internal.MocksControl = org.easymock.internal.LastControl.org.easymock.internal.LastControl.lastControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[344],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[345,346],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1518","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","type":"CtInvocationImpl"},"failures":[2,3,4],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[105,2,107,109,3,293,4,123,167,259,173],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:163","failures":[127,347],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":2,"org.easymock.tests2.UsageTest.argumentsOrdered":244,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":5,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":273,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":242,"org.easymock.tests2.StubTest.stubWithReturnValue":159,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":285,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":234,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":37,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":122,"org.easymock.tests2.SerializationTest.testAllMockedMethod":253,"org.easymock.tests2.DelegateToTest.testReturnException":250,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":344,"org.easymock.tests.MockingTest.testPartialClassMocking":12,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":326,"org.easymock.samples.SupportTest.voteForRemovals":76,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":297,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":10,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":281,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":192,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":152,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":180,"org.easymock.tests.UsageExpectAndThrowTest.object":190,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":92,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":120,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":286,"org.easymock.tests2.DelegateToTest.testWrongClass":251,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":61,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":62,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":110,"org.easymock.tests2.UsageTest.wrongArguments":241,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":23,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":343,"org.easymock.tests.UsageStrictMockTest.range":59,"org.easymock.samples.ExampleTest.answerVsDelegate":235,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":146,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":160,"org.easymock.tests2.UsageConstraintsTest.testNull":107,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":96,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":191,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":88,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":148,"org.easymock.tests2.CaptureTest.testPrimitive":1,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":25,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":199,"org.easymock.tests.UsageTest.moreThanOneArgument":6,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":178,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":95,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":310,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":65,"org.easymock.tests2.CaptureTest.testCaptureNone":171,"org.easymock.tests.UsageUnorderedTest.message":220,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":296,"org.easymock.tests.UsageVerifyTest.twoReturns":27,"org.easymock.tests.UsageVarargTest.varargByteAccepted":207,"org.easymock.tests2.ThreadingTest.testThreadSafe":129,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":330,"org.easymock.tests.UsageTest.argumentsOrdered":179,"org.easymock.tests.UsageVarargTest.varargIntAccepted":202,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":214,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":238,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":278,"org.easymock.tests2.CaptureTest.testCapture_2617107":259,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":66,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":328,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":282,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":222,"org.easymock.tests2.UsageConstraintsTest.any":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":265,"org.easymock.tests2.StubTest.stub":258,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":283,"org.easymock.tests.UsageExpectAndThrowTest.longType":183,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":322,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":256,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":134,"org.easymock.tests2.SerializationTest.testClass":136,"org.easymock.tests.LimitationsTest.mockNativeMethod":57,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":155,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":298,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":47,"org.easymock.tests2.AnswerTest.answer":126,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":279,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":341,"org.easymock.tests2.CaptureTest.testAnd":167,"org.easymock.tests2.UsageTest.strictResetToDefault":78,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":257,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":17,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":143,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":8,"org.easymock.tests2.DelegateToTest.testDelegate":252,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":14,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":184,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":93,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":89,"org.easymock.tests.MockingTest.testNicePartialClassMocking":13,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":195,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":98,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":339,"org.easymock.tests2.CaptureTest.testCaptureLast":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":226,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":317,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":3,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":166,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":121,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":316,"org.easymock.tests2.CaptureTest.testCapture1_2446744":169,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":28,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":193,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":188,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":243,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":124,"org.easymock.tests.UsageThrowableTest.throwError":48,"org.easymock.tests.UsageStrictMockTest.differentMethods":60,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":336,"org.easymock.tests2.ConstraintsToStringTest.andToString":325,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":131,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":338,"org.easymock.tests2.MockBuilderTest.testCreateMockString":302,"org.easymock.tests.UsageExpectAndThrowTest.floatType":182,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":117,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":246,"org.easymock.tests.UsageVerifyTest.twoThrows":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":153,"org.easymock.samples.PartialClassMockTest.testGetArea":71,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":67,"org.easymock.samples.ExampleTest.voteAgainstRemoval":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":274,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":64,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":63,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":101,"org.easymock.tests2.UsageTest.niceToStrict":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":181,"org.easymock.tests2.UsageConstraintsTest.testNotNull":123,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":54,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":263,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":87,"org.easymock.tests2.MockBuilderTest.testCreateMock":301,"org.easymock.tests2.UsageTest.defaultResetToNice":83,"org.easymock.samples.ExampleTest.voteAgainstRemovals":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":275,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":43,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":340,"org.easymock.tests2.CallbackTest.callback":249,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":342,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":313,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":303,"org.easymock.tests.UsageTest.openCallCountByLastCall":7,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":319,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":189,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":144,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":221,"org.easymock.tests.UsageCallCountTest.tooFewCalls":212,"org.easymock.tests.UsageOverloadedMethodTest.overloading":21,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":219,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":115,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":20,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":39,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":163,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":114,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":172,"org.easymock.tests.UsageThrowableTest.throwCheckedException":51,"org.easymock.tests2.EasyMockSupportClassTest.testAll":151,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":225,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":324,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":312,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":197,"org.easymock.tests2.CaptureTest.testCaptureAll":168,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":292,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":165,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":162,"org.easymock.tests2.UsageConstraintsTest.testMatches":116,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":164,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":347,"org.easymock.samples.ExampleTest.voteForRemovals":75,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":289,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":133,"org.easymock.tests.UsageVarargTest.allKinds":209,"org.easymock.tests2.DependencyTest.testInterfaceMocking":91,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":26,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":288,"org.easymock.samples.BasicClassMockTest.testPrintContent":239,"org.easymock.samples.ExampleTest.addDocument":236,"org.easymock.tests2.DelegateToTest.testStubDelegate":135,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":53,"org.easymock.tests2.AnswerTest.stubAnswer":127,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":58,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":306,"org.easymock.tests2.UsageConstraintsTest.greaterThan":118,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":299,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":16,"org.easymock.tests.UsageVarargTest.varargLongAccepted":206,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":102,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":272,"org.easymock.samples.ExampleTest.voteForRemoval":73,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":130,"org.easymock.tests.UsageExpectAndReturnTest.floatType":30,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":46,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":176,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":138,"org.easymock.tests2.ConstraintsToStringTest.orToString":318,"org.easymock.tests.UsageThrowableTest.noUpperLimit":224,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":119,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":210,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":77,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":104,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":260,"org.easymock.tests2.SerializationTest.test":137,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":270,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":345,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":141,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":49,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":29,"org.easymock.tests2.UsageConstraintsTest.testSame":108,"org.easymock.samples.SupportTest.addDocument":240,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":56,"org.easymock.tests2.CaptureTest.testCaptureFirst":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":269,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":142,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":85,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":309,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":35,"org.easymock.tests.GenericTest.testPackageScope":55,"org.easymock.tests2.UsageTest.moreThanOneArgument":79,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":132,"org.easymock.tests2.CaptureTest.testCapture2_2446744":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":280,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":267,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":337,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":208,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":215,"org.easymock.tests.UsageExpectAndReturnTest.longType":31,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":139,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":198,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":40,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":245,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":196,"org.easymock.tests2.UsageStrictMockTest.differentMethods":158,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":32,"org.easymock.tests.UsageCallCountTest.tooManyCalls":216,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":311,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":194,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":18,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":211,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":277,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":314,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":276,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":156,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":185,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":52,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":24,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":161,"org.easymock.tests2.UsageConstraintsTest.testContains":113,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":128,"org.easymock.tests2.UsageConstraintsTest.testFind":106,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":22,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":333,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":247,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":97,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":248,"org.easymock.tests.UsageExpectAndReturnTest.object":38,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":4,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":99,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":86,"org.easymock.tests2.UsageStrictMockTest.range":157,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":329,"org.easymock.tests2.UsageConstraintsTest.lessThan":125,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":147,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":287,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":204,"org.easymock.tests.UsageTest.exactCallCountByLastCall":9,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":268,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":271,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":140,"org.easymock.tests2.CaptureTest.testCaptureRightOne":173,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":231,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":315,"org.easymock.tests2.UsageConstraintsTest.testOr":109,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":291,"org.easymock.tests.UsageRangeTest.combination":15,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":200,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":94,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":44,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":218,"org.easymock.tests.UsageTest.wrongArguments":177,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":335,"org.easymock.tests2.EasyMockSupportTest.testVerify":254,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":264,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":41,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":321,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":232,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":346,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":217,"org.easymock.tests.UsageVarargTest.varargShortAccepted":205,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":294,"org.easymock.tests2.UsageConstraintsTest.cmpTo":112,"org.easymock.tests.UsageVarargTest.varargCharAccepted":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":266,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":284,"org.easymock.tests2.UsageTest.openCallCountByLastCall":81,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":82,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":332,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":150,"org.easymock.tests2.CaptureTest.testCaptureFromStub":295,"org.easymock.tests.UsageTest.unexpectedCallWithArray":307,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":308,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":187,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":228,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":50,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":213,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":334,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":42,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":229,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":100,"org.easymock.tests2.UsageConstraintsTest.constraints":105,"org.easymock.samples.ExampleTest.addAndChangeDocument":237,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":186,"org.easymock.tests2.ConstraintsToStringTest.notToString":320,"org.easymock.tests2.ConstraintsToStringTest.containsToString":0,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":45,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":233,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":323,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":154,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":261,"org.easymock.tests2.UsageTest.resumeIfFailure":84,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":68,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":262,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":34,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":69,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":19,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":201,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":145}}]

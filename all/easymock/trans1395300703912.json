[{"position":"org.easymock.internal.ArgumentToString:89","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"mock"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[49,50],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[11,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[70,71,72],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[49],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[73,74,75,76,77,4,7,8,78,79,80,81,34,35,36,37,43],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[49],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:209","sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:78","sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getAllDeclaredMethods(java.lang.reflect.Method.getDeclaringClass())","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:252","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[82,83,84,85],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[86,87,88],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:126","failures":[89,90,91,92,93],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.InstanceOf:40","failures":[],"status":0,"binaryOperator":"((\"isA(\" + (java.lang.Class<?>.getName())) + \")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[94,95,96,97,98,99,100,101],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[51],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:243","failures":[102,103,104,105,106,107,108,0,109,110,111,112,113,1,114,2,115,116,117,94,118,119,19,20,120,121,122,123,124,125,126,127,128,129,130,21,131,132,133,23,134,135,136,137,138,26,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,45,46,170,171,172,173,174,175,176],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[177,178,102,179,180,103,104,89,105,106,181,107,182,183,184,185,186,187,188,189,190,191,192,193,108,0,109,110,111,112,194,195,113,196,197,70,1,114,2,198,71,199,200,115,116,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,117,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,72,248,94,249,250,90,118,91,251,92,3,252,77,4,5,6,253,254,255,7,8,9,10,256,257,11,51,258,52,53,54,55,56,57,58,59,259,260,261,262,263,12,264,265,60,61,266,267,268,62,63,269,270,13,271,272,273,14,15,274,275,16,276,277,278,17,279,119,18,19,20,280,120,121,122,123,281,124,125,126,282,283,284,285,127,286,287,128,288,289,290,291,292,293,294,295,296,129,297,298,299,300,301,130,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,21,317,318,131,319,132,133,320,321,22,23,24,64,65,66,67,322,323,324,325,326,327,68,69,328,329,25,134,135,136,137,138,26,139,140,141,330,331,332,333,334,335,336,337,338,142,143,339,144,340,341,342,343,344,345,346,347,348,349,350,351,352,27,353,354,355,356,357,358,28,29,145,146,147,148,149,150,359,360,151,152,361,153,154,155,362,156,157,158,159,160,363,364,365,366,367,368,369,82,93,370,83,371,372,373,161,374,375,376,377,162,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,30,163,164,33,81,34,35,400,401,36,37,38,402,403,165,404,405,406,407,408,409,410,39,40,41,166,411,412,413,414,415,416,417,49,167,418,168,50,419,420,421,422,423,424,425,42,426,43,169,44,45,46,427,428,170,171,172,173,429,430,174,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,175,176,86,87,88,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,84,85,522,523,524],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"failures":[525],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[73,75,78,79,34,43],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[51],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[102,103,104,105,106,107,187,188,108,0,109,110,111,112,113,1,114,2,115,116,204,208,212,214,216,217,117,218,220,238,94,118,3,252,77,5,253,254,255,9,10,256,257,11,51,52,53,54,55,56,57,59,259,260,261,262,263,12,264,265,60,61,266,267,268,62,63,269,270,13,271,272,273,14,15,274,275,16,276,277,119,19,20,120,121,122,123,124,125,126,127,128,129,130,309,21,131,132,133,23,64,65,66,67,322,325,326,327,68,328,329,134,135,136,137,138,26,139,140,141,142,143,144,358,29,145,146,147,148,149,150,359,360,151,152,361,153,154,155,362,156,157,158,159,160,371,161,374,377,163,164,33,81,400,401,38,165,166,411,412,167,169,45,46,456,458,459,460,461,462,463,523,524],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[210,211,212,213,220,330,331,332,333,334,335,375,86,87,88,471,524],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[249,526,96,97,98,99,100],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[221,224],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[320],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[322,328,146,360,155,158,160,366,30,33,482,489,495,501,505,507],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[249,526,96,97,98,99,100],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"expected"}},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[0,70],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"substring","key":"substring"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[204,3,253,254,10,119,358,29,33,400,401,38,169],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:720","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[57],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[58,59],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:708","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:161","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[290],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[527,256,11,264,268],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":51,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":33,"org.easymock.tests2.UsageTest.argumentsOrdered":8,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":276,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":474,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":6,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":177,"org.easymock.tests2.DelegateToTest.testReturnException":90,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":331,"org.easymock.tests.MockingTest.testPartialClassMocking":142,"org.easymock.tests.MockClassControlTest.testToString":434,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":245,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":483,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":291,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":488,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":128,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":116,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":399,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":96,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":57,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":161,"org.easymock.tests2.UsageTest.wrongArguments":4,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":315,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":345,"org.easymock.samples.ExampleTest.answerVsDelegate":89,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":513,"org.easymock.tests2.UsageConstraintsTest.testNull":53,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":341,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":110,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":439,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":16,"org.easymock.tests2.CaptureTest.testPrimitive":67,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":377,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":507,"org.easymock.tests.UsageTest.moreThanOneArgument":81,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":109,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":172,"org.easymock.tests.UsageTest.argumentsOrdered":37,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":364,"org.easymock.tests.UsageVarargTest.varargIntAccepted":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":479,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":134,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":100,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":316,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":229,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":243,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":466,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":138,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":383,"org.easymock.tests.ReplayStateInvalidUsageTest.times":448,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":309,"org.easymock.tests2.DependencyTest.testClassMocking":199,"org.easymock.tests2.AnswerTest.answer":204,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":481,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":193,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":510,"org.easymock.tests2.CaptureTest.testAnd":64,"org.easymock.tests2.UsageTest.strictResetToDefault":252,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":70,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":171,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":140,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":273,"org.easymock.tests2.DelegateToTest.testDelegate":92,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":368,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":382,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":503,"org.easymock.tests.LimitationsTest.mockFinalMethod":404,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":334,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":417,"org.easymock.tests2.DependencyTest.testClassMockingSupport":200,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":84,"org.easymock.tests2.CaptureTest.testCapture1_2446744":322,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":195,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":501,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":191,"org.easymock.tests.UsageThrowableTest.throwError":456,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":442,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":512,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":48,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":244,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":429,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":303,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":386,"org.easymock.samples.PartialClassMockTest.testGetArea":103,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":443,"org.easymock.tests.MockingTest.testInterfaceMocking":339,"org.easymock.tests2.CompareToTest.testLessOrEqual":527,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":135,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":175,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":521,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":489,"org.easymock.tests2.UsageTest.niceToStrict":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":292,"org.easymock.tests2.ThreadingTest.testChangeDefault":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":464,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":131,"org.easymock.tests2.MockBuilderTest.testCreateMock":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":299,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":312,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":497,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":73,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":14,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":509,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":455,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":405,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":343,"org.easymock.tests.UsageOverloadedMethodTest.overloading":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":301,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":262,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":370,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":166,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":153,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":261,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":327,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":350,"org.easymock.tests.MockClassControlTest.testEquals":438,"org.easymock.tests2.EasyMockSupportClassTest.testAll":127,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":418,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":505,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":74,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":415,"org.easymock.tests2.CaptureTest.testCaptureAll":65,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":192,"org.easymock.tests.MockNameTest.defaultName":363,"org.easymock.tests2.UsageConstraintsTest.testMatches":263,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":440,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":173,"org.easymock.samples.ExampleTest.voteForRemovals":107,"org.easymock.tests.UsageVarargTest.allKinds":357,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":358,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":416,"org.easymock.samples.BasicClassMockTest.testPrintContent":180,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":462,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":17,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":240,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":251,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":335,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":101,"org.easymock.tests2.UsageConstraintsTest.greaterThan":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":286,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":139,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":2,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":387,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":425,"org.easymock.samples.ExampleTest.voteForRemoval":105,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":198,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":216,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":514,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":194,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":379,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":3,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":373,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":471,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":271,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":458,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":284,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":330,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":250,"org.easymock.tests2.CaptureTest.testCaptureFirst":329,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":470,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":272,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":10,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":372,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":360,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":117,"org.easymock.tests2.UsageTest.moreThanOneArgument":77,"org.easymock.tests2.CaptureTest.testCapture2_2446744":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":482,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":23,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":356,"org.easymock.tests.GenericTest.testBridgedEquals":50,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":40,"org.easymock.tests.UsageExpectAndReturnTest.longType":148,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":413,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":270,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":506,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":162,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":267,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":504,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":170,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":87,"org.easymock.tests.UsageCallCountTest.tooManyCalls":41,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":407,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":300,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":151,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":314,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":493,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":461,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":121,"org.easymock.tests.MockingTest.testNiceClassMocking":342,"org.easymock.tests.MockingTest.testClassMocking":337,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":406,"org.easymock.tests2.UsageConstraintsTest.testContains":260,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":212,"org.easymock.tests2.UsageConstraintsTest.testFind":52,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":412,"org.easymock.tests.MockTypeTest.fromEasyMockClass":511,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":42,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":203,"org.easymock.tests.UsageExpectAndReturnTest.object":361,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":113,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":313,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":275,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":97,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":352,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":519,"org.easymock.tests.UsageTest.exactCallCountByLastCall":38,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":523,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":469,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":430,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":365,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":80,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":249,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":157,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":347,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":93,"org.easymock.tests.MockClassControlTest.testHashCode":437,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":234,"org.easymock.tests2.EasyMockSupportTest.testVerify":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":294,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":366,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":454,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":369,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":190,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":31,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":226,"org.easymock.tests.UsageVarargTest.varargCharAccepted":351,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":487,"org.easymock.tests2.UsageTest.openCallCountByLastCall":253,"org.easymock.tests.DefaultClassInstantiatorTest.object":419,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":277,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":453,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":517,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":32,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":495,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":295,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":459,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":307,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":233,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":436,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":385,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":1,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":494,"org.easymock.tests.ReplayStateInvalidCallsTest.times":391,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":158,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":86,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":392,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":435,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":130,"org.easymock.tests2.UsageTest.resumeIfFailure":9,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":508,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":333,"org.easymock.tests2.StubTest.stubWithReturnValue":220,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":526,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":152,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":268,"org.easymock.tests2.SerializationTest.testAllMockedMethod":189,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":480,"org.easymock.samples.SupportTest.voteForRemovals":102,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":75,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":49,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":236,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":500,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":486,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":205,"org.easymock.tests.UsageExpectAndThrowTest.object":498,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":431,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":61,"org.easymock.tests2.DelegateToTest.testWrongClass":91,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":389,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":163,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":164,"org.easymock.samples.ConstructorCalledMockTest.testTax":185,"org.easymock.tests.UsageStrictMockTest.range":45,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":231,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":274,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":120,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":499,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":132,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":450,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":283,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":344,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":78,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":381,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":176,"org.easymock.tests2.CaptureTest.testCaptureNone":326,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":222,"org.easymock.tests.UsageUnorderedTest.message":30,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":47,"org.easymock.tests.UsageVerifyTest.twoReturns":29,"org.easymock.tests.UsageVarargTest.varargByteAccepted":355,"org.easymock.tests2.ThreadingTest.testThreadSafe":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":297,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":410,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":520,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":179,"org.easymock.tests2.CaptureTest.testCapture_2617107":66,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":76,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":522,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":484,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":376,"org.easymock.tests2.UsageConstraintsTest.any":59,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":447,"org.easymock.tests2.StubTest.stub":219,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":88,"org.easymock.tests.UsageExpectAndThrowTest.longType":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":485,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":332,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":423,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":446,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":18,"org.easymock.tests2.SerializationTest.testClass":187,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":238,"org.easymock.tests.LimitationsTest.mockNativeMethod":165,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":168,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":160,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":306,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":397,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":280,"org.easymock.tests2.NameTest.nameForMocksControl":248,"org.easymock.tests2.MockedExceptionTest.testMockedException":211,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":287,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":401,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":492,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":144,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":202,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":108,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":133,"org.easymock.tests.MockingTest.testNicePartialClassMocking":143,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":112,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":95,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":304,"org.easymock.tests2.CaptureTest.testCaptureLast":325,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":85,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":396,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":126,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":56,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":266,"org.easymock.tests.MockingTest.testTwoMocks":338,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":393,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":282,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":145,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":496,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":7,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":63,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":225,"org.easymock.samples.ExampleTest.removeNonExistingDocument":182,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":444,"org.easymock.tests.UsageStrictMockTest.differentMethods":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":311,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":235,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":421,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":224,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":217,"org.easymock.tests2.MockBuilderTest.testCreateMockString":24,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":432,"org.easymock.tests.UsageExpectAndThrowTest.floatType":490,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":288,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":285,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":207,"org.easymock.tests.UsageVerifyTest.twoThrows":28,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":129,"org.easymock.samples.ExampleTest.voteAgainstRemoval":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":475,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":452,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":114,"org.easymock.tests.LimitationsTest.privateConstructor":403,"org.easymock.tests2.UsageConstraintsTest.testNotNull":62,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":463,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":210,"org.easymock.tests2.UsageTest.defaultResetToNice":255,"org.easymock.samples.ExampleTest.voteAgainstRemovals":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":476,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":156,"org.easymock.tests.UsageVarargTest.differentLength":27,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":305,"org.easymock.tests2.CallbackTest.callback":25,"org.easymock.tests2.UsageConstraintsTest.equals":258,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":196,"org.easymock.tests.UsageTest.openCallCountByLastCall":400,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":256,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":375,"org.easymock.tests.UsageCallCountTest.tooFewCalls":408,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":123,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":346,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":223,"org.easymock.tests.UsageThrowableTest.throwCheckedException":460,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":79,"org.easymock.tests.MockingTest.testStrictClassMocking":336,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":524,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":125,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":122,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":310,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":449,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":124,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":209,"org.easymock.tests.ObjectMethodsTest.testHashCode":518,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":99,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":395,"org.easymock.tests2.NameTest.nameForNiceMock":72,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":218,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":390,"org.easymock.tests2.DependencyTest.testInterfaceMocking":115,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":98,"org.easymock.samples.ExampleTest.addDocument":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":298,"org.easymock.tests2.DelegateToTest.testStubDelegate":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":302,"org.easymock.tests2.AnswerTest.stubAnswer":208,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":169,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":320,"org.easymock.tests.UsageVarargTest.varargLongAccepted":354,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":473,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":159,"org.easymock.tests.UsageExpectAndReturnTest.floatType":147,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":94,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":186,"org.easymock.tests.UsageThrowableTest.noUpperLimit":457,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":83,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":242,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":265,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":257,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":227,"org.easymock.tests2.SerializationTest.test":188,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":323,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":420,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":146,"org.easymock.tests2.UsageConstraintsTest.testSame":54,"org.easymock.samples.SupportTest.addDocument":178,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":281,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":380,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":445,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":289,"org.easymock.tests.GenericTest.testPackageScope":167,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":468,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":241,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":340,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":378,"org.easymock.tests2.NameTest.nameForMock":246,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":154,"org.easymock.tests2.UsageStrictMockTest.differentMethods":20,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":197,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":149,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":502,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":516,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":141,"org.easymock.tests2.MockedExceptionTest.testRealException":213,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":515,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":478,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":477,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":119,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":451,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":374,"org.easymock.tests2.NameTest.nameForStrictMock":247,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":318,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":201,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":111,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":230,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":422,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":60,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":21,"org.easymock.tests2.UsageStrictMockTest.range":19,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":384,"org.easymock.tests2.UsageConstraintsTest.lessThan":269,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":472,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":13,"org.easymock.tests2.CaptureTest.testCaptureRightOne":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":293,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":221,"org.easymock.tests2.UsageConstraintsTest.testOr":55,"org.easymock.tests.UsageRangeTest.combination":26,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":0,"org.easymock.tests.UsageTest.wrongArguments":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":290,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":433,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":150,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":465,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":155,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":424,"org.easymock.tests.UsageVarargTest.varargShortAccepted":353,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":39,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":398,"org.easymock.tests2.UsageConstraintsTest.cmpTo":259,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":206,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":388,"org.easymock.tests2.CompareToTest.testLessThan":525,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":467,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":254,"org.easymock.tests2.CaptureTest.testCaptureFromStub":69,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":441,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":317,"org.easymock.tests.UsageTest.unexpectedCallWithArray":34,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":394,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":43,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":409,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":362,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":44,"org.easymock.tests2.UsageConstraintsTest.constraints":11,"org.easymock.samples.ExampleTest.addAndChangeDocument":183,"org.easymock.tests.UsageStrictMockTest.testVerify":428,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":184,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":426,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":414,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":324,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":136,"org.easymock.tests.LimitationsTest.abstractClass":402,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":359,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":137,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":371,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":15,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":348}}]

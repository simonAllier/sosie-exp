[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","position":"org.easymock.internal.RecordState:55","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = java.lang.reflect.Method.getName()","position":"org.easymock.internal.Invocation:143","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116],"variableMapping":{"method":"result","paramTypes":"paramTypes","name":"name","this":"this"},"name":"add","transplant":{"sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:416","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"status":-1},{"failures":[117,83],"variableMapping":{"this":"this","mocks":"mocks"},"name":"add","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","position":"org.easymock.EasyMock:2079","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","position":"org.easymock.internal.BridgeMethodResolver:338","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","position":"org.easymock.internal.LastControl:124","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod())","position":"org.easymock.internal.ClassProxyFactory:117","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:920","type":"CtReturnImpl"},"status":-2},{"failures":[118],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:121","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl() : org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtLocalVariableImpl"},"status":-2},{"failures":[119,120,121,122,123,124,125,126,127,128,129,2,3,4,130,131,132,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,19,20,21,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,33,36,37,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,117,260,261,262,263,264,265,266,267,50,268,269,270,271,272,273,274,275,276,277,278,279,51,280,52,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,53,54,55,56,305,57,58,306,307,65,67,68,75,76,308,77,78,79,81,86,93,96,106,112,309,310,115,311,312,313,314,315,316,317,318,319,320,321,322],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    try {\n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n            continue;\n        } \n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n            continue;\n        } \n        final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n        org.easymock.internal.Invocation.validateCaptures();\n        return org.easymock.internal.Result;\n    } finally {\n        org.easymock.internal.Invocation.clearCaptures();\n    }\n}","position":"org.easymock.internal.UnorderedBehavior:50","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:34","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","position":"org.easymock.internal.ExpectedInvocation:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()))","position":"org.easymock.internal.AndroidClassProxyFactory:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"value","properties":"properties","key":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","position":"org.easymock.internal.EasyMockProperties:119","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:122","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-2},{"failures":[87],"variableMapping":{"toMock":"toMock","name":"name","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:190","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:281","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.add(org.easymock.internal.matchers.Captures<java.lang.Object>)","position":"org.easymock.internal.Invocation:163","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1543","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","position":"org.easymock.EasyMock:1620","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()))","position":"org.easymock.internal.ClassProxyFactory:108","type":"CtLocalVariableImpl"},"status":-2},{"failures":[119,0,0,1,1,120,121,122,2,3,4,267,282,307,67,68,93,96,106,112,311,312,313,314,315,316,317,323,318,319,320,321,322],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToNice()","position":"org.easymock.EasyMockSupport:573","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.replay()","position":"org.easymock.EasyMockSupport:542","type":"CtInvocationImpl"},"status":-1},{"failures":[298],"variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"shouldBeUsedInOneThread"},"name":"replace","transplant":{"sourceCode":"this.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this.boolean","position":"org.easymock.internal.MocksBehavior:189","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (org.easymock.internal.InjectionTarget == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:165","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n    java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n} ","position":"org.easymock.internal.Injector:169","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ClassProxyFactory:120","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.MocksControl:310","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","position":"org.easymock.internal.LastControl:128","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"unordered":"toAssert","match":"toAssert","validCallCount":"toAssert"},"name":"replace","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","position":"org.easymock.internal.LastControl:102","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"removeConditional","position":"org.easymock.internal.DefaultClassInstantiator:58","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object = java.lang.reflect.Field.get(java.lang.Object)","position":"org.easymock.internal.Injector:74","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n    return false;\n} ","position":"org.easymock.internal.UnorderedBehavior:75","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.DefaultClassInstantiator:162","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int]","position":"org.easymock.internal.BridgeMethodResolver:383","type":"CtLocalVariableImpl"},"status":-2},{"failures":[37,38,39],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ClassProxyFactory:90","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"java.lang.reflect.Modifier.FINAL":"position","java.lang.reflect.Modifier.STATIC":"position"},"name":"replace","transplant":{"sourceCode":"final int int = (this.int) | (this.int)","position":"org.easymock.internal.DefaultClassInstantiator:157","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder))","position":"org.easymock.internal.MocksBehavior:148","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:265","type":"CtIfImpl"},"status":-2},{"failures":[283,285,287,288,289,292,293,324,294],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","position":"org.easymock.EasyMock:1915","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:212","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1777","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:420","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n    java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n} catch (java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n}","position":"org.easymock.internal.AndroidClassProxyFactory:46","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.ExpectedInvocation:112","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)) {\n    return (java.lang.String + \".\") + java.lang.String;\n} ","position":"org.easymock.internal.Invocation:153","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","position":"org.easymock.EasyMock:1079","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread()","position":"org.easymock.internal.MocksBehavior:197","type":"CtAssignmentImpl"},"status":-2},{"failures":[119,120,121,122,123,124,125,126,127,128,129,2,3,4,130,131,132,325,5,133,134,135,136,137,138,139,140,326,141,142,327,328,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,329,170,171,172,173,174,175,176,177,19,20,21,178,179,180,181,182,330,183,331,184,185,186,187,188,332,333,189,334,190,191,192,193,194,335,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,33,36,37,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,117,260,336,261,262,263,264,337,338,265,266,267,50,268,269,270,271,272,273,339,274,275,276,277,278,279,51,280,52,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,53,54,55,56,305,57,58,306,307,62,65,67,68,71,75,76,308,77,78,79,81,85,86,87,93,96,106,112,309,310,115,311,312,313,314,315,316,317,318,319,320,321,322,340,341,342,343],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:45","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","position":"org.easymock.internal.ClassProxyFactory:226","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1039","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:29","type":"CtNewClassImpl"},"status":-2},{"failures":[241],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:707","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Double>(org.easymock.Capture<java.lang.Double>))","position":"org.easymock.EasyMock:1975","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this","mockedMethods":"mockedMethods"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:161","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:299","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","position":"org.easymock.internal.ClassProxyFactory:189","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.RecordState:61","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","position":"org.easymock.EasyMock:1607","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:297","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:265","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"clazz":"type"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResults>()","position":"org.easymock.internal.UnorderedBehavior:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.UnorderedBehavior:67","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"result","equalsMethod":"result"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","position":"org.easymock.internal.BridgeMethodResolver:88","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","position":"org.easymock.internal.EasyMockProperties:62","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n    java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n} catch (java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n}","position":"org.easymock.internal.AndroidClassProxyFactory:46","type":"CtTryImpl"},"status":-2},{"failures":[273],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:126","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","position":"org.easymock.internal.DefaultClassInstantiator:196","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","position":"org.easymock.internal.ObjectMethodsFilter:83","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float.valueOf(0))","position":"org.easymock.internal.RecordState:51","type":"CtInvocationImpl"},"status":-2},{"failures":[51,69,344],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl"},"status":-1},{"failures":[234,240,283,285,293],"name":"returnValue","position":"org.easymock.internal.matchers.And:43","type":"mutation","return":"return true","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","position":"org.easymock.internal.matchers.EndsWith:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1495","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","position":"org.easymock.internal.DefaultClassInstantiator:136","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:986","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = int","position":"org.easymock.internal.MocksBehavior:105","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * ((int - int) + 1)))","position":"org.easymock.internal.MocksBehavior:119","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:772","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","position":"org.easymock.EasyMock:1815","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * See {@link EasyMock#cmp}\n * \n * @author Henri Tremblay\n */\npublic enum LogicalOperator {\nLESS_THAN(\"<\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int < 0;\n        }\n    }, LESS_OR_EQUAL(\"<=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int <= 0;\n        }\n    }, EQUAL(\"==\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int == 0;\n        }\n    }, GREATER_OR_EQUAL(\">=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int >= 0;\n        }\n    }, GREATER(\">\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int > 0;\n        }\n    };\n    private java.lang.String symbol;\n    private LogicalOperator(final java.lang.String symbol) {\n        this.java.lang.String = java.lang.String;\n    }\n    public java.lang.String getSymbol() {\n        return java.lang.String;\n    }\n\n    public abstract boolean matchResult(int result);\n}","position":"org.easymock.LogicalOperator:23","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = int ; int <= int ; int++) {\n    final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation);\n    java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>);\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n        if (org.easymock.internal.ErrorMessage.isMatching()) {\n            int++;\n        } \n    }\n}","position":"org.easymock.internal.MocksBehavior:127","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:71","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * (((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - (int)) + 1)))","position":"org.easymock.internal.MocksBehavior:164","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = ((org.easymock.internal.ExpectedInvocation)(java.lang.Object))","position":"org.easymock.internal.ExpectedInvocation:73","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:287","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.Injector:190","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","position":"org.easymock.internal.BridgeMethodResolver:351","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.io.ObjectOutputStream.writeObject(null);\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:129","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.addAll(java.util.Stack<org.easymock.IArgumentMatcher>.subList(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int), java.util.Stack<org.easymock.IArgumentMatcher>.size()))","position":"org.easymock.internal.LastControl:94","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","position":"org.easymock.internal.MocksControl:294","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:136","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n    throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n} ","position":"org.easymock.internal.ExpectedInvocation:46","type":"CtIfImpl"},"status":-2},{"failures":[345,346],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.Injection.setMatched()","position":"org.easymock.internal.InjectionTarget:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"status":-1},{"failures":[316],"variableMapping":{"controls":"controls"},"name":"replace","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.reset();\n}","position":"org.easymock.EasyMockSupport:551","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:144","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.matchers.Null()","position":"org.easymock.internal.matchers.Null:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:35","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))","position":"org.easymock.internal.AndroidClassProxyFactory:97","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"status":-2},{"failures":[27,347,348],"variableMapping":{"data":"data"},"name":"replace","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:138","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)) {\n    return (java.lang.String + \".\") + java.lang.String;\n} ","position":"org.easymock.internal.Invocation:153","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new java.lang.IllegalArgumentException(((java.lang.Object + \" isn\\'t of type \") + java.lang.Class<?>))","position":"org.easymock.ConstructorArgs:87","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = new java.util.ArrayList<java.lang.reflect.Field>()","position":"org.easymock.internal.Injector:198","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Exception java.lang.Exception","position":"org.easymock.ConstructorArgs:71","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","position":"org.easymock.internal.ClassProxyFactory:251","type":"CtInvocationImpl"},"status":0},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":207,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":81,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":185,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":97,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":160,"org.easymock.tests.UsageVarargTest.varargIntAccepted":167,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":138,"org.easymock.tests.LimitationsTest.mockFinalMethod":34,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":232,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":11,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":115,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":119,"org.easymock.tests2.UsageConstraintsTest.testContains":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":108,"org.easymock.tests.UsageCallCountTest.tooManyCalls":200,"org.easymock.tests2.UsageConstraintsTest.testFind":236,"org.easymock.tests.UsageVarargTest.allKinds":174,"org.easymock.tests2.StubTest.stubWithReturnValue":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":114,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":288,"org.easymock.tests2.CaptureTest.testCaptureAll":284,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":26,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":202,"org.easymock.samples.ExampleTest.addAndChangeDocument":129,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":60,"org.easymock.tests.UsageVarargTest.varargCharAccepted":168,"org.easymock.tests2.CaptureTest.testCaptureFromStub":324,"org.easymock.tests.UsageVerifyTest.twoThrows":193,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":134,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":169,"org.easymock.tests2.DelegateToTest.testReturnException":270,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":116,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":262,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":248,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":321,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":35,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":274,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":43,"org.easymock.tests2.CaptureTest.testAnd":283,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":42,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":28,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":153,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":131,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":292,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":6,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":157,"org.easymock.tests2.UsageConstraintsTest.testMatches":247,"org.easymock.tests.MockClassControlTest.testToString":10,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":72,"org.easymock.tests.LimitationsTest.abstractClass":31,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":53,"org.easymock.tests2.UsageConstraintsTest.testNull":237,"org.easymock.tests2.EasyMockSupportClassTest.testAll":93,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":316,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":161,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":225,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":282,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":5,"org.easymock.tests.UsageThrowableTest.throwError":204,"org.easymock.tests2.UsageConstraintsTest.greaterThan":249,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":165,"org.easymock.samples.SupportTest.addDocument":121,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":137,"org.easymock.tests2.StubTest.stub":309,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":332,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":181,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":133,"org.easymock.tests.UsageExpectAndReturnTest.object":222,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":231,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":251,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":318,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":46,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":89,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":88,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":173,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":279,"org.easymock.tests.UsageExpectAndThrowTest.object":155,"org.easymock.tests2.DelegateToTest.testWrongClass":272,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":110,"org.easymock.tests2.UsageTest.moreThanOneArgument":260,"org.easymock.tests.UsageVarargTest.varargByteAccepted":172,"org.easymock.tests.MockClassControlTest.testEquals":14,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":152,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":45,"org.easymock.samples.ExampleTest.voteAgainstRemoval":126,"org.easymock.tests.UsageTest.wrongArguments":326,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":210,"org.easymock.tests.UsageVarargTest.varargShortAccepted":170,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":118,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":156,"org.easymock.tests.MockingTest.testNiceClassMocking":22,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":50,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":180,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":120,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":299,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":92,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":8,"org.easymock.tests2.MockBuilderTest.testCreateMock":70,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":61,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":300,"org.easymock.tests2.SerializationTest.testAllMockedMethod":52,"org.easymock.tests2.NameTest.nameForMocksControl":343,"org.easymock.samples.ExampleTest.voteAgainstRemovals":123,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":339,"org.easymock.tests.MockingTest.testStrictClassMocking":16,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":190,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":136,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":175,"org.easymock.tests2.CaptureTest.testCapture1_2446744":287,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":100,"org.easymock.tests.LimitationsTest.mockNativeMethod":33,"org.easymock.tests2.DelegateToTest.testStubDelegate":271,"org.easymock.tests.UsageUnorderedTest.message":201,"org.easymock.samples.ExampleTest.answerVsDelegate":124,"org.easymock.samples.ExampleTest.voteForRemoval":125,"org.easymock.tests.UsageCallCountTest.tooFewCalls":196,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":221,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":198,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":109,"org.easymock.tests.UsageVerifyTest.twoReturns":194,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":154,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":216,"org.easymock.tests2.DependencyTest.testInterfaceMocking":306,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":311,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":325,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":314,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":240,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":188,"org.easymock.tests.MockingTest.testTwoMocks":18,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":218,"org.easymock.tests2.CaptureTest.testCaptureRightOne":293,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":195,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":48,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":79,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":334,"org.easymock.tests2.UsageConstraintsTest.cmpTo":243,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":98,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":27,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":223,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":55,"org.easymock.tests2.MockedExceptionTest.testMockedException":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":91,"org.easymock.tests.UsageThrowableTest.throwCheckedException":208,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":164,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":255,"org.easymock.samples.PartialClassMockTest.testGetArea":2,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":192,"org.easymock.samples.ExampleTest.voteForRemovals":128,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":206,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":177,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":99,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":132,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":78,"org.easymock.tests2.UsageTest.argumentsOrdered":338,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":139,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":25,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":304,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":47,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":217,"org.easymock.tests2.AnswerTest.answer":301,"org.easymock.tests.MockingTest.testNicePartialClassMocking":20,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":184,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":213,"org.easymock.tests2.UsageConstraintsTest.any":242,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":182,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":333,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":320,"org.easymock.tests.LimitationsTest.privateConstructor":32,"org.easymock.tests.UsageExpectAndThrowTest.longType":148,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":162,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":269,"org.easymock.tests2.CallbackTest.callback":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":106,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":323,"org.easymock.tests2.NameTest.nameForMock":340,"org.easymock.tests.UsageTest.argumentsOrdered":328,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":67,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":235,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":245,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":230,"org.easymock.tests2.MockBuilderTest.testCreateMockString":74,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":135,"org.easymock.tests2.NameTest.nameForStrictMock":341,"org.easymock.tests2.CaptureTest.testCaptureNone":291,"org.easymock.tests2.SerializationTest.test":280,"org.easymock.tests.UsageExpectAndReturnTest.longType":215,"org.easymock.tests2.SerializationTest.testClass":51,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":289,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":30,"org.easymock.tests2.CaptureTest.testCaptureFirst":295,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":252,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":3,"org.easymock.tests2.UsageTest.niceToStrict":261,"org.easymock.tests2.EasyMockSupportTest.testVerify":322,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":66,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":330,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":150,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":254,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":90,"org.easymock.tests2.UsageTest.strictResetToDefault":117,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":158,"org.easymock.tests.GenericTest.testBridgedEquals":39,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":71,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":86,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":229,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":145,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":241,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":219,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":305,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":64,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":80,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":77,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":166,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":250,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":75,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":21,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":59,"org.easymock.tests2.UsageConstraintsTest.testOr":239,"org.easymock.tests2.DelegateToTest.testDelegate":273,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":297,"org.easymock.tests2.UsageConstraintsTest.testNotNull":256,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":276,"org.easymock.tests.MockClassControlTest.testHashCode":13,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":267,"org.easymock.tests2.CaptureTest.testCapture_2617107":285,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":7,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":203,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":211,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":224,"org.easymock.tests2.ThreadingTest.testThreadSafe":296,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":264,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":347,"org.easymock.tests.UsageThrowableTest.noUpperLimit":205,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":54,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":113,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":319,"org.easymock.tests.UsageExpectAndReturnTest.floatType":214,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":312,"org.easymock.tests2.UsageTest.wrongArguments":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":94,"org.easymock.tests2.UsageConstraintsTest.testSame":238,"org.easymock.tests2.UsageTest.resumeIfFailure":265,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":12,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":69,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":57,"org.easymock.tests.UsageOverloadedMethodTest.overloading":176,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":82,"org.easymock.samples.SupportTest.voteForRemovals":122,"org.easymock.tests.UsageRangeTest.combination":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":105,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":209,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":345,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":102,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":257,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":101,"org.easymock.tests.UsageTest.openCallCountByLastCall":141,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":151,"org.easymock.tests2.NameTest.nameForNiceMock":342,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":346,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":191,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":111,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":344,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":275,"org.easymock.tests2.CaptureTest.testPrimitive":286,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":308,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":226,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":159,"org.easymock.samples.BasicClassMockTest.testPrintContent":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":178,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":84,"org.easymock.tests.UsageExpectAndThrowTest.floatType":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":107,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":76,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":199,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":227,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":268,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":83,"org.easymock.tests2.UsageStrictMockTest.differentMethods":278,"org.easymock.tests.UsageTest.exactCallCountByLastCall":143,"org.easymock.tests2.AnswerTest.stubAnswer":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":103,"org.easymock.tests.MockingTest.testClassMocking":17,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":313,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":38,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":317,"org.easymock.tests2.CaptureTest.testCaptureLast":290,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":73,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":146,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":197,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":96,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":307,"org.easymock.tests.UsageStrictMockTest.range":186,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":104,"org.easymock.tests.MockingTest.testPartialClassMocking":19,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":228,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":337,"org.easymock.tests2.UsageConstraintsTest.constraints":234,"org.easymock.samples.ExampleTest.addDocument":127,"org.easymock.tests2.UsageConstraintsTest.lessThan":258,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":327,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":130,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":44,"org.easymock.tests.UsageVarargTest.varargLongAccepted":171,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":348,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":85,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":87,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":40,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":29,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":331,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":112,"org.easymock.tests2.UsageStrictMockTest.range":277,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":58,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":63,"org.easymock.tests.UsageTest.moreThanOneArgument":140,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":15,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":179,"org.easymock.tests2.UsageTest.openCallCountByLastCall":263,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":62,"org.easymock.tests.UsageStrictMockTest.differentMethods":187,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":24,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":315,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":9,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":233,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":65,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":41,"org.easymock.tests.DefaultClassInstantiatorTest.object":23,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":149,"org.easymock.tests.UsageVarargTest.differentLength":329,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":212,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":144,"org.easymock.tests2.CaptureTest.testCapture2_2446744":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":95,"org.easymock.tests.GenericTest.testPackageScope":36}}]

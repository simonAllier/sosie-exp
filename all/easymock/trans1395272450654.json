[{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[76,77,61,78,79,80],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[81,82,83,84,85,86,87,88,89,90],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:287","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:98","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","type":"CtAssignmentImpl"},"failures":[91,92,93,94,95,96,97,98,99,100,101,102,103,46,104,51,105,106,107,108,109,110,111,112,113,114,115,116],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:50","failures":[117,118,119,120,121,122,81,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,82,83,148,149,84,85,150,151,152,153],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Invocation:99","failures":[11,154,155,156,157,158,159,160,161,162,163,164],"status":-1,"binaryOperator":"((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[57,71],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"o":"expected","this":"actual"}},{"position":"org.easymock.Capture:82","failures":[29,31,32,33,34,35,36,38,165,39,40,42],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[118],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:197","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:665","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[11,57,60,69,73,74],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[166,167,168],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[3,7,10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:193","sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1064","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:172","failures":[106,169],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:827","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:315","failures":[170,171,172,173,174,175,176,177,178,179,180,58,59,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,68,203,204,205,69,70,206,74],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[172,173,174,175,176,207,58,68,203,204,205,69,70,208,209,74,210],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:44","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Void.java.lang.Class<java.lang.Void>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[211,212,213,214,185,189,190,192,195,215,216,217,218,219,220,221,222,223],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[76,77,61,78,79,80],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:436","sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[224,225,226,227,228],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[76,77,61,78,79,80],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[229,230],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[224,228],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[231,232,233],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[18,234],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[23,30,31,34,35,36,37,42,235,236,154,237,155,238,239,44,211,212,240,241,242,243,244,156,226,52,245,58,246,247,248,249,250,251,61,252,213,214,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,71,269,160,161,270,162,163,271,272,273,164,274,275],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:772","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[9],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:183","failures":[23,30,31,34,35,36,37,42,235,236,154,237,155,238,239,44,211,212,240,242,276,156,226,52,245,58,277,246,247,248,249,250,251,252,213,214,253,259,260,261,262,263,264,265,266,267,268,71,269,160,161,270,162,163,271,272,273,164,274,275],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[278,279,120,280,281,121,81,235,282,283,284,285,286,103,45,46,287,288,289,126,129,139,145,82,175,51,290,291,292,156,105,106,107,293,294,295,296,297,298,299,225,226,227,300,169,301,302,303,304,305,259,306,159,152,152,153,153,274,275],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:41","sourceCode":"new java.util.Properties()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[307],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"lock":"lock"}},{"transplant":{"position":"org.easymock.internal.RecordState:59","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"failures":[308],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[52,309],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[76,77,61,78,79,80],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,310,311,312,313,314,315,29,30,31,32,33,34,35,36,37,38,39,40,41,42,278,279,120,280,316,281,121,317,229,230,318,319,320,91,92,93,94,81,321,95,322,323,324,96,236,97,98,325,99,100,154,237,155,326,327,328,43,44,211,212,240,170,329,330,241,101,242,331,171,102,243,244,332,333,282,283,334,284,285,286,103,45,46,287,288,289,335,104,336,276,172,47,48,126,129,139,145,82,337,338,339,49,340,173,174,175,176,51,291,292,156,105,106,107,293,294,296,341,342,343,225,227,52,53,344,177,345,245,178,346,347,348,179,180,349,350,351,352,353,54,55,300,354,355,169,356,357,358,359,360,56,57,58,59,60,108,109,110,111,112,361,362,363,301,302,303,304,364,277,365,61,62,252,213,214,253,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,305,201,366,78,254,367,202,255,256,368,63,64,65,66,67,68,203,204,205,69,70,157,369,370,371,372,373,374,206,375,376,377,378,379,380,113,114,115,116,257,258,259,71,72,208,209,381,382,383,73,74,75,384,385,386,215,387,388,389,216,217,390,218,391,392,219,393,394,395,396,397,398,220,399,400,221,222,401,402,403,159,152,152,153,153,269,404,160,161,162,163,164],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":3,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":201,"org.easymock.tests2.UsageTest.argumentsOrdered":244,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":237,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":322,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":242,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":272,"org.easymock.tests2.DelegateToTest.testReturnException":310,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":203,"org.easymock.tests.MockingTest.testPartialClassMocking":302,"org.easymock.tests.MockClassControlTest.testToString":381,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":307,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":398,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":133,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":181,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":129,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":327,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":86,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":9,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":56,"org.easymock.tests2.UsageTest.wrongArguments":241,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":115,"org.easymock.samples.ExampleTest.answerVsDelegate":404,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":169,"org.easymock.tests2.UsageConstraintsTest.testNull":5,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":284,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":154,"org.easymock.tests2.CaptureTest.testPrimitive":32,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":60,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":200,"org.easymock.tests.UsageTest.moreThanOneArgument":366,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":334,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":351,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":220,"org.easymock.tests.UsageTest.argumentsOrdered":256,"org.easymock.tests.UsageVarargTest.varargIntAccepted":262,"org.easymock.tests.InvocationTest.testEquals":158,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":63,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":51,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":233,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":105,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":67,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":104,"org.easymock.tests2.AnswerTest.answer":317,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":10,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":94,"org.easymock.tests2.CaptureTest.testAnd":29,"org.easymock.tests2.UsageTest.strictResetToDefault":329,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":149,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":46,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":350,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":97,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":370,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":222,"org.easymock.tests2.DelegateToTest.testDelegate":314,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":196,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":69,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":112,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":257,"org.easymock.tests2.CaptureTest.testCapture1_2446744":33,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":194,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":92,"org.easymock.tests.UsageThrowableTest.throwError":345,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":355,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":353,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":147,"org.easymock.samples.PartialClassMockTest.testGetArea":159,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":64,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":379,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":134,"org.easymock.tests2.UsageTest.niceToStrict":101,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":360,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":156,"org.easymock.tests2.MockBuilderTest.testCreateMock":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":142,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":190,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":76,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":98,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":343,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":113,"org.easymock.tests.UsageOverloadedMethodTest.overloading":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":138,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":15,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":206,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":53,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":218,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":167,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":14,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":38,"org.easymock.tests2.EasyMockSupportClassTest.testAll":126,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":226,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":198,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":297,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":110,"org.easymock.tests2.CaptureTest.testCaptureAll":30,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":93,"org.easymock.tests.MockNameTest.defaultName":403,"org.easymock.tests2.UsageConstraintsTest.testMatches":16,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":352,"org.easymock.samples.ExampleTest.voteForRemovals":162,"org.easymock.tests.UsageVarargTest.allKinds":71,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":361,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":111,"org.easymock.samples.BasicClassMockTest.testPrintContent":275,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":179,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":328,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":70,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":313,"org.easymock.tests2.UsageConstraintsTest.greaterThan":18,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":127,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":369,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":289,"org.easymock.samples.ExampleTest.voteForRemoval":160,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":338,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":356,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":103,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":170,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":259,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":210,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":96,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":68,"org.easymock.tests2.CaptureTest.testCaptureFirst":42,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":28,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":236,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":333,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":377,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":389,"org.easymock.tests2.CaptureTest.testCapture2_2446744":41,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":49,"org.easymock.tests2.UsageTest.moreThanOneArgument":330,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":294,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":268,"org.easymock.tests.GenericTest.testBridgedEquals":228,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":249,"org.easymock.tests.UsageExpectAndReturnTest.longType":386,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":108,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":323,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":199,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":295,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":23,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":364,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":197,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":208,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":349,"org.easymock.tests.UsageCallCountTest.tooManyCalls":250,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":143,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":216,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":186,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":348,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":279,"org.easymock.tests2.UsageConstraintsTest.testContains":13,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":290,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":175,"org.easymock.tests2.UsageConstraintsTest.testFind":4,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":177,"org.easymock.tests.MockTypeTest.fromEasyMockClass":354,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":48,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":365,"org.easymock.tests.UsageExpectAndReturnTest.object":390,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":45,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":100,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":87,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":264,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":119,"org.easymock.tests.UsageTest.exactCallCountByLastCall":368,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":73,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":399,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":83,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":394,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":260,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":374,"org.easymock.tests2.EasyMockSupportTest.testVerify":238,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":136,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":400,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":342,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":372,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":91,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":50,"org.easymock.tests.UsageVarargTest.varargCharAccepted":263,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":239,"org.easymock.tests2.UsageTest.openCallCountByLastCall":331,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":155,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":341,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":358,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":137,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":346,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":287,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":383,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":187,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":395,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":145,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":382,"org.easymock.tests2.UsageTest.resumeIfFailure":332,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":300,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":205,"org.easymock.tests2.StubTest.stubWithReturnValue":172,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":84,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":24,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":217,"org.easymock.tests2.SerializationTest.testAllMockedMethod":235,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":401,"org.easymock.samples.SupportTest.voteForRemovals":164,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":77,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":224,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":193,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":402,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":229,"org.easymock.tests.UsageExpectAndThrowTest.object":191,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":21,"org.easymock.tests2.DelegateToTest.testWrongClass":312,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":54,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":55,"org.easymock.samples.ConstructorCalledMockTest.testTax":152,"org.easymock.tests.UsageStrictMockTest.range":213,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":99,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":278,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":192,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":123,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":207,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":255,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":114,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":79,"org.easymock.tests2.CaptureTest.testCaptureNone":37,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":380,"org.easymock.tests.UsageUnorderedTest.message":52,"org.easymock.tests.UsageVerifyTest.twoReturns":363,"org.easymock.tests.UsageVarargTest.varargByteAccepted":267,"org.easymock.tests2.ThreadingTest.testThreadSafe":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":140,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":248,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":274,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":359,"org.easymock.tests2.CaptureTest.testCapture_2617107":31,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":59,"org.easymock.tests2.UsageConstraintsTest.any":11,"org.easymock.tests2.StubTest.stub":276,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":209,"org.easymock.tests.UsageExpectAndThrowTest.longType":184,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":204,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":166,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":44,"org.easymock.tests2.SerializationTest.testClass":81,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":95,"org.easymock.tests.LimitationsTest.mockNativeMethod":305,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":397,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":227,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":299,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":240,"org.easymock.tests2.MockedExceptionTest.testMockedException":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":128,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":202,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":185,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":304,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":282,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":107,"org.easymock.tests.MockingTest.testNicePartialClassMocking":303,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":286,"org.easymock.tests2.CaptureTest.testCaptureLast":36,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":231,"org.easymock.tests2.CompareToTest.testCompareEqual":308,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":258,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":121,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":8,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":22,"org.easymock.tests.MockingTest.testTwoMocks":301,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":122,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":75,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":189,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":243,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":26,"org.easymock.tests.UsageStrictMockTest.differentMethods":214,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":339,"org.easymock.tests2.MockBuilderTest.testCreateMockString":296,"org.easymock.tests.UsageExpectAndThrowTest.floatType":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":130,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":125,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":318,"org.easymock.tests.UsageVerifyTest.twoThrows":362,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":139,"org.easymock.samples.ExampleTest.voteAgainstRemoval":161,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":378,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":288,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":118,"org.easymock.tests2.UsageConstraintsTest.testNotNull":25,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":180,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":173,"org.easymock.tests2.UsageTest.defaultResetToNice":102,"org.easymock.samples.ExampleTest.voteAgainstRemovals":269,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":393,"org.easymock.tests2.CallbackTest.callback":315,"org.easymock.tests.UsageTest.openCallCountByLastCall":367,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":58,"org.easymock.tests.UsageCallCountTest.tooFewCalls":246,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":280,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":116,"org.easymock.tests.UsageThrowableTest.throwCheckedException":347,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":80,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":74,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":281,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":120,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":336,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":316,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":320,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":232,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":340,"org.easymock.tests2.DependencyTest.testInterfaceMocking":326,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":88,"org.easymock.samples.ExampleTest.addDocument":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":146,"org.easymock.tests2.DelegateToTest.testStubDelegate":311,"org.easymock.tests2.AnswerTest.stubAnswer":319,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":62,"org.easymock.tests.UsageVarargTest.varargLongAccepted":266,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":253,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":396,"org.easymock.tests.UsageExpectAndReturnTest.floatType":385,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":82,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":153,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":19,"org.easymock.tests.UsageThrowableTest.noUpperLimit":245,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":375,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":34,"org.easymock.tests2.SerializationTest.test":321,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":168,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":384,"org.easymock.tests2.UsageConstraintsTest.testSame":6,"org.easymock.samples.SupportTest.addDocument":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":131,"org.easymock.tests.GenericTest.testPackageScope":225,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":221,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":391,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":151,"org.easymock.tests2.UsageStrictMockTest.differentMethods":212,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":215,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":195,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":371,"org.easymock.tests2.MockedExceptionTest.testRealException":176,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":357,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":43,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":57,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":47,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":285,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":20,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":309,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":291,"org.easymock.tests2.UsageStrictMockTest.range":211,"org.easymock.tests2.UsageConstraintsTest.lessThan":27,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":223,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":135,"org.easymock.tests2.CaptureTest.testCaptureRightOne":39,"org.easymock.tests2.UsageConstraintsTest.testOr":7,"org.easymock.tests.UsageRangeTest.combination":157,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":283,"org.easymock.tests.UsageTest.wrongArguments":254,"org.easymock.tests2.MockBuilderTest.testWithConstructor":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":132,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":306,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":387,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":392,"org.easymock.tests.UsageVarargTest.varargShortAccepted":265,"org.easymock.tests2.UsageConstraintsTest.cmpTo":12,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":230,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":171,"org.easymock.tests2.CaptureTest.testCaptureFromStub":40,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":292,"org.easymock.tests.UsageTest.unexpectedCallWithArray":78,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":61,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":247,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":150,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":219,"org.easymock.tests2.CaptureTest.testCapture":165,"org.easymock.tests2.UsageConstraintsTest.constraints":2,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":252,"org.easymock.samples.ExampleTest.addAndChangeDocument":163,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":271,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":251,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":109,"org.easymock.tests2.CompareToTest.testGreateThan":234,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":35,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":65,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":298,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":388,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":66,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":376,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":261,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":325}}]

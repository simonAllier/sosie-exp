[{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","position":"org.easymock.internal.ArgumentToString:89","type":"CtForImpl"},"status":-2},{"failures":[0],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"status":-1},{"failures":[1],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1248","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","position":"org.easymock.internal.RecordState:252","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:80","type":"CtIfImpl"},"status":-2},{"failures":[2,3,4,5,6],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.Injector:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String)","position":"org.easymock.internal.MockBuilder:98","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:211","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocation","position":"org.easymock.internal.ExpectedInvocationAndResult:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","position":"org.easymock.internal.ClassProxyFactory:176","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl"},"status":0},{"failures":[],"binaryOperator":"((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\")","name":"math","position":"org.easymock.internal.matchers.Compare:47","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","position":"org.easymock.internal.DefaultClassInstantiator:196","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:93","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","position":"org.easymock.EasyMock:1915","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","position":"org.easymock.internal.MockInvocationHandler:36","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"status":-2},{"failures":[7],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:127","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.injectByName(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan.getQualifiedInjections())","position":"org.easymock.internal.Injector:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isVarArgs()) {\n    int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1));\n} ","position":"org.easymock.internal.Invocation:136","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)) {\n    throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\");\n} ","position":"org.easymock.internal.MocksControl:105","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.MocksControl.ONCE":"org.easymock.internal.MocksControl.ONCE","this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(this.org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Any:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:221","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"methodArgs":"args"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[][((java.lang.Object[].int) - 1)]) == null) {\n    return java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:56","type":"CtIfImpl"},"status":-2},{"failures":[8],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","position":"org.easymock.internal.matchers.EqualsWithDelta:40","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"name":"qualifier"},"name":"add","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","position":"org.easymock.internal.InjectionPlan:60","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:81","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","position":"org.easymock.internal.ReflectionUtils:108","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.Result:83","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MockInvocationHandler:43","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>))","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:121","type":"CtAssignmentImpl"},"status":-2},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"variableMapping":{"returnedType":"paramType","returnValue":"arg"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","position":"org.easymock.internal.RecordState:256","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:59","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1121","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType())","position":"org.easymock.internal.BridgeMethodResolver:329","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:226","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1039","type":"CtReturnImpl"},"status":-2},{"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,7,45,46,47,48,49,50,1,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,8,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,2,140,3,4,141,142,143,144,145,24,146,147,148,25,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,172,173,173,6,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","position":"org.easymock.internal.ObjectMethodsFilter:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","position":"org.easymock.internal.MockInvocationHandler:36","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","position":"org.easymock.internal.ClassProxyFactory:226","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short.valueOf(((short)(0))))","position":"org.easymock.internal.RecordState:47","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","position":"org.easymock.internal.MethodSerializationWrapper:36","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new (\">\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int > 0;\n    }\n}","position":"org.easymock.LogicalOperator:48","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:60","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1708","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MocksControl:225","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T> com.google.dexmaker.stock.ProxyBuilder<T> = com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.forClass(java.lang.Class<T>).handler(org.easymock.internal.AndroidClassProxyFactory.MockHandler)","position":"org.easymock.internal.AndroidClassProxyFactory:40","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:906","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock"},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","position":"org.easymock.internal.MockBuilder:97","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.MockType","position":"org.easymock.internal.MocksControl:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.easymock.internal.Result:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:572","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:184","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:75","type":"CtIfImpl"},"status":-2},{"failures":[50,64,74,75,76,77,78,79,81,328,90,329,98,100,102,103,105,106,124,330,130,135,331,138,139,332,3,4,141,142,143,145,24,148,25,149,150,151,152,153,155,156,157,158,162,163,164,165,178,179,180,183,184,185,333,334,335,336,337,338,213,216,217,218,339,262,263,264,265,266,267,268,340,341,342,276,277,278,279,343,344,309,310,311,312,313,314,315,318,319,320,321,345],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:89","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"genericType":"result"},"name":"add","transplant":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object","position":"org.easymock.internal.BridgeMethodResolver:223","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","position":"org.easymock.internal.DefaultClassInstantiator:63","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1333","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:417","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Results:57","type":"CtReturnImpl"},"status":-2},{"failures":[33,34,35,36,45,80,81,83,84,85,86,87,328,88,89,90,329,95,138,139,332,2,140,3,4,141,142,143,144,145,24,146,148,25,346,347,6,333,336,211,235,236,237,238,260,348,340,341,342,349,350,351,325,326,352],"variableMapping":{"value":"obj"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:97","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","position":"org.easymock.internal.InjectionTarget:59","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:97","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","position":"org.easymock.internal.ClassProxyFactory:204","type":"CtTryImpl"},"status":-2},{"failures":[77,78,143,156,162,163,218,263,266,267,277,278,311,314,315,318,319],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\")","position":"org.easymock.internal.MocksBehavior:138","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","position":"org.easymock.internal.MocksBehavior:120","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()))","position":"org.easymock.internal.Injector:233","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","position":"org.easymock.EasyMock:1847","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:315","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:43","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:135","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.ExpectedInvocation:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:301","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.AndroidSupport.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.easymock.internal.ErrorMessage:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:44","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","position":"org.easymock.internal.matchers.CompareTo:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"actual"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","position":"org.easymock.EasyMock:2124","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.UnorderedBehavior:67","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (org.easymock.internal.ErrorMessage.isMatching()) {\n    int++;\n} ","position":"org.easymock.internal.MocksBehavior:131","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int)))","name":"removeConditional","position":"org.easymock.internal.Injector:224","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","position":"org.easymock.EasyMock:1951","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"matches":"position"},"name":"replace","transplant":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)++","position":"org.easymock.internal.MocksBehavior:94","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Constructor<?>","position":"org.easymock.ConstructorArgs:101","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:203","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.concurrent.locks.ReentrantLock()","position":"org.easymock.internal.ReplayState:32","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","position":"org.easymock.EasyMock:759","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"number":"number"},"name":"add","transplant":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"obj":"obj","this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectByType(java.lang.Object, java.util.List<java.lang.reflect.Field>, org.easymock.internal.InjectionPlan.getUnqualifiedInjections())","position":"org.easymock.internal.Injector:153","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.Injector:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:136","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.ReflectionUtils:157","type":"CtAssignmentImpl"},"status":-2},{"failures":[353,310],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:216","type":"CtThrowImpl"},"status":-1},{"failures":[93,94,95,96,175,176,177,249,250,251,252,253,254,257,275],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl"},"status":-1},{"failures":[354,355,356,357,358,33,359,360,34,361,362,363,364,365,366,367,368,369,35,370,371,372,373,374,36,375,376,37,9,45,47,80,81,83,84,85,86,87,377,378,328,88,89,90,379,329,93,94,95,138,139,332,380,2,140,3,4,381,141,142,143,144,145,24,146,148,25,346,347,172,172,173,173,6,333,336,211,382,383,235,236,237,238,384,385,386,260,387,348,388,340,341,342,349,350,351,389,390,391,392,393,394,395,396,325,397,326,352],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","position":"org.easymock.internal.ClassProxyFactory:171","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"((java.lang.StackTraceElement[].int) > 2)","name":"conditionalBoundary","position":"org.easymock.internal.ClassProxyFactory:157","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:73","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","position":"org.easymock.internal.DefaultClassInstantiator:63","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:786","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.ConstructorArgs:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:221","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>()","position":"org.easymock.internal.BridgeMethodResolver:380","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"status":-2},{"failures":[66],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1432","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1277","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n    if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n        java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:382","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:286","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"status":0},{"failures":[],"binaryOperator":"((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"math","position":"org.easymock.internal.matchers.Find:41","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","position":"org.easymock.internal.ClassProxyFactory:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:353","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:355","type":"CtThrowImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":227,"org.easymock.tests2.MockedExceptionTest.testRealException":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":361,"org.easymock.tests.LimitationsTest.mockFinalMethod":387,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":48,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":37,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":341,"org.easymock.tests.UsageCallCountTest.tooManyCalls":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":371,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":26,"org.easymock.tests2.StubTest.stubWithReturnValue":39,"org.easymock.tests.UsageVarargTest.allKinds":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":283,"org.easymock.tests2.CaptureTest.testCaptureAll":111,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":239,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":13,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":14,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":64,"org.easymock.tests2.CaptureTest.testAnd":110,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":297,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":214,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":333,"org.easymock.tests.MockClassControlTest.testToString":340,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":144,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":102,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":204,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":305,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":135,"org.easymock.tests.UsageThrowableTest.throwError":224,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":259,"org.easymock.tests2.StubTest.stub":38,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":285,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":353,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":247,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":255,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":210,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":329,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":379,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":11,"org.easymock.tests.UsageExpectAndThrowTest.object":299,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":127,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":373,"org.easymock.tests2.UsageTest.moreThanOneArgument":155,"org.easymock.tests.MockClassControlTest.testEquals":350,"org.easymock.tests.UsageTest.wrongArguments":315,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":189,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":300,"org.easymock.tests2.UsageTest.defaultResetToNice":161,"org.easymock.tests.MockingTest.testNiceClassMocking":384,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":95,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":128,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":4,"org.easymock.tests2.MockBuilderTest.testCreateMock":141,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":129,"org.easymock.samples.ExampleTest.voteAgainstRemovals":166,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":74,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":213,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":323,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":232,"org.easymock.tests2.CaptureTest.testCapture1_2446744":114,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":44,"org.easymock.samples.ExampleTest.voteForRemoval":168,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":182,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":217,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":243,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":21,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":268,"org.easymock.tests2.CaptureTest.testCaptureRightOne":120,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":197,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":29,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":85,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":322,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":287,"org.easymock.tests2.UsageConstraintsTest.cmpTo":59,"org.easymock.tests.MockTypeTest.fromEasyMockClass":334,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":393,"org.easymock.tests2.MockedExceptionTest.testMockedException":94,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":70,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":271,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":308,"org.easymock.samples.PartialClassMockTest.testGetArea":6,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":276,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":234,"org.easymock.samples.ConstructorCalledMockTest.testTax":172,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":28,"org.easymock.tests2.UsageTest.argumentsOrdered":163,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":32,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":391,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":261,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":196,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":186,"org.easymock.tests2.AnswerTest.answer":27,"org.easymock.tests.MockingTest.testNicePartialClassMocking":237,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":264,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":248,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":273,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":286,"org.easymock.tests.UsageExpectAndThrowTest.longType":292,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":338,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":35,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":104,"org.easymock.tests.UsageTest.argumentsOrdered":319,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":1,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":3,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":209,"org.easymock.tests2.MockBuilderTest.testCreateMockString":143,"org.easymock.tests2.NameTest.nameForStrictMock":150,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":257,"org.easymock.tests2.CaptureTest.testCaptureNone":118,"org.easymock.tests2.SerializationTest.testClass":45,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":344,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":346,"org.easymock.tests2.EasyMockSupportTest.testVerify":109,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":279,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":140,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":294,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":69,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":153,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":142,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":208,"org.easymock.tests.GenericTest.testBridgedEquals":352,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":56,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":147,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":80,"org.easymock.tests2.UsageConstraintsTest.testOr":54,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":126,"org.easymock.tests.MockClassControlTest.testHashCode":349,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":203,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":231,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":240,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":336,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":270,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":145,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":375,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":359,"org.easymock.tests2.UsageConstraintsTest.testSame":53,"org.easymock.tests2.UsageTest.resumeIfFailure":164,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":176,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":148,"org.easymock.tests.UsageOverloadedMethodTest.overloading":233,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":337,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":377,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":366,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":221,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":16,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":365,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":397,"org.easymock.tests.UsageTest.openCallCountByLastCall":316,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":295,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":220,"org.easymock.tests2.NameTest.nameForNiceMock":151,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":331,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":324,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":269,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":82,"org.easymock.tests2.CaptureTest.testPrimitive":113,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":175,"org.easymock.samples.BasicClassMockTest.testPrintContent":347,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":244,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":328,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":91,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":184,"org.easymock.tests2.UsageStrictMockTest.differentMethods":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":367,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":99,"org.easymock.tests.MockingTest.testClassMocking":383,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":326,"org.easymock.tests2.CaptureTest.testCaptureLast":117,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":5,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":183,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":290,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":181,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":137,"org.easymock.tests.UsageStrictMockTest.range":266,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":317,"org.easymock.tests.UsageTest.unexpectedCallWithArray":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":368,"org.easymock.tests2.UsageConstraintsTest.lessThan":73,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":218,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":318,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":212,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":284,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":15,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":40,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":354,"org.easymock.tests2.MockBuilderTest.testWithConstructor":19,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":395,"org.easymock.tests2.UsageStrictMockTest.range":77,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":25,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":188,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":309,"org.easymock.tests.UsageTest.moreThanOneArgument":313,"org.easymock.tests2.UsageTest.openCallCountByLastCall":159,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":139,"org.easymock.tests.UsageStrictMockTest.differentMethods":267,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":390,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":355,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":293,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":241,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":360,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":87,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":265,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":304,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":274,"org.easymock.tests2.UsageConstraintsTest.testContains":60,"org.easymock.tests2.UsageConstraintsTest.testFind":51,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":22,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":115,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":392,"org.easymock.samples.ExampleTest.addAndChangeDocument":171,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":138,"org.easymock.tests2.CaptureTest.testCaptureFromStub":121,"org.easymock.tests.UsageVerifyTest.twoThrows":277,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":256,"org.easymock.tests2.DelegateToTest.testReturnException":41,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":158,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":108,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":396,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":177,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":394,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":119,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":301,"org.easymock.tests2.UsageConstraintsTest.testMatches":63,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":187,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":223,"org.easymock.tests2.UsageConstraintsTest.testNull":52,"org.easymock.tests.LimitationsTest.abstractClass":385,"org.easymock.tests2.EasyMockSupportClassTest.testAll":33,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":10,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":211,"org.easymock.tests2.UsageConstraintsTest.greaterThan":65,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":66,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":105,"org.easymock.tests.UsageExpectAndReturnTest.object":201,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":79,"org.easymock.tests2.DelegateToTest.testWrongClass":43,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":17,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":296,"org.easymock.samples.ExampleTest.voteAgainstRemoval":169,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":230,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":288,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":343,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":358,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":348,"org.easymock.tests2.SerializationTest.testAllMockedMethod":47,"org.easymock.tests2.NameTest.nameForMocksControl":152,"org.easymock.tests.MockingTest.testStrictClassMocking":382,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":258,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":364,"org.easymock.tests2.DelegateToTest.testStubDelegate":42,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":242,"org.easymock.tests.LimitationsTest.mockNativeMethod":260,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":216,"org.easymock.tests.UsageUnorderedTest.message":311,"org.easymock.samples.ExampleTest.answerVsDelegate":167,"org.easymock.tests.UsageCallCountTest.tooFewCalls":180,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":200,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":30,"org.easymock.tests.UsageVerifyTest.twoReturns":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":372,"org.easymock.tests2.DependencyTest.testInterfaceMocking":136,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":195,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":298,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":97,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":250,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":100,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":134,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":55,"org.easymock.tests.MockingTest.testTwoMocks":235,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":179,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":281,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":93,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":362,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":202,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":24,"org.easymock.tests.UsageThrowableTest.throwCheckedException":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":357,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":335,"org.easymock.samples.ExampleTest.voteForRemovals":170,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":226,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":62,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":363,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":84,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":312,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":18,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":192,"org.easymock.tests2.UsageConstraintsTest.any":58,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":199,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":107,"org.easymock.tests.LimitationsTest.privateConstructor":386,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":92,"org.easymock.tests2.CallbackTest.callback":130,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":23,"org.easymock.tests2.NameTest.nameForMock":149,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":61,"org.easymock.tests.MockNameTest.defaultName":339,"org.easymock.tests2.SerializationTest.test":46,"org.easymock.tests.UsageExpectAndReturnTest.longType":194,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":116,"org.easymock.tests2.CaptureTest.testCaptureFirst":123,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":67,"org.easymock.tests2.UsageTest.niceToStrict":157,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":249,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":190,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":280,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":262,"org.easymock.tests2.UsageTest.strictResetToDefault":154,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":356,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":89,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":275,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":289,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":198,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":131,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":86,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":380,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":8,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":83,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":254,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":238,"org.easymock.tests2.DelegateToTest.testDelegate":7,"org.easymock.tests2.UsageConstraintsTest.testNotNull":71,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":20,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":76,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":124,"org.easymock.tests2.CaptureTest.testCapture_2617107":112,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":0,"org.easymock.tests2.ThreadingTest.testThreadSafe":125,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":160,"org.easymock.tests.UsageThrowableTest.noUpperLimit":225,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":106,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":98,"org.easymock.tests.UsageExpectAndReturnTest.floatType":193,"org.easymock.tests2.UsageTest.wrongArguments":156,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":57,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":133,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":342,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":381,"org.easymock.samples.SupportTest.voteForRemovals":174,"org.easymock.tests.UsageRangeTest.combination":321,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":369,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":72,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":374,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":75,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":205,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":303,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":282,"org.easymock.tests.UsageExpectAndThrowTest.floatType":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":370,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":81,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":206,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":378,"org.easymock.tests.UsageTest.exactCallCountByLastCall":320,"org.easymock.tests2.AnswerTest.stubAnswer":31,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":103,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":34,"org.easymock.tests.MockingTest.testPartialClassMocking":236,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":207,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":162,"org.easymock.tests2.UsageConstraintsTest.constraints":50,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":132,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":272,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":88,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":90,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":263,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":36,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":219,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":310,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":332,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":245,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":351,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":101,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":49,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":388,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":2,"org.easymock.tests.DefaultClassInstantiatorTest.object":389,"org.easymock.tests.UsageVarargTest.differentLength":345,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":222,"org.easymock.tests2.CaptureTest.testCapture2_2446744":122,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":12,"org.easymock.tests.GenericTest.testPackageScope":325}}]

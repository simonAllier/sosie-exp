[{"position":"org.easymock.internal.Range:40","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,25,29,30,31,36,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,69,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,108,112,114,116,120,123,126,127,128,129,131,132,133,142,145,146,147,149,150,151,157,167,170,180,186,189,190,191,193,194,195,197,198,199,200,201,202,203,204,205,206,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,234,235,236,238,239,241,242,244,249,250,252,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,284,286,287,288,289,291,292,294,295,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,329,330,331,332,333,334,356,357,358,359,376,384,385,386,403,404,405,407,408,409,410,411,412,413,414,415,419,420,421,422,423,424,425,426,427,428,429,430,436,437,438,439,440,441,443,444,454,458,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[488,231],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"method","equalsMethod":"result"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[149,150,151,489],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[366],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"failures":[6,7,8,9,10,11,12,13,17,18,19,20,21,22,23,25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,106,108,109,111,112,113,119,120,122,123,127,128,132,133,136,137,138,139,141,142,145,146,147,148,149,150,151,189,190,191,193,194,195,197,198,199,200,201,202,203,204,205,206,208,209,210,211,212,213,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,234,236,238,239,240,241,242,244,245,246,247,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,338,339,340,341,342,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,384,385,386,388,389,390,394,403,404,405,407,408,409,410,411,412,413,414,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,443,444,450,451,452,453,454,455,458,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[21,85,221],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[490,213,219,231],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[25,40,50,51,52,53,54,55,56,57,58,59,60,61,62,63,148,203,204,205,206,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,236,238,258,259,265,266,267,268,269,270,271,414,419,436,437,438,439,440,454,466,467],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[491],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[416,417,464,465],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,25,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,50,51,52,53,54,55,56,57,58,59,60,61,62,63,69,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,112,113,114,116,119,120,122,123,126,127,128,129,131,132,133,142,145,146,147,149,150,151,157,167,170,180,186,189,190,191,193,194,195,197,198,199,200,201,202,203,204,205,206,208,209,210,211,212,213,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,234,235,236,238,239,241,242,245,249,250,252,256,257,258,259,260,261,262,263,265,266,267,268,269,270,271,286,287,288,289,290,291,292,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,344,345,346,347,356,358,359,384,385,386,403,404,405,407,408,409,410,411,412,413,414,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,443,444,492,492,450,451,452,453,454,455,458,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[2,6,8,9,11,15,17,18,19,20,21,22,25,29,30,31,36,40,42,43,50,51,53,54,57,58,59,60,62,63,69,80,81,82,84,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,108,112,114,116,120,123,126,127,128,129,131,132,133,142,146,149,150,157,167,170,180,186,191,194,198,199,200,201,202,203,204,205,206,208,209,210,211,212,213,215,216,217,218,219,220,221,222,223,224,225,226,228,229,230,231,234,235,244,249,250,252,259,261,262,265,266,269,270,271,326,327,330,331,334,356,357,358,359,369,371,380,381,383,384,385,386,420,422,423,425,426,427,428,429,430,436,437,438,439,440,443,445,448,458,461,462,466,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[40,42,43,46,47,48,49,82,83,89,90,258,259,261,262,327,329,332,333,493,420,421,422],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,377,378,379,380,381,383],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"failures":[218],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[488,219,226,231],"status":-1,"binaryOperator":"int < 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"searchType","type":"searchType"}},{"position":"org.easymock.EasyMock:1507","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[21,85,221,278],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"value"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[395,399],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[398,494,491],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksBehavior:200","failures":[200],"status":-1,"binaryOperator":"(((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[115,495,496,497,498,499,124],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[500],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:190","failures":[18,30,38,42,43,60,84,85,90,94,96,98,99,102,103,104,120,189,206,212,213,215,218,224,225,226,228,256,261,262,333,356,385,419,421,423,424,426,427,428,429,430],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[490,213,219,231],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,19,20,21,22,25,28,30,34,35,36,37,39,40,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,63,69,76,77,78,79,81,82,84,85,88,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,113,114,116,123,126,127,128,129,131,132,133,142,145,146,147,149,150,151,157,167,170,180,186,189,190,191,193,194,197,198,199,202,203,204,205,206,208,209,210,211,212,213,215,216,217,218,219,220,221,222,223,224,225,226,228,229,230,231,234,235,236,238,244,249,250,252,257,259,262,263,264,265,266,269,270,271,284,285,286,287,288,289,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,327,344,345,346,347,349,356,357,358,359,385,386,403,404,405,407,408,410,411,412,413,414,420,421,422,424,425,431,432,433,434,435,436,437,438,439,440,441,443,444,450,451,452,453,454,455,458,466,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,109,111,112,113,114,116,117,118,119,120,122,123,124,126,127,128,129,130,131,132,133,134,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[501,502,503,498,499],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[115,495,496,497,498,499,124],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[107,110,115,500,121,124,128,133,134,504,505,506],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"actual":"expected"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[274,375,382],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[224],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[115,495,496,497,498,499,124],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[488,507,508,490,509],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[149,150,151,489],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":206,"org.easymock.tests2.UsageTest.argumentsOrdered":90,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":326,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":103,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":370,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":85,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":3,"org.easymock.tests2.DelegateToTest.testReturnException":193,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":451,"org.easymock.tests.MockingTest.testPartialClassMocking":249,"org.easymock.tests.MockClassControlTest.testToString":350,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":45,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":448,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":174,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":170,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":306,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":493,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":235,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":495,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":213,"org.easymock.tests2.UsageTest.wrongArguments":83,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":265,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":75,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":346,"org.easymock.samples.ExampleTest.answerVsDelegate":7,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":340,"org.easymock.tests2.UsageConstraintsTest.testNull":209,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":254,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":20,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":102,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":355,"org.easymock.tests2.CaptureTest.testPrimitive":53,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":269,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":325,"org.easymock.tests.UsageTest.moreThanOneArgument":327,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":19,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":433,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":293,"org.easymock.tests.UsageTest.argumentsOrdered":333,"org.easymock.tests.UsageVarargTest.varargIntAccepted":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":375,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":436,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":499,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":106,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":162,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":137,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":362,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":440,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":69,"org.easymock.tests.ReplayStateInvalidUsageTest.times":280,"org.easymock.tests2.DependencyTest.testClassMocking":232,"org.easymock.tests2.AnswerTest.answer":142,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":377,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":79,"org.easymock.tests2.CaptureTest.testAnd":50,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":337,"org.easymock.tests2.UsageTest.strictResetToDefault":81,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":110,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":28,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":432,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":97,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":358,"org.easymock.tests2.DelegateToTest.testDelegate":197,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":297,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":321,"org.easymock.tests.LimitationsTest.mockFinalMethod":459,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":454,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":305,"org.easymock.tests2.DependencyTest.testClassMockingSupport":233,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":298,"org.easymock.tests2.CaptureTest.testCapture1_2446744":54,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":24,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":319,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":77,"org.easymock.tests.UsageThrowableTest.throwError":423,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":274,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":339,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":418,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":163,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":435,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":504,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":188,"org.easymock.samples.PartialClassMockTest.testGetArea":2,"org.easymock.tests.MockingTest.testInterfaceMocking":251,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":275,"org.easymock.tests2.CompareToTest.testLessOrEqual":509,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":437,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":461,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":175,"org.easymock.tests2.UsageTest.niceToStrict":84,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":360,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":112,"org.easymock.tests2.MockBuilderTest.testCreateMock":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":183,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":72,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":315,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":98,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":336,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":417,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":284,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":344,"org.easymock.tests.UsageOverloadedMethodTest.overloading":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":179,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":219,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":242,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":479,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":384,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":494,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":218,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":59,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":406,"org.easymock.tests2.EasyMockSupportClassTest.testAll":167,"org.easymock.tests.MockClassControlTest.testEquals":354,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":444,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":323,"org.easymock.tests2.CaptureTest.testCaptureAll":51,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":78,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":303,"org.easymock.tests.MockNameTest.defaultName":402,"org.easymock.tests2.UsageConstraintsTest.testMatches":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":434,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":272,"org.easymock.samples.ExampleTest.voteForRemovals":11,"org.easymock.tests.UsageVarargTest.allKinds":414,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":420,"org.easymock.samples.BasicClassMockTest.testPrintContent":5,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":304,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":429,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":38,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":455,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":159,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":196,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":400,"org.easymock.tests2.UsageConstraintsTest.greaterThan":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":168,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":357,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":31,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":401,"org.easymock.samples.ExampleTest.voteForRemoval":8,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":32,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":199,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":341,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":138,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":23,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":441,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":80,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":367,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":95,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":425,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":165,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":450,"org.easymock.tests2.CaptureTest.testCaptureFirst":63,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":192,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":366,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":96,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":92,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":245,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":475,"org.easymock.tests2.CaptureTest.testCapture2_2446744":62,"org.easymock.tests2.UsageTest.moreThanOneArgument":82,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":201,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":120,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":378,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":413,"org.easymock.tests.GenericTest.testBridgedEquals":446,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":506,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":291,"org.easymock.tests.UsageExpectAndReturnTest.longType":471,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":93,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":301,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":324,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":227,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":343,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":322,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":464,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":431,"org.easymock.tests.UsageCallCountTest.tooManyCalls":292,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":184,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":476,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":74,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":311,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":428,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":127,"org.easymock.tests.MockingTest.testNiceClassMocking":255,"org.easymock.tests.MockingTest.testClassMocking":247,"org.easymock.tests2.UsageConstraintsTest.testContains":217,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":285,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":36,"org.easymock.tests2.UsageConstraintsTest.testFind":208,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":386,"org.easymock.tests.MockTypeTest.fromEasyMockClass":338,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":238,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":256,"org.easymock.tests.UsageExpectAndReturnTest.object":478,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":25,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":73,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":101,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":496,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":408,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":390,"org.easymock.tests.UsageTest.exactCallCountByLastCall":334,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":466,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":365,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":447,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":294,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":124,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":484,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":403,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":241,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":153,"org.easymock.tests.MockClassControlTest.testHashCode":353,"org.easymock.tests2.EasyMockSupportTest.testVerify":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":177,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":295,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":416,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":239,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":76,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":148,"org.easymock.tests.UsageVarargTest.varargCharAccepted":407,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":393,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":383,"org.easymock.tests2.UsageTest.openCallCountByLastCall":86,"org.easymock.tests.DefaultClassInstantiatorTest.object":394,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":104,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":415,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":178,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":313,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":426,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":67,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":152,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":29,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":352,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":312,"org.easymock.tests.CapturesMatcherTest.test":492,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":485,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":186,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":351,"org.easymock.tests2.UsageTest.resumeIfFailure":91,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":335,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":136,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":453,"org.easymock.tests2.StubTest.stubWithReturnValue":191,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":115,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":477,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":228,"org.easymock.tests2.SerializationTest.testAllMockedMethod":151,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":376,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":502,"org.easymock.samples.SupportTest.voteForRemovals":15,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":442,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":155,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":318,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":489,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":382,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":143,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":449,"org.easymock.tests.UsageExpectAndThrowTest.object":316,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":225,"org.easymock.tests2.DelegateToTest.testWrongClass":195,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":270,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":271,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests.UsageStrictMockTest.range":261,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":140,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":100,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":126,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":317,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":164,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":282,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":332,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":345,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":462,"org.easymock.tests2.CaptureTest.testCaptureNone":58,"org.easymock.tests.UsageUnorderedTest.message":419,"org.easymock.tests.UsageVerifyTest.twoReturns":422,"org.easymock.tests.UsageVarargTest.varargByteAccepted":412,"org.easymock.tests2.ThreadingTest.testThreadSafe":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":181,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":289,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":391,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":4,"org.easymock.tests2.CaptureTest.testCapture_2617107":52,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":300,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":380,"org.easymock.tests2.UsageConstraintsTest.any":215,"org.easymock.tests2.StubTest.stub":190,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":279,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":465,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":452,"org.easymock.tests.UsageExpectAndThrowTest.longType":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":381,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":398,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":278,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":41,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":157,"org.easymock.tests2.SerializationTest.testClass":149,"org.easymock.tests.LimitationsTest.mockNativeMethod":458,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":487,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":445,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":66,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":44,"org.easymock.tests2.NameTest.nameForMocksControl":49,"org.easymock.tests2.MockedExceptionTest.testMockedException":35,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":169,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":331,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":237,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":252,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":310,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":17,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":116,"org.easymock.tests.MockingTest.testNicePartialClassMocking":250,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":22,"org.easymock.tests2.CompareToTest.testCompareEqual":508,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":503,"org.easymock.tests2.CaptureTest.testCaptureLast":57,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":64,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":299,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":133,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":212,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":226,"org.easymock.tests.MockingTest.testTwoMocks":248,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":134,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":468,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":314,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":89,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":230,"org.easymock.samples.ExampleTest.removeNonExistingDocument":12,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":71,"org.easymock.tests.UsageStrictMockTest.differentMethods":262,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":276,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":154,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":396,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":200,"org.easymock.tests2.MockBuilderTest.testCreateMockString":122,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":171,"org.easymock.tests.UsageExpectAndThrowTest.floatType":308,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":166,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":145,"org.easymock.tests.UsageVerifyTest.twoThrows":421,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":125,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":180,"org.easymock.samples.ExampleTest.voteAgainstRemoval":9,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":460,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":371,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":30,"org.easymock.tests.LimitationsTest.privateConstructor":457,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":505,"org.easymock.tests2.UsageConstraintsTest.testNotNull":229,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":430,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":34,"org.easymock.tests2.UsageTest.defaultResetToNice":88,"org.easymock.samples.ExampleTest.voteAgainstRemovals":6,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":372,"org.easymock.tests.UsageVarargTest.differentLength":409,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":65,"org.easymock.tests2.CallbackTest.callback":189,"org.easymock.tests2.UsageConstraintsTest.equals":207,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":26,"org.easymock.tests.UsageTest.openCallCountByLastCall":330,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":203,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":267,"org.easymock.tests.UsageCallCountTest.tooFewCalls":287,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":129,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":347,"org.easymock.tests.UsageThrowableTest.throwCheckedException":427,"org.easymock.tests.MockingTest.testStrictClassMocking":246,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":467,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":132,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":128,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":70,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":281,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":131,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":147,"org.easymock.tests2.CompareToTest.testGreateOrEqual":490,"org.easymock.tests.ObjectMethodsTest.testHashCode":389,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":498,"org.easymock.tests2.NameTest.nameForNiceMock":48,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":202,"org.easymock.tests2.DependencyTest.testInterfaceMocking":234,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":497,"org.easymock.samples.ExampleTest.addDocument":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":187,"org.easymock.tests2.DelegateToTest.testStubDelegate":194,"org.easymock.tests2.AnswerTest.stubAnswer":146,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":259,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":117,"org.easymock.tests.UsageVarargTest.varargLongAccepted":411,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":369,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":486,"org.easymock.tests.UsageExpectAndReturnTest.floatType":470,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":123,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests.UsageThrowableTest.noUpperLimit":424,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":161,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":223,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":243,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":204,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":135,"org.easymock.tests2.SerializationTest.test":150,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":55,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":491,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":395,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":469,"org.easymock.tests2.UsageConstraintsTest.testSame":210,"org.easymock.samples.SupportTest.addDocument":14,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":130,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":172,"org.easymock.tests.GenericTest.testPackageScope":443,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":364,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":160,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":253,"org.easymock.tests2.NameTest.nameForMock":46,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":480,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":121,"org.easymock.tests2.UsageStrictMockTest.differentMethods":43,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":27,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":472,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":320,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":387,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":359,"org.easymock.tests2.MockedExceptionTest.testRealException":37,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":342,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":141,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":374,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":501,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":373,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":266,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":283,"org.easymock.tests2.NameTest.nameForStrictMock":47,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":111,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":236,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":21,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":139,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":397,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":224,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":108,"org.easymock.tests2.UsageStrictMockTest.range":42,"org.easymock.tests2.UsageConstraintsTest.lessThan":231,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":156,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":176,"org.easymock.tests2.CaptureTest.testCaptureRightOne":60,"org.easymock.tests2.UsageConstraintsTest.testOr":211,"org.easymock.tests.UsageRangeTest.combination":356,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":18,"org.easymock.tests.UsageTest.wrongArguments":329,"org.easymock.tests2.MockBuilderTest.testWithConstructor":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":173,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":349,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":473,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":361,"org.easymock.tests.UsageVarargTest.varargShortAccepted":410,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":399,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":290,"org.easymock.tests2.UsageConstraintsTest.cmpTo":216,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":144,"org.easymock.tests2.CompareToTest.testLessThan":488,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":363,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":87,"org.easymock.tests2.CaptureTest.testCaptureFromStub":61,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":273,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":109,"org.easymock.tests.UsageTest.unexpectedCallWithArray":328,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":258,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":288,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":500,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":482,"org.easymock.tests2.UsageConstraintsTest.constraints":205,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":260,"org.easymock.samples.ExampleTest.addAndChangeDocument":13,"org.easymock.tests.UsageStrictMockTest.testVerify":264,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":16,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":257,"org.easymock.tests2.CompareToTest.testGreateThan":507,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":302,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":56,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":438,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":474,"org.easymock.tests.LimitationsTest.abstractClass":456,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":439,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":244,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":404,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":99}}]

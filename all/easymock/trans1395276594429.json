[{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[4],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[6,7,8,9,10,11,12,13,14,15,16],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:105","sourceCode":"if ((java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)) {\n    throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\");\n} ","type":"CtIfImpl"},"failures":[17],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,6,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,5,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,7,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,8,9,10,11,12,13,245,246,247,248,249,250,251,252,253,254,255,256,257,258,2,3,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[277,278,279,280,281],"status":-1,"binaryOperator":"((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[198],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:275","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[6,282,7,8,10,11,13,14,15,16],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.matchers.Equals:37","failures":[18,19,20,21,22,23,24,27,28,31,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,283,284,285,286,287,288,289,290,291,292,72,6,78,79,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,129,130,131,132,133,134,293,294,295,296,297,298,164,165,182,183,184,185,186,299,300,187,7,188,189,190,191,193,301,302,303,304,194,195,196,198,199,200,201,205,206,305,306,307,208,308,210,309,310,219,222,224,225,242,8,11,12,249,250,251,252,16,311,254,255,256,258,1,2,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,264,265,270,271,273,276],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[332],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:41","sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[333],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[334],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"failures":[231],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:196","sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[18,19,20,21,22,24,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,283,284,285,286,287,288,289,290,291,292,61,62,63,64,65,66,67,72,335,336,337,338,339,340,341,81,84,85,88,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,342,343,344,345,346,126,127,129,130,131,132,133,134,137,347,348,349,350,293,294,297,298,351,164,165,175,182,183,184,185,186,299,352,300,187,7,188,189,190,191,193,353,354,301,302,303,304,195,196,198,199,202,205,355,305,356,306,307,208,308,209,211,357,309,358,213,359,310,216,217,218,219,221,222,223,224,225,226,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,244,8,11,12,13,360,361,362,363,245,246,247,248,14,15,249,250,252,16,311,254,255,258,1,2,3,364,312,313,314,315,316,317,318,365,319,320,321,322,366,367,368,369,370,371,372,373,374,323,324,325,328,329,330,331,375,376,377,378,379,380,381,264,265,266,267,382,269,270,271,272,273,276],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:189","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","type":"CtInvocationImpl"},"failures":[383,384,61,385,74,75,335,336,337,386,126,127,387,137,151,174,175,176,177,178,179,180,181,352,353,353,354,354,301,302,355,388,389,390,305,356,306,307,391,392,393,209,210,357,309,358,394,213,214,359,395,310,396,215,397,216,245,246,247,1,3,364,260,371,372,373,374,375,376,377,378,380,381],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[398,399,400,401,402,403,404,364],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[234],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[405],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"message":"methodName"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:38","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[213,216,218,226,229,232,235,238,239,241,244,277,278,279,280,281],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[219],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[406,407],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[],"status":0,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[25,408,409,410,411,412],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[413],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:63","sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:65","sourceCode":"java.util.Properties.load(java.io.InputStream)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[33,167,169],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"position":"org.easymock.internal.MockBuilder:80","failures":[383,384,387,352,355,414,388,389,305,356,306,307,391,392,405,415,393,394,1],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[416,128],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"position":"org.easymock.internal.MockBuilder:89","failures":[417,414,305,395,310],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[29,203,220],"status":-1,"binaryOperator":"(java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":219,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":23,"org.easymock.tests2.UsageTest.argumentsOrdered":204,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":321,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":199,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":300,"org.easymock.tests2.DelegateToTest.testReturnException":254,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":130,"org.easymock.tests.MockingTest.testPartialClassMocking":335,"org.easymock.tests.MockClassControlTest.testToString":176,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":33,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":397,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":41,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":372,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":308,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":399,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":226,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":90,"org.easymock.tests2.UsageTest.wrongArguments":197,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":349,"org.easymock.samples.ExampleTest.answerVsDelegate":7,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":384,"org.easymock.tests2.UsageConstraintsTest.testNull":222,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":357,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":181,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":320,"org.easymock.tests2.CaptureTest.testPrimitive":267,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":94,"org.easymock.tests.UsageTest.moreThanOneArgument":24,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":60,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":211,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":20,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":170,"org.easymock.tests.UsageTest.argumentsOrdered":30,"org.easymock.tests.UsageVarargTest.varargIntAccepted":285,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":182,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":403,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":355,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":356,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":186,"org.easymock.tests.ReplayStateInvalidUsageTest.times":147,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":323,"org.easymock.tests2.DependencyTest.testClassMocking":207,"org.easymock.tests2.AnswerTest.answer":8,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":227,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":363,"org.easymock.tests2.CaptureTest.testAnd":264,"org.easymock.tests2.UsageTest.strictResetToDefault":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":359,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":19,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":316,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":340,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":173,"org.easymock.tests2.DelegateToTest.testDelegate":258,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":56,"org.easymock.tests.LimitationsTest.mockFinalMethod":138,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":133,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":346,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":86,"org.easymock.tests2.CaptureTest.testCapture1_2446744":268,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":212,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":54,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":361,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":141,"org.easymock.tests.UsageThrowableTest.throwError":118,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":22,"org.easymock.samples.PartialClassMockTest.testGetArea":352,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":142,"org.easymock.tests.MockingTest.testInterfaceMocking":76,"org.easymock.tests2.CompareToTest.testLessOrEqual":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":183,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":167,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":163,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":42,"org.easymock.tests2.UsageTest.niceToStrict":198,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":305,"org.easymock.tests2.MockBuilderTest.testCreateMock":391,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":411,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":50,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":317,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":40,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":62,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":347,"org.easymock.tests.UsageOverloadedMethodTest.overloading":84,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":79,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":232,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":109,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":83,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":413,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":231,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":272,"org.easymock.tests.MockClassControlTest.testEquals":180,"org.easymock.tests2.EasyMockSupportClassTest.testAll":371,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":127,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":58,"org.easymock.tests2.CaptureTest.testCaptureAll":265,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":344,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":362,"org.easymock.tests.MockNameTest.defaultName":71,"org.easymock.tests2.UsageConstraintsTest.testMatches":233,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":139,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":21,"org.easymock.samples.ExampleTest.voteForRemovals":191,"org.easymock.tests.UsageVarargTest.allKinds":292,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":95,"org.easymock.samples.BasicClassMockTest.testPrintContent":302,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":345,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":134,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":404,"org.easymock.tests2.UsageConstraintsTest.greaterThan":235,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":339,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":396,"org.easymock.samples.ExampleTest.voteForRemoval":188,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":157,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":215,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":250,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":405,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":394,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":61,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":194,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":314,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":129,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":253,"org.easymock.tests2.CaptureTest.testCaptureFirst":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":332,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":315,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":206,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":82,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":105,"org.easymock.tests2.UsageTest.moreThanOneArgument":196,"org.easymock.tests2.CaptureTest.testCapture2_2446744":275,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":392,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":291,"org.easymock.tests.GenericTest.testBridgedEquals":128,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":69,"org.easymock.tests.UsageExpectAndReturnTest.longType":101,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":312,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":342,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":415,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":59,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":169,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":240,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":57,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":36,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":18,"org.easymock.tests.UsageCallCountTest.tooManyCalls":70,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":64,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":106,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":46,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":123,"org.easymock.tests.MockingTest.testNiceClassMocking":386,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":376,"org.easymock.tests.MockingTest.testClassMocking":74,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":414,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":63,"org.easymock.tests2.UsageConstraintsTest.testContains":230,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":247,"org.easymock.tests2.UsageConstraintsTest.testFind":221,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":85,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":15,"org.easymock.tests.UsageExpectAndReturnTest.object":108,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":213,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":319,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":400,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":287,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":161,"org.easymock.tests.UsageTest.exactCallCountByLastCall":31,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":72,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":171,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":32,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":114,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":283,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":78,"org.easymock.tests.MockClassControlTest.testHashCode":179,"org.easymock.tests2.EasyMockSupportTest.testVerify":366,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":172,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":39,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":6,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":360,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":263,"org.easymock.tests.UsageVarargTest.varargCharAccepted":286,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":324,"org.easymock.tests2.UsageTest.openCallCountByLastCall":200,"org.easymock.tests.DefaultClassInstantiatorTest.object":151,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":322,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":38,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":159,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":48,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":121,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":395,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":178,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":47,"org.easymock.tests.CapturesMatcherTest.test":406,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":115,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":35,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":374,"org.easymock.tests2.UsageTest.resumeIfFailure":205,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":383,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":132,"org.easymock.tests2.StubTest.stubWithReturnValue":331,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":107,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":241,"org.easymock.tests2.SerializationTest.testAllMockedMethod":3,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":4,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":412,"org.easymock.samples.SupportTest.voteForRemovals":304,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":416,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":53,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":0,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":9,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":34,"org.easymock.tests.UsageExpectAndThrowTest.object":51,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":238,"org.easymock.tests2.DelegateToTest.testWrongClass":256,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":164,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":165,"org.easymock.tests.UsageStrictMockTest.range":296,"org.easymock.samples.ConstructorCalledMockTest.testTax":353,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":261,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":365,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":375,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":52,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":306,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":149,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":29,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":348,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":408,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":168,"org.easymock.tests2.CaptureTest.testCaptureNone":271,"org.easymock.tests.UsageUnorderedTest.message":89,"org.easymock.tests.UsageVerifyTest.twoReturns":97,"org.easymock.tests.UsageVarargTest.varargByteAccepted":290,"org.easymock.tests2.ThreadingTest.testThreadSafe":249,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":67,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":162,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":301,"org.easymock.tests2.CaptureTest.testCapture_2617107":266,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":88,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":93,"org.easymock.tests2.UsageConstraintsTest.any":228,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":146,"org.easymock.tests2.StubTest.stub":330,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":37,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":131,"org.easymock.tests.UsageExpectAndThrowTest.longType":44,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":155,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":145,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":326,"org.easymock.tests2.SerializationTest.testClass":1,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":311,"org.easymock.tests.LimitationsTest.mockNativeMethod":137,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":387,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":117,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":329,"org.easymock.tests2.NameTest.nameForMocksControl":370,"org.easymock.tests2.MockedExceptionTest.testMockedException":246,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":28,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":45,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":337,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":209,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":307,"org.easymock.tests.MockingTest.testNicePartialClassMocking":336,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":358,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":398,"org.easymock.tests2.CaptureTest.testCaptureLast":270,"org.easymock.tests2.CompareToTest.testCompareEqual":279,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":87,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":225,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":381,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":239,"org.easymock.tests.MockingTest.testTwoMocks":75,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":17,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":98,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":49,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":203,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":243,"org.easymock.samples.ExampleTest.removeNonExistingDocument":192,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":143,"org.easymock.tests.UsageStrictMockTest.differentMethods":297,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":153,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":251,"org.easymock.tests2.MockBuilderTest.testCreateMockString":393,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":174,"org.easymock.tests.UsageExpectAndThrowTest.floatType":43,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":234,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":11,"org.easymock.tests.UsageVerifyTest.twoThrows":96,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":373,"org.easymock.samples.ExampleTest.voteAgainstRemoval":189,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":166,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":310,"org.easymock.tests.LimitationsTest.privateConstructor":136,"org.easymock.tests2.UsageConstraintsTest.testNotNull":242,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":125,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":245,"org.easymock.tests2.UsageTest.defaultResetToNice":202,"org.easymock.samples.ExampleTest.voteAgainstRemovals":187,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":113,"org.easymock.tests2.CallbackTest.callback":16,"org.easymock.tests2.UsageConstraintsTest.equals":220,"org.easymock.tests.UsageTest.openCallCountByLastCall":27,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":216,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":92,"org.easymock.tests.UsageCallCountTest.tooFewCalls":65,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":378,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":350,"org.easymock.tests.UsageThrowableTest.throwCheckedException":122,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":409,"org.easymock.tests.MockingTest.testStrictClassMocking":385,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":73,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":380,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":377,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":148,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":379,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":13,"org.easymock.tests.ObjectMethodsTest.testHashCode":160,"org.easymock.tests2.CompareToTest.testGreateOrEqual":280,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":402,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":252,"org.easymock.tests2.NameTest.nameForNiceMock":369,"org.easymock.tests2.DependencyTest.testInterfaceMocking":208,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":401,"org.easymock.samples.ExampleTest.addDocument":190,"org.easymock.tests2.DelegateToTest.testStubDelegate":255,"org.easymock.tests2.AnswerTest.stubAnswer":12,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":294,"org.easymock.tests.UsageVarargTest.varargLongAccepted":289,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":298,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":116,"org.easymock.tests.UsageExpectAndReturnTest.floatType":100,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":364,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":354,"org.easymock.tests.UsageThrowableTest.noUpperLimit":119,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":80,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":236,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":217,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":259,"org.easymock.tests2.SerializationTest.test":2,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":382,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":152,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":99,"org.easymock.tests2.UsageConstraintsTest.testSame":223,"org.easymock.samples.SupportTest.addDocument":303,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":144,"org.easymock.tests.GenericTest.testPackageScope":126,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":5,"org.easymock.tests2.NameTest.nameForMock":367,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":110,"org.easymock.tests2.UsageStrictMockTest.differentMethods":328,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":214,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":102,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":55,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":158,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":341,"org.easymock.tests2.MockedExceptionTest.testRealException":248,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":282,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":325,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":150,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":91,"org.easymock.tests2.NameTest.nameForStrictMock":368,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":390,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":14,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":309,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":260,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":154,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":237,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":388,"org.easymock.tests2.UsageStrictMockTest.range":327,"org.easymock.tests2.UsageConstraintsTest.lessThan":244,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":417,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":313,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":334,"org.easymock.tests2.CaptureTest.testCaptureRightOne":273,"org.easymock.tests2.UsageConstraintsTest.testOr":224,"org.easymock.tests.UsageRangeTest.combination":338,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":210,"org.easymock.tests.UsageTest.wrongArguments":26,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":175,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":103,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":111,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":156,"org.easymock.tests.UsageVarargTest.varargShortAccepted":288,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":68,"org.easymock.tests2.UsageConstraintsTest.cmpTo":229,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":10,"org.easymock.tests2.CompareToTest.testLessThan":277,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":201,"org.easymock.tests2.CaptureTest.testCaptureFromStub":274,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":140,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":389,"org.easymock.tests.UsageTest.unexpectedCallWithArray":25,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":410,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":66,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":112,"org.easymock.tests2.CaptureTest.testCapture":407,"org.easymock.tests2.UsageConstraintsTest.constraints":218,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":295,"org.easymock.samples.ExampleTest.addAndChangeDocument":193,"org.easymock.tests2.ConstraintsToStringTest.notToString":333,"org.easymock.tests.UsageStrictMockTest.testVerify":351,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":299,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":293,"org.easymock.tests2.CompareToTest.testGreateThan":278,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":343,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":269,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":184,"org.easymock.tests.LimitationsTest.abstractClass":135,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":104,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":185,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":81,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":284,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":318}}]

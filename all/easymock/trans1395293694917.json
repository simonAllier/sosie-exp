[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[0,1],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:105","sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","type":"CtInvocationImpl"},"failures":[2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"m"}},{"position":"org.easymock.internal.Range:36","failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,3,56,57,4,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,18,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,6,7,158,159,8,9,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,10,11,239,240,241,242,243,244,12,13,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,0,305,306,307,308,309,310,311,312,313,314,315,14,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,15,438,439,440,441,442,16,17,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,1,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[111],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[4,58,244,14,316],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"maximum"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[180,490,491],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[319,492,493,494,495,496,432,473,476],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:158","sourceCode":"return ((java.lang.Class<?>.getSimpleName()) + \".\") + java.lang.String","type":"CtReturnImpl"},"failures":[3,56,4,58,80,81,157,6,7,8,9,11,244,12,13,248,314,14,316,437,15,16,17],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[484],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[3,497,498,499,157,6,7,8,9,500,501,502,503,437,15,16,17],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:45","sourceCode":"final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","type":"CtReturnImpl"},"failures":[3,56,4,58,157,7,8,9,238,11,244,12,13,308,309,310,311,314,14,316,437,15,16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[504,505,506,507,508],"status":-1,"binaryOperator":"(((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:201","failures":[46,51,114,257,295,301,302,0,344,354,360,432,464,466,467,470,472,474,478,1],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[288],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[223],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"threadSafe"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[229,403,404],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"failures":[509],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:759","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1531","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[195,276,282,283,288,366,369,371,372,384,389],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[319,492,493,494,495,496,473],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[140,141,142,12,13],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[510,432,433,434],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[21,46,51,112,113,114,126,163,164,165,167,245,257,258,259,260,260,261,261,289,290,292,293,294,295,297,300,301,302,303,318,511,512,513,341,344,354,360,432,434,455,456,457,458,461,462,464,514,466,467,470,471,472,474,477,478,515,1,482],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,53,54,55,3,56,57,4,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,18,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,6,7,158,159,8,9,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,10,11,239,240,241,242,243,244,12,13,245,246,247,249,250,251,252,253,254,255,256,257,258,259,260,260,261,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,297,298,299,300,301,302,303,304,305,306,307,312,313,314,315,14,316,317,318,319,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,341,343,344,346,347,350,351,352,353,354,356,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,423,424,426,428,429,430,431,432,433,434,435,436,437,15,438,439,440,441,442,16,17,443,444,445,446,447,448,452,453,454,457,458,460,461,466,469,470,471,472,476,477,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[3,195,378],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"method","equalsMethod":"result"}},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[389],"status":-1,"binaryOperator":"java.lang.Object != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:209","sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[516,517,518],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:54","failures":[367],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,53,54,55,3,56,57,4,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,18,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,6,7,158,159,8,9,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,10,11,239,240,241,242,243,244,12,13,245,246,247,249,250,251,252,253,254,255,256,257,258,259,260,260,261,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,297,298,299,300,301,302,303,304,305,306,307,312,313,314,315,14,316,317,318,319,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,341,343,344,346,347,350,351,352,353,354,356,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,423,424,426,428,429,430,431,432,433,434,435,436,437,15,438,439,440,441,442,16,17,443,444,445,446,447,448,452,453,454,457,458,460,461,466,469,470,471,472,476,477,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[19,20,21,22,46,51,111,112,113,114,18,125,126,127,128,129,130,131,132,161,162,163,164,165,167,170,176,177,178,179,180,181,183,245,257,258,259,260,260,261,261,289,290,292,293,294,295,297,298,299,300,301,302,303,304,0,318,319,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,398,399,432,434,448,449,450,452,455,456,457,458,461,462,464,466,467,469,470,471,472,474,476,477,478,1,480,481,482],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"transplant":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[3,56,497,498,125,6,7,158,159,8,9,160,163,500,502,432],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":366,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":156,"org.easymock.tests2.UsageTest.argumentsOrdered":17,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":429,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":206,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":439,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":263,"org.easymock.tests2.DelegateToTest.testReturnException":393,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":148,"org.easymock.tests.MockingTest.testPartialClassMocking":164,"org.easymock.tests.MockClassControlTest.testToString":127,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":307,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":24,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":348,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":88,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":344,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":401,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":492,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":373,"org.easymock.tests2.UsageTest.wrongArguments":15,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":83,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":337,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":173,"org.easymock.samples.ExampleTest.answerVsDelegate":267,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":51,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":169,"org.easymock.tests2.UsageConstraintsTest.testNull":369,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":292,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":428,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":132,"org.easymock.tests2.CaptureTest.testPrimitive":278,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":87,"org.easymock.tests.UsageTest.moreThanOneArgument":157,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":107,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":291,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":241,"org.easymock.tests.UsageTest.argumentsOrdered":9,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":61,"org.easymock.tests.UsageVarargTest.varargIntAccepted":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":211,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":249,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":496,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":464,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":450,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":417,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":198,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":253,"org.easymock.tests.ReplayStateInvalidUsageTest.times":228,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":331,"org.easymock.tests2.DependencyTest.testClassMocking":398,"org.easymock.tests2.AnswerTest.answer":484,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":374,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":213,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":324,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":48,"org.easymock.tests2.CaptureTest.testAnd":275,"org.easymock.tests2.UsageTest.strictResetToDefault":436,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":468,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":300,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":240,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":423,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":117,"org.easymock.tests2.DelegateToTest.testDelegate":397,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":103,"org.easymock.tests.LimitationsTest.mockFinalMethod":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":151,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":79,"org.easymock.tests2.DependencyTest.testClassMockingSupport":399,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":80,"org.easymock.tests2.CaptureTest.testCapture1_2446744":279,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":296,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":101,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":322,"org.easymock.tests.UsageThrowableTest.throwError":136,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":222,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":50,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":418,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":248,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":362,"org.easymock.samples.PartialClassMockTest.testGetArea":257,"org.easymock.tests.MockingTest.testInterfaceMocking":166,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":223,"org.easymock.tests2.CompareToTest.testLessOrEqual":508,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":250,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":109,"org.easymock.tests2.UsageTest.niceToStrict":438,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":124,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":349,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":518,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":196,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":470,"org.easymock.tests2.MockBuilderTest.testCreateMock":477,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":357,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":334,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":500,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":97,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":424,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":47,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":155,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":66,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":171,"org.easymock.tests.UsageOverloadedMethodTest.overloading":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":359,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":236,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":379,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":133,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":37,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":490,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":378,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":284,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":187,"org.easymock.tests.MockClassControlTest.testEquals":131,"org.easymock.tests2.EasyMockSupportClassTest.testAll":341,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":113,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":501,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":105,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":511,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":77,"org.easymock.tests2.CaptureTest.testCaptureAll":276,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":323,"org.easymock.tests.MockNameTest.defaultName":232,"org.easymock.tests2.UsageConstraintsTest.testMatches":380,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":242,"org.easymock.samples.ExampleTest.voteForRemovals":271,"org.easymock.tests.UsageVarargTest.allKinds":195,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":244,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":78,"org.easymock.samples.BasicClassMockTest.testPrintContent":259,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":142,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":312,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":414,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":396,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":152,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":182,"org.easymock.tests2.UsageConstraintsTest.greaterThan":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":342,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":116,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":303,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":183,"org.easymock.samples.ExampleTest.voteForRemoval":268,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":403,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":304,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":52,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":451,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":295,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":435,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":245,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":203,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":421,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":339,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":147,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":392,"org.easymock.tests2.CaptureTest.testCaptureFirst":288,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":202,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":422,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":444,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":10,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":33,"org.easymock.tests2.UsageTest.moreThanOneArgument":437,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":405,"org.easymock.tests2.CaptureTest.testCapture2_2446744":287,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":478,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":214,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":194,"org.easymock.tests.GenericTest.testBridgedEquals":18,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":73,"org.easymock.tests.UsageExpectAndReturnTest.longType":29,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":419,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":75,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":515,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":106,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":387,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":146,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":104,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":239,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":255,"org.easymock.tests.UsageCallCountTest.tooManyCalls":74,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":358,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":336,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":93,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":141,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":456,"org.easymock.tests.MockingTest.testNiceClassMocking":170,"org.easymock.tests.MockingTest.testClassMocking":162,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":514,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":67,"org.easymock.tests2.UsageConstraintsTest.testContains":377,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":482,"org.easymock.tests2.UsageConstraintsTest.testFind":368,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":135,"org.easymock.tests.MockTypeTest.fromEasyMockClass":49,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":447,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":54,"org.easymock.tests.UsageExpectAndReturnTest.object":36,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":297,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":335,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":427,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":493,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":189,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":122,"org.easymock.tests.UsageTest.exactCallCountByLastCall":160,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":201,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":23,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":62,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":499,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":319,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":184,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":42,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":235,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":408,"org.easymock.tests.MockClassControlTest.testHashCode":130,"org.easymock.tests2.EasyMockSupportTest.testVerify":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":351,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":63,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":154,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":233,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":509,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":321,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":325,"org.easymock.tests.UsageVarargTest.varargCharAccepted":188,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":175,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":219,"org.easymock.tests2.UsageTest.openCallCountByLastCall":440,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":516,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":430,"org.easymock.tests.DefaultClassInstantiatorTest.object":176,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":153,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":120,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":5,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":352,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":139,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":329,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":407,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":129,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":301,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":94,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":43,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":254,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":360,"org.easymock.tests2.UsageTest.resumeIfFailure":443,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":46,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":449,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":150,"org.easymock.tests2.StubTest.stubWithReturnValue":306,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":473,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":388,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":35,"org.easymock.tests2.SerializationTest.testAllMockedMethod":434,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":212,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":502,"org.easymock.samples.SupportTest.voteForRemovals":265,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":111,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":410,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":100,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":510,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":218,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":485,"org.easymock.tests.UsageExpectAndThrowTest.object":98,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":25,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":385,"org.easymock.tests2.DelegateToTest.testWrongClass":395,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":2,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":246,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":247,"org.easymock.tests.UsageStrictMockTest.range":4,"org.easymock.samples.ConstructorCalledMockTest.testTax":260,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":453,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":426,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":455,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":99,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":472,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":8,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":172,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":497,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":110,"org.easymock.tests2.CaptureTest.testCaptureNone":283,"org.easymock.tests.UsageUnorderedTest.message":11,"org.easymock.tests.UsageVerifyTest.twoReturns":13,"org.easymock.tests.UsageVarargTest.varargByteAccepted":193,"org.easymock.tests2.ThreadingTest.testThreadSafe":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":355,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":71,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":123,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":258,"org.easymock.tests2.CaptureTest.testCapture_2617107":277,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":503,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":82,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":216,"org.easymock.tests2.UsageConstraintsTest.any":375,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":227,"org.easymock.tests2.StubTest.stub":305,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":256,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":149,"org.easymock.tests.UsageExpectAndThrowTest.longType":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":217,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":180,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":226,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":315,"org.easymock.tests2.SerializationTest.testClass":432,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":412,"org.easymock.tests.LimitationsTest.mockNativeMethod":21,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":114,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":45,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":513,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":328,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":317,"org.easymock.tests2.NameTest.nameForMocksControl":311,"org.easymock.tests2.MockedExceptionTest.testMockedException":481,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":343,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":159,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":446,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":167,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":92,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":289,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":474,"org.easymock.tests.MockingTest.testNicePartialClassMocking":165,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":294,"org.easymock.tests2.CompareToTest.testCompareEqual":506,"org.easymock.tests2.CaptureTest.testCaptureLast":282,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":326,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":81,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":462,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":372,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":386,"org.easymock.tests.MockingTest.testTwoMocks":163,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":463,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":96,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":16,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":390,"org.easymock.samples.ExampleTest.removeNonExistingDocument":272,"org.easymock.tests.UsageStrictMockTest.differentMethods":58,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":224,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":333,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":409,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":178,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":404,"org.easymock.tests2.MockBuilderTest.testCreateMockString":1,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":125,"org.easymock.tests.UsageExpectAndThrowTest.floatType":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":345,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":381,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":340,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":487,"org.easymock.tests.UsageVerifyTest.twoThrows":12,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":320,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":354,"org.easymock.samples.ExampleTest.voteAgainstRemoval":269,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":207,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":302,"org.easymock.tests.LimitationsTest.privateConstructor":20,"org.easymock.tests2.UsageConstraintsTest.testNotNull":389,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":480,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":143,"org.easymock.tests2.UsageTest.defaultResetToNice":442,"org.easymock.samples.ExampleTest.voteAgainstRemovals":266,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":208,"org.easymock.tests.UsageVarargTest.differentLength":190,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":327,"org.easymock.tests2.CallbackTest.callback":274,"org.easymock.tests2.UsageConstraintsTest.equals":367,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":298,"org.easymock.tests.UsageTest.openCallCountByLastCall":158,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":363,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":85,"org.easymock.tests.UsageCallCountTest.tooFewCalls":69,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":458,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":174,"org.easymock.tests.UsageThrowableTest.throwCheckedException":140,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":498,"org.easymock.tests.MockingTest.testStrictClassMocking":161,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":461,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":145,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":457,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":332,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":229,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":460,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":489,"org.easymock.tests2.CompareToTest.testGreateOrEqual":507,"org.easymock.tests.ObjectMethodsTest.testHashCode":121,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":495,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":406,"org.easymock.tests2.NameTest.nameForNiceMock":310,"org.easymock.tests2.DependencyTest.testInterfaceMocking":400,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":494,"org.easymock.samples.ExampleTest.addDocument":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":356,"org.easymock.tests2.DelegateToTest.testStubDelegate":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":361,"org.easymock.tests2.AnswerTest.stubAnswer":488,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":56,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":475,"org.easymock.tests.UsageVarargTest.varargLongAccepted":192,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":205,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":44,"org.easymock.tests.UsageExpectAndReturnTest.floatType":28,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":318,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":261,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":416,"org.easymock.tests.UsageThrowableTest.noUpperLimit":137,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":237,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":383,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":364,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":448,"org.easymock.tests2.SerializationTest.test":433,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":280,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":491,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":177,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":27,"org.easymock.tests2.UsageConstraintsTest.testSame":370,"org.easymock.samples.SupportTest.addDocument":264,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":459,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":346,"org.easymock.tests.GenericTest.testPackageScope":112,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":64,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":200,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":415,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":168,"org.easymock.tests2.NameTest.nameForMock":308,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":38,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":479,"org.easymock.tests2.UsageStrictMockTest.differentMethods":316,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":299,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":30,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":102,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":119,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":118,"org.easymock.tests2.MockedExceptionTest.testRealException":483,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":53,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":454,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":209,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":314,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":84,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":231,"org.easymock.tests2.NameTest.nameForStrictMock":309,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":469,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":517,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":445,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":293,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":452,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":384,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":179,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":466,"org.easymock.tests2.UsageStrictMockTest.range":14,"org.easymock.tests2.UsageConstraintsTest.lessThan":391,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":411,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":204,"org.easymock.tests2.CaptureTest.testCaptureRightOne":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":350,"org.easymock.tests2.UsageConstraintsTest.testOr":371,"org.easymock.tests.UsageRangeTest.combination":115,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":290,"org.easymock.tests.UsageTest.wrongArguments":7,"org.easymock.tests2.MockBuilderTest.testWithConstructor":465,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":347,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":126,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":31,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":197,"org.easymock.tests.UsageVarargTest.varargShortAccepted":191,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":181,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":72,"org.easymock.tests2.UsageConstraintsTest.cmpTo":376,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":486,"org.easymock.tests2.CompareToTest.testLessThan":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":199,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":441,"org.easymock.tests2.CaptureTest.testCaptureFromStub":286,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":221,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":467,"org.easymock.tests.UsageTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":3,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":70,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":40,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":57,"org.easymock.tests2.UsageConstraintsTest.constraints":365,"org.easymock.samples.ExampleTest.addAndChangeDocument":273,"org.easymock.tests.UsageStrictMockTest.testVerify":60,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":262,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":55,"org.easymock.tests2.CompareToTest.testGreateThan":505,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":76,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":281,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":512,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":251,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":32,"org.easymock.tests.LimitationsTest.abstractClass":19,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":238,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":252,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":425,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":185}}]

[{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[0,1,2],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[3,4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.internal.MockBuilder:178","failures":[5,6],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"failures":[24,25],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:124","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"failures":[26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[58],"status":-1,"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:97","sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[59,60,61,62,63,64,65,66,67,28,68,29,30,31,32,33,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,11,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,57,126,127,128,129,130,131,132,133,134,16,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,6,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,4,218],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:40","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[219],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[220,221,222,223,224,225,226],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.ConstructorArgs:60","failures":[128,132,227,225,228,229,226,230,231,232,233],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[195,199],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.InstanceOf:40","failures":[],"status":0,"binaryOperator":"(\"isA(\" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[234,4,218,235],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[236,237,147,225,228,229,226,3,230,231,238,239,240,241,4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[59,242,243,244,245,246,247,60,248,61,62,63,64,249,65,67,250,251,252,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,253,11,254,93,94,95,96,97,255,256,257,258,259,98,260,261,262,263,264,265,266,267,268,269,100,101,102,270,271,272,273,35,274,103,104,275,106,107,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,108,109,110,111,112,56,113,276,277,278,279,280,281,282,283,284,114,285,115,116,286,117,287,236,237,118,288,289,290,291,292,119,120,121,122,293,123,125,294,295,57,126,127,128,129,130,131,132,134,16,135,296,138,139,297,298,141,299,142,143,146,147,300,301,302,303,304,149,305,150,6,152,153,154,155,156,158,159,160,161,162,306,164,166,307,167,308,309,310,311,168,312,169,170,313,171,314,315,173,174,175,176,178,179,180,181,182,183,184,185,186,187,188,189,190,316,191,317,318,319,320,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,4,218,235,321],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[66,67,73,77,78,80,83,322,323,324,325,40,44,45,47,50,124,125],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[27,0,1,2,295],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[326,327,328],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"(((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[329],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[59,330,331,332,333,244,60,334,61,62,335,27,63,336,64,65,66,67,28,252,68,29,30,31,32,33,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,337,338,339,340,89,11,90,91,92,341,2,342,343,344,254,93,94,95,96,97,345,346,34,98,347,348,349,350,100,101,102,270,271,272,273,35,274,323,351,352,324,325,103,104,105,106,107,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,108,109,110,111,112,56,113,280,281,282,283,284,114,285,115,116,117,287,236,236,237,237,118,119,120,121,122,123,124,125,295,57,126,127,128,129,130,131,132,133,134,16,135,136,137,138,139,140,297,298,141,299,142,143,144,145,146,147,148,149,150,6,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,353,354,307,167,308,309,310,355,311,168,356,357,312,169,170,171,172,173,174,175,176,358,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,4,218,321],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[211],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[336,7,66,359,12,13,14,15,360,56,113,124,17,18,19],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[3,240,4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[336,7,65,66,67,11,13,14,15,361,362,363,112,56,113,123,124,125,16,17,18,19,300,301,302,303],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:78","sourceCode":"continue","type":"CtContinueImpl"},"failures":[233],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[59,330,244,245,246,247,364,365,366,60,248,61,62,335,27,63,336,64,367,249,7,65,368,66,67,250,28,252,68,29,30,31,32,33,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,11,12,13,90,91,14,15,92,254,93,94,95,96,97,255,256,257,258,259,345,346,34,360,260,261,262,263,264,369,265,266,267,268,269,100,101,102,270,271,272,273,35,274,103,104,105,106,107,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,108,110,111,112,56,113,276,277,278,279,280,281,282,283,284,114,285,115,116,286,117,287,236,237,118,288,289,290,291,292,119,120,121,122,370,293,123,371,124,125,294,295,57,126,127,128,129,130,131,132,133,134,16,17,135,296,136,137,138,18,19,139,140,297,298,141,299,142,143,144,145,146,147,304,148,149,305,150,6,372,151,373,152,153,154,155,156,157,158,159,160,161,374,162,306,163,164,165,166,307,167,308,309,310,311,168,356,312,169,170,313,171,172,314,315,173,174,175,176,358,177,178,179,180,181,182,183,184,185,186,187,188,189,190,316,191,317,318,319,320,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,375,214,215,216,217,4,218,235,321],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[376],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"message":"defaultValue"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:92","failures":[377,202],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[364,365,366,378,379,336,367,7,368,66,67,380,359,89,12,13,14,15,92,369,108,56,113,370,371,124,125,133,17,135,296,18,19,139,140,148,372,151,373,157,163,165,180,184,185,188,194,208,321],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[381,194,201,206,217],"status":-1,"binaryOperator":"int >= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:241","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[382,383],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[330,335,27,28,68,29,30,31,32,33,89,91,34,270,271,272,273,35,274,107,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,133,137,297,298,141,299],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[138],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":195,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":89,"org.easymock.tests2.UsageTest.argumentsOrdered":19,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":189,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":327,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":273,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":296,"org.easymock.tests2.StubTest.stubWithReturnValue":57,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":226,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":288,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":214,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":78,"org.easymock.tests2.SerializationTest.testAllMockedMethod":235,"org.easymock.tests2.DelegateToTest.testReturnException":311,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":341,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":271,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":240,"org.easymock.tests.MockingTest.testPartialClassMocking":100,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":22,"org.easymock.samples.SupportTest.voteForRemovals":119,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":339,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":48,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":234,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":2,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":36,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":153,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":353,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":340,"org.easymock.tests.UsageExpectAndThrowTest.object":46,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":361,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":212,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":122,"org.easymock.tests2.DelegateToTest.testWrongClass":356,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":220,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":103,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":104,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":201,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":61,"org.easymock.tests2.UsageTest.wrongArguments":17,"org.easymock.samples.ConstructorCalledMockTest.testTax":236,"org.easymock.tests.UsageStrictMockTest.range":66,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":278,"org.easymock.samples.ExampleTest.answerVsDelegate":285,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":186,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":126,"org.easymock.tests2.UsageConstraintsTest.testNull":197,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":47,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":159,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":150,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":188,"org.easymock.tests2.CaptureTest.testPrimitive":171,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":63,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":55,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests.UsageTest.moreThanOneArgument":11,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":277,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":158,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":282,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":8,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":349,"org.easymock.tests2.CaptureTest.testCaptureNone":174,"org.easymock.tests.UsageUnorderedTest.message":336,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":378,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":58,"org.easymock.tests.UsageVerifyTest.twoReturns":113,"org.easymock.tests.UsageVarargTest.varargByteAccepted":267,"org.easymock.tests2.ThreadingTest.testThreadSafe":142,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":323,"org.easymock.tests.UsageTest.argumentsOrdered":15,"org.easymock.tests.UsageVarargTest.varargIntAccepted":262,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":247,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":1,"org.easymock.tests2.CaptureTest.testCapture_2617107":313,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":93,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":23,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":304,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":224,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":253,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":27,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":305,"org.easymock.tests2.UsageConstraintsTest.any":202,"org.easymock.tests2.StubTest.stub":295,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":344,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":97,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":272,"org.easymock.tests.UsageExpectAndThrowTest.longType":39,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":371,"org.easymock.tests2.SerializationTest.testClass":4,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":120,"org.easymock.tests.LimitationsTest.mockNativeMethod":64,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":191,"org.easymock.tests2.DependencyTest.testClassMocking":24,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":334,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":88,"org.easymock.tests2.AnswerTest.answer":166,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":377,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":320,"org.easymock.tests2.CaptureTest.testAnd":169,"org.easymock.tests2.UsageTest.strictResetToDefault":134,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":306,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":294,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":229,"org.easymock.tests2.NameTest.nameForMocksControl":303,"org.easymock.tests2.MockedExceptionTest.testMockedException":298,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":281,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":110,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":183,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":91,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":325,"org.easymock.tests2.DelegateToTest.testDelegate":312,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":40,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":102,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":156,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":6,"org.easymock.tests.MockingTest.testNicePartialClassMocking":101,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":51,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":161,"org.easymock.tests2.CaptureTest.testCaptureLast":173,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":35,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":337,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":200,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":132,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":259,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":213,"org.easymock.tests2.DependencyTest.testClassMockingSupport":25,"org.easymock.tests2.CaptureTest.testCapture1_2446744":172,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":227,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":69,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":49,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":318,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":44,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":216,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":0,"org.easymock.tests.UsageThrowableTest.throwError":28,"org.easymock.tests.UsageStrictMockTest.differentMethods":67,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":326,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":144,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":379,"org.easymock.tests2.MockBuilderTest.testCreateMockString":373,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":284,"org.easymock.tests.UsageExpectAndThrowTest.floatType":38,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":208,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":307,"org.easymock.tests.UsageVerifyTest.twoThrows":56,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":238,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":154,"org.easymock.samples.PartialClassMockTest.testGetArea":118,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":94,"org.easymock.samples.ExampleTest.voteAgainstRemoval":116,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":348,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":347,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":164,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":37,"org.easymock.tests2.UsageTest.niceToStrict":135,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":233,"org.easymock.tests2.UsageConstraintsTest.testNotNull":215,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":297,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":33,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":149,"org.easymock.tests2.MockBuilderTest.testCreateMock":372,"org.easymock.tests2.UsageTest.defaultResetToNice":138,"org.easymock.samples.ExampleTest.voteAgainstRemovals":114,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":84,"org.easymock.tests.UsageVarargTest.differentLength":369,"org.easymock.tests2.CallbackTest.callback":321,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":241,"org.easymock.tests.UsageTest.openCallCountByLastCall":90,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":20,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":45,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":184,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":192,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":333,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":242,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":335,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":276,"org.easymock.tests.UsageCallCountTest.tooFewCalls":245,"org.easymock.tests.UsageOverloadedMethodTest.overloading":106,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":206,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":34,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":80,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":105,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":129,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":205,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":175,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":279,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":376,"org.easymock.tests.UsageThrowableTest.throwCheckedException":30,"org.easymock.tests2.EasyMockSupportClassTest.testAll":152,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":248,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":53,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":21,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":9,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":319,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":257,"org.easymock.tests2.CaptureTest.testCaptureAll":170,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":330,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":131,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":328,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":128,"org.easymock.tests2.UsageConstraintsTest.testMatches":207,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":130,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":308,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":283,"org.easymock.tests2.CompareToTest.testGreateOrEqual":381,"org.easymock.samples.ExampleTest.voteForRemovals":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":223,"org.easymock.tests2.NameTest.nameForNiceMock":302,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":146,"org.easymock.tests.UsageVarargTest.allKinds":269,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":112,"org.easymock.tests2.DependencyTest.testInterfaceMocking":121,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":222,"org.easymock.samples.BasicClassMockTest.testPrintContent":291,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":258,"org.easymock.samples.ExampleTest.addDocument":286,"org.easymock.tests2.DelegateToTest.testStubDelegate":168,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":32,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":370,"org.easymock.tests2.AnswerTest.stubAnswer":167,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":357,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":274,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":65,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":219,"org.easymock.tests2.UsageConstraintsTest.greaterThan":209,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":109,"org.easymock.tests.UsageVarargTest.varargLongAccepted":266,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":165,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":250,"org.easymock.samples.ExampleTest.voteForRemoval":115,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":143,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":87,"org.easymock.tests.UsageExpectAndReturnTest.floatType":71,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":374,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":147,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":237,"org.easymock.tests.UsageThrowableTest.noUpperLimit":252,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":210,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":254,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":193,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":133,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":314,"org.easymock.tests2.SerializationTest.test":218,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":3,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":26,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":181,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":68,"org.easymock.tests2.UsageConstraintsTest.testSame":198,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":70,"org.easymock.samples.SupportTest.addDocument":292,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":270,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":355,"org.easymock.tests2.CaptureTest.testCaptureFirst":178,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":182,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":140,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":360,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":76,"org.easymock.tests.GenericTest.testPackageScope":60,"org.easymock.tests2.UsageTest.moreThanOneArgument":16,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":145,"org.easymock.tests2.CaptureTest.testCapture2_2446744":177,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":324,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":151,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":268,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":365,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":329,"org.easymock.tests2.NameTest.nameForMock":300,"org.easymock.tests.UsageExpectAndReturnTest.longType":72,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":255,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":179,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":81,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":54,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":375,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":350,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":231,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":52,"org.easymock.tests2.UsageStrictMockTest.differentMethods":125,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":343,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":280,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":73,"org.easymock.tests.UsageCallCountTest.tooManyCalls":366,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":50,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":111,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":244,"org.easymock.tests2.MockedExceptionTest.testRealException":299,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":77,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":239,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":41,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":123,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":383,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":62,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":127,"org.easymock.tests2.NameTest.nameForStrictMock":301,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":243,"org.easymock.tests2.UsageConstraintsTest.testContains":204,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":141,"org.easymock.tests2.UsageConstraintsTest.testFind":196,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":107,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":309,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":160,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":367,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":310,"org.easymock.tests.UsageExpectAndReturnTest.object":79,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":362,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":211,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":162,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":148,"org.easymock.tests2.UsageStrictMockTest.range":124,"org.easymock.tests2.UsageConstraintsTest.lessThan":217,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":187,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":264,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":221,"org.easymock.tests.UsageTest.exactCallCountByLastCall":92,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":322,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":180,"org.easymock.tests2.CaptureTest.testCaptureRightOne":176,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":351,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":338,"org.easymock.tests2.UsageConstraintsTest.testOr":199,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":10,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":225,"org.easymock.tests.UsageRangeTest.combination":108,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":260,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":85,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":157,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":346,"org.easymock.tests.UsageTest.wrongArguments":13,"org.easymock.tests2.MockBuilderTest.testWithConstructor":228,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":275,"org.easymock.tests2.EasyMockSupportTest.testVerify":316,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":74,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":82,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":352,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":345,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":332,"org.easymock.tests.UsageVarargTest.varargShortAccepted":265,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":380,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":364,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":317,"org.easymock.tests2.UsageConstraintsTest.cmpTo":203,"org.easymock.tests.UsageVarargTest.varargCharAccepted":263,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":354,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":293,"org.easymock.tests2.UsageTest.openCallCountByLastCall":136,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":137,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":190,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":331,"org.easymock.tests2.CaptureTest.testCaptureFromStub":358,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":382,"org.easymock.tests.UsageTest.unexpectedCallWithArray":12,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":99,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":359,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":43,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":29,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":246,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":230,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":83,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":368,"org.easymock.tests2.UsageConstraintsTest.constraints":194,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":163,"org.easymock.samples.ExampleTest.addAndChangeDocument":287,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":42,"org.easymock.tests.UsageStrictMockTest.testVerify":251,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":86,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":342,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":289,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":256,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":315,"org.easymock.tests2.UsageTest.resumeIfFailure":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":95,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":75,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":5,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":96,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":98,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":363,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":261,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":185}}]

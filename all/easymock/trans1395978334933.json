[{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-5701204283180444317L","position":"org.easymock.internal.matchers.Or:29","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","position":"org.easymock.internal.ReflectionUtils:72","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.InjectionTarget:62","type":"CtThrowImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","position":"org.easymock.internal.BridgeMethodResolver:351","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToDefault()","position":"org.easymock.EasyMockSupport:584","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Number java.lang.Number = ((java.lang.Number)(java.lang.Object))","position":"org.easymock.internal.matchers.EqualsWithDelta:39","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.And:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:361","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:112","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","position":"org.easymock.internal.matchers.EqualsWithDelta:40","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:344","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.ClassProxyFactory:76","type":"CtIfImpl"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,0,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"actual":"actual","expected":"expected","this":"this"},"name":"add","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{"annotation":"annotation"},"name":"add","transplant":{"sourceCode":"java.lang.String java.lang.String = org.easymock.Mock.java.lang.String()","position":"org.easymock.internal.Injector:117","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType()","position":"org.easymock.internal.Injector:121","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:194","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && ((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","position":"org.easymock.internal.matchers.Contains:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","position":"org.easymock.internal.InjectionPlan:60","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:100","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:420","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:201","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"default :\n    throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));","position":"org.easymock.Capture:123","type":"CtCaseImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","position":"org.easymock.EasyMock:1951","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"status":-2},{"failures":[53,55,56,59,61,63,66,69,241,242,244,245,247,315],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String","position":"org.easymock.internal.Injector:119","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:100","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.Results:105","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1673","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:760","type":"CtReturnImpl"},"status":-2},{"failures":[15,17,19,145,191],"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","position":"org.easymock.internal.RecordState:126","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:113","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"status":0},{"failures":[11,151,151,152,152],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","position":"org.easymock.internal.LastControl:37","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:68","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:293","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean))","position":"org.easymock.internal.MocksBehavior:75","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:164","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n    java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n} else {\n    java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n}","position":"org.easymock.internal.Injector:123","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    int += 1;\n    return java.util.List<org.easymock.internal.Result>.get(int);\n} ","position":"org.easymock.internal.Results:67","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"math","position":"org.easymock.internal.MocksControl:131","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:74","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"status":-2},{"failures":[64,67,68,72,119,120,123,124,151,152,153,212,213,214,316],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class });\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"));\n}","position":"org.easymock.internal.DefaultClassInstantiator:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.MocksBehavior:124","type":"CtLocalVariableImpl"},"status":-2},{"failures":[80],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return com.google.dexmaker.stock.ProxyBuilder<T>.build()","position":"org.easymock.internal.AndroidClassProxyFactory:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new (\">=\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int >= 0;\n    }\n}","position":"org.easymock.LogicalOperator:42","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)) {\n    throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\");\n} ","position":"org.easymock.internal.MocksControl:105","type":"CtIfImpl"},"status":-2},{"failures":[26,31,32,34,37,43,44,45,47,53,59,62,68,78,85,86,98,134,138,139,200,201,203,204,205,206,207,209,242,255,256,257,261,262,287,294,295],"binaryOperator":"(this.boolean) != boolean","name":"removeConditional","position":"org.easymock.internal.UnorderedBehavior:102","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:212","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.ClassProxyFactory:208","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.lastBehaviorList().addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.MocksBehavior:61","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return (int) == (java.lang.Integer.int)","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","position":"org.easymock.internal.RecordState:220","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:233","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class })","position":"org.easymock.internal.DefaultClassInstantiator:181","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.matchers.Equals org.easymock.internal.matchers.Equals = ((org.easymock.internal.matchers.Equals)(java.lang.Object))","position":"org.easymock.internal.matchers.Equals:56","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"status":-2},{"failures":[25,40,51,54,55,56,59,67,69,76,80,81,84,108,113,117,129,132,133,134,138,139,140,141,166,167,239,241,243,244,245,256,257,287,289,291,294,295,296,297,309],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1444","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)","position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","position":"org.easymock.internal.ReplayState:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:63","type":"CtInvocationImpl"},"status":-2},{"failures":[25,26,27,28,29,30,31,32,33,34,43,44,48,49,88,89,90,91,98,99],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:80","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","position":"org.easymock.internal.LastControl:92","type":"CtInvocationImpl"},"status":-1},{"failures":[264],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"status":-1},{"failures":[317],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = java.lang.Object[].int","position":"org.easymock.internal.Invocation:61","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:124","type":"CtInvocationImpl"},"status":-2},{"failures":[14,318],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:320","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:256","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","position":"org.easymock.internal.MethodSerializationWrapper:72","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"actual","o":"expected"},"name":"add","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Equals:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method != null ? org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>) : false","position":"org.easymock.internal.BridgeMethodResolver:145","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.IMocksControl","position":"org.easymock.EasyMockSupport:532","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1))","position":"org.easymock.internal.Invocation:137","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","position":"org.easymock.internal.LastControl:125","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:132","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.List<java.lang.reflect.Field>","position":"org.easymock.internal.Injector:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:71","type":"CtInvocationImpl"},"status":-2},{"failures":[319,320,321],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"same(\")","position":"org.easymock.internal.matchers.Same:41","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","position":"org.easymock.internal.ReflectionUtils:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"status":-2},{"failures":[1,4,5,6,7,8,9,10,11,12,13,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,52,53,56,57,58,60,61,62,63,65,66,68,70,71,72,73,74,75,0,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,101,102,103,104,107,108,109,322,323,324,110,111,112,325,114,326,115,116,118,119,120,121,122,123,124,125,126,127,128,130,131,133,134,137,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,161,327,162,163,164,165,328,329,330,331,332,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,194,201,202,209,210,212,213,214,215,216,220,221,222,223,224,225,226,227,228,229,230,231,232,235,236,240,242,245,246,247,248,249,250,251,252,333,253,255,256,257,334,335,336,337,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,338,290,297,298,299,300,301,302,304,305,306,307,308,310,311,312,313,314],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.asStub()","position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","position":"org.easymock.internal.ReflectionUtils:72","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","position":"org.easymock.internal.ErrorMessage:48","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"java.lang.Integer.MAX_VALUE":"result","maximum":"result"},"name":"add","transplant":{"sourceCode":"return int == int","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:945","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"toAssign":"injection"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.Injection == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:189","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","position":"org.easymock.internal.InjectionPlan:51","type":"CtIfImpl"},"status":-2},{"failures":[15,191],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.reflect.InvocationTargetException.getCause()","position":"org.easymock.internal.Result:89","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:312","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:362","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","position":"org.easymock.internal.EasyMockProperties:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:211","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:193","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:78","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1263","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\")","name":"math","position":"org.easymock.internal.DelegatingAnswer:86","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:325","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1595","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"number":"number"},"name":"replace","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"status":-2},{"failures":[2],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","position":"org.easymock.internal.RecordState:115","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:162","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.ClassProxyFactory:212","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Constructor<?>","position":"org.easymock.ConstructorArgs:101","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:353","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)) {\n    return (java.lang.String + \".\") + java.lang.String;\n} ","position":"org.easymock.internal.Invocation:153","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","position":"org.easymock.EasyMock:1542","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1543","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:106","type":"CtForImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.ClassProxyFactory:196","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","position":"org.easymock.EasyMock:2079","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * This class was kept here for compabitility reason with frameworks using EasyMock\n * @deprecated Use org.easymock.MockType\n */\n@java.lang.Deprecated\npublic enum MockType {\nNICE(org.easymock.MockType.NICE), DEFAULT(org.easymock.MockType.DEFAULT), STRICT(org.easymock.MockType.STRICT);\n    public org.easymock.MockType realType;\n    MockType(final org.easymock.MockType realType) {\n        this.org.easymock.MockType = org.easymock.MockType;\n    }}","position":"org.easymock.internal.MocksControl:46","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","position":"org.easymock.EasyMock:1901","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:785","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1121","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.InjectionTarget == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:165","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:708","type":"CtReturnImpl"},"status":-2},{"failures":[7,8,9,10,11,20,22,58,59,61,62,63,64,65,66,67,68,69,339,74,325,113,340,114,326,115,116,341,117,342,118,119,120,121,123,124,142,143,151,151,152,152,153,343,344,188,211,212,213,214,236,345,333,346,347,348,349,350,301,302,303],"variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"},"name":"replace","transplant":{"sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long.valueOf(0))","position":"org.easymock.internal.RecordState:50","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getMockedType(java.lang.Object)","position":"org.easymock.internal.Invocation:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS","method":"equalsMethod"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:57","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","position":"org.easymock.internal.BridgeMethodResolver:338","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":203,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":65,"org.easymock.tests2.MockedExceptionTest.testRealException":75,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":243,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":240,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":280,"org.easymock.tests.UsageVarargTest.varargIntAccepted":306,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":253,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":23,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":11,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":157,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":347,"org.easymock.tests2.UsageConstraintsTest.testContains":36,"org.easymock.tests.UsageCallCountTest.tooManyCalls":167,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":317,"org.easymock.tests2.UsageConstraintsTest.testFind":27,"org.easymock.tests2.StubTest.stubWithReturnValue":13,"org.easymock.tests.UsageVarargTest.allKinds":314,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":93,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":337,"org.easymock.tests2.CaptureTest.testCaptureAll":89,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":215,"org.easymock.samples.ExampleTest.addAndChangeDocument":150,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":325,"org.easymock.tests.UsageVarargTest.varargCharAccepted":307,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":320,"org.easymock.tests2.CaptureTest.testCaptureFromStub":99,"org.easymock.tests.UsageVerifyTest.twoThrows":256,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":232,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":308,"org.easymock.tests2.DelegateToTest.testReturnException":15,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":134,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":40,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":86,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":52,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":316,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":160,"org.easymock.tests.UsageStrictMockTest.testVerify":247,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":273,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":97,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":277,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":343,"org.easymock.tests2.UsageConstraintsTest.testMatches":39,"org.easymock.tests.MockClassControlTest.testToString":346,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":329,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":318,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":199,"org.easymock.tests2.UsageConstraintsTest.testNull":28,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":118,"org.easymock.tests2.EasyMockSupportClassTest.testAll":7,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":80,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":181,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":281,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":110,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":188,"org.easymock.tests.UsageThrowableTest.throwError":200,"org.easymock.tests2.UsageConstraintsTest.greaterThan":41,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":304,"org.easymock.samples.SupportTest.addDocument":154,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":235,"org.easymock.tests2.StubTest.stub":12,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":261,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":223,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":231,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":43,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":83,"org.easymock.tests.UsageExpectAndReturnTest.object":178,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":187,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":339,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":313,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":57,"org.easymock.tests.UsageExpectAndThrowTest.object":275,"org.easymock.tests2.DelegateToTest.testWrongClass":17,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":105,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":227,"org.easymock.tests2.UsageTest.moreThanOneArgument":131,"org.easymock.tests.UsageVarargTest.varargByteAccepted":312,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":272,"org.easymock.samples.ExampleTest.voteAgainstRemoval":147,"org.easymock.tests.UsageTest.wrongArguments":291,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":331,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":206,"org.easymock.tests.UsageVarargTest.varargShortAccepted":310,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":264,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":276,"org.easymock.tests2.UsageTest.defaultResetToNice":137,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":74,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":222,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":106,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":156,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":116,"org.easymock.tests2.MockBuilderTest.testCreateMock":341,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":345,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":107,"org.easymock.tests2.SerializationTest.testAllMockedMethod":22,"org.easymock.tests2.NameTest.nameForMocksControl":128,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":238,"org.easymock.samples.ExampleTest.voteAgainstRemovals":144,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":51,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":190,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":299,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":234,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":208,"org.easymock.tests2.CaptureTest.testCapture1_2446744":92,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":141,"org.easymock.tests2.DelegateToTest.testStubDelegate":16,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":218,"org.easymock.tests.LimitationsTest.mockNativeMethod":236,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":193,"org.easymock.tests.UsageUnorderedTest.message":287,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":18,"org.easymock.samples.ExampleTest.answerVsDelegate":145,"org.easymock.samples.ExampleTest.voteForRemoval":146,"org.easymock.tests.UsageCallCountTest.tooFewCalls":163,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":177,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":4,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":165,"org.easymock.tests.UsageVerifyTest.twoReturns":257,"org.easymock.tests2.DependencyTest.testInterfaceMocking":111,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":172,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":274,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":0,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":226,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":78,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":219,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":324,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":31,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":246,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":334,"org.easymock.tests.MockingTest.testTwoMocks":211,"org.easymock.tests2.CaptureTest.testCaptureRightOne":98,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":174,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":162,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":335,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":72,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":3,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":63,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":298,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":263,"org.easymock.tests2.UsageConstraintsTest.cmpTo":35,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":161,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":179,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":120,"org.easymock.tests2.MockedExceptionTest.testMockedException":73,"org.easymock.tests.UsageThrowableTest.throwCheckedException":204,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":47,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":250,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":284,"org.easymock.samples.PartialClassMockTest.testGetArea":153,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":255,"org.easymock.samples.ExampleTest.voteForRemovals":149,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":202,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":210,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":38,"org.easymock.samples.ConstructorCalledMockTest.testTax":151,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":228,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":2,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":62,"org.easymock.tests2.UsageTest.argumentsOrdered":139,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":289,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":6,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":237,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":173,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":328,"org.easymock.tests2.AnswerTest.answer":1,"org.easymock.tests.MockingTest.testNicePartialClassMocking":213,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":242,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":169,"org.easymock.tests2.UsageConstraintsTest.any":34,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":224,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":252,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":262,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":85,"org.easymock.tests.UsageExpectAndThrowTest.longType":268,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":71,"org.easymock.tests2.CallbackTest.callback":108,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":9,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":82,"org.easymock.tests2.NameTest.nameForMock":125,"org.easymock.tests.UsageTest.argumentsOrdered":295,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":26,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":115,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":37,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":186,"org.easymock.tests2.NameTest.nameForStrictMock":126,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":233,"org.easymock.tests2.MockBuilderTest.testCreateMockString":342,"org.easymock.tests2.CaptureTest.testCaptureNone":96,"org.easymock.tests2.SerializationTest.test":21,"org.easymock.tests.UsageExpectAndReturnTest.longType":171,"org.easymock.tests2.SerializationTest.testClass":20,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":94,"org.easymock.tests2.CaptureTest.testCaptureFirst":101,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":350,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":44,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":338,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":142,"org.easymock.tests2.EasyMockSupportTest.testVerify":87,"org.easymock.tests2.UsageTest.niceToStrict":133,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":225,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":258,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":332,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":259,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":326,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":239,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":270,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":46,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":129,"org.easymock.tests2.UsageTest.strictResetToDefault":130,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":278,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":68,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":117,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":185,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":254,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":265,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":32,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":122,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":175,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":109,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":64,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":42,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":61,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":305,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":58,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":230,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":214,"org.easymock.tests2.UsageConstraintsTest.testOr":30,"org.easymock.tests2.DelegateToTest.testDelegate":19,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":104,"org.easymock.tests2.UsageConstraintsTest.testNotNull":48,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":54,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":102,"org.easymock.tests.MockClassControlTest.testHashCode":349,"org.easymock.tests2.CaptureTest.testCapture_2617107":90,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":180,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":207,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":216,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":344,"org.easymock.tests2.ThreadingTest.testThreadSafe":103,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":136,"org.easymock.tests.UsageThrowableTest.noUpperLimit":201,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":249,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":119,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":121,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":84,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":76,"org.easymock.tests.UsageExpectAndReturnTest.floatType":170,"org.easymock.tests2.UsageTest.wrongArguments":132,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":33,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":323,"org.easymock.tests2.UsageConstraintsTest.testSame":29,"org.easymock.tests2.UsageTest.resumeIfFailure":140,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":321,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":348,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":159,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":123,"org.easymock.tests.UsageOverloadedMethodTest.overloading":209,"org.easymock.samples.SupportTest.voteForRemovals":155,"org.easymock.tests.UsageRangeTest.combination":297,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":205,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":197,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":152,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":49,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":302,"org.easymock.tests.UsageTest.openCallCountByLastCall":292,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":271,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":196,"org.easymock.tests2.NameTest.nameForNiceMock":127,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":300,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":45,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":248,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":53,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":60,"org.easymock.tests2.CaptureTest.testPrimitive":91,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":182,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":279,"org.easymock.samples.BasicClassMockTest.testPrintContent":143,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":158,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":336,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":220,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":66,"org.easymock.tests.UsageExpectAndThrowTest.floatType":267,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":59,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":70,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":166,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":183,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":327,"org.easymock.tests2.UsageStrictMockTest.differentMethods":56,"org.easymock.tests.UsageTest.exactCallCountByLastCall":296,"org.easymock.tests2.AnswerTest.stubAnswer":5,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":77,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":81,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":303,"org.easymock.tests2.CaptureTest.testCaptureLast":95,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":266,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":164,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":8,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":112,"org.easymock.tests.UsageStrictMockTest.range":244,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":293,"org.easymock.tests.UsageTest.unexpectedCallWithArray":315,"org.easymock.tests.MockingTest.testPartialClassMocking":212,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":184,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":138,"org.easymock.tests2.UsageConstraintsTest.constraints":25,"org.easymock.samples.ExampleTest.addDocument":148,"org.easymock.tests2.UsageConstraintsTest.lessThan":50,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":322,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":294,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":189,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":251,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":260,"org.easymock.tests.UsageVarargTest.varargLongAccepted":311,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":67,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":69,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":14,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":241,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":10,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":195,"org.easymock.tests2.UsageStrictMockTest.range":55,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":124,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":285,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":286,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":330,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":340,"org.easymock.tests.UsageTest.moreThanOneArgument":290,"org.easymock.tests2.UsageTest.openCallCountByLastCall":135,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":221,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":319,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":113,"org.easymock.tests.UsageStrictMockTest.differentMethods":245,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":79,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":24,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":333,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":114,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":269,"org.easymock.tests.DefaultClassInstantiatorTest.object":288,"org.easymock.tests.UsageVarargTest.differentLength":309,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":198,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":217,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":168,"org.easymock.tests2.CaptureTest.testCapture2_2446744":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":229,"org.easymock.tests.GenericTest.testPackageScope":301}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,53,54,54,55],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[56,57,58,59,36],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:210","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[75,76,77,78,79],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[80,81],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"position":"org.easymock.internal.MocksControl:105","failures":[82,60,61,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,62,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,64,153,154,65,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,66,67,210,211,68,69,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,56,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,57,252,58,253,254,255,256,257,258,70,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,71,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,79,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,35,366,367,368,369,370,371,372,373,72,374,375,376,377,378,73,74,379,380,381,382,383,384,385,386,387,388,389,390,391,392,80,393,394,395,396,397,398,399,400,401,402,81,403,404,405,406,407,408,59,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1163","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[82,60,61,2,3,4,91,93,94,95,96,97,99,124,125,62,141,142,143,151,64,153,154,65,155,158,159,160,161,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,66,67,210,211,68,69,212,6,226,227,228,229,241,242,11,243,244,245,246,247,248,253,255,256,70,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,292,293,294,296,14,297,303,310,312,313,71,314,15,316,317,318,319,320,322,323,324,325,326,327,329,330,331,332,333,334,79,335,336,337,338,339,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,17,18,19,20,358,21,22,360,361,362,363,27,29,30,32,34,35,368,369,371,372,373,72,374,375,376,377,378,73,74,379,380,381,385,386,392,80,394,395,398,399,400,401,402,81,403,405,406,407,408,59,409,37,38,39,40,41,410,42,43,44,45,46,47,48,49,50,411,412,416,53,54,55,418,419,420,421,423],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[427,15,316,16],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[342],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[385],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[428],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:52","failures":[82,60,61,87,88,62,129,140,141,143,64,153,65,155,170,208,209,67,210,211,68,69,212,216,218,221,296,312,71,314,323,324,329,330,342,343,371,373,72,376,377,73,74,380,381,388,389,390,391,419],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1483","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[320,326,337],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[337],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"failures":[166,188,189,196,203,228,242,248,259,260,267,274,362],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:233","failures":[82,60,61,2,3,4,87,88,91,92,93,94,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,62,129,130,131,133,134,135,136,137,138,139,140,141,142,143,144,151,152,64,153,154,65,155,156,157,158,159,160,161,162,163,164,165,166,167,5,168,169,170,171,172,173,174,175,176,177,178,179,180,182,183,184,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,67,210,211,68,69,212,213,215,216,217,218,220,221,6,7,8,241,242,11,243,244,245,246,247,248,249,250,251,252,253,255,256,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,291,292,293,294,295,296,14,297,303,310,311,312,313,71,314,315,15,316,16,317,318,319,320,322,323,324,325,326,327,328,329,330,331,332,333,334,79,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,17,18,19,20,358,21,22,25,27,29,30,32,364,365,35,366,368,370,371,372,373,72,374,375,376,377,378,73,74,379,380,381,382,383,384,385,386,388,389,390,391,392,80,393,394,395,396,397,398,399,400,401,402,81,403,404,405,406,407,408,59,409,36,37,38,39,40,41,410,42,43,44,46,48,49,50,411,412,415,416,51,52,417,53,53,54,54,55,418,419,420,421,422,423,425,426],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[374],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"methods":"methods","name":"name","paramTypes":"paramTypes","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[64,153,65,155,157,312,71,314,42,44],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:36","failures":[90],"status":-1,"binaryOperator":"(int <= int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[14,429,430,431],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[432],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[82,61,2,3,4,91,92,93,94,116,122,124,127,128,141,142,143,144,153,65,155,158,159,160,161,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,180,185,186,208,209,210,211,212,6,8,241,242,11,252,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,293,14,303,312,71,314,15,316,317,318,319,320,322,323,324,325,326,327,329,330,331,332,333,334,79,335,336,337,338,339,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,17,18,19,20,358,21,22,25,27,29,30,32,35,371,372,373,374,376,377,378,379,380,381,385,392,80,394,395,398,399,400,401,402,81,403,405,406,407,408,59,409,36,37,38,39,40,41,410,42,43,44,46,48,49,50,411,412,416,53,53,54,54,55,418,420,421,423],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"exception":"returnType","throwableClass":"returnType"}},{"transplant":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[82,433,434,14],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:747","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1385","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[14,435,436,53,54],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:37","failures":[82,60,61,124,62,129,130,131,133,134,136,137,138,139,140,141,142,143,152,153,154,65,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,7,241,242,243,244,245,246,247,248,253,255,256,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,292,293,294,296,297,303,311,312,313,71,314,315,15,316,320,323,325,326,342,345,346,347,348,349,350,351,353,354,355,356,27,29,30,371,372,373,374,375,376,377,379,380,381,384,385,392,80,398,399,401,403,404,405,406,407,408,409,41,43,49,411,412,415,416,51,52,417,418,419,420,421,422,423,425,426],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[437,75,64,66,77,78],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[438,439],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":320,"org.easymock.tests2.UsageTest.argumentsOrdered":74,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":208,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":355,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":110,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":375,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":417,"org.easymock.tests2.DelegateToTest.testReturnException":292,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":244,"org.easymock.tests.MockingTest.testPartialClassMocking":2,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":387,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":119,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":188,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":37,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":412,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":327,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":176,"org.easymock.tests2.UsageTest.wrongArguments":72,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":309,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":228,"org.easymock.samples.ExampleTest.answerVsDelegate":419,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":10,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":85,"org.easymock.tests2.UsageConstraintsTest.testNull":323,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":42,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":354,"org.easymock.tests2.CaptureTest.testPrimitive":394,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":180,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":207,"org.easymock.tests.UsageTest.moreThanOneArgument":209,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":410,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":165,"org.easymock.tests.UsageTest.argumentsOrdered":69,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":86,"org.easymock.tests.UsageVarargTest.varargIntAccepted":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":115,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":158,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":23,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":289,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":28,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":102,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":162,"org.easymock.tests.ReplayStateInvalidUsageTest.times":237,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":303,"org.easymock.tests2.AnswerTest.answer":381,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":117,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":363,"org.easymock.tests2.CaptureTest.testAnd":392,"org.easymock.tests2.UsageTest.strictResetToDefault":372,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":47,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":164,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":93,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":349,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":90,"org.easymock.tests2.DelegateToTest.testDelegate":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":203,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":247,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":99,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":185,"org.easymock.tests2.CaptureTest.testCapture1_2446744":395,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":201,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":361,"org.easymock.tests.UsageThrowableTest.throwError":168,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":232,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":223,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":167,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":435,"org.easymock.samples.PartialClassMockTest.testGetArea":55,"org.easymock.tests.MockingTest.testInterfaceMocking":83,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":233,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":159,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":127,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":189,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":150,"org.easymock.tests2.UsageTest.niceToStrict":374,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":436,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":100,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":27,"org.easymock.tests2.MockBuilderTest.testCreateMock":31,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":306,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":77,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":197,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":350,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":251,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":213,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":226,"org.easymock.tests.UsageOverloadedMethodTest.overloading":142,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":256,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":333,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":141,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":270,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":332,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":400,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":132,"org.easymock.tests2.EasyMockSupportClassTest.testAll":36,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":7,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":205,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":97,"org.easymock.tests2.CaptureTest.testCaptureAll":80,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":362,"org.easymock.tests.MockNameTest.defaultName":181,"org.easymock.tests2.UsageConstraintsTest.testMatches":334,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":166,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":230,"org.easymock.samples.ExampleTest.voteForRemovals":423,"org.easymock.tests.UsageVarargTest.allKinds":140,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":82,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":98,"org.easymock.samples.BasicClassMockTest.testPrintContent":52,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":174,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":310,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":248,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":286,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":295,"org.easymock.tests2.UsageConstraintsTest.greaterThan":335,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":92,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":50,"org.easymock.samples.ExampleTest.voteForRemoval":420,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":407,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":224,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":45,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":5,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":107,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":347,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":243,"org.easymock.tests2.CaptureTest.testCaptureFirst":403,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":106,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":348,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":380,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":70,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":266,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":59,"org.easymock.tests2.CaptureTest.testCapture2_2446744":81,"org.easymock.tests2.UsageTest.moreThanOneArgument":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":118,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":32,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":139,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":220,"org.easymock.tests.UsageExpectAndReturnTest.longType":262,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":95,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":345,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":33,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":206,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":144,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":340,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":204,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":183,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":163,"org.easymock.tests.UsageCallCountTest.tooManyCalls":221,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":215,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":267,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":308,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":193,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":173,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":18,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":24,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":214,"org.easymock.tests2.UsageConstraintsTest.testContains":331,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":35,"org.easymock.tests2.UsageConstraintsTest.testFind":322,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":143,"org.easymock.tests.MockTypeTest.fromEasyMockClass":222,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":151,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":370,"org.easymock.tests.UsageExpectAndReturnTest.object":269,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":307,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":353,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":134,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":148,"org.easymock.tests.UsageTest.exactCallCountByLastCall":212,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":105,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":57,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":87,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":429,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":129,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":275,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":255,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":280,"org.easymock.tests2.EasyMockSupportTest.testVerify":357,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":88,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":250,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":253,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":360,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":367,"org.easymock.tests.UsageVarargTest.varargCharAccepted":133,"org.easymock.tests2.CaptureTest.testCaptureMultiple":0,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":123,"org.easymock.tests2.UsageTest.openCallCountByLastCall":376,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":356,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":249,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":146,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":63,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":195,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":171,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":301,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":279,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":48,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":194,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":276,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":39,"org.easymock.tests2.UsageTest.resumeIfFailure":379,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":9,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":246,"org.easymock.tests2.StubTest.stubWithReturnValue":405,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":430,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":268,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":341,"org.easymock.tests2.SerializationTest.testAllMockedMethod":16,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":116,"org.easymock.samples.SupportTest.voteForRemovals":416,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":78,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":282,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":200,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":427,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":122,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":382,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":58,"org.easymock.tests.UsageExpectAndThrowTest.object":198,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":338,"org.easymock.tests2.DelegateToTest.testWrongClass":294,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":241,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":242,"org.easymock.samples.ConstructorCalledMockTest.testTax":53,"org.easymock.tests.UsageStrictMockTest.range":65,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":413,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":352,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":17,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":199,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":29,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":68,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":239,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":227,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":437,"org.easymock.tests2.CaptureTest.testCaptureNone":399,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":128,"org.easymock.tests.UsageUnorderedTest.message":62,"org.easymock.tests.UsageVerifyTest.twoReturns":61,"org.easymock.tests.UsageVarargTest.varargByteAccepted":138,"org.easymock.tests2.ThreadingTest.testThreadSafe":406,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":218,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":149,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":51,"org.easymock.tests2.CaptureTest.testCapture_2617107":393,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":187,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":179,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":120,"org.easymock.tests2.UsageConstraintsTest.any":329,"org.easymock.tests2.StubTest.stub":404,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":236,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":184,"org.easymock.tests.UsageExpectAndThrowTest.longType":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":121,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":245,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":235,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":313,"org.easymock.tests2.SerializationTest.testClass":15,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":284,"org.easymock.tests.LimitationsTest.mockNativeMethod":11,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":8,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":278,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":300,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":315,"org.easymock.tests2.NameTest.nameForMocksControl":391,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":302,"org.easymock.tests2.MockedExceptionTest.testMockedException":365,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":211,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":4,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":192,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":369,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":40,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":30,"org.easymock.tests.MockingTest.testNicePartialClassMocking":3,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":44,"org.easymock.tests2.CaptureTest.testCaptureLast":398,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":298,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":186,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":22,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":326,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":339,"org.easymock.tests.MockingTest.testTwoMocks":1,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":359,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":259,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":196,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":73,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":343,"org.easymock.samples.ExampleTest.removeNonExistingDocument":424,"org.easymock.tests.UsageStrictMockTest.differentMethods":155,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":234,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":305,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":281,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":434,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":408,"org.easymock.tests2.MockBuilderTest.testCreateMockString":34,"org.easymock.tests.UsageExpectAndThrowTest.floatType":190,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":79,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":384,"org.easymock.tests.UsageVerifyTest.twoThrows":60,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":38,"org.easymock.samples.ExampleTest.voteAgainstRemoval":421,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":111,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":49,"org.easymock.tests2.UsageConstraintsTest.testNotNull":342,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":175,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":364,"org.easymock.tests2.UsageTest.defaultResetToNice":378,"org.easymock.samples.ExampleTest.voteAgainstRemovals":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":112,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":274,"org.easymock.tests.UsageVarargTest.differentLength":135,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":299,"org.easymock.tests2.CallbackTest.callback":297,"org.easymock.tests2.UsageConstraintsTest.equals":321,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":76,"org.easymock.tests.UsageTest.openCallCountByLastCall":210,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":317,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":178,"org.easymock.tests.UsageCallCountTest.tooFewCalls":216,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":20,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":229,"org.easymock.tests.UsageThrowableTest.throwCheckedException":172,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":75,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":125,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":21,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":19,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":304,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":238,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":358,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":386,"org.easymock.tests.ObjectMethodsTest.testHashCode":147,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":409,"org.easymock.tests2.NameTest.nameForNiceMock":390,"org.easymock.tests2.DependencyTest.testInterfaceMocking":411,"org.easymock.samples.ExampleTest.addDocument":422,"org.easymock.tests2.DelegateToTest.testStubDelegate":293,"org.easymock.tests2.AnswerTest.stubAnswer":385,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":153,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":428,"org.easymock.tests.UsageVarargTest.varargLongAccepted":137,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":109,"org.easymock.tests.UsageExpectAndReturnTest.floatType":261,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":277,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":14,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":54,"org.easymock.tests.UsageThrowableTest.noUpperLimit":169,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":257,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":288,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":336,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":318,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":396,"org.easymock.tests2.SerializationTest.test":316,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":438,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":260,"org.easymock.tests2.UsageConstraintsTest.testSame":324,"org.easymock.samples.SupportTest.addDocument":415,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":56,"org.easymock.tests.GenericTest.testPackageScope":6,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":104,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":287,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":84,"org.easymock.tests2.NameTest.nameForMock":388,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":271,"org.easymock.tests2.UsageStrictMockTest.differentMethods":314,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":263,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":202,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":145,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":94,"org.easymock.tests2.MockedExceptionTest.testRealException":366,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":225,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":114,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":113,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":312,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":177,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":240,"org.easymock.tests2.NameTest.nameForStrictMock":389,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":368,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":43,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":337,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":25,"org.easymock.tests2.UsageStrictMockTest.range":71,"org.easymock.tests2.UsageConstraintsTest.lessThan":344,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":432,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":283,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":108,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":346,"org.easymock.tests2.CaptureTest.testCaptureRightOne":401,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":433,"org.easymock.tests2.UsageConstraintsTest.testOr":325,"org.easymock.tests.UsageRangeTest.combination":91,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":41,"org.easymock.tests.UsageTest.wrongArguments":67,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":12,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":264,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":272,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":439,"org.easymock.tests.UsageVarargTest.varargShortAccepted":136,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":219,"org.easymock.tests2.UsageConstraintsTest.cmpTo":330,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":383,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":103,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":377,"org.easymock.tests2.CaptureTest.testCaptureFromStub":402,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":231,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":26,"org.easymock.tests.UsageTest.unexpectedCallWithArray":66,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":64,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":217,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":273,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":154,"org.easymock.tests2.UsageConstraintsTest.constraints":319,"org.easymock.samples.ExampleTest.addAndChangeDocument":425,"org.easymock.tests.UsageStrictMockTest.testVerify":157,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":426,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":152,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":96,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":397,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":160,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":13,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":265,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":161,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":258,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":130,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":351}}]

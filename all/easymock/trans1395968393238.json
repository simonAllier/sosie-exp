[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","position":"org.easymock.internal.DefaultClassInstantiator:41","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte)","position":"org.easymock.internal.RecordState:59","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","position":"org.easymock.internal.DefaultClassInstantiator:157","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","position":"org.easymock.EasyMock:2024","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","position":"org.easymock.internal.LastControl:39","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.io.DataOutputStream java.io.DataOutputStream = new java.io.DataOutputStream(java.io.ByteArrayOutputStream)","position":"org.easymock.internal.DefaultClassInstantiator:135","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:785","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.Invocation:148","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuilder.append(\", \")","position":"org.easymock.internal.ArgumentToString:91","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:244","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = org.easymock.internal.ExpectedInvocation.getMethod().getExceptionTypes()","position":"org.easymock.internal.RecordState:320","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:893","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","position":"org.easymock.Capture:135","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1421","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:358","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","position":"org.easymock.ConstructorArgs:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1569","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:176","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ObjectMethodsFilter:107","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>","name":"removeConditional","position":"org.easymock.internal.BridgeMethodResolver:358","type":"mutation","status":-2},{"failures":[0,1,2,3,4,5,6],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","position":"org.easymock.internal.ReflectionUtils:184","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:358","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)))","position":"org.easymock.internal.BridgeMethodResolver:359","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:333","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","position":"org.easymock.internal.LastControl:132","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:235","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1039","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"status":-2},{"failures":[7,8,9],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"bridgeMethod":"result"},"name":"replace","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:137","type":"CtInvocationImpl"},"status":-2},{"failures":[10,11],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:148","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:132","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:840","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:351","type":"CtTryImpl"},"status":-2},{"failures":[12],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","position":"org.easymock.Capture:82","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1433","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","position":"org.easymock.internal.DefaultClassInstantiator:140","type":"CtInvocationImpl"},"status":-2},{"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,12,89,10,11,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267],"variableMapping":{"this":"this","mocks":"mocks"},"name":"replace","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:323","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","position":"org.easymock.internal.EasyMockProperties:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.MocksBehavior:124","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"matching":"isThreadSafe"},"name":"replace","transplant":{"sourceCode":"return this.boolean","position":"org.easymock.internal.ErrorMessage:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this.boolean","position":"org.easymock.internal.MocksBehavior:189","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return net.sf.cglib.proxy.Enhancer","position":"org.easymock.internal.ClassProxyFactory:278","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:148","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MocksControl:225","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","position":"org.easymock.internal.DefaultClassInstantiator:196","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:582","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = (java.util.Set<java.lang.reflect.Method>) == null ? new java.lang.reflect.Method[0] : java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.MockBuilder:201","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:193","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:100","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"suid":"this"},"name":"replace","transplant":{"sourceCode":"return java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","position":"org.easymock.internal.DefaultClassInstantiator:160","type":"CtReturnImpl"},"status":-2},{"failures":[56,59,107,108,109,110,113,114,120,121,199,200,203,215,216,242,244,246,249,250],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"\" + (int)","position":"org.easymock.internal.Range:66","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:1051","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1726","type":"CtReturnImpl"},"status":-2},{"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,268,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,269,67,68,270,69,271,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,12,89,10,11,90,91,92,93,94,95,96,97,98,272,99,100,273,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,274,130,131,132,133,134,135,136,275,276,277,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,278,279,280,281,163,282,164,165,166,167,168,169,170,171,283,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,284,285,286,287,196,288,289,290,291,292,293,294,197,198,199,200,201,202,203,204,205,206,207,208,209,210,295,211,296,297,298,299,300,301,212,213,214,215,216,302,303,304,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,305,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,306,263,264,265,266,267],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:261","type":"CtThrowImpl"},"status":-2},{"failures":[34],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Any:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"status":-1},{"failures":[94,144,146,160,161,177,184,206,218,223,225,239,240],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float.valueOf(0))","position":"org.easymock.internal.RecordState:51","type":"CtInvocationImpl"},"status":-1},{"failures":[307],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1816","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","position":"org.easymock.internal.EasyMockProperties:89","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2485406702001842607L","position":"org.easymock.internal.matchers.LessOrEqual:26","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[279,308,309,241],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","position":"org.easymock.internal.RecordState:115","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","position":"org.easymock.internal.RecordState:220","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:200","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.this(java.lang.Class<T>, null)","position":"org.easymock.internal.MockBuilder:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:773","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{"org.easymock.internal.LastControl.threadToArgumentMatcherStack":"org.easymock.internal.LastControl.threadToArgumentMatcherStack"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","position":"org.easymock.internal.LastControl:61","type":"CtIfImpl"},"status":-2},{"failures":[310,311],"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","position":"org.easymock.internal.MockBuilder:178","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.ClassProxyFactory:196","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage()))","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"mutation","status":-2},{"failures":[],"variableMapping":{"result":"result","candidateMethods":"candidateMethods"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","position":"org.easymock.internal.BridgeMethodResolver:88","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:90","type":"CtAssignmentImpl"},"status":0},{"failures":[36],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1163","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:254","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:79","type":"CtForEachImpl"},"status":-2},{"failures":[31,35],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1234","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Or:40","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:81","type":"CtThrowImpl"},"status":-2},{"failures":[305,312,313],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1384","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:324","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:295","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1940","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.Result:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:56","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","position":"org.easymock.internal.EasyMockProperties:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ClassProxyFactory:118","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"cls"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:411","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:253","type":"CtLocalVariableImpl"},"status":0},{"failures":[44,65,116],"variableMapping":{"threadSafe":"value","state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","position":"org.easymock.internal.MocksControl:240","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","position":"org.easymock.internal.MocksControl:232","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new (\"<=\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int <= 0;\n    }\n}","position":"org.easymock.LogicalOperator:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String)","position":"org.easymock.internal.matchers.Find:37","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:90","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","name":"math","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"mutation","status":-2},{"failures":[314,315,316,317,199,245],"binaryOperator":"int > 0","name":"conditionalBoundary","position":"org.easymock.internal.ArgumentToString:47","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.addAll(java.util.Stack<org.easymock.IArgumentMatcher>.subList(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int), java.util.Stack<org.easymock.IArgumentMatcher>.size()))","position":"org.easymock.internal.LastControl:94","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"codegen.\" + (net.sf.cglib.core.DefaultNamingPolicy.getClassName(java.lang.String, java.lang.String, java.lang.Object, net.sf.cglib.core.Predicate))","position":"org.easymock.internal.ClassProxyFactory:149","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.ClassProxyFactory:216","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.LastControl:98","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","position":"org.easymock.internal.MethodSerializationWrapper:72","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Equals:44","type":"CtInvocationImpl"},"status":-2},{"failures":[318,319,320],"variableMapping":{"data":"data"},"name":"replace","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","position":"org.easymock.internal.DefaultClassInstantiator:136","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","position":"org.easymock.ConstructorArgs:54","type":"CtForImpl"},"status":-2},{"failures":[321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338],"binaryOperator":"java.lang.Class<?> != (java.lang.Object.java.lang.Object)","name":"negateConditional","position":"org.easymock.internal.Injector:81","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.CompareEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:1877","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1555","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","position":"org.easymock.internal.RecordState:134","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1191","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","position":"org.easymock.internal.RecordState:102","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-2},{"failures":[18],"variableMapping":{"value":"lastInvocationUsed","checkOrder":"lastInvocationUsed"},"name":"replace","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:147","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>)","position":"org.easymock.internal.ClassProxyFactory:140","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":167,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":67,"org.easymock.tests2.MockedExceptionTest.testRealException":75,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":201,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":331,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":198,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":236,"org.easymock.tests.UsageVarargTest.varargIntAccepted":260,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":212,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":6,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":28,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":17,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":297,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":338,"org.easymock.tests2.UsageConstraintsTest.testContains":40,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":307,"org.easymock.tests.UsageCallCountTest.tooManyCalls":277,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":287,"org.easymock.tests2.UsageConstraintsTest.testFind":32,"org.easymock.tests2.StubTest.stubWithReturnValue":19,"org.easymock.tests.UsageVarargTest.allKinds":267,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":81,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":220,"org.easymock.tests2.CaptureTest.testCaptureAll":77,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":177,"org.easymock.samples.ExampleTest.addAndChangeDocument":130,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":98,"org.easymock.tests.UsageVarargTest.varargCharAccepted":261,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":4,"org.easymock.tests2.CaptureTest.testCaptureFromStub":87,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":3,"org.easymock.tests.UsageVerifyTest.twoThrows":215,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":336,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":191,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":262,"org.easymock.tests2.DelegateToTest.testReturnException":20,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":0,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":116,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":44,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":55,"org.easymock.tests2.CaptureTest.testAnd":76,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":294,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":313,"org.easymock.tests.UsageStrictMockTest.testVerify":205,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":229,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":85,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":280,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":233,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":311,"org.easymock.tests2.UsageConstraintsTest.testMatches":43,"org.easymock.tests.MockClassControlTest.testToString":296,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":138,"org.easymock.tests2.UsageConstraintsTest.testNull":33,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":9,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":293,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":155,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":237,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":162,"org.easymock.tests.UsageThrowableTest.throwError":164,"org.easymock.tests2.UsageConstraintsTest.greaterThan":45,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":258,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":194,"org.easymock.tests2.StubTest.stub":18,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":289,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":196,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":329,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":182,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":190,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":327,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":47,"org.easymock.tests.UsageExpectAndReturnTest.object":152,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":161,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":266,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":60,"org.easymock.tests.UsageExpectAndThrowTest.object":231,"org.easymock.tests2.DelegateToTest.testWrongClass":22,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":11,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":186,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":316,"org.easymock.tests2.UsageTest.moreThanOneArgument":113,"org.easymock.tests.UsageVarargTest.varargByteAccepted":265,"org.easymock.tests.MockClassControlTest.testEquals":300,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":228,"org.easymock.samples.ExampleTest.voteAgainstRemoval":127,"org.easymock.tests.UsageTest.wrongArguments":246,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":140,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":170,"org.easymock.tests.UsageVarargTest.varargShortAccepted":263,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":304,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":332,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":232,"org.easymock.tests2.UsageTest.defaultResetToNice":119,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":317,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":314,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":74,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":181,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":90,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":337,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":310,"org.easymock.tests2.MockBuilderTest.testCreateMock":273,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":295,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":91,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":330,"org.easymock.tests2.SerializationTest.testAllMockedMethod":27,"org.easymock.tests2.NameTest.nameForMocksControl":110,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":284,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":288,"org.easymock.samples.ExampleTest.voteAgainstRemovals":124,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":54,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":279,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":254,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":193,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":283,"org.easymock.tests2.CaptureTest.testCapture1_2446744":80,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":123,"org.easymock.tests2.DelegateToTest.testStubDelegate":21,"org.easymock.tests.LimitationsTest.mockNativeMethod":195,"org.easymock.tests.UsageUnorderedTest.message":242,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":308,"org.easymock.samples.ExampleTest.answerVsDelegate":125,"org.easymock.samples.ExampleTest.voteForRemoval":126,"org.easymock.tests.UsageCallCountTest.tooFewCalls":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":151,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":14,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":136,"org.easymock.tests.UsageVerifyTest.twoReturns":216,"org.easymock.tests2.DependencyTest.testInterfaceMocking":97,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":146,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":230,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":185,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":1,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":96,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":36,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":204,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":217,"org.easymock.tests2.CaptureTest.testCaptureRightOne":86,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":148,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":133,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":218,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":285,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":72,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":66,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":253,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":286,"org.easymock.tests2.UsageConstraintsTest.cmpTo":39,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":131,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":153,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":318,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":104,"org.easymock.tests2.MockedExceptionTest.testMockedException":73,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":335,"org.easymock.tests.UsageThrowableTest.throwCheckedException":168,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":50,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":208,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":240,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":214,"org.easymock.samples.ExampleTest.voteForRemovals":129,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":166,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":173,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":42,"org.easymock.tests.ReplayStateInvalidUsageTest.times":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":187,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":281,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":65,"org.easymock.tests2.UsageTest.argumentsOrdered":121,"org.easymock.samples.ExampleTest.removeNonExistingDocument":274,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":243,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":16,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":147,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":137,"org.easymock.tests2.AnswerTest.answer":13,"org.easymock.tests.MockingTest.testNicePartialClassMocking":175,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":200,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":143,"org.easymock.tests2.UsageConstraintsTest.any":38,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":323,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":150,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":2,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":183,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":210,"org.easymock.tests.UsageExpectAndThrowTest.longType":224,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":71,"org.easymock.tests2.CallbackTest.callback":92,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":238,"org.easymock.tests2.NameTest.nameForMock":107,"org.easymock.tests.UsageTest.argumentsOrdered":250,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":31,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":41,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":160,"org.easymock.tests2.MockBuilderTest.testCreateMockString":102,"org.easymock.tests2.NameTest.nameForStrictMock":108,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":192,"org.easymock.tests2.CaptureTest.testCaptureNone":84,"org.easymock.tests2.SerializationTest.test":26,"org.easymock.tests.UsageExpectAndReturnTest.longType":145,"org.easymock.tests2.SerializationTest.testClass":25,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":82,"org.easymock.tests2.CaptureTest.testCaptureFirst":12,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":48,"org.easymock.tests2.UsageTest.niceToStrict":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":184,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":302,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":141,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":334,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":100,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":8,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":197,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":226,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":268,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":111,"org.easymock.tests2.UsageTest.strictResetToDefault":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":234,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":69,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":101,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":159,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":213,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":221,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":37,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":149,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":93,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":269,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":46,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":64,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":259,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":61,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":189,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":176,"org.easymock.tests2.UsageConstraintsTest.testOr":35,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":10,"org.easymock.tests2.DelegateToTest.testDelegate":23,"org.easymock.tests2.UsageConstraintsTest.testNotNull":51,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":57,"org.easymock.tests.MockClassControlTest.testHashCode":299,"org.easymock.tests2.CaptureTest.testCapture_2617107":78,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":322,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":292,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":154,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":171,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":178,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":326,"org.easymock.tests2.ThreadingTest.testThreadSafe":89,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":118,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":319,"org.easymock.tests.UsageThrowableTest.noUpperLimit":165,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":207,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":103,"org.easymock.tests.UsageExpectAndReturnTest.floatType":144,"org.easymock.tests2.UsageTest.wrongArguments":114,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":95,"org.easymock.tests2.UsageConstraintsTest.testSame":34,"org.easymock.tests2.UsageTest.resumeIfFailure":122,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":298,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":105,"org.easymock.tests.UsageOverloadedMethodTest.overloading":172,"org.easymock.tests.UsageRangeTest.combination":252,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":169,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":324,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":325,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":52,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":257,"org.easymock.tests.UsageTest.openCallCountByLastCall":247,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":227,"org.easymock.tests2.NameTest.nameForNiceMock":109,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":290,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":333,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":255,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":49,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":206,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":328,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":56,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":63,"org.easymock.tests2.CaptureTest.testPrimitive":79,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":156,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":235,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":219,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":179,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":68,"org.easymock.tests.UsageExpectAndThrowTest.floatType":223,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":62,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":70,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":157,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":276,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":132,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":321,"org.easymock.tests2.UsageStrictMockTest.differentMethods":59,"org.easymock.tests.UsageTest.exactCallCountByLastCall":251,"org.easymock.tests2.AnswerTest.stubAnswer":15,"org.easymock.tests2.CaptureTest.testCaptureLast":83,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":222,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":275,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":135,"org.easymock.tests.UsageStrictMockTest.range":202,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":248,"org.easymock.tests.UsageTest.unexpectedCallWithArray":245,"org.easymock.tests.MockingTest.testPartialClassMocking":174,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":158,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":120,"org.easymock.tests2.UsageConstraintsTest.constraints":30,"org.easymock.samples.ExampleTest.addDocument":128,"org.easymock.tests2.UsageConstraintsTest.lessThan":53,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":282,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":94,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":249,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":24,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":278,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":209,"org.easymock.tests.UsageVarargTest.varargLongAccepted":264,"org.easymock.tests.ObjectMethodsTest.testHashCode":303,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":320,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":270,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":271,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":199,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":239,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":315,"org.easymock.tests2.UsageStrictMockTest.range":58,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":106,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":139,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":241,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":309,"org.easymock.tests.UsageTest.moreThanOneArgument":244,"org.easymock.tests2.UsageTest.openCallCountByLastCall":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":180,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":301,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":272,"org.easymock.tests.UsageStrictMockTest.differentMethods":203,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":312,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":5,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":29,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":211,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":99,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":225,"org.easymock.tests.DefaultClassInstantiatorTest.object":305,"org.easymock.tests.UsageVarargTest.differentLength":306,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":7,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":142,"org.easymock.tests2.CaptureTest.testCapture2_2446744":88,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":188,"org.easymock.tests.GenericTest.testPackageScope":256}}]

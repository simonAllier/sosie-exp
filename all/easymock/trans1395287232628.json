[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"qualifier"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[18,19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[20,0,1,2,3,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,18,19,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,4,146,147,5,6,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,7,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,228,229,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,8,325,9,10,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,11,399,400,12,13,401,402,403,14,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,15,16,17,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","constructorArgs":"constructorArgs","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[106,108,373],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:182","sourceCode":"if (java.lang.reflect.Proxy.java.lang.reflect.Proxy.isProxyClass(V.getClass())) {\n    return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]));\n} ","type":"CtIfImpl"},"failures":[128,4,147,5,178,7,187,193,194,208,292,295,332,336,390,398,11,400,12,14,404,405,408,409,453,454,15,16,17,461],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[385],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[72,479,480,481,482,483,142],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:827","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:439","failures":[276,278,279],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"position":"org.easymock.internal.LastControl:70","failures":[0,1,2,3,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,90,105,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,133,134,4,215,217,251,252,253,254,255,274,284,285,286,287,288,289,290,337,338,390,398,11,418],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionTarget:56","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"targetField":"targetField"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[55],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[251],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:346","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[339,342,343,371],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[484,91,228,228,229,229],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[65,69,71,73,76,82,83,84,85,86,87,90,94,95,96,104,108,133,134,141,4,147,5,151,154,164,170,219,220,221,222,223,224,225,231,234,235,237,238,240,251,252,253,254,255,280,281,282,283,286,337,338,358,11,400,12,433,434,435,436,437,438,441,442,444,445,446,448,449,450,451,452,456,457,458,459,465,466,468],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"returnedType"}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[],"status":0,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[37],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[79,80,81],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:223","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"failures":[301,305,306,308,311,9,16,17],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[0,1,2,3,34,35,36,37,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,69,70,76,78,79,80,81,82,83,84,85,86,87,90,93,95,99,100,101,102,103,18,19,104,105,107,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,133,135,136,137,138,139,140,141,144,145,4,146,147,5,6,185,186,7,187,188,189,190,191,192,193,194,195,196,197,200,201,202,215,217,218,220,221,224,225,235,236,237,238,239,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255,261,262,263,264,265,267,268,270,271,272,273,274,276,277,280,281,282,283,284,285,286,287,288,289,290,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,318,8,325,9,10,326,327,337,338,348,358,390,391,392,393,394,395,396,397,398,11,399,400,12,13,401,402,403,14,404,405,406,407,408,409,410,414,415,416,417,418,419,420,421,422,423,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,454,15,16,17,456,457,458,459,460,465,466,468,477],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"failures":[79,80,81,485],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[40,45,55,60],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[108],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[486,487,488],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[4,5,6,7,11,12,13,14,455,15,16,17,477],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[44,50,62,489],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[36,44,50,62,489],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[147,187,193,194,490,390,398,400,404,405,408,409,16,17,478],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,455,15,16,17],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"this.org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[21,22,23,24,26,27,30,31,32,34,35,37,39,40,41,42,43,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,76,83,86,95,108,111,113,114,115,116,117,118,119,120,121,122,124,125,135,136,144,145,4,146,147,5,6,186,188,189,193,194,201,218,231,234,235,236,237,238,240,242,243,244,246,247,248,249,250,251,252,253,254,255,261,263,264,265,267,268,270,271,272,273,274,280,284,286,287,288,289,290,10,327,330,337,338,390,396,397,11,399,400,12,13,408,409,418,453,16],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"control"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":37,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":403,"org.easymock.tests2.UsageTest.argumentsOrdered":194,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":31,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":373,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":189,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":230,"org.easymock.tests2.DelegateToTest.testReturnException":107,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":415,"org.easymock.tests.MockingTest.testPartialClassMocking":465,"org.easymock.tests.MockClassControlTest.testToString":319,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":20,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":257,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":158,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":154,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":297,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":134,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":479,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":44,"org.easymock.tests2.UsageTest.wrongArguments":187,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":286,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":184,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":422,"org.easymock.samples.ExampleTest.answerVsDelegate":236,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":334,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":470,"org.easymock.tests2.UsageConstraintsTest.testNull":40,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":85,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":30,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":324,"org.easymock.tests2.CaptureTest.testPrimitive":115,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":290,"org.easymock.tests.UsageTest.moreThanOneArgument":14,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":316,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":84,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":458,"org.easymock.tests.UsageTest.argumentsOrdered":409,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":339,"org.easymock.tests.UsageVarargTest.varargIntAccepted":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":378,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":251,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":483,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":63,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":213,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":365,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":255,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":178,"org.easymock.tests.ReplayStateInvalidUsageTest.times":352,"org.easymock.tests2.DependencyTest.testClassMocking":131,"org.easymock.tests2.AnswerTest.answer":197,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":380,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":102,"org.easymock.tests2.CaptureTest.testAnd":112,"org.easymock.tests2.UsageTest.strictResetToDefault":186,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":67,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":93,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":457,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":25,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":282,"org.easymock.tests2.DelegateToTest.testDelegate":111,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":343,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":312,"org.easymock.tests.LimitationsTest.mockFinalMethod":359,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":418,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":395,"org.easymock.tests2.DependencyTest.testClassMockingSupport":132,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":453,"org.easymock.tests2.CaptureTest.testCapture1_2446744":116,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":89,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":310,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":100,"org.easymock.tests.UsageThrowableTest.throwError":243,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":346,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":333,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":214,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":172,"org.easymock.samples.PartialClassMockTest.testGetArea":231,"org.easymock.tests.MockingTest.testInterfaceMocking":467,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":347,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":252,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":361,"org.easymock.tests2.UsageTest.niceToStrict":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":159,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":363,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":69,"org.easymock.tests2.MockBuilderTest.testCreateMock":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":167,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":181,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":306,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":26,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":389,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":8,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":420,"org.easymock.tests.UsageOverloadedMethodTest.overloading":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":163,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":475,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":50,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":444,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":260,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":49,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":121,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":266,"org.easymock.tests2.EasyMockSupportClassTest.testAll":151,"org.easymock.tests.MockClassControlTest.testEquals":323,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":277,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":314,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":393,"org.easymock.tests2.CaptureTest.testCaptureAll":113,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":101,"org.easymock.tests.MockNameTest.defaultName":461,"org.easymock.tests2.UsageConstraintsTest.testMatches":51,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":459,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":344,"org.easymock.samples.ExampleTest.voteForRemovals":240,"org.easymock.tests.UsageVarargTest.allKinds":274,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":15,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":394,"org.easymock.samples.BasicClassMockTest.testPrintContent":227,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":249,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":144,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":419,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":110,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":210,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":431,"org.easymock.tests2.UsageConstraintsTest.greaterThan":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":152,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":281,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":96,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":432,"org.easymock.samples.ExampleTest.voteForRemoval":237,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":97,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":18,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":335,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":88,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":402,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":185,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":370,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":23,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":149,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":414,"org.easymock.tests2.CaptureTest.testCaptureFirst":125,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":369,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":24,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":196,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":478,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":440,"org.easymock.tests2.CaptureTest.testCapture2_2446744":124,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":104,"org.easymock.tests2.UsageTest.moreThanOneArgument":7,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":381,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":273,"org.easymock.tests.GenericTest.testBridgedEquals":279,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":329,"org.easymock.tests.UsageExpectAndReturnTest.longType":436,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":391,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":21,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":315,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":58,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":259,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":313,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":456,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":412,"org.easymock.tests.UsageCallCountTest.tooManyCalls":330,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":168,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":441,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":183,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":302,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":248,"org.easymock.tests.MockingTest.testNiceClassMocking":471,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":220,"org.easymock.tests.MockingTest.testClassMocking":463,"org.easymock.tests2.UsageConstraintsTest.testContains":48,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":325,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":139,"org.easymock.tests2.UsageConstraintsTest.testFind":39,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":262,"org.easymock.tests.MockTypeTest.fromEasyMockClass":332,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":396,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":217,"org.easymock.tests.UsageExpectAndReturnTest.object":443,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":90,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":182,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":29,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":480,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":268,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":294,"org.easymock.tests.UsageTest.exactCallCountByLastCall":410,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":368,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":256,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":340,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":142,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":449,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":263,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":474,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":204,"org.easymock.tests.MockClassControlTest.testHashCode":322,"org.easymock.tests2.EasyMockSupportTest.testVerify":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":161,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":341,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":472,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":388,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":99,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":130,"org.easymock.tests.UsageVarargTest.varargCharAccepted":267,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":424,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":145,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":386,"org.easymock.tests2.UsageTest.openCallCountByLastCall":190,"org.easymock.tests.DefaultClassInstantiatorTest.object":425,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":32,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":387,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":292,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":490,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":162,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":304,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":246,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":176,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":203,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":94,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":321,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":303,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":450,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":170,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":320,"org.easymock.tests2.UsageTest.resumeIfFailure":195,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":331,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":417,"org.easymock.tests2.StubTest.stubWithReturnValue":136,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":72,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":442,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":59,"org.easymock.tests2.SerializationTest.testAllMockedMethod":81,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":379,"org.easymock.samples.SupportTest.voteForRemovals":234,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":275,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":206,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":309,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":485,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":385,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":198,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":258,"org.easymock.tests.UsageExpectAndThrowTest.object":307,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":56,"org.easymock.tests2.DelegateToTest.testWrongClass":109,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":337,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":338,"org.easymock.tests.UsageStrictMockTest.range":400,"org.easymock.samples.ConstructorCalledMockTest.testTax":228,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":128,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":28,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":219,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":308,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":71,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":148,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":421,"org.easymock.tests2.CaptureTest.testCaptureNone":120,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":362,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":487,"org.easymock.tests.UsageUnorderedTest.message":390,"org.easymock.tests.UsageVerifyTest.twoReturns":17,"org.easymock.tests.UsageVarargTest.varargByteAccepted":272,"org.easymock.tests2.ThreadingTest.testThreadSafe":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":165,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":327,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":226,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":295,"org.easymock.tests2.CaptureTest.testCapture_2617107":114,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":455,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":383,"org.easymock.tests2.UsageConstraintsTest.any":46,"org.easymock.tests2.StubTest.stub":135,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":351,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":413,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":416,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":384,"org.easymock.tests.UsageExpectAndThrowTest.longType":300,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":429,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":350,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":146,"org.easymock.tests2.SerializationTest.testClass":79,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":208,"org.easymock.tests.LimitationsTest.mockNativeMethod":358,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":452,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":278,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":175,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":6,"org.easymock.tests2.NameTest.nameForMocksControl":3,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":177,"org.easymock.tests2.MockedExceptionTest.testMockedException":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":153,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":407,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":468,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":216,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":301,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":82,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":73,"org.easymock.tests.MockingTest.testNicePartialClassMocking":466,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":87,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":173,"org.easymock.tests2.CaptureTest.testCaptureLast":119,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":454,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":43,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":225,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":57,"org.easymock.tests.MockingTest.testTwoMocks":464,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":433,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":305,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":193,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":61,"org.easymock.samples.ExampleTest.removeNonExistingDocument":241,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":180,"org.easymock.tests.UsageStrictMockTest.differentMethods":12,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":348,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":205,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":488,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":427,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":19,"org.easymock.tests2.MockBuilderTest.testCreateMockString":78,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":155,"org.easymock.tests.UsageExpectAndThrowTest.floatType":299,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":150,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":200,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":143,"org.easymock.tests.UsageVerifyTest.twoThrows":16,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":473,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":164,"org.easymock.samples.ExampleTest.voteAgainstRemoval":238,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":374,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":95,"org.easymock.tests.LimitationsTest.privateConstructor":357,"org.easymock.tests2.UsageConstraintsTest.testNotNull":60,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":137,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":250,"org.easymock.tests2.UsageTest.defaultResetToNice":192,"org.easymock.samples.ExampleTest.voteAgainstRemovals":235,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":375,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":174,"org.easymock.tests.UsageVarargTest.differentLength":269,"org.easymock.tests2.CallbackTest.callback":218,"org.easymock.tests2.UsageConstraintsTest.equals":38,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":91,"org.easymock.tests.UsageTest.openCallCountByLastCall":406,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":34,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":288,"org.easymock.tests.UsageCallCountTest.tooFewCalls":10,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":222,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":423,"org.easymock.tests.UsageThrowableTest.throwCheckedException":247,"org.easymock.tests.MockingTest.testStrictClassMocking":462,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":224,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":285,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":179,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":221,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":353,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":223,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":202,"org.easymock.tests2.CompareToTest.testGreateOrEqual":489,"org.easymock.tests.ObjectMethodsTest.testHashCode":293,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":482,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":105,"org.easymock.tests2.NameTest.nameForNiceMock":2,"org.easymock.tests2.DependencyTest.testInterfaceMocking":133,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":481,"org.easymock.samples.ExampleTest.addDocument":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":166,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":171,"org.easymock.tests2.DelegateToTest.testStubDelegate":108,"org.easymock.tests2.AnswerTest.stubAnswer":201,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":11,"org.easymock.tests.UsageVarargTest.varargLongAccepted":271,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":13,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":372,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":451,"org.easymock.tests.UsageExpectAndReturnTest.floatType":435,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":141,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":229,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":476,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":54,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":212,"org.easymock.tests.UsageThrowableTest.noUpperLimit":244,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":35,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":126,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":117,"org.easymock.tests2.SerializationTest.test":80,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":426,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":434,"org.easymock.tests2.UsageConstraintsTest.testSame":41,"org.easymock.samples.SupportTest.addDocument":233,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":156,"org.easymock.tests.GenericTest.testPackageScope":276,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":342,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":367,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":211,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":469,"org.easymock.tests2.NameTest.nameForMock":0,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":445,"org.easymock.tests2.UsageStrictMockTest.differentMethods":5,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":77,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":92,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":437,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":311,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":291,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":283,"org.easymock.tests2.MockedExceptionTest.testRealException":140,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":336,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":377,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":4,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":376,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":287,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":355,"org.easymock.tests2.NameTest.nameForStrictMock":1,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":68,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":215,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":86,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":127,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":428,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":55,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":65,"org.easymock.tests2.UsageStrictMockTest.range":147,"org.easymock.tests2.UsageConstraintsTest.lessThan":62,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":207,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":160,"org.easymock.tests2.CaptureTest.testCaptureRightOne":122,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":486,"org.easymock.tests2.UsageConstraintsTest.testOr":42,"org.easymock.tests.UsageRangeTest.combination":280,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":83,"org.easymock.tests.UsageTest.wrongArguments":405,"org.easymock.tests2.MockBuilderTest.testWithConstructor":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":157,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":318,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":438,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":364,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":430,"org.easymock.tests.UsageVarargTest.varargShortAccepted":270,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":328,"org.easymock.tests2.UsageConstraintsTest.cmpTo":47,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":199,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":366,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":191,"org.easymock.tests2.CaptureTest.testCaptureFromStub":123,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":345,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":66,"org.easymock.tests.UsageTest.unexpectedCallWithArray":404,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":398,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":326,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":484,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":447,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":399,"org.easymock.tests2.UsageConstraintsTest.constraints":36,"org.easymock.samples.ExampleTest.addAndChangeDocument":242,"org.easymock.tests.UsageStrictMockTest.testVerify":401,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":232,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":397,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":392,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":118,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":253,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":439,"org.easymock.tests.LimitationsTest.abstractClass":356,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":477,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":27,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":264}}]

[{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[4,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[10,201,202,203,204,205,206,207,93,208],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:192","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[209],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:216","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[4,0,210,211,1,2,212,213,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,214,215,216,217,218,219,220,23,24,25,26,27,28,29,30,31,32,221,33,34,35,36,37,38,39,40,41,42,43,44,222,45,46,47,48,223,49,50,51,52,54,56,57,224,58,59,225,226,60,61,62,63,227,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,228,229,80,230,231,232,81,233,234,235,236,82,83,84,237,85,86,87,88,89,90,238,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,239,240,240,241,241,242,117,118,119,120,121,122,123,124,243,244,245,126,127,128,129,130,131,246,247,248,249,250,132,133,134,209,251,252,253,254,135,136,137,138,139,255,256,257,140,141,142,143,258,259,260,261,262,263,144,145,264,265,266,267,146,268,269,270,271,148,149,272,273,150,151,274,152,153,275,276,277,278,279,154,155,280,156,281,282,283,284,285,286,287,288,289,290,291,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,178,179,180,312,181,182,313,314,183,184,315,316,317,318,319,320,185,186,187,188,189,190,191,192,193,194,195,196,321,197,198,199,200,322,323,324,325,326,327,328],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[7,329,137,274,152],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[228,229,80,230,82,88,102,131,246,247,248,249,250,134,266,272,273,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,178,182,189,193,194,196],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[330],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[331],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[10,20,21,332,333,50,206,334,207,53,335,55,93,208,336,337,112,338,116,240,240,241,241,330,280],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[339],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"position":"org.easymock.internal.MockBuilder:229","failures":[20,49,54,111,338],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[39,86,107],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[340,341,342],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[17,19,20,21,22,49,50,51,52,54,81,93,94,95,96,97,98,99,100,103,105,106,108,116,127,144,197,198,199],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[4,0,210,211,1,2,212,213,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,214,215,216,217,218,219,220,23,24,25,26,27,28,29,30,31,32,221,33,34,35,36,37,38,39,40,41,42,43,44,222,45,46,47,48,223,49,50,343,51,52,53,54,55,56,57,224,58,59,225,226,60,61,62,63,227,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,228,229,80,230,231,232,81,233,234,235,236,344,345,346,82,83,84,237,85,86,87,88,89,90,238,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,347,109,110,111,112,113,114,115,116,239,240,240,241,241,242,117,118,119,120,121,122,123,124,243,244,245,126,127,128,129,130,131,246,247,248,249,250,132,133,134,209,251,252,253,254,135,136,137,138,139,255,348,349,350,351,256,257,140,141,142,143,258,259,260,261,262,263,144,145,264,265,266,267,146,147,268,269,270,271,148,149,272,273,150,151,274,152,153,275,276,277,278,279,352,353,354,355,154,155,280,156,281,282,283,284,285,286,287,288,289,290,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,178,179,180,312,181,182,313,314,183,184,315,316,317,318,319,320,185,186,187,188,189,190,191,192,193,194,195,196,321,197,198,199,200,323,324,325,326,356,327,328],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[10,12,19,20,21,22,223,49,50,343,51,52,53,54,55,80,93,94,95,96,97,99,100,103,104,106,107,108,347,109,110,111,112,113,116,240,240,241,241,244,245,256,144,154,155,280,321,197,198,199,357],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[358,359,360,50,111,112],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:40","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[205],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[4,211,1,2,212,213,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,214,215,216,217,218,219,220,23,24,25,26,27,28,29,30,31,32,221,33,34,35,36,37,38,39,40,41,42,43,44,222,45,46,47,48,49,50,51,52,54,56,57,224,58,59,225,226,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,232,81,233,235,82,83,84,237,85,86,87,88,89,90,238,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,239,242,117,118,119,120,121,122,123,124,243,244,245,126,127,128,129,130,249,132,133,134,252,253,254,135,136,137,138,139,255,256,140,141,142,143,144,145,265,266,146,148,149,272,273,150,151,274,152,154,155,156,281,282,283,284,285,286,287,288,289,290,291,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,178,179,312,181,182,313,314,183,315,316,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,323,324,325,326,327,328],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[86],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[25,26,27,28,29,30,31,32,221,33,42,43,46,47,56,57,224,58,63,227],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[212,6,7,8,216,25,39,49,53,54,55,68,72,73,76,82,237,85,86,90,238,91,92,104,111,113,252,254,136,137,138,140,361,362,274,152,285,177,363,364,178,180,312,313,314,183,356,327,328],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":26,"org.easymock.tests2.UsageTest.argumentsOrdered":238,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":178,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":77,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":248,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":86,"org.easymock.tests2.StubTest.stubWithReturnValue":102,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":206,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":239,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":45,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":166,"org.easymock.tests2.SerializationTest.testAllMockedMethod":12,"org.easymock.tests2.DelegateToTest.testReturnException":232,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":246,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":209,"org.easymock.tests.MockingTest.testPartialClassMocking":197,"org.easymock.samples.SupportTest.voteForRemovals":117,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":330,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":268,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":338,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":304,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":292,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":251,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":20,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":0,"org.easymock.tests.UsageExpectAndThrowTest.object":302,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":43,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":115,"org.easymock.tests2.DelegateToTest.testWrongClass":233,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":201,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":185,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":186,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":32,"org.easymock.tests2.UsageTest.wrongArguments":237,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":148,"org.easymock.samples.ConstructorCalledMockTest.testTax":240,"org.easymock.tests.UsageStrictMockTest.range":137,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":350,"org.easymock.samples.ExampleTest.answerVsDelegate":120,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":74,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":94,"org.easymock.tests2.UsageConstraintsTest.testNull":28,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":303,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":106,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":76,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":51,"org.easymock.tests2.CaptureTest.testPrimitive":58,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":150,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":313,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":311,"org.easymock.tests.UsageTest.moreThanOneArgument":179,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":349,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":105,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":276,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":271,"org.easymock.tests2.CaptureTest.testCaptureNone":61,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":340,"org.easymock.tests.UsageUnorderedTest.message":177,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":363,"org.easymock.tests.UsageVerifyTest.twoReturns":152,"org.easymock.tests.UsageVarargTest.varargByteAccepted":288,"org.easymock.tests2.ThreadingTest.testThreadSafe":14,"org.easymock.tests.UsageTest.argumentsOrdered":314,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":184,"org.easymock.tests.UsageVarargTest.varargIntAccepted":282,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":326,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":244,"org.easymock.tests2.CaptureTest.testCapture_2617107":224,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":126,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":223,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":273,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":343,"org.easymock.tests2.UsageConstraintsTest.any":33,"org.easymock.tests2.StubTest.stub":101,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":263,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":130,"org.easymock.tests.UsageExpectAndThrowTest.longType":295,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":247,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":6,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":66,"org.easymock.tests2.SerializationTest.testClass":10,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":13,"org.easymock.tests.LimitationsTest.mockNativeMethod":144,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":280,"org.easymock.tests2.AnswerTest.answer":4,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":176,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":221,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":346,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":359,"org.easymock.tests2.CaptureTest.testAnd":56,"org.easymock.tests2.UsageTest.strictResetToDefault":83,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":333,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":9,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":110,"org.easymock.tests2.NameTest.nameForMocksControl":220,"org.easymock.tests2.MockedExceptionTest.testMockedException":229,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":275,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":71,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":142,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":182,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":318,"org.easymock.tests2.DelegateToTest.testDelegate":235,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":296,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":199,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":103,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":52,"org.easymock.tests.MockingTest.testNicePartialClassMocking":198,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":307,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":108,"org.easymock.tests2.CaptureTest.testCaptureLast":60,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":249,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":320,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":100,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":355,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":44,"org.easymock.tests.MockingTest.testTwoMocks":321,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":319,"org.easymock.tests2.CaptureTest.testCapture1_2446744":59,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":157,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":305,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":344,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":300,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":90,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":47,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":342,"org.easymock.tests.UsageThrowableTest.throwError":187,"org.easymock.samples.ExampleTest.removeNonExistingDocument":125,"org.easymock.tests.UsageStrictMockTest.differentMethods":138,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":341,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":16,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":364,"org.easymock.tests2.MockBuilderTest.testCreateMockString":55,"org.easymock.tests.UsageExpectAndThrowTest.floatType":294,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":278,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":39,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":211,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":336,"org.easymock.tests.UsageVerifyTest.twoThrows":274,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":21,"org.easymock.samples.PartialClassMockTest.testGetArea":116,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":127,"org.easymock.samples.ExampleTest.voteAgainstRemoval":122,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":270,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":269,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":112,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":293,"org.easymock.tests2.UsageTest.niceToStrict":85,"org.easymock.tests2.UsageConstraintsTest.testNotNull":46,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":228,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":194,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":50,"org.easymock.tests2.UsageTest.defaultResetToNice":89,"org.easymock.tests2.MockBuilderTest.testCreateMock":53,"org.easymock.samples.ExampleTest.voteAgainstRemovals":119,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":172,"org.easymock.tests.UsageVarargTest.differentLength":285,"org.easymock.tests2.CallbackTest.callback":216,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":337,"org.easymock.tests.UsageTest.openCallCountByLastCall":181,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":301,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":72,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":23,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":260,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":200,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":348,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":272,"org.easymock.tests.UsageCallCountTest.tooFewCalls":324,"org.easymock.tests.UsageOverloadedMethodTest.overloading":133,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":266,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":37,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":97,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":132,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":168,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":36,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":62,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":351,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":339,"org.easymock.tests.UsageThrowableTest.throwCheckedException":191,"org.easymock.tests2.EasyMockSupportClassTest.testAll":19,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":155,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":309,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":358,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":353,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":345,"org.easymock.tests2.CaptureTest.testCaptureAll":57,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":196,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":99,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":96,"org.easymock.tests2.UsageConstraintsTest.testMatches":38,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":98,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":2,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":277,"org.easymock.samples.ExampleTest.voteForRemovals":124,"org.easymock.tests2.NameTest.nameForNiceMock":219,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":18,"org.easymock.tests.UsageVarargTest.allKinds":290,"org.easymock.tests2.DependencyTest.testInterfaceMocking":114,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":151,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":203,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":354,"org.easymock.samples.BasicClassMockTest.testPrintContent":245,"org.easymock.samples.ExampleTest.addDocument":123,"org.easymock.tests2.DelegateToTest.testStubDelegate":81,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":193,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":212,"org.easymock.tests2.AnswerTest.stubAnswer":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":250,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":234,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":135,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":205,"org.easymock.tests2.UsageConstraintsTest.greaterThan":40,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":334,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":141,"org.easymock.tests.UsageVarargTest.varargLongAccepted":287,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":113,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":139,"org.easymock.samples.ExampleTest.voteForRemoval":121,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":15,"org.easymock.tests.UsageExpectAndReturnTest.floatType":159,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":175,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":347,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":93,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":241,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":267,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":41,"org.easymock.tests.UsageThrowableTest.noUpperLimit":188,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":256,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":82,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":24,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":225,"org.easymock.tests2.SerializationTest.test":11,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":207,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":331,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":69,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":189,"org.easymock.tests2.UsageConstraintsTest.testSame":29,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":158,"org.easymock.samples.SupportTest.addDocument":242,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":131,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":231,"org.easymock.tests2.CaptureTest.testCaptureFirst":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":3,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":70,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":92,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":147,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":164,"org.easymock.tests.GenericTest.testPackageScope":154,"org.easymock.tests2.UsageTest.moreThanOneArgument":84,"org.easymock.tests2.CaptureTest.testCapture2_2446744":64,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":17,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":317,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":54,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":289,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":327,"org.easymock.tests2.NameTest.nameForMock":217,"org.easymock.tests.UsageExpectAndReturnTest.longType":160,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":279,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":67,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":310,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":169,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":257,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":222,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":335,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":308,"org.easymock.tests2.UsageStrictMockTest.differentMethods":8,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":262,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":153,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":161,"org.easymock.tests.UsageCallCountTest.tooManyCalls":328,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":306,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":143,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":323,"org.easymock.tests2.MockedExceptionTest.testRealException":230,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":165,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":297,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":5,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":192,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":149,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":95,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":360,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":322,"org.easymock.tests2.NameTest.nameForStrictMock":218,"org.easymock.tests2.UsageConstraintsTest.testContains":35,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":80,"org.easymock.tests2.UsageConstraintsTest.testFind":27,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":134,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":214,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":107,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":252,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":215,"org.easymock.tests.UsageExpectAndReturnTest.object":167,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":42,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":109,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":49,"org.easymock.tests2.UsageStrictMockTest.range":7,"org.easymock.tests2.UsageConstraintsTest.lessThan":48,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":75,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":284,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":202,"org.easymock.tests.UsageTest.exactCallCountByLastCall":183,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":204,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":68,"org.easymock.tests2.CaptureTest.testCaptureRightOne":63,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":315,"org.easymock.tests2.UsageConstraintsTest.testOr":30,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":208,"org.easymock.tests.UsageRangeTest.combination":140,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":104,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":156,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":173,"org.easymock.tests.UsageTest.wrongArguments":312,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":265,"org.easymock.tests2.MockBuilderTest.testWithConstructor":332,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":357,"org.easymock.tests2.EasyMockSupportTest.testVerify":79,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":162,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":170,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":316,"org.easymock.tests.UsageVarargTest.varargShortAccepted":286,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":259,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":145,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":361,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":356,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":236,"org.easymock.tests2.UsageConstraintsTest.cmpTo":34,"org.easymock.tests.UsageVarargTest.varargCharAccepted":283,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":210,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":213,"org.easymock.tests2.UsageTest.openCallCountByLastCall":87,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":88,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":78,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":258,"org.easymock.tests2.CaptureTest.testCaptureFromStub":227,"org.easymock.tests.UsageTest.unexpectedCallWithArray":180,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":291,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":362,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":299,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":254,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":190,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":325,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":171,"org.easymock.tests2.UsageConstraintsTest.constraints":25,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":111,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":136,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":298,"org.easymock.samples.ExampleTest.addAndChangeDocument":243,"org.easymock.tests.UsageStrictMockTest.testVerify":255,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":174,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":261,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":118,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":22,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":352,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":226,"org.easymock.tests2.UsageTest.resumeIfFailure":91,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":128,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":163,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":129,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":146,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":329,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":281,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":73}}]

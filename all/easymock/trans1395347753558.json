[{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return java.lang.Object == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:60","failures":[1,2,3,4,5,6,7,8,9,10,11],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1646","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[28,29,30,31,32],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,29,89,30,90,91,0,92,93,94,95,96,97,98,99,100,101,102,31,103,104,105,106,32,107,108,109,110,111,112,113,114,115,116,117,14,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,9,136,137,138,10,139,140,141,142,143,144,145,145,146,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,16,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,19,20,23,24,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,27,269,270,271,272,273],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:43","sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[274],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[33,34,35,36,37,38,39,275,1,40,276,2,277,41,278,42,3,43,279,280,44,5,281,45,46,47,48,49,50,51,52,53,54,55,56,282,57,58,283,59,60,61,62,63,64,284,285,65,286,287,288,66,67,68,289,290,69,6,291,292,293,294,295,296,70,297,298,299,300,301,302,71,72,73,74,75,76,303,304,77,305,78,79,306,307,308,309,310,80,81,82,311,83,312,84,85,86,313,314,87,88,315,29,89,30,90,316,91,0,92,93,94,95,317,96,97,98,99,100,101,102,31,103,104,105,106,318,32,107,108,109,110,319,111,320,321,322,112,323,324,113,325,326,327,328,329,330,331,332,333,114,334,335,336,337,338,115,339,340,341,342,116,117,14,118,119,120,121,122,123,343,124,125,344,345,126,127,128,129,130,131,132,346,347,348,349,350,351,352,353,354,133,355,356,357,358,359,360,134,135,9,136,137,138,10,139,140,141,142,143,144,361,362,363,364,365,145,145,146,146,366,147,367,368,148,149,150,151,152,369,153,370,154,371,372,373,374,155,375,376,377,378,379,380,156,157,158,159,160,161,162,381,382,383,384,385,386,387,388,163,389,164,165,390,166,391,167,168,169,170,171,172,274,173,392,174,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,175,410,411,412,413,414,176,415,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,416,417,418,208,209,419,210,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,211,436,437,438,15,16,439,212,213,440,441,442,443,444,445,446,447,448,449,450,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,451,234,235,236,237,238,17,18,19,20,21,22,23,24,239,240,241,242,243,244,245,246,247,452,453,248,454,249,250,251,252,253,254,255,256,257,258,259,260,261,262,455,456,457,458,459,460,263,264,265,461,462,463,464,465,466,467,468,469,266,267,268,27,269,270,271,272,273,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"equalsMethod"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[488,95,100,109],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[489,490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[91],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[0,92,317,96,104,105,107,108],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:93","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[33,34,35,36,37,38,39,275,40,276,277,41,278,42,43,491,279,280,44,281,45,46,47,48,49,50,51,52,53,54,55,56,282,492,57,58,283,59,60,61,62,63,64,284,285,65,286,287,288,66,67,68,289,290,69,6,292,293,294,295,296,70,297,298,299,300,301,302,71,72,73,74,75,76,303,304,77,305,78,79,306,307,493,494,308,309,310,80,81,82,311,83,312,84,85,86,313,314,87,88,315,29,89,30,90,316,91,0,92,93,94,95,317,96,97,98,99,100,101,102,31,103,104,105,106,318,32,107,108,109,110,319,111,320,321,322,112,323,324,113,325,326,327,328,329,330,331,332,333,114,334,335,336,337,338,115,339,340,341,342,116,117,14,495,118,119,120,121,122,123,343,124,125,344,345,126,127,128,129,130,131,132,346,347,348,349,350,351,352,353,354,133,355,356,357,358,359,360,134,135,9,136,496,137,138,10,11,139,140,141,142,143,144,361,362,363,364,365,145,146,366,147,367,368,148,149,150,151,152,369,153,370,154,371,372,373,374,155,375,376,377,378,379,380,156,157,158,159,160,161,162,381,382,383,384,385,386,387,388,163,389,164,165,390,166,391,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,167,168,169,170,171,172,274,173,392,174,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,175,410,411,412,413,414,176,415,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,416,417,418,208,209,419,210,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,211,436,437,438,15,16,439,212,213,440,441,443,444,445,446,447,448,450,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,451,234,235,236,237,238,17,18,19,20,21,22,23,24,239,240,241,242,243,244,245,246,247,452,453,248,454,249,250,251,252,253,254,255,256,257,258,259,260,261,262,455,456,457,458,459,460,263,264,265,461,462,463,464,465,466,467,468,469,266,267,268,27,269,270,271,272,273,470,471,472,473,474,475,476,477,478,479,480,481,482,519,520,483,484,485,486,487],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:593","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if (org.easymock.ConstructorArgs == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":90,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":237,"org.easymock.tests2.UsageTest.argumentsOrdered":314,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":55,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":404,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":312,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":366,"org.easymock.tests2.DelegateToTest.testReturnException":72,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":255,"org.easymock.tests.MockingTest.testPartialClassMocking":208,"org.easymock.tests.MockClassControlTest.testToString":383,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":361,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":264,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":412,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":328,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":180,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":113,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":117,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":518,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":95,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":243,"org.easymock.tests2.UsageTest.wrongArguments":311,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":360,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":463,"org.easymock.samples.ExampleTest.answerVsDelegate":150,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":485,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":421,"org.easymock.tests2.UsageConstraintsTest.testNull":0,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":62,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":388,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":54,"org.easymock.tests2.CaptureTest.testPrimitive":124,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":247,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":199,"org.easymock.tests.UsageTest.moreThanOneArgument":238,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":61,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":160,"org.easymock.tests.UsageTest.argumentsOrdered":22,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":249,"org.easymock.tests.UsageVarargTest.varargIntAccepted":472,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":409,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":167,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":275,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":494,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":301,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":396,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":171,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":502,"org.easymock.tests.ReplayStateInvalidUsageTest.times":431,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":133,"org.easymock.tests2.DependencyTest.testClassMocking":341,"org.easymock.tests2.AnswerTest.answer":33,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":410,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":349,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":520,"org.easymock.tests2.CaptureTest.testAnd":122,"org.easymock.tests2.UsageTest.strictResetToDefault":81,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":2,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":288,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":159,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":49,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":241,"org.easymock.tests2.DelegateToTest.testDelegate":76,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":253,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":501,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":195,"org.easymock.tests.LimitationsTest.mockFinalMethod":454,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":258,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":469,"org.easymock.tests2.DependencyTest.testClassMockingSupport":342,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":435,"org.easymock.tests2.CaptureTest.testCapture1_2446744":125,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":285,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":193,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":347,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":425,"org.easymock.tests.UsageThrowableTest.throwError":200,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":484,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":302,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":162,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":340,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":505,"org.easymock.samples.PartialClassMockTest.testGetArea":147,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":426,"org.easymock.tests.MockingTest.testInterfaceMocking":419,"org.easymock.tests2.CompareToTest.testLessOrEqual":28,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":168,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":235,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":460,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":181,"org.easymock.tests2.UsageTest.niceToStrict":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":329,"org.easymock.tests2.ThreadingTest.testChangeDefault":495,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":394,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":41,"org.easymock.tests2.MockBuilderTest.testCreateMock":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":336,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":357,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":189,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":12,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":50,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":519,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":179,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":373,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":461,"org.easymock.tests.UsageOverloadedMethodTest.overloading":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":338,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":165,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":100,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":225,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":266,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":99,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":128,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":473,"org.easymock.tests.MockClassControlTest.testEquals":387,"org.easymock.tests2.EasyMockSupportClassTest.testAll":112,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":392,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":197,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":467,"org.easymock.tests2.CaptureTest.testCaptureAll":123,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":348,"org.easymock.tests.MockNameTest.defaultName":451,"org.easymock.tests2.UsageConstraintsTest.testMatches":101,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":423,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":161,"org.easymock.samples.ExampleTest.voteForRemovals":153,"org.easymock.tests.UsageVarargTest.allKinds":481,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":27,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":468,"org.easymock.samples.BasicClassMockTest.testPrintContent":372,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":206,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":303,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":75,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":259,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":298,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":449,"org.easymock.tests2.UsageConstraintsTest.greaterThan":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":323,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":240,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":68,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":506,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":450,"org.easymock.samples.ExampleTest.voteForRemoval":151,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":118,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":289,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":486,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":284,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":498,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":172,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":80,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":401,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":47,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":321,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":254,"org.easymock.tests2.CaptureTest.testCaptureFirst":132,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":400,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":48,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":88,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":391,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":221,"org.easymock.tests2.CaptureTest.testCapture2_2446744":131,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":120,"org.easymock.tests2.UsageTest.moreThanOneArgument":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":411,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":44,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":480,"org.easymock.tests.GenericTest.testBridgedEquals":393,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":379,"org.easymock.tests.UsageExpectAndReturnTest.longType":217,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":465,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":45,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":490,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":198,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":273,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":318,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":196,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":158,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":261,"org.easymock.tests.UsageCallCountTest.tooManyCalls":380,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":337,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":222,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":359,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":185,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":205,"org.easymock.tests.MockingTest.testNiceClassMocking":422,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":135,"org.easymock.tests.MockingTest.testClassMocking":417,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":489,"org.easymock.tests2.UsageConstraintsTest.testContains":98,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":374,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":141,"org.easymock.tests2.UsageConstraintsTest.testFind":91,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":268,"org.easymock.tests.MockTypeTest.fromEasyMockClass":483,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":437,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":111,"org.easymock.tests.UsageExpectAndReturnTest.object":224,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":65,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":358,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":53,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":475,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":458,"org.easymock.tests.UsageTest.exactCallCountByLastCall":23,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":250,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":263,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":6,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":470,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":230,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":164,"org.easymock.tests.MockClassControlTest.testHashCode":386,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":293,"org.easymock.tests2.EasyMockSupportTest.testVerify":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":331,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":251,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":178,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":163,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":346,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":315,"org.easymock.tests.UsageVarargTest.varargCharAccepted":474,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":442,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":415,"org.easymock.tests2.UsageTest.openCallCountByLastCall":84,"org.easymock.tests.DefaultClassInstantiatorTest.object":443,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":56,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":177,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":456,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":332,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":203,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":353,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":292,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":504,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":385,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":66,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":186,"org.easymock.tests.ReplayStateInvalidCallsTest.times":510,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":231,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":260,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":511,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":115,"org.easymock.tests2.UsageTest.resumeIfFailure":87,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":482,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":493,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":257,"org.easymock.tests2.StubTest.stubWithReturnValue":144,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":3,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":32,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":223,"org.easymock.tests2.SerializationTest.testAllMockedMethod":283,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":175,"org.easymock.samples.SupportTest.voteForRemovals":148,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":13,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":274,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":295,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":192,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":176,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":34,"org.easymock.tests.UsageExpectAndThrowTest.object":190,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":265,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":105,"org.easymock.tests2.DelegateToTest.testWrongClass":74,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":508,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":271,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":272,"org.easymock.samples.ConstructorCalledMockTest.testTax":145,"org.easymock.tests.UsageStrictMockTest.range":212,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":309,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":52,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":134,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":191,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":42,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":433,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":320,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":462,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":25,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":500,"org.easymock.tests2.CaptureTest.testCaptureNone":127,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":236,"org.easymock.tests.UsageUnorderedTest.message":24,"org.easymock.tests.UsageVerifyTest.twoReturns":270,"org.easymock.tests.UsageVarargTest.varargByteAccepted":479,"org.easymock.tests2.ThreadingTest.testThreadSafe":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":334,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":377,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":459,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":371,"org.easymock.tests2.CaptureTest.testCapture_2617107":343,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":436,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":413,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":246,"org.easymock.tests2.UsageConstraintsTest.any":96,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":430,"org.easymock.tests2.StubTest.stub":143,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":414,"org.easymock.tests.UsageExpectAndThrowTest.longType":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":256,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":447,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":429,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":305,"org.easymock.tests2.SerializationTest.testClass":57,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":70,"org.easymock.tests.LimitationsTest.mockNativeMethod":248,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":174,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":233,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":352,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":516,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":306,"org.easymock.tests2.NameTest.nameForMocksControl":365,"org.easymock.tests2.MockedExceptionTest.testMockedException":140,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":324,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":20,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":184,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":210,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":319,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":59,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":43,"org.easymock.tests.MockingTest.testNicePartialClassMocking":209,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":64,"org.easymock.tests2.CaptureTest.testCaptureLast":126,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":350,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":211,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":515,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":10,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":94,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":106,"org.easymock.tests.MockingTest.testTwoMocks":418,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":512,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":11,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":214,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":188,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":313,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":108,"org.easymock.samples.ExampleTest.removeNonExistingDocument":370,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":427,"org.easymock.tests.UsageStrictMockTest.differentMethods":213,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":356,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":294,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":492,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":445,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":119,"org.easymock.tests2.MockBuilderTest.testCreateMockString":281,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":381,"org.easymock.tests.UsageExpectAndThrowTest.floatType":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":325,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":322,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":36,"org.easymock.tests.UsageVerifyTest.twoThrows":269,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":291,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":114,"org.easymock.samples.ExampleTest.voteAgainstRemoval":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":405,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":234,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":67,"org.easymock.tests.LimitationsTest.privateConstructor":453,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":8,"org.easymock.tests2.UsageConstraintsTest.testNotNull":107,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":139,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":207,"org.easymock.tests2.UsageTest.defaultResetToNice":86,"org.easymock.samples.ExampleTest.voteAgainstRemovals":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":406,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":229,"org.easymock.tests.UsageVarargTest.differentLength":476,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":351,"org.easymock.tests2.CallbackTest.callback":39,"org.easymock.tests2.UsageConstraintsTest.equals":316,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":286,"org.easymock.tests.UsageTest.openCallCountByLastCall":19,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":29,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":245,"org.easymock.tests.UsageCallCountTest.tooFewCalls":375,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":136,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":464,"org.easymock.tests.UsageThrowableTest.throwCheckedException":204,"org.easymock.tests.MockingTest.testStrictClassMocking":416,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":26,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":157,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":138,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":9,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":355,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":432,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":137,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":38,"org.easymock.tests2.CompareToTest.testGreateOrEqual":488,"org.easymock.tests.ObjectMethodsTest.testHashCode":457,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":514,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":121,"org.easymock.tests2.NameTest.nameForNiceMock":364,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":509,"org.easymock.tests2.DependencyTest.testInterfaceMocking":116,"org.easymock.samples.ExampleTest.addDocument":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":335,"org.easymock.tests2.DelegateToTest.testStubDelegate":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":339,"org.easymock.tests2.AnswerTest.stubAnswer":37,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":16,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":491,"org.easymock.tests.UsageVarargTest.varargLongAccepted":478,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":403,"org.easymock.tests.UsageExpectAndReturnTest.floatType":216,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":232,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":69,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":146,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":390,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":103,"org.easymock.tests.UsageThrowableTest.noUpperLimit":201,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":300,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":89,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":307,"org.easymock.tests2.SerializationTest.test":58,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":344,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":444,"org.easymock.tests2.UsageConstraintsTest.testSame":92,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":215,"org.easymock.samples.SupportTest.addDocument":368,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":496,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":499,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":428,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":326,"org.easymock.tests.GenericTest.testPackageScope":173,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":398,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":299,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":420,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":497,"org.easymock.tests2.NameTest.nameForMock":362,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":226,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":5,"org.easymock.tests2.UsageStrictMockTest.differentMethods":79,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":287,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":218,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":194,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":455,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":242,"org.easymock.tests2.MockedExceptionTest.testRealException":142,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":408,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":310,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":407,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":77,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":434,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":244,"org.easymock.tests2.NameTest.nameForStrictMock":363,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":277,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":110,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":63,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":308,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":446,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":104,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":40,"org.easymock.tests2.UsageStrictMockTest.range":78,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":503,"org.easymock.tests2.UsageConstraintsTest.lessThan":109,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":46,"org.easymock.tests2.CaptureTest.testCaptureRightOne":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":330,"org.easymock.tests2.UsageConstraintsTest.testOr":93,"org.easymock.tests.UsageRangeTest.combination":239,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":60,"org.easymock.tests.UsageTest.wrongArguments":18,"org.easymock.tests2.MockBuilderTest.testWithConstructor":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":327,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":382,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":395,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":227,"org.easymock.tests.UsageVarargTest.varargShortAccepted":477,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":448,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":378,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":517,"org.easymock.tests2.UsageConstraintsTest.cmpTo":97,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":35,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":507,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":397,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":85,"org.easymock.tests2.CaptureTest.testCaptureFromStub":130,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":424,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":276,"org.easymock.tests.UsageTest.unexpectedCallWithArray":17,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":513,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":15,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":376,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":4,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":228,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":439,"org.easymock.tests2.UsageConstraintsTest.constraints":30,"org.easymock.samples.ExampleTest.addAndChangeDocument":154,"org.easymock.tests.UsageStrictMockTest.testVerify":441,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":367,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":438,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":466,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":345,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":169,"org.easymock.tests.LimitationsTest.abstractClass":452,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":170,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":166,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":471,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":51}}]

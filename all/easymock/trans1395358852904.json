[{"transplant":{"position":"org.easymock.internal.RecordState:59","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[18,19,20,21,22,23,24],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:167","sourceCode":"final org.easymock.internal.ClassProxyFactory.MockMethodInterceptor org.easymock.internal.ClassProxyFactory.MockMethodInterceptor = new org.easymock.internal.ClassProxyFactory.MockMethodInterceptor(java.lang.reflect.InvocationHandler)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[25,25,26,26,27,4,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,11,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[60],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[25,25,26,26,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,32,34,36,37,38,39,40,42],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EqualsWithDelta:40","sourceCode":"return (((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","type":"CtReturnImpl"},"failures":[55],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Matches:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[79,80,81,82],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[83,84,85,86,87],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[88],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[89],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[90],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[91,92],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[93,94,95],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[96,90,97,86,80,98,99,100,101,102,103,104,105,106,107,108,109,110,111],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[112,113,114,115,116,117],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:185","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[66,67,71,73,38,42],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:43","sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.testMatches":53,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":91,"org.easymock.tests2.StubTest.stubWithReturnValue":44,"org.easymock.samples.ExampleTest.voteForRemovals":65,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":72,"org.easymock.tests2.NameTest.nameForNiceMock":16,"org.easymock.tests2.SerializationTest.testAllMockedMethod":82,"org.easymock.tests2.DelegateToTest.testReturnException":21,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":0,"org.easymock.samples.SupportTest.voteForRemovals":61,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":83,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":79,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":23,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":4,"org.easymock.tests2.UsageConstraintsTest.greaterThan":54,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":89,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":6,"org.easymock.tests2.DelegateToTest.testWrongClass":22,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":37,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":38,"org.easymock.samples.ExampleTest.voteForRemoval":63,"org.easymock.tests.UsageExpectAndReturnTest.floatType":68,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":76,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":29,"org.easymock.samples.ConstructorCalledMockTest.testTax":25,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":110,"org.easymock.samples.ExampleTest.answerVsDelegate":18,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":26,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":116,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":97,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":55,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":46,"org.easymock.tests2.UsageConstraintsTest.testNull":48,"org.easymock.tests2.SerializationTest.test":81,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":104,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":95,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":31,"org.easymock.tests.UsageTest.moreThanOneArgument":3,"org.easymock.tests2.UsageConstraintsTest.testSame":49,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":67,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":41,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":88,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":92,"org.easymock.tests.GenericTest.testPackageScope":84,"org.easymock.tests2.UsageTest.moreThanOneArgument":10,"org.easymock.tests.UsageVerifyTest.twoReturns":2,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":78,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":107,"org.easymock.tests.GenericTest.testBridgedEquals":87,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":32,"org.easymock.tests2.NameTest.nameForMock":14,"org.easymock.tests.UsageExpectAndReturnTest.longType":69,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":98,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":108,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":27,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":103,"org.easymock.tests2.UsageStrictMockTest.differentMethods":12,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":20,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":39,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":36,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":70,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":93,"org.easymock.tests2.SerializationTest.testClass":80,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":77,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":86,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":8,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":71,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":13,"org.easymock.tests2.NameTest.nameForMocksControl":17,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":30,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":40,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":99,"org.easymock.tests2.NameTest.nameForStrictMock":15,"org.easymock.tests2.UsageConstraintsTest.testContains":51,"org.easymock.tests2.DelegateToTest.testDelegate":24,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":105,"org.easymock.tests2.UsageConstraintsTest.testFind":47,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":113,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":60,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":100,"org.easymock.tests.MockingTest.testTwoMocks":114,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":112,"org.easymock.tests2.UsageConstraintsTest.lessThan":58,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":66,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":28,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":57,"org.easymock.tests.UsageStrictMockTest.differentMethods":5,"org.easymock.tests2.UsageConstraintsTest.testOr":50,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":74,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":19,"org.easymock.tests2.MockBuilderTest.testCreateMockString":109,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":43,"org.easymock.tests.UsageVerifyTest.twoThrows":1,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":115,"org.easymock.samples.PartialClassMockTest.testGetArea":96,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":33,"org.easymock.samples.ExampleTest.voteAgainstRemoval":64,"org.easymock.tests2.UsageConstraintsTest.testNotNull":56,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":102,"org.easymock.tests2.CaptureTest.testCaptureFromStub":59,"org.easymock.tests2.MockBuilderTest.testCreateMock":106,"org.easymock.samples.ExampleTest.voteAgainstRemovals":62,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":73,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":101,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":45,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":7,"org.easymock.tests.UsageCallCountTest.tooFewCalls":9,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":52,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":75,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":94,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":111,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":34,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":85,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":90,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":35}}]

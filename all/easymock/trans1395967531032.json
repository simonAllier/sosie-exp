[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw java.lang.reflect.InvocationTargetException.getCause()","position":"org.easymock.internal.Result:89","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","position":"org.easymock.internal.RecordState:310","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>()","position":"org.easymock.internal.BridgeMethodResolver:380","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalArgumentException java.lang.IllegalArgumentException","position":"org.easymock.internal.DefaultClassInstantiator:57","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","position":"org.easymock.internal.MocksControl:142","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:115","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214],"variableMapping":{"result":"i"},"name":"replace","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:94","type":"CtIfImpl"},"status":-1},{"failures":[0,1,2,3,4,5,6,7,8,9,10,215,11,12,216,217,16,17,18,19,20,21,23,24,218,219,220,27,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,221,59,60,61,62,63,65,222,223,224,67,68,69,70,71,225,77,226,78,79,80,81,82,227,228,83,84,85,229,230,231,232,233,234,235,86,87,88,90,91,236,237,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,137,138,139,141,142,143,144,145,146,147,238,148,149,239,240,153,154,241,155,156,157,158,160,242,161,162,163,164,165,166,167,168,243,169,170,171,172,173,174,176,177,178,179,180,181,184,185,186,189,190,191,192,244,245,246,247,248,249,250,251,193,194,252,195,196,197,253,254,198,255,256,199,257,200,258,201,259,260,261,262,263,203,264,204,205,206,207,208,209,210,211,212,213,214,265,266,267,268,269],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:90","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.ReflectionUtils:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:958","type":"CtInvocationImpl"},"status":-2},{"failures":[270],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:440","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MockInvocationHandler:43","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:321","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1878","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.DefaultClassInstantiator:59","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0,271,272,1,2,3,4,5,6,7,8,9,273,10,215,11,12,13,274,14,15,275,216,276,217,16,17,18,19,20,277,278,279,280,281,282,283,284,285,286,287,288,21,22,23,24,289,218,25,26,219,220,27,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,310,311,312,54,55,56,313,57,58,221,59,60,61,62,63,64,65,66,314,315,316,222,223,317,224,318,319,320,321,322,323,324,325,326,327,328,329,67,68,69,70,71,72,73,74,75,76,225,77,226,78,79,80,81,82,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,227,228,369,370,83,84,85,371,372,373,229,374,230,231,232,233,375,234,235,86,87,88,89,90,91,92,93,94,95,96,376,377,236,378,379,237,97,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,395,396,397,398,399,400,401,402,403,118,119,120,121,404,122,123,124,125,126,127,405,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,238,148,149,150,151,406,239,240,152,153,407,408,409,410,411,154,412,413,414,415,416,417,418,419,241,420,421,422,423,424,155,425,156,426,157,158,159,427,160,242,161,162,163,164,165,166,167,168,243,169,428,429,430,431,432,170,433,434,435,436,437,438,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,439,440,191,192,244,245,246,247,248,441,249,250,251,442,443,444,193,194,445,446,252,447,448,449,195,450,196,451,197,452,453,454,253,455,456,254,198,255,256,199,257,457,458,200,459,460,270,258,201,259,461,462,463,464,465,260,466,467,261,468,469,470,471,472,473,474,475,476,262,477,478,479,480,481,263,482,483,202,203,264,484,485,204,205,206,207,208,209,210,486,211,212,213,214,265,487,266,267,268,269],"binaryOperator":"(int >= 1)","name":"conditionalBoundary","position":"org.easymock.internal.Range:44","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:164","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Long java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Injection org.easymock.internal.Injection = org.easymock.internal.Injector.org.easymock.internal.Injector.findUniqueAssignable(java.util.List<org.easymock.internal.Injection>, org.easymock.internal.InjectionTarget)","position":"org.easymock.internal.Injector:188","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"matched":"org.easymock.internal.AndroidSupport.isAndroid"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.Injection:74","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.EasyMock:2123","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:113","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(org.easymock.IArgumentMatcher.matches(java.lang.Object))","position":"org.easymock.internal.matchers.Not:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","position":"org.easymock.internal.LastControl:125","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (int == (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"break","position":"org.easymock.internal.BridgeMethodResolver:205","type":"CtBreakImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"replace","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","position":"org.easymock.internal.MockBuilder:128","type":"CtAssignmentImpl"},"status":-2},{"failures":[25,26,66,80,81,338,362,363,227,83,230,90,125,136,150,151,164,165],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:361","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.get()","position":"org.easymock.internal.LastControl:56","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:91","type":"CtInvocationImpl"},"status":0},{"failures":[24,78,80,81,83,84,85,86,488,489,490,491,147,162,164,165],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1039","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-1},{"failures":[0,1,281,283,383,407,408,409,411,154,412,413,414,417,428,429,430,432,170,433,434,435,438,245,198,270,259,462,468,472,477,207,210,211,487,266,267,268,269],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1878","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:83","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"f":"f"},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.InjectionTarget(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:219","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injector.org.easymock.internal.Injector.shouldNotAssignTo(java.lang.reflect.Field)) {\n    return null;\n} ","position":"org.easymock.internal.Injector:216","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","position":"org.easymock.internal.MethodSerializationWrapper:58","type":"CtAssignmentImpl"},"status":-2},{"failures":[344,371,372,373,392],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:304","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"method":"method"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"status":0},{"failures":[3,4,6,7,9,215,216,16,17,20,21,23,24,25,26,27,64,65,66,222,223,224,67,68,69,70,71,78,80,81,227,228,369,370,83,85,87,88,89,91,92,93,94,95,96,236,237,380,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,143,144,145,146,147,148,150,151,406,152,153,154,241,158,162,164,165,167,168,170,171,172,174,175,178,179,180,181,183,184,185,186,187,188,189,190,192,245,246,247,248,249,250,251,193,194,252,195,196,197,253,254,198,255,256,199,257,200,258,201,259,260,261,262,263,203,264,204,205,206,207,208,209,210,486,211,212,213,214],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:99","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"stack":"stack"},"name":"replace","transplant":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"returnedType":"type"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:259","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:255","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"arguments":"mocks"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","position":"org.easymock.internal.ArgumentToString:83","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:48","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:325","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0,1,407,408,409,410,411,154,412,413,414,415,416,417,428,429,430,431,432,170,433,434,435,436,437,438],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.Injector:114","type":"CtContinueImpl"},"status":-1},{"failures":[237,382],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1746","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"status":-1},{"failures":[159],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ClassProxyFactory:120","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.Result:86","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"toStringMethod","method":"org.easymock.internal.ReflectionUtils.OBJECT_TOSTRING"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"status":-2},{"failures":[38,42,43,45,48,80,81,345,102,106,107,109,112,164,165],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","position":"org.easymock.internal.MocksControl:343","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","position":"org.easymock.internal.DefaultClassInstantiator:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.add(new org.easymock.internal.ExpectedInvocationAndResults(org.easymock.internal.ExpectedInvocation , org.easymock.internal.Results))","position":"org.easymock.internal.UnorderedBehavior:46","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"args":"varArgs","length":"length"},"name":"add","transplant":{"sourceCode":"final int int = (this.int) - 1","position":"org.easymock.internal.Invocation:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = java.lang.Object[].int","position":"org.easymock.internal.Invocation:61","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","position":"org.easymock.internal.MocksControl:258","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5418279681566430252L","position":"org.easymock.internal.RecordState:31","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[406],"variableMapping":{"this":"this","mocks":"mocks"},"name":"replace","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","position":"org.easymock.internal.EasyMockProperties:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:51","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"e":"e"},"name":"add","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.Invocation:214","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","position":"org.easymock.internal.MocksBehavior:122","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:746","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-551735356674347591L","position":"org.easymock.internal.matchers.InstanceOf:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:298","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:204","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.DefaultClassInstantiator:46","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1848","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1848","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n    java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n} catch (java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n}","position":"org.easymock.internal.AndroidClassProxyFactory:46","type":"CtTryImpl"},"status":-2},{"failures":[15,18,19,22,23,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,66,84,89,91,92,93,94,95,96,145,151,418,419,241,420,203],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new (\"==\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int == 0;\n    }\n}","position":"org.easymock.LogicalOperator:36","type":"CtNewClassImpl"},"status":-2},{"failures":[312],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.Invocation.org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)) {\n    return (java.lang.String + \".\") + java.lang.String;\n} ","position":"org.easymock.internal.Invocation:153","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:90","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","type":"type"},"name":"replace","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.EasyMockSupport:508","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:200","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:204","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:93","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = java.lang.reflect.Method.getName()","position":"org.easymock.internal.Invocation:143","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.ClassProxyFactory:228","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[216,24,312,78,81,82,83,84,85,147,162,165,166],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","position":"org.easymock.EasyMock:2079","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ClassProxyFactory:137","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"status":-2},{"failures":[215,222,223,224,68,236,158,188,245,246,247,248,249,250,251,252,195,196,197,253,254,255,256,257,260,261,262,263,264],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Number.shortValue()","position":"org.easymock.internal.RecordState:197","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","position":"org.easymock.ConstructorArgs:66","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().expectedCount()","position":"org.easymock.internal.Results:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.CompareEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:1877","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[][((java.lang.Object[].int) - 1)]) == null) {\n    return java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:56","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:40","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:202","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1262","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.ClassProxyFactory:216","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n}","position":"org.easymock.internal.Results:65","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:733","type":"CtInvocationImpl"},"status":-2},{"failures":[303,305,64,360,237,380],"variableMapping":{"delegateTo":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","position":"org.easymock.internal.MocksControl:258","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","position":"org.easymock.internal.matchers.StartsWith:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:105","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(byte.byte, java.lang.Byte.java.lang.Byte)","position":"org.easymock.internal.ReflectionUtils:34","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.Long java.lang.Long = org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializableUID(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:142","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier())","position":"org.easymock.internal.Injector:163","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","position":"org.easymock.internal.RecordState:102","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long.valueOf(0))","position":"org.easymock.internal.RecordState:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"status":0},{"failures":[450,457],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:93","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:91","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n    if (org.easymock.internal.ErrorMessage.isMatching()) {\n        int++;\n    } \n}","position":"org.easymock.internal.MocksBehavior:130","type":"CtForEachImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1471","type":"mutation","return":"return false","status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":92,"org.easymock.tests2.MockedExceptionTest.testRealException":420,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":468,"org.easymock.tests.UsageVarargTest.varargIntAccepted":56,"org.easymock.tests.LimitationsTest.mockFinalMethod":378,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":118,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":264,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":293,"org.easymock.tests.UsageCallCountTest.tooManyCalls":235,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":478,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":442,"org.easymock.tests.UsageVarargTest.allKinds":63,"org.easymock.tests2.StubTest.stubWithReturnValue":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":483,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":288,"org.easymock.tests2.CaptureTest.testCaptureAll":172,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":87,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":134,"org.easymock.tests2.CaptureTest.testAnd":171,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":485,"org.easymock.tests.UsageStrictMockTest.testVerify":330,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":42,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":14,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":277,"org.easymock.tests.MockClassControlTest.testToString":292,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":245,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":392,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":209,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":50,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":111,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":170,"org.easymock.tests.UsageThrowableTest.throwError":89,"org.easymock.samples.SupportTest.addDocument":2,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":20,"org.easymock.tests2.StubTest.stub":202,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":362,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":386,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":428,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":70,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":458,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":358,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":414,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":117,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":462,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":360,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":461,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":62,"org.easymock.tests.UsageExpectAndThrowTest.object":44,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":187,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":480,"org.easymock.tests2.UsageTest.moreThanOneArgument":147,"org.easymock.tests.UsageVarargTest.varargByteAccepted":61,"org.easymock.tests.MockClassControlTest.testEquals":296,"org.easymock.tests.UsageTest.wrongArguments":218,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":301,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":334,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":432,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":45,"org.easymock.tests2.UsageTest.defaultResetToNice":406,"org.easymock.tests.MockingTest.testNiceClassMocking":320,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":241,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":188,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":197,"org.easymock.tests2.MockBuilderTest.testCreateMock":454,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":189,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":382,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":387,"org.easymock.samples.ExampleTest.voteAgainstRemovals":4,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":242,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":274,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":431,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":369,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":64,"org.easymock.tests2.CaptureTest.testCapture1_2446744":175,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":427,"org.easymock.samples.ExampleTest.voteForRemoval":6,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":401,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":233,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":216,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":399,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":305,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":451,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":82,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":285,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":489,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":104,"org.easymock.tests2.CaptureTest.testCaptureRightOne":181,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":383,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":440,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":257,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":228,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":364,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":384,"org.easymock.tests2.UsageConstraintsTest.cmpTo":129,"org.easymock.tests.MockTypeTest.fromEasyMockClass":280,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":326,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":436,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":452,"org.easymock.tests2.MockedExceptionTest.testMockedException":419,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":53,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":74,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":141,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":83,"org.easymock.samples.PartialClassMockTest.testGetArea":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":344,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":66,"org.easymock.samples.ConstructorCalledMockTest.testTax":271,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":441,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":397,"org.easymock.tests2.UsageTest.argumentsOrdered":240,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":278,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":439,"org.easymock.samples.ExampleTest.removeNonExistingDocument":273,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":402,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":244,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":324,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":309,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":298,"org.easymock.tests2.AnswerTest.answer":190,"org.easymock.tests.MockingTest.testNicePartialClassMocking":223,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":437,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":78,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":71,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":76,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":363,"org.easymock.tests.UsageExpectAndThrowTest.longType":37,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":284,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":262,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":486,"org.easymock.tests.UsageTest.argumentsOrdered":220,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":121,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":196,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":116,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":18,"org.easymock.tests2.NameTest.nameForStrictMock":267,"org.easymock.tests2.MockBuilderTest.testCreateMockString":456,"org.easymock.tests2.CaptureTest.testCaptureNone":179,"org.easymock.tests2.SerializationTest.testClass":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":357,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":336,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":11,"org.easymock.tests.MockingTest.testInterfaceMocking":317,"org.easymock.tests2.EasyMockSupportTest.testVerify":265,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":434,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":450,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":39,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":319,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":140,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":145,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":115,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":253,"org.easymock.tests.GenericTest.testBridgedEquals":381,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":127,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":249,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":254,"org.easymock.tests2.UsageConstraintsTest.testOr":125,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":186,"org.easymock.tests.MockClassControlTest.testHashCode":295,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":408,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":487,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":88,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":96,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":110,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":282,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":73,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":246,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":482,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":466,"org.easymock.tests2.UsageConstraintsTest.testSame":124,"org.easymock.tests2.UsageTest.resumeIfFailure":152,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":372,"org.easymock.tests.UsageOverloadedMethodTest.overloading":65,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":250,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":283,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":459,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":411,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":473,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":368,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":272,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":472,"org.easymock.tests.UsageTest.openCallCountByLastCall":25,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":40,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":395,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":367,"org.easymock.tests2.NameTest.nameForNiceMock":268,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":389,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":433,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":370,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":72,"org.easymock.tests2.CaptureTest.testPrimitive":174,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":255,"org.easymock.samples.BasicClassMockTest.testPrintContent":12,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":371,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":67,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":491,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":270,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":155,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":234,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":374,"org.easymock.tests2.UsageStrictMockTest.differentMethods":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":474,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":206,"org.easymock.tests.MockingTest.testClassMocking":315,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":380,"org.easymock.tests2.CaptureTest.testCaptureLast":178,"org.easymock.tests2.UsageConstraintsTest.equals":404,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":35,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":375,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":232,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":194,"org.easymock.tests.UsageStrictMockTest.range":80,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":26,"org.easymock.tests.UsageTest.unexpectedCallWithArray":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":475,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":340,"org.easymock.samples.ExampleTest.addDocument":8,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":318,"org.easymock.tests2.UsageConstraintsTest.lessThan":144,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":276,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":219,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":13,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":361,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":349,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":396,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":329,"org.easymock.tests2.MockBuilderTest.testWithConstructor":446,"org.easymock.tests2.UsageStrictMockTest.range":164,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":251,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":300,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":310,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":342,"org.easymock.tests.UsageTest.moreThanOneArgument":24,"org.easymock.tests2.UsageTest.openCallCountByLastCall":150,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":252,"org.easymock.tests.UsageStrictMockTest.differentMethods":81,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":346,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":400,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":38,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":303,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":467,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":79,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":200,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":430,"org.easymock.tests2.DependencyTest.testClassMockingSupport":444,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":49,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":21,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":410,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":0,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":306,"org.easymock.tests2.UsageConstraintsTest.testContains":130,"org.easymock.tests2.UsageConstraintsTest.testFind":122,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":176,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":325,"org.easymock.samples.ExampleTest.addAndChangeDocument":10,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":445,"org.easymock.tests.UsageVarargTest.varargCharAccepted":57,"org.easymock.tests2.CaptureTest.testCaptureFromStub":182,"org.easymock.tests.UsageVerifyTest.twoThrows":84,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":279,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":438,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":17,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":58,"org.easymock.tests2.DelegateToTest.testReturnException":157,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":149,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":484,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":214,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":161,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":379,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":425,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":373,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":327,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":393,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":180,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":46,"org.easymock.tests2.UsageConstraintsTest.testMatches":133,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":348,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":359,"org.easymock.tests2.UsageConstraintsTest.testNull":123,"org.easymock.tests.LimitationsTest.abstractClass":376,"org.easymock.tests2.EasyMockSupportClassTest.testAll":260,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":328,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":217,"org.easymock.tests2.UsageConstraintsTest.greaterThan":135,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":54,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":388,"org.easymock.tests.UsageExpectAndReturnTest.object":108,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":137,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":211,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":166,"org.easymock.tests2.DelegateToTest.testWrongClass":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":339,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":41,"org.easymock.samples.ExampleTest.voteAgainstRemoval":7,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":95,"org.easymock.tests.UsageVarargTest.varargShortAccepted":59,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":365,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":335,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":416,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":69,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":465,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":290,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":429,"org.easymock.tests2.SerializationTest.testAllMockedMethod":243,"org.easymock.tests2.NameTest.nameForMocksControl":269,"org.easymock.tests.MockingTest.testStrictClassMocking":314,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":19,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":153,"org.easymock.tests.ErrorMessageTest.testGetters":490,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":471,"org.easymock.tests2.DelegateToTest.testStubDelegate":158,"org.easymock.tests.LimitationsTest.mockNativeMethod":236,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":304,"org.easymock.tests.UsageUnorderedTest.message":86,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":351,"org.easymock.samples.ExampleTest.answerVsDelegate":5,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":308,"org.easymock.tests.UsageCallCountTest.tooFewCalls":231,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":107,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":191,"org.easymock.tests.UsageVerifyTest.twoReturns":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":479,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":43,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":102,"org.easymock.tests2.DependencyTest.testInterfaceMocking":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":350,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":204,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":352,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":207,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":424,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":126,"org.easymock.tests.MockingTest.testTwoMocks":316,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":230,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":286,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":418,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":469,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":109,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":247,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":435,"org.easymock.tests.UsageThrowableTest.throwCheckedException":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":356,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":464,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":281,"org.easymock.samples.ExampleTest.voteForRemovals":9,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":91,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":132,"org.easymock.tests.ReplayStateInvalidUsageTest.times":390,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":15,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":470,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":199,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":337,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":99,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":398,"org.easymock.tests2.UsageConstraintsTest.any":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":338,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":409,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":341,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":213,"org.easymock.tests.LimitationsTest.privateConstructor":377,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":156,"org.easymock.tests2.CallbackTest.callback":169,"org.easymock.tests2.NameTest.nameForMock":266,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":345,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":455,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":131,"org.easymock.tests.MockNameTest.defaultName":394,"org.easymock.tests2.SerializationTest.test":168,"org.easymock.tests.UsageExpectAndReturnTest.longType":101,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":177,"org.easymock.tests2.CaptureTest.testCaptureFirst":184,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":138,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":312,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":28,"org.easymock.tests2.UsageTest.niceToStrict":148,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":302,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":307,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":225,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":321,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":47,"org.easymock.tests2.UsageTest.strictResetToDefault":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":463,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":201,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":22,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":34,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":105,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":421,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":449,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":457,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":55,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":136,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":256,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":33,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":224,"org.easymock.tests2.DelegateToTest.testDelegate":160,"org.easymock.tests2.UsageConstraintsTest.testNotNull":142,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":163,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":448,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":154,"org.easymock.tests2.CaptureTest.testCapture_2617107":173,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":354,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":391,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":413,"org.easymock.tests2.ThreadingTest.testThreadSafe":185,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":151,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":355,"org.easymock.tests.UsageThrowableTest.noUpperLimit":90,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":313,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":212,"org.easymock.tests.UsageExpectAndReturnTest.floatType":100,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":205,"org.easymock.tests2.UsageTest.wrongArguments":238,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":405,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":423,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":294,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":453,"org.easymock.samples.SupportTest.voteForRemovals":3,"org.easymock.tests.UsageRangeTest.combination":227,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":476,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":143,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":481,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":417,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":162,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":112,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":48,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":287,"org.easymock.tests.UsageExpectAndThrowTest.floatType":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":477,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":113,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":198,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":407,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":460,"org.easymock.tests.UsageTest.exactCallCountByLastCall":27,"org.easymock.tests2.AnswerTest.stubAnswer":192,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":210,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":261,"org.easymock.tests.MockingTest.testPartialClassMocking":222,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":114,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":239,"org.easymock.tests2.UsageConstraintsTest.constraints":120,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":488,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":422,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":403,"org.easymock.tests.UsageVarargTest.varargLongAccepted":60,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":75,"org.easymock.tests.ObjectMethodsTest.testHashCode":333,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":258,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":259,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":226,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":263,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":366,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":311,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":447,"org.easymock.tests2.DependencyTest.testClassMocking":443,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":68,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":297,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":331,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":415,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":208,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":119,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":291,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":195,"org.easymock.tests.DefaultClassInstantiatorTest.object":322,"org.easymock.tests.UsageVarargTest.differentLength":221,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":353,"org.easymock.tests2.CaptureTest.testCapture2_2446744":183,"org.easymock.tests.GenericTest.testPackageScope":237}}]

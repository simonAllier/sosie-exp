[{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[0,1,2],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[102,103,104,105,106,107,108,109,110,111,112,113,114,115],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[104,105,114,115],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[116,117,118,119,120],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:230","sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[121],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:114","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size())","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[120],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:107","sourceCode":"break","type":"CtBreakImpl"},"failures":[11],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[122,123,124,125,126,127,128,129,130,131,52,132,133,134,135,136,65,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,171,172,172,3,4,5,6,7,8,9,10,11,12,13,14,15,16,173,174,175,176,177,178,179,180,181,182,122,183,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,123,202,203,204,102,205,206,124,207,208,209,210,211,212,213,214,215,216,217,46,218,219,220,221,222,223,224,225,226,103,227,47,228,104,105,229,230,231,232,106,233,234,235,107,108,236,237,109,238,239,240,241,242,243,244,110,245,246,247,248,249,250,251,252,253,254,111,48,49,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,125,275,126,127,128,129,130,131,50,276,277,278,279,280,281,282,283,284,285,286,287,51,288,289,290,291,52,292,293,294,295,296,297,298,299,300,132,301,302,303,133,304,305,306,307,308,309,310,112,311,312,313,53,54,55,56,57,314,315,316,317,58,59,113,318,60,61,319,114,115,320,321,117,118,119,322,323,324,134,325,326,327,328,329,330,331,332,333,334,335,336,337,338,135,339,340,341,342,136,343,344,345,346,347,348,349,350,351,352,62,63,64,65,66,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,67,68,353,354],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[207],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:233","failures":[157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,171,172,172,3,4,5,6,7,8,9,10,11,12,13,14,15,16,173,174,175,176,177,178,179,180,181,182,122,183,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,123,202,203,204,102,205,206,124,207,208,209,210,211,212,213,214,215,216,217,46,219,220,221,222,223,224,225,226,103,227,47,228,104,105,229,230,231,232,106,233,234,235,107,108,236,237,109,238,239,240,241,242,243,244,110,246,247,248,249,250,251,252,253,254,111,48,49,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,125,275,126,127,128,129,130,131,50,277,278,279,280,281,282,283,284,285,286,287,51,288,289,290,291,52,292,294,295,296,297,298,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,299,371,372,373,374,375,300,376,132,301,302,303,133,304,305,306,308,309,310,112,311,312,313,53,54,55,56,57,314,315,316,317,58,59,113,318,60,61,319,114,115,320,321,117,118,119,322,323,324,134,326,327,330,332,333,334,335,336,337,338,135,339,340,342,136,344,345,346,347,348,349,350,62,63,64,65,66,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,67,68,353],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:205","failures":[171,172,173,183,377,378,379,380,381,382,383,384,385],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[386,387,388,389,390,60],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[3,4,5,6,7,8,9,10,12,13,14,15,16,122,17,18,19,20,21,23,24,25,26,28,30,31,32,33,34,35,36,37,38,39,41,43,44,195,204,102,205,208,209,103,47,104,105,106,233,234,235,107,108,237,109,238,239,110,111,125,275,127,128,129,130,131,302,304,305,112,58,113,60,61,114,115,324,135,62,65],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:36","failures":[157,158,159,160,161,162,163,164,391,165,166,167,168,169,170,171,172,3,4,5,6,7,8,9,10,11,12,13,14,15,16,173,174,175,176,177,178,179,180,181,182,122,183,377,378,17,18,19,20,392,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,393,394,395,396,397,398,399,184,185,186,187,400,188,189,190,401,191,192,193,194,195,196,402,403,404,405,406,197,407,408,409,410,411,412,413,414,415,198,416,417,199,418,419,420,421,422,423,424,425,426,200,427,428,429,430,431,201,432,433,123,202,203,204,102,205,206,124,207,208,209,210,211,45,212,213,214,215,216,217,434,435,46,379,436,218,219,220,221,437,438,222,223,224,225,226,103,227,47,228,104,105,229,439,440,230,231,232,106,233,234,235,107,108,236,237,109,238,239,240,441,241,242,243,244,110,245,442,443,444,445,446,447,448,449,246,450,451,452,453,454,455,247,248,249,250,456,380,251,457,381,458,252,459,253,382,254,383,384,460,111,385,461,48,462,49,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,125,275,126,127,128,129,130,131,50,463,464,465,466,467,468,469,470,471,276,472,473,474,475,476,477,478,479,480,277,481,278,279,280,482,281,282,283,284,285,286,287,51,288,289,290,291,52,292,293,483,484,485,486,487,488,489,294,295,296,297,298,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,299,371,372,373,374,375,300,376,132,301,390,302,303,133,304,305,306,490,491,492,493,494,495,496,307,308,309,497,310,498,499,500,112,311,312,313,501,502,503,504,53,54,55,56,57,314,315,316,505,506,317,507,58,59,113,318,60,61,319,114,115,320,321,116,117,118,119,120,322,323,324,134,325,326,327,328,329,330,331,332,333,334,335,508,336,337,338,135,339,340,341,342,136,343,344,509,345,346,347,348,349,350,351,352,510,91,92,93,94,95,511,96,97,98,99,100,101,62,63,64,65,66,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,67,68,353,512,354,513,514,515,516,517],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[157,168,169,171,171,172,172,173,175,183,377,393,397,184,185,186,187,189,190,413,414,415,198,416,417,199,418,419,420,421,422,423,424,425,426,200,427,428,429,430,431,201,432,433,212,213,215,216,217,434,46,379,436,218,219,220,221,437,438,518,519,520,521,522,523,247,248,249,524,456,525,251,457,458,252,459,253,254,384,460,111,526,527,461,463,468,276,472,473,474,475,476,478,479,480,277,481,293,483,484,485,486,487,488,489,495,496,307,308,309,310,500,116,117,118,119,120,322,516],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:65","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[157,158,159,160,161,162,163,164,391,165,166,167,168,169,170,171,172,3,4,5,6,7,8,9,10,11,12,13,14,15,16,173,174,175,176,177,178,179,180,181,182,122,183,377,378,17,18,19,20,392,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,393,394,395,396,397,398,399,184,185,186,187,400,188,189,190,401,191,192,193,194,195,196,402,403,404,405,406,197,407,408,409,410,411,412,413,414,415,198,416,417,199,418,419,420,421,422,423,424,425,426,200,427,428,429,430,431,201,432,433,123,202,203,204,102,205,206,124,207,208,209,210,211,45,212,213,214,215,216,217,434,435,46,379,436,218,219,220,221,437,438,222,223,224,225,226,103,227,47,228,104,105,229,439,440,230,231,232,106,233,234,235,107,108,236,237,109,238,239,240,441,241,242,243,244,110,245,442,443,444,445,446,447,448,449,246,450,451,452,453,454,455,247,248,249,250,456,380,251,457,381,458,252,459,253,382,254,383,384,460,111,385,461,48,462,49,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,125,275,126,127,128,129,130,131,50,463,464,465,466,467,468,469,470,471,276,472,473,474,475,476,477,478,479,480,277,481,278,279,280,482,281,282,283,284,285,286,287,51,288,289,290,291,52,292,293,483,484,485,486,487,488,489,294,295,296,297,298,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,299,371,372,373,374,375,300,376,132,301,390,302,303,133,304,305,306,490,491,492,493,494,495,496,307,308,309,497,310,498,499,500,112,311,312,313,501,502,503,504,53,54,55,56,57,314,315,316,505,506,317,507,58,59,113,318,60,61,319,114,115,320,321,116,117,118,119,120,322,323,324,134,325,326,327,328,329,330,331,332,333,334,335,508,336,337,338,135,339,340,341,342,136,343,344,509,345,346,347,348,349,350,351,352,510,91,92,93,94,95,511,96,97,98,99,100,101,62,63,64,65,66,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,67,68,353,512,354,513,514,515,516,517],"status":-1,"binaryOperator":"(int >= 1)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:201","failures":[157,171,171,172,172,173,183,377,199,200,201,434,379,219,220,438,247,456,251,457,458,252,253,254,383,384,111,461,463,468,116,119],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[19,26,32,44,528],"status":-1,"binaryOperator":"int >= 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1595","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:150","sourceCode":"return java.io.ByteArrayOutputStream.toByteArray()","type":"CtReturnImpl"},"failures":[475,529,530],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[171,172,173,183,377,186,190,401,413,414,415,198,416,417,199,418,419,420,421,422,423,424,425,426,200,427,428,429,430,431,201,432,433,531,532,380,381,382,384,533,385],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.InjectionPlan:51","failures":[158,170,402,403,404,405,406,197,407,408,409,410,411,412,445,446,447,448,449,246,450,451,452,453,454,455],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[204,208,209,104,50,534,390,302,304,305,60,114,135,339,509],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[157,168,169,171,171,172,172,173,175,183,184,185,186,187,189,190,198,199,200,201,212,213,215,216,217,434,46,218,219,220,221,519,521,522,249,456,525,251,457,252,459,253,254,460,111,527,461,463,468,277,483,307,308,309,310,117,118,119,322],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"result"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[535],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:60","failures":[377,186,190,401,531,532,380,381,382,533,385],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":20,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":132,"org.easymock.tests2.UsageTest.argumentsOrdered":209,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":238,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":365,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":205,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":158,"org.easymock.tests2.DelegateToTest.testReturnException":177,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":289,"org.easymock.tests.MockingTest.testPartialClassMocking":308,"org.easymock.tests.MockClassControlTest.testToString":484,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":441,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":317,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":421,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":137,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":199,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":231,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":90,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":26,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":62,"org.easymock.tests2.UsageTest.wrongArguments":204,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":412,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":503,"org.easymock.samples.ExampleTest.answerVsDelegate":160,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":468,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":499,"org.easymock.tests2.UsageConstraintsTest.testNull":22,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":215,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":489,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":109,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":518,"org.easymock.tests2.CaptureTest.testPrimitive":6,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":66,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":156,"org.easymock.tests.UsageTest.moreThanOneArgument":301,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":214,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":296,"org.easymock.tests.UsageTest.argumentsOrdered":305,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":325,"org.easymock.tests.UsageVarargTest.varargIntAccepted":280,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":121,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":370,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":53,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":456,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":454,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":395,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":459,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":357,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":57,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":74,"org.easymock.tests.ReplayStateInvalidUsageTest.times":98,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":197,"org.easymock.tests2.DependencyTest.testClassMocking":439,"org.easymock.tests2.AnswerTest.answer":191,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":371,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":444,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":465,"org.easymock.tests2.CaptureTest.testAnd":3,"org.easymock.tests2.UsageTest.strictResetToDefault":202,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":218,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":381,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":295,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":235,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":312,"org.easymock.tests2.DelegateToTest.testDelegate":181,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":329,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":73,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":152,"org.easymock.tests.LimitationsTest.mockFinalMethod":481,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":52,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":494,"org.easymock.tests2.DependencyTest.testClassMockingSupport":440,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":351,"org.easymock.tests2.CaptureTest.testCapture1_2446744":7,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":435,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":150,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":442,"org.easymock.tests.UsageThrowableTest.throwError":125,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":93,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":467,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":505,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":455,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":298,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":531,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":433,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":77,"org.easymock.samples.PartialClassMockTest.testGetArea":157,"org.easymock.tests.MockingTest.testInterfaceMocking":497,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":94,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":54,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":346,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":516,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":422,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":138,"org.easymock.tests2.UsageTest.niceToStrict":102,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":2,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":355,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":252,"org.easymock.tests2.MockBuilderTest.testCreateMock":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":429,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":409,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":386,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":146,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":107,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":464,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":350,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":330,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":501,"org.easymock.tests.UsageOverloadedMethodTest.overloading":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":426,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":136,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":32,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":266,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":323,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":529,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":31,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":12,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":482,"org.easymock.tests.MockClassControlTest.testEquals":488,"org.easymock.tests2.EasyMockSupportClassTest.testAll":198,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":118,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":154,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":519,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":492,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":443,"org.easymock.tests2.CaptureTest.testCaptureAll":4,"org.easymock.tests.MockNameTest.defaultName":517,"org.easymock.tests2.UsageConstraintsTest.testMatches":33,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":297,"org.easymock.samples.ExampleTest.voteForRemovals":164,"org.easymock.tests.UsageVarargTest.allKinds":51,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":338,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":493,"org.easymock.samples.BasicClassMockTest.testPrintContent":169,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":130,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":103,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":451,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":292,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":477,"org.easymock.tests2.UsageConstraintsTest.greaterThan":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":416,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":311,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":221,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":78,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":478,"org.easymock.samples.ExampleTest.voteForRemoval":161,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":437,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":223,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":526,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":469,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":396,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":434,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":70,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":123,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":322,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":233,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":414,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":288,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":176,"org.easymock.tests2.CaptureTest.testCaptureFirst":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":361,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":234,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":211,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":509,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":262,"org.easymock.tests2.CaptureTest.testCapture2_2446744":15,"org.easymock.tests2.UsageTest.moreThanOneArgument":203,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":225,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":372,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":287,"org.easymock.tests.GenericTest.testBridgedEquals":120,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":336,"org.easymock.tests.UsageExpectAndReturnTest.longType":258,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":490,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":232,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":527,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":155,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":40,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":353,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":153,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":294,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":315,"org.easymock.tests.UsageCallCountTest.tooManyCalls":337,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":430,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":263,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":411,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":142,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":129,"org.easymock.tests.MockingTest.testNiceClassMocking":500,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":185,"org.easymock.tests.MockingTest.testClassMocking":496,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":525,"org.easymock.tests2.UsageConstraintsTest.testContains":30,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":331,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":249,"org.easymock.tests2.UsageConstraintsTest.testFind":21,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":134,"org.easymock.tests.MockTypeTest.fromEasyMockClass":466,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":113,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":49,"org.easymock.tests.UsageExpectAndReturnTest.object":265,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":410,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":237,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":282,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":514,"org.easymock.tests.UsageTest.exactCallCountByLastCall":306,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":360,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":506,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":326,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":377,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":271,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":278,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":342,"org.easymock.tests.MockClassControlTest.testHashCode":487,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":446,"org.easymock.tests2.EasyMockSupportTest.testVerify":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":424,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":327,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":340,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":349,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":245,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":45,"org.easymock.tests.UsageVarargTest.varargCharAccepted":281,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":471,"org.easymock.tests2.CaptureTest.testCaptureMultiple":535,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":376,"org.easymock.tests2.UsageTest.openCallCountByLastCall":206,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":0,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":239,"org.easymock.tests.DefaultClassInstantiatorTest.object":276,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":348,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":354,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":534,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":425,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":144,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":523,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":127,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":405,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":445,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":486,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":76,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":219,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":143,"org.easymock.tests.ReplayStateInvalidCallsTest.times":82,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":272,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":314,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":83,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":201,"org.easymock.tests2.UsageTest.resumeIfFailure":210,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":463,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":394,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":291,"org.easymock.tests2.StubTest.stubWithReturnValue":122,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":382,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":41,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":264,"org.easymock.tests2.SerializationTest.testAllMockedMethod":175,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":299,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":387,"org.easymock.samples.SupportTest.voteForRemovals":167,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":116,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":448,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":149,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":300,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":192,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":507,"org.easymock.tests.UsageExpectAndThrowTest.object":147,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":38,"org.easymock.tests2.DelegateToTest.testWrongClass":179,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":67,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":80,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":68,"org.easymock.samples.ConstructorCalledMockTest.testTax":171,"org.easymock.tests.UsageStrictMockTest.range":114,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":398,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":236,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":184,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":148,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":413,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":100,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":304,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":502,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":388,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":72,"org.easymock.tests2.CaptureTest.testCaptureNone":11,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":347,"org.easymock.tests.UsageUnorderedTest.message":50,"org.easymock.tests.UsageVerifyTest.twoReturns":339,"org.easymock.tests.UsageVarargTest.varargByteAccepted":286,"org.easymock.tests2.ThreadingTest.testThreadSafe":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":427,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":335,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":515,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":168,"org.easymock.tests2.CaptureTest.testCapture_2617107":5,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":510,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":374,"org.easymock.tests2.UsageConstraintsTest.any":28,"org.easymock.tests2.StubTest.stub":182,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":97,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":316,"org.easymock.tests.UsageExpectAndThrowTest.longType":140,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":375,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":475,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":96,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":228,"org.easymock.tests2.SerializationTest.testClass":173,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":246,"org.easymock.tests.LimitationsTest.mockNativeMethod":277,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":119,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":274,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":522,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":404,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":88,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":229,"org.easymock.tests2.NameTest.nameForMocksControl":244,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":406,"org.easymock.tests2.MockedExceptionTest.testMockedException":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":417,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":133,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":462,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":141,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":310,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":212,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":254,"org.easymock.tests.MockingTest.testNicePartialClassMocking":309,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":217,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":402,"org.easymock.tests2.CaptureTest.testCaptureLast":10,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":352,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":190,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":25,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":87,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":39,"org.easymock.tests.MockingTest.testTwoMocks":307,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":84,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":401,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":255,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":145,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":208,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":43,"org.easymock.samples.ExampleTest.removeNonExistingDocument":391,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":408,"org.easymock.tests.UsageStrictMockTest.differentMethods":115,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":95,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":447,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":473,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":224,"org.easymock.tests2.MockBuilderTest.testCreateMockString":461,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":418,"org.easymock.tests.UsageExpectAndThrowTest.floatType":139,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":415,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":194,"org.easymock.tests.UsageVerifyTest.twoThrows":135,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":378,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":200,"org.easymock.samples.ExampleTest.voteAgainstRemoval":162,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":366,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":220,"org.easymock.tests.LimitationsTest.privateConstructor":480,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":532,"org.easymock.tests2.UsageConstraintsTest.testNotNull":42,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":131,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":247,"org.easymock.tests2.UsageTest.defaultResetToNice":207,"org.easymock.samples.ExampleTest.voteAgainstRemovals":159,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":367,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":403,"org.easymock.tests.UsageVarargTest.differentLength":283,"org.easymock.tests2.CallbackTest.callback":110,"org.easymock.tests2.UsageConstraintsTest.equals":392,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":379,"org.easymock.tests.UsageTest.openCallCountByLastCall":303,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":17,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":64,"org.easymock.tests.UsageCallCountTest.tooFewCalls":333,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":187,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":504,"org.easymock.tests.UsageThrowableTest.throwCheckedException":128,"org.easymock.tests.MockingTest.testStrictClassMocking":495,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":389,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":189,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":59,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":407,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":186,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":99,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":188,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":196,"org.easymock.tests2.CompareToTest.testGreateOrEqual":528,"org.easymock.tests.ObjectMethodsTest.testHashCode":513,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":86,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":226,"org.easymock.tests2.NameTest.nameForNiceMock":243,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":81,"org.easymock.tests2.DependencyTest.testInterfaceMocking":230,"org.easymock.samples.ExampleTest.addDocument":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":428,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":432,"org.easymock.tests2.DelegateToTest.testStubDelegate":178,"org.easymock.tests2.AnswerTest.stubAnswer":195,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":61,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":383,"org.easymock.tests.UsageVarargTest.varargLongAccepted":285,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":364,"org.easymock.tests.UsageExpectAndReturnTest.floatType":257,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":273,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":183,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":172,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":453,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":36,"org.easymock.tests.UsageThrowableTest.noUpperLimit":275,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":343,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":18,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":393,"org.easymock.tests2.SerializationTest.test":174,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":8,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":530,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":472,"org.easymock.tests2.UsageConstraintsTest.testSame":23,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":256,"org.easymock.samples.SupportTest.addDocument":166,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":400,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":71,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":511,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":419,"org.easymock.tests.GenericTest.testPackageScope":117,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":359,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":452,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":498,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":69,"org.easymock.tests2.NameTest.nameForMock":241,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":267,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":385,"org.easymock.tests2.UsageStrictMockTest.differentMethods":105,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":436,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":259,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":151,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":512,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":313,"org.easymock.tests2.MockedExceptionTest.testRealException":250,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":470,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":369,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":368,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":101,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":63,"org.easymock.tests2.NameTest.nameForStrictMock":242,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":458,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":1,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":48,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":216,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":397,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":474,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":37,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":251,"org.easymock.tests2.UsageStrictMockTest.range":104,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":75,"org.easymock.tests2.UsageConstraintsTest.lessThan":44,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":520,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":449,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":524,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":423,"org.easymock.tests2.CaptureTest.testCaptureRightOne":13,"org.easymock.tests2.UsageConstraintsTest.testOr":24,"org.easymock.tests.UsageRangeTest.combination":112,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":213,"org.easymock.tests.UsageTest.wrongArguments":302,"org.easymock.tests2.MockBuilderTest.testWithConstructor":380,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":420,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":483,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":260,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":356,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":476,"org.easymock.tests.UsageVarargTest.varargShortAccepted":284,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":508,"org.easymock.tests2.UsageConstraintsTest.cmpTo":29,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":89,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":193,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":358,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":124,"org.easymock.tests2.CaptureTest.testCaptureFromStub":14,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":92,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":457,"org.easymock.tests.UsageTest.unexpectedCallWithArray":390,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":85,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":60,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":334,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":533,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":269,"org.easymock.tests2.UsageConstraintsTest.constraints":19,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":319,"org.easymock.samples.ExampleTest.addAndChangeDocument":165,"org.easymock.tests.UsageStrictMockTest.testVerify":321,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":170,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":318,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":491,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":9,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":521,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":55,"org.easymock.tests.LimitationsTest.abstractClass":479,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":261,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":56,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":344,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":108,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":279}}]

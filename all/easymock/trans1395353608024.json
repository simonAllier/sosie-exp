[{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[0,1,2,3,4,5,6,7],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:893","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[9,10,11,12,13,14,15,16,17,18],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:87","sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:325","sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:175","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Constructor<?>.getModifiers())) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[19],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[20,21,22,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:40","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:38","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(long.long, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:48","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character.valueOf(((char)(0))))","type":"CtInvocationImpl"},"failures":[24,25],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1542","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[26,27,13,28,29,30,31,32,33,34,35,36,37,38,39,40],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[41,42,43,44],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"substring","key":"substring"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[45,46,47,48,49,41,50,51,52,53,54,42,55,56,57,58,43,59,60,61,62,63,64,44,8,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,28,29,88,89,90,91,92,93,94,24,95,96,97,98,99,100,101,102,103],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:225","sourceCode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:111","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"failures":[71,72,73,74,75,76,77,78,80,81,82,83,84,104],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:971","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:999","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:127","sourceCode":"java.lang.Object[][int] = java.lang.Object","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[105,106],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[107,108,109,110,111,112,113,113,114,114,115,116,117,118,45,46,119,47,120,121,122,123,124,125,126,127,128,48,49,41,50,51,52,53,54,42,55,56,57,58,43,59,60,61,62,63,64,44,8,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,129,130,131,132,133,134,135,136,137,138,139,140,141,86,142,143,144,145,9,146,105,106,87,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,13,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,28,29,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,88,249,250,251,252,253,254,255,256,257,89,90,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,20,21,275,276,33,34,35,36,37,38,39,91,92,93,94,24,95,277,278,96,97,98,99,100,101,102,279,25,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,103,303,304,305,306,307,308,309,310,311,312,313,314,315,316,22,23,317,318,319,320,321,322,323],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.AssertionErrorWrapper:32","sourceCode":"return java.lang.AssertionError","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[324,325,326],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[108,45,46,129,131,132,134,206,327,317],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:88","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","type":"CtLocalVariableImpl"},"failures":[143,144,328,163],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","args":"args","cstr":"cstr"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[53],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:183","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[329],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1080","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1916","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[330,331,332],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":50,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":275,"org.easymock.tests2.UsageTest.argumentsOrdered":180,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":158,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":248,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":175,"org.easymock.tests2.StubTest.stubWithReturnValue":208,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":11,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":234,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":67,"org.easymock.tests2.DelegateToTest.testReturnException":201,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":260,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":246,"org.easymock.tests.MockingTest.testPartialClassMocking":263,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":27,"org.easymock.samples.SupportTest.voteForRemovals":116,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":254,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":295,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":283,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":261,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":197,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":130,"org.easymock.tests.UsageExpectAndThrowTest.object":293,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":8,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":118,"org.easymock.tests2.DelegateToTest.testWrongClass":203,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":14,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":101,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":102,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":55,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":96,"org.easymock.tests2.UsageTest.wrongArguments":173,"org.easymock.tests.UsageStrictMockTest.range":222,"org.easymock.samples.ConstructorCalledMockTest.testTax":113,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":211,"org.easymock.samples.ExampleTest.answerVsDelegate":108,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":155,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":188,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":3,"org.easymock.tests2.UsageConstraintsTest.testNull":52,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":294,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":138,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":157,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":165,"org.easymock.tests2.CaptureTest.testPrimitive":74,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":100,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":302,"org.easymock.tests.UsageTest.moreThanOneArgument":276,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":37,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":210,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":137,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":217,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":30,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":268,"org.easymock.tests2.CaptureTest.testCaptureNone":79,"org.easymock.tests.UsageUnorderedTest.message":103,"org.easymock.tests.UsageVerifyTest.twoReturns":257,"org.easymock.tests2.ThreadingTest.testThreadSafe":146,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":311,"org.easymock.tests.UsageTest.argumentsOrdered":38,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":92,"org.easymock.tests2.CaptureTest.testCapture_2617107":73,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":19,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":161,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":331,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":99,"org.easymock.tests2.UsageConstraintsTest.any":57,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":164,"org.easymock.tests2.StubTest.stub":207,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":95,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":21,"org.easymock.tests.UsageExpectAndThrowTest.longType":286,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":247,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":120,"org.easymock.tests2.SerializationTest.testClass":13,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":187,"org.easymock.tests.LimitationsTest.mockNativeMethod":272,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":128,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":244,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":214,"org.easymock.tests2.AnswerTest.answer":129,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":56,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":127,"org.easymock.tests2.CaptureTest.testAnd":71,"org.easymock.tests2.UsageTest.strictResetToDefault":171,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":123,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":142,"org.easymock.tests2.MockedExceptionTest.testMockedException":184,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":216,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":252,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":152,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":36,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":315,"org.easymock.tests2.DelegateToTest.testDelegate":205,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":287,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":265,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":135,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":166,"org.easymock.tests.MockingTest.testNicePartialClassMocking":264,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":298,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":140,"org.easymock.tests2.CaptureTest.testCaptureLast":78,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":88,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":259,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":194,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":42,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":282,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":65,"org.easymock.tests.MockingTest.testTwoMocks":262,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":258,"org.easymock.tests2.CaptureTest.testCapture1_2446744":75,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":225,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":291,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":125,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":179,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":69,"org.easymock.tests.UsageThrowableTest.throwError":303,"org.easymock.tests.UsageStrictMockTest.differentMethods":223,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":106,"org.easymock.tests2.MockBuilderTest.testCreateMockString":169,"org.easymock.tests.UsageExpectAndThrowTest.floatType":285,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":219,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":62,"org.easymock.tests.ResultTest.createReturnResultToString":325,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":132,"org.easymock.tests.UsageVerifyTest.twoThrows":256,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":198,"org.easymock.samples.PartialClassMockTest.testGetArea":115,"org.easymock.tests.ResultTest.createDelegateResultToString":324,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":93,"org.easymock.samples.ExampleTest.voteAgainstRemoval":110,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":267,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":266,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":144,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":284,"org.easymock.tests2.UsageTest.niceToStrict":174,"org.easymock.tests2.UsageConstraintsTest.testNotNull":68,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":310,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":183,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":7,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":163,"org.easymock.tests2.MockBuilderTest.testCreateMock":167,"org.easymock.tests2.UsageTest.defaultResetToNice":178,"org.easymock.samples.ExampleTest.voteAgainstRemovals":107,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":329,"org.easymock.tests2.CallbackTest.callback":206,"org.easymock.tests.UsageTest.openCallCountByLastCall":35,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":292,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":26,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":153,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":48,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":23,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":209,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":98,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":4,"org.easymock.tests.UsageOverloadedMethodTest.overloading":270,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":320,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":60,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":269,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":236,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":191,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":59,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":80,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":212,"org.easymock.tests.UsageThrowableTest.throwCheckedException":307,"org.easymock.tests2.EasyMockSupportClassTest.testAll":196,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":300,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":31,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":280,"org.easymock.tests2.CaptureTest.testCaptureAll":72,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":126,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":193,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":90,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":190,"org.easymock.tests2.UsageConstraintsTest.testMatches":61,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":192,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":134,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":218,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":32,"org.easymock.samples.ExampleTest.voteForRemovals":111,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":147,"org.easymock.tests.UsageVarargTest.allKinds":91,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":255,"org.easymock.tests2.DependencyTest.testInterfaceMocking":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":16,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":281,"org.easymock.tests2.DelegateToTest.testStubDelegate":202,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":309,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":119,"org.easymock.tests2.AnswerTest.stubAnswer":133,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":249,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":204,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":29,"org.easymock.tests2.UsageConstraintsTest.greaterThan":63,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":18,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":251,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":145,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":224,"org.easymock.samples.ExampleTest.voteForRemoval":109,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":105,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":243,"org.easymock.tests.UsageExpectAndReturnTest.floatType":227,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":332,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":9,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":141,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":114,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":321,"org.easymock.tests.UsageThrowableTest.noUpperLimit":304,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":64,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":278,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":49,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":170,"org.easymock.tests2.SerializationTest.test":195,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":76,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":12,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":150,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":305,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":226,"org.easymock.tests2.UsageConstraintsTest.testSame":53,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":245,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":200,"org.easymock.tests2.CaptureTest.testCaptureFirst":84,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":151,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":182,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":323,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":232,"org.easymock.tests.GenericTest.testPackageScope":213,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":87,"org.easymock.tests2.CaptureTest.testCapture2_2446744":83,"org.easymock.tests2.UsageTest.moreThanOneArgument":172,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":314,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":168,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":5,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":2,"org.easymock.tests.UsageExpectAndReturnTest.longType":228,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":279,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":148,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":301,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":237,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":277,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":66,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":299,"org.easymock.tests2.UsageStrictMockTest.differentMethods":122,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":215,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":20,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":229,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":297,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":253,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":273,"org.easymock.tests2.MockedExceptionTest.testRealException":186,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":233,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":327,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":288,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":47,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":308,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":97,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":189,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":328,"org.easymock.tests2.UsageConstraintsTest.testContains":43,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":185,"org.easymock.tests2.UsageConstraintsTest.testFind":51,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":271,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":1,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":45,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":139,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":220,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":46,"org.easymock.tests.UsageExpectAndReturnTest.object":235,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":44,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":86,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":162,"org.easymock.tests2.UsageStrictMockTest.range":121,"org.easymock.tests2.UsageConstraintsTest.lessThan":70,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":156,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":15,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":6,"org.easymock.tests.UsageTest.exactCallCountByLastCall":39,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":89,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":17,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":149,"org.easymock.tests2.CaptureTest.testCaptureRightOne":81,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":312,"org.easymock.tests2.UsageConstraintsTest.testOr":54,"org.easymock.tests.UsageRangeTest.combination":250,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":10,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":241,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":40,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":136,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":319,"org.easymock.tests.UsageTest.wrongArguments":34,"org.easymock.tests.ResultTest.createThrowResultToString":326,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":230,"org.easymock.tests2.EasyMockSupportTest.testVerify":160,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":238,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":313,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":317,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":22,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":124,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":85,"org.easymock.tests2.UsageConstraintsTest.cmpTo":58,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":131,"org.easymock.tests2.UsageTest.openCallCountByLastCall":176,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":177,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":0,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":159,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":316,"org.easymock.tests2.CaptureTest.testCaptureFromStub":82,"org.easymock.tests.UsageTest.unexpectedCallWithArray":33,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":290,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":306,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":28,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":239,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":221,"org.easymock.tests2.UsageConstraintsTest.constraints":41,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":143,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":289,"org.easymock.samples.ExampleTest.addAndChangeDocument":112,"org.easymock.tests.CapturesMatcherTest.test":104,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":242,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":199,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":25,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":77,"org.easymock.tests2.UsageTest.resumeIfFailure":181,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":94,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":231,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":322,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":24,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":154,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":330}}]

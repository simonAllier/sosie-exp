[{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,1],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:224","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:220","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,2,3,39,40,41,4,5,42,6,43,7,8,44,45,46,47,9,48,49,10,50,51,11,52,53,54,55,56,12,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,13,14,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,15,16,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,17,146,147,18,148,149,150,151,152,153,154,20,155,156,157,158,21,22,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,23,24,201],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[202],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[203,204,205,206,207,208,209],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[210],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[211,212,213],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:45","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"failures":[58,59,60,61,62,63,64,214,215,65,66,216,217,218,219],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[92,14,220,221,101,222,120,223,224,225,226,227,228,148,229,20,156,22,230,169,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,199,200,231],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[232,233,75,234],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"position":"org.easymock.EasyMock:1039","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:54","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[37,2,3,94,235,236,237,238,239,240,123,15,16,18,148,149,241,202,242,243,244,157,193,245,246,201,247],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[34,35,37,41,4,5,42,6,43,7,8,44,45,248,46,47,9,48,49,10,50,51,11,52,53,54,249,55,56,12,57,58,59,60,61,62,63,64,214,215,65,66,216,217,218,250,251,78,122,123,227,150,229,252,162,163,164,165,166,167,168,230,169,170,171,172,193],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[115,117,253,118,254,255],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:60","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[96],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[110,111],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"failures":[75,256,205,206,207,208,209,257],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[51,258],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"failures":[46,47,150,229],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[25,26,27,28,259,29,260,232,232,233,233,261,30,262,263,31,264,265,32,33,34,35,36,266,37,38,2,3,39,267,268,269,270,40,41,4,5,42,6,43,7,8,44,45,46,47,9,48,49,10,50,51,11,52,53,54,55,56,12,57,58,59,60,61,62,63,64,214,215,65,66,216,217,218,67,68,69,70,71,271,72,73,272,74,251,273,274,75,76,275,77,78,79,80,276,81,82,83,84,277,278,85,279,86,87,280,281,88,282,89,90,91,283,92,93,94,95,96,97,13,14,284,98,99,285,100,220,221,101,222,102,103,104,105,106,107,108,109,110,111,286,287,112,113,114,288,213,289,290,115,116,117,118,119,291,120,292,293,294,295,296,297,298,299,300,301,302,121,303,122,123,124,15,16,125,304,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,223,224,225,226,227,228,17,305,146,147,18,148,149,150,229,151,152,153,154,20,155,306,307,308,309,310,311,312,313,314,315,316,317,318,156,157,319,158,21,22,159,160,161,320,321,322,323,324,325,326,327,328,252,162,163,164,165,166,329,167,168,230,169,170,171,172,330,331,332,333,334,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,335,195,196,197,198,199,200,201],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[232,232,233,233,30,264,265,71,271,73,272,74,336,251,273,337,274,211,75,281,338,88,282,89,90,339,91,283,101,103,104,105,106,108,109,110,286,287,112,113,114,296,297,340,341,151,152,153,155,318,329],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.ReplayState:141","sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[25,26,27,28,259,29,260,232,233,261,30,262,263,31,264,265,32,33,34,342,35,36,266,37,38,2,3,39,267,268,269,270,40,41,4,5,42,6,43,7,8,44,45,46,47,9,48,49,10,50,51,11,52,53,54,249,55,56,12,57,58,59,60,61,62,63,64,214,215,65,66,216,217,218,67,68,69,70,71,271,72,73,272,74,336,251,273,337,274,211,75,76,275,77,78,79,80,276,81,82,83,84,277,278,85,279,86,87,280,281,338,88,282,89,90,339,91,283,92,93,94,95,96,97,13,14,284,98,99,285,100,220,221,101,222,102,103,104,105,106,107,108,109,110,111,286,287,112,113,114,115,116,117,118,119,291,120,292,293,294,295,296,297,298,299,300,301,302,121,303,122,123,124,15,16,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,223,224,225,226,227,228,17,146,147,18,148,149,150,229,151,152,153,343,154,20,155,308,309,310,311,344,345,346,156,157,319,158,21,22,159,160,161,320,321,322,323,324,347,325,326,327,328,252,162,163,164,165,166,329,167,168,230,169,170,171,172,330,331,332,333,334,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,335,195,196,197,198,199,200,348,255,231,247],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"threadSafe"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:88","sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResult:41","sourceCode":"return org.easymock.internal.Result","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[26,115,117,253,118,255],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[110,111,286,349],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[350,351,256,208,209],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[25,26,27,28,259,29,260,232,232,233,233,261,30,262,263,31,264,265,32,33,34,35,36,266,37,38,2,3,39,267,268,269,270,40,41,4,5,42,6,43,7,8,44,45,46,47,9,48,49,10,50,51,11,52,53,54,55,56,12,57,58,59,60,61,62,63,64,214,215,65,66,216,217,218,67,68,69,70,71,271,72,73,272,74,251,273,274,75,76,275,77,78,79,80,276,81,82,83,84,277,278,85,279,86,87,280,281,88,282,89,90,91,283,92,93,94,95,96,97,13,14,284,98,99,285,100,220,221,101,222,102,103,104,105,106,107,108,109,110,111,286,287,112,113,114,288,213,289,290,115,116,117,118,119,291,120,292,293,294,295,296,297,298,299,300,301,302,121,303,122,123,124,15,16,125,304,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,223,224,225,226,227,228,17,305,146,147,18,148,149,150,229,151,152,153,154,20,155,306,307,308,309,310,311,312,313,314,315,316,317,318,156,157,319,158,21,22,159,160,161,320,321,322,323,324,325,326,327,328,252,162,163,164,165,166,329,167,168,230,169,170,171,172,330,331,332,333,334,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,335,195,196,197,198,199,200,201],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[232,232,233,233,30,264,265,352,353,71,271,73,272,74,336,251,354,355,273,337,274,211,356,212,75,203,281,338,357,358,88,282,89,90,359,339,91,283,220,221,101,103,104,105,106,108,109,110,286,360,361,362,287,363,364,112,365,366,367,368,369,370,371,372,373,113,374,375,376,377,378,114,379,380,0,296,297,340,1,381,382,383,384,385,386,387,388,389,341,151,152,153,390,391,392,393,394,155,395,396,318,397,398,399,400,401,402,329],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mockClass":"toMock","this":"enhancer"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":42,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":156,"org.easymock.tests2.UsageTest.argumentsOrdered":99,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":86,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":97,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":262,"org.easymock.tests2.DelegateToTest.testReturnException":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":224,"org.easymock.tests.MockingTest.testPartialClassMocking":151,"org.easymock.tests.MockClassControlTest.testToString":397,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":368,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":173,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":112,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":33,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":205,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":45,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":167,"org.easymock.tests2.UsageTest.wrongArguments":95,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":294,"org.easymock.samples.ExampleTest.answerVsDelegate":26,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":392,"org.easymock.tests2.UsageConstraintsTest.testNull":43,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":73,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":402,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":279,"org.easymock.tests2.CaptureTest.testPrimitive":61,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":170,"org.easymock.tests.UsageTest.moreThanOneArgument":157,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":192,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":72,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":300,"org.easymock.tests.UsageTest.argumentsOrdered":160,"org.easymock.tests.UsageVarargTest.varargIntAccepted":322,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":240,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":162,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":209,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":281,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":254,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":166,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":40,"org.easymock.tests2.AnswerTest.answer":67,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":248,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":270,"org.easymock.tests2.CaptureTest.testAnd":58,"org.easymock.tests2.UsageTest.strictResetToDefault":93,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":273,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":299,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":146,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":83,"org.easymock.tests2.DelegateToTest.testDelegate":118,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":188,"org.easymock.tests.LimitationsTest.mockFinalMethod":395,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":227,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":334,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":241,"org.easymock.tests2.CaptureTest.testCapture1_2446744":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":186,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":268,"org.easymock.tests.UsageThrowableTest.throwError":194,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":302,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":380,"org.easymock.samples.PartialClassMockTest.testGetArea":30,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":313,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":163,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":174,"org.easymock.tests2.UsageTest.niceToStrict":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":369,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":88,"org.easymock.tests2.MockBuilderTest.testCreateMock":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":376,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":182,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":236,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":84,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":306,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":292,"org.easymock.tests.UsageOverloadedMethodTest.overloading":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":378,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":49,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":231,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":137,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":343,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":48,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":65,"org.easymock.tests.MockClassControlTest.testEquals":401,"org.easymock.tests2.EasyMockSupportClassTest.testAll":287,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":297,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":190,"org.easymock.tests2.CaptureTest.testCaptureAll":59,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":269,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":332,"org.easymock.tests2.UsageConstraintsTest.testMatches":10,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":301,"org.easymock.samples.ExampleTest.voteForRemovals":29,"org.easymock.tests.UsageVarargTest.allKinds":252,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":18,"org.easymock.samples.BasicClassMockTest.testPrintContent":265,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":333,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":199,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":36,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":228,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":253,"org.easymock.tests2.UsageConstraintsTest.greaterThan":51,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":363,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":305,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":211,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":387,"org.easymock.samples.ExampleTest.voteForRemoval":27,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":275,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":356,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":210,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":336,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":92,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":329,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":359,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":81,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":361,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":223,"org.easymock.tests2.CaptureTest.testCaptureFirst":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":82,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":100,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":247,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":133,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":78,"org.easymock.tests2.UsageTest.moreThanOneArgument":94,"org.easymock.tests2.CaptureTest.testCapture2_2446744":217,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":91,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":328,"org.easymock.tests.GenericTest.testBridgedEquals":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":345,"org.easymock.tests.UsageExpectAndReturnTest.longType":129,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":80,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":330,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":191,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":249,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":189,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":298,"org.easymock.tests.UsageCallCountTest.tooManyCalls":346,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":377,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":134,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":178,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":198,"org.easymock.tests.MockingTest.testNiceClassMocking":390,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":104,"org.easymock.tests.MockingTest.testClassMocking":389,"org.easymock.tests2.UsageConstraintsTest.testContains":9,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":307,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":101,"org.easymock.tests2.UsageConstraintsTest.testFind":6,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":20,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":121,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":35,"org.easymock.tests.UsageExpectAndReturnTest.object":136,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":251,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":85,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":206,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":324,"org.easymock.tests.UsageTest.exactCallCountByLastCall":161,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":150,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":23,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":203,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":142,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":320,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":255,"org.easymock.tests.MockClassControlTest.testHashCode":400,"org.easymock.tests2.EasyMockSupportTest.testVerify":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":371,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":24,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":348,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":267,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":250,"org.easymock.tests.UsageVarargTest.varargCharAccepted":323,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":266,"org.easymock.tests2.UsageTest.openCallCountByLastCall":13,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":87,"org.easymock.tests.DefaultClassInstantiatorTest.object":381,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":244,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":372,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":196,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":399,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":337,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":179,"org.easymock.tests.CapturesMatcherTest.test":219,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":143,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":114,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":238,"org.easymock.tests2.UsageTest.resumeIfFailure":285,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":391,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":226,"org.easymock.tests2.StubTest.stubWithReturnValue":120,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":204,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":135,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":55,"org.easymock.tests2.SerializationTest.testAllMockedMethod":286,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":351,"org.easymock.samples.SupportTest.voteForRemovals":31,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":185,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":349,"org.easymock.tests.UsageExpectAndThrowTest.object":183,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":53,"org.easymock.tests2.DelegateToTest.testWrongClass":117,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":171,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":172,"org.easymock.tests.UsageStrictMockTest.range":15,"org.easymock.samples.ConstructorCalledMockTest.testTax":232,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":278,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":103,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":184,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":89,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":360,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":293,"org.easymock.tests2.CaptureTest.testCaptureNone":215,"org.easymock.tests.UsageUnorderedTest.message":193,"org.easymock.tests.UsageVerifyTest.twoReturns":149,"org.easymock.tests.UsageVarargTest.varargByteAccepted":327,"org.easymock.tests2.ThreadingTest.testThreadSafe":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":374,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":311,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":264,"org.easymock.tests2.CaptureTest.testCapture_2617107":60,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":169,"org.easymock.tests2.UsageConstraintsTest.any":46,"org.easymock.tests2.StubTest.stub":291,"org.easymock.tests.UsageExpectAndThrowTest.longType":176,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":225,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":385,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":315,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":38,"org.easymock.tests2.SerializationTest.testClass":110,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":102,"org.easymock.tests.LimitationsTest.mockNativeMethod":155,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":145,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":340,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":39,"org.easymock.tests2.NameTest.nameForMocksControl":290,"org.easymock.tests2.MockedExceptionTest.testMockedException":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":364,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":22,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":177,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":153,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":342,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":71,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":90,"org.easymock.tests.MockingTest.testNicePartialClassMocking":152,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":74,"org.easymock.tests2.CaptureTest.testCaptureLast":214,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":256,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":202,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":109,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":44,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":54,"org.easymock.tests.MockingTest.testTwoMocks":341,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":126,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":181,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":98,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":12,"org.easymock.tests.UsageStrictMockTest.differentMethods":16,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":314,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":383,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":77,"org.easymock.tests2.ConstraintsToStringTest.andToString":239,"org.easymock.tests2.MockBuilderTest.testCreateMockString":283,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":396,"org.easymock.tests.UsageExpectAndThrowTest.floatType":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":365,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":362,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":68,"org.easymock.tests.UsageVerifyTest.twoThrows":148,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":113,"org.easymock.samples.ExampleTest.voteAgainstRemoval":28,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":274,"org.easymock.tests.LimitationsTest.privateConstructor":394,"org.easymock.tests2.UsageConstraintsTest.testNotNull":56,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":200,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":220,"org.easymock.tests2.UsageTest.defaultResetToNice":284,"org.easymock.samples.ExampleTest.voteAgainstRemovals":25,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":141,"org.easymock.tests.UsageVarargTest.differentLength":347,"org.easymock.tests2.CallbackTest.callback":119,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":354,"org.easymock.tests.UsageTest.openCallCountByLastCall":21,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":41,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":230,"org.easymock.tests.UsageCallCountTest.tooFewCalls":309,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":106,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":295,"org.easymock.tests.UsageThrowableTest.throwCheckedException":197,"org.easymock.tests.MockingTest.testStrictClassMocking":388,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":242,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":108,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":229,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":105,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":316,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":107,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":70,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":208,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":79,"org.easymock.tests2.NameTest.nameForNiceMock":289,"org.easymock.tests2.DependencyTest.testInterfaceMocking":32,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":207,"org.easymock.samples.ExampleTest.addDocument":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":375,"org.easymock.tests2.DelegateToTest.testStubDelegate":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":379,"org.easymock.tests2.AnswerTest.stubAnswer":69,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":123,"org.easymock.tests.UsageVarargTest.varargLongAccepted":326,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":125,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":144,"org.easymock.tests.UsageExpectAndReturnTest.floatType":128,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":75,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":233,"org.easymock.tests2.ConstraintsToStringTest.orToString":235,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":11,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":246,"org.easymock.tests.UsageThrowableTest.noUpperLimit":335,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":4,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":352,"org.easymock.tests2.SerializationTest.test":111,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":63,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":382,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":127,"org.easymock.tests2.UsageConstraintsTest.testSame":7,"org.easymock.samples.SupportTest.addDocument":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":366,"org.easymock.tests.GenericTest.testPackageScope":296,"org.easymock.tests2.NameTest.nameForMock":288,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":138,"org.easymock.tests2.UsageStrictMockTest.differentMethods":3,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":355,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":130,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":187,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":147,"org.easymock.tests2.MockedExceptionTest.testRealException":222,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":243,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":350,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":37,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":168,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":317,"org.easymock.tests2.NameTest.nameForStrictMock":213,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":358,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":34,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":272,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":353,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":384,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":52,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":338,"org.easymock.tests2.UsageStrictMockTest.range":2,"org.easymock.tests2.UsageConstraintsTest.lessThan":57,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":276,"org.easymock.tests2.CaptureTest.testCaptureRightOne":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":370,"org.easymock.tests2.UsageConstraintsTest.testOr":8,"org.easymock.tests.UsageRangeTest.combination":17,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":271,"org.easymock.tests.UsageTest.wrongArguments":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":367,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":318,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":131,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":19,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":386,"org.easymock.tests.UsageVarargTest.varargShortAccepted":325,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":344,"org.easymock.tests2.UsageConstraintsTest.cmpTo":47,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":14,"org.easymock.tests2.CaptureTest.testCaptureFromStub":216,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":312,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":357,"org.easymock.tests.UsageTest.unexpectedCallWithArray":319,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":122,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":310,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":140,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":124,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.samples.ExampleTest.addAndChangeDocument":260,"org.easymock.tests2.ConstraintsToStringTest.notToString":237,"org.easymock.tests.UsageStrictMockTest.testVerify":304,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":261,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":303,"org.easymock.tests2.CompareToTest.testGreateThan":258,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":331,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":64,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":164,"org.easymock.tests.LimitationsTest.abstractClass":393,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":132,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":165,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":201,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":277,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":321}}]

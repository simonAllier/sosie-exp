[{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (this.java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:82","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,304,305,305,306,307,308,309,310,311],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"equalsMethod","finalizeMethod":"equalsMethod"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[312,313,314,315,316,317],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[7,9,11,12,13,16,17,18,19],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[318,319,191,320,321,274],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[67],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Invocation:99","failures":[58,106,133,135,176,322,302,303,308,309,310,311],"status":-1,"binaryOperator":"((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[313,314,315,316,317],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:280","failures":[136,137,138,139,140,141,282,307],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:352","sourceCode":"if ((java.lang.reflect.Type[].int) > 0) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0];\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.lang.reflect.Type = java.lang.reflect.Type;\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[0,1,2,323,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,37,38,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,90,174,175,181,182,183,184,185,191,192,227,228,239,240,241,261,265,266,267,268,269,270],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"failures":[324],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[318,319,191,320,321,274],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:117","failures":[0,1,21,24,26,33,281,307],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[47,65,71,325],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[5,326,31,42,43,44,45,46,75,76,78,79,80,327,81,82,83,84,85,92,93,94,95,97,98,103,104,105,106,328,107,108,329,109,110,330,165,210,331,211,332,220,221,222,271,333,334,303,304,304,305,305],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"searchType"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"potentialValue":"potentialValue"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[335],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:760","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:747","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[318,319,191,320,321,274],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[49,56,62,74,336],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[337,338,339,340,341,0,342,1,2,3,4,343,5,6,326,323,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,344,345,346,347,348,27,28,349,350,351,352,353,29,30,31,32,33,354,355,356,357,358,34,35,359,360,361,362,363,36,364,37,38,39,40,41,365,366,367,42,368,369,43,370,371,372,373,374,375,376,377,378,44,379,380,381,382,383,45,384,385,46,386,387,388,389,390,391,392,47,48,49,50,393,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,327,394,81,395,396,82,83,84,85,397,86,87,398,88,89,90,91,92,93,94,95,399,96,97,98,400,401,402,403,404,405,99,100,406,407,101,102,103,104,105,408,106,328,107,108,409,410,329,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,411,136,137,138,139,140,141,142,143,144,412,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,435,180,436,437,438,439,440,441,442,443,444,445,446,447,448,312,313,314,315,449,316,317,181,182,183,184,185,186,187,188,189,190,450,191,192,193,194,195,196,451,197,198,199,200,201,202,203,204,452,453,205,206,207,454,208,209,455,210,331,211,212,213,214,215,216,217,218,219,456,457,458,332,220,221,459,222,460,461,462,223,224,225,226,227,228,229,463,464,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,465,466,467,468,469,470,471,472,473,474,475,261,476,477,262,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,263,500,501,502,503,504,264,505,265,266,267,268,269,270,506,507,271,508,272,273,274,275,276,277,278,279,280,281,509,282,283,510,284,511,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,512,302,333,334,513,303,514,304,305,306,307,308,309,515,310,516,311],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:71","failures":[5,43,44,45,327,83,84,86,103,104,105,106,328,107,108,329,109,110,211,229,232,303],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[338,339,340,341,326,8,9,12,13,14,15,20,21,36,364,37,38,39,40,41,57,58,70,71,99,104,106,109,114,116,120,121,127,133,134,135,411,165,166,170,171,183,184,190,450,191,192,193,194,195,196,451,198,331,465,466,467,469,470,471,472,473,474,475,261,476,262,478,479,480,482,483,265,275,278,279,512,302,333,334,513,514,306,308,309,515,310,311],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[337,338,339,340,341,0,342,1,2,3,4,343,5,6,326,323,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,344,345,346,347,348,27,28,349,350,351,352,353,29,30,31,32,33,354,355,356,357,358,34,35,359,360,361,362,363,36,364,37,38,39,40,41,365,366,367,42,368,369,43,370,371,372,373,374,375,376,377,378,44,379,380,381,382,383,45,384,385,46,386,517,387,388,389,518,390,391,392,47,48,49,50,393,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,327,394,81,395,396,82,83,84,85,397,86,87,88,89,90,91,92,93,94,95,399,96,97,98,400,99,100,406,407,101,102,103,519,104,105,520,408,106,328,107,521,108,409,410,329,109,522,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,411,136,137,138,139,140,141,142,143,144,412,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,523,435,180,436,437,438,439,440,441,442,443,444,445,446,447,448,524,312,313,314,315,449,316,525,317,181,182,183,184,185,186,187,188,189,190,450,191,192,193,194,195,196,451,197,198,199,200,201,202,203,204,452,453,205,206,207,454,208,209,455,210,331,211,212,213,214,215,216,217,218,219,456,457,458,332,220,221,459,222,460,461,462,223,224,225,226,227,228,229,463,464,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,465,466,467,468,469,470,471,472,473,474,475,261,476,477,262,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,263,500,501,502,503,504,264,505,265,266,267,268,269,270,506,507,271,508,272,273,274,275,276,277,278,279,280,281,509,282,283,510,284,511,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,512,302,333,334,513,303,514,304,305,306,307,308,309,515,310,516,311],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[5,46,386,521,410,526,527,528,529,530],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[318,319,191,320,321,274],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:318","failures":[197,200],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:53","failures":[64],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:51","failures":[39,531,194,300,301],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:103","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"this.org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[0,1,323,7,8,9,10,11,12,13,14,15,16,17,18,19,20,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,174,175,181,182,183,184,185,191,192,227,239,240,261,265,266,267,268,269,270],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[532],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"argType":"type","paramType":"type"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[72],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,343,5,6,326,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,25,26,27,29,30,31,32,33,34,36,364,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,327,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,328,107,108,329,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,411,137,138,139,141,142,143,144,412,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,178,179,181,182,183,184,185,190,450,191,192,193,194,195,196,197,198,199,200,201,202,203,204,210,331,213,214,215,216,217,220,221,222,223,224,225,226,227,228,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,465,466,467,469,470,471,472,473,474,475,261,262,478,479,480,481,482,483,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,511,285,286,287,288,289,290,291,292,299,300,301,512,302,333,334,513,303,514,304,305,306,307,308,309,515,310,311],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:34","failures":[37,39,40,64,533,318,534,535,536,537,538,539,319,540,541,113,114,120,121,191,192,194,195,218,219,320,542,321,543,544,545,546,265,273,274,275,278,279,509,510,284,511,299,300,301],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:94","failures":[7,8,9,10,17,18,49,50,51,52,53,54,55,56,57,58,67,68,72,73],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"value","i":"i"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[455],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[22,25,26,490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:417","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[0,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,37,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,107,108,109,111,112,113,115,117,118,119,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,192,194,195,197,198,199,200,201,202,203,204,210,211,213,214,215,216,217,219,220,221,222,223,224,225,226,227,228,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,276,277,280,281,282,283,284,285,286,287,299,300,301,302,303,304,304,305,305,306,307,308,309,310,311],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":50,"org.easymock.tests2.UsageTest.argumentsOrdered":121,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":272,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":134,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":494,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":116,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":513,"org.easymock.tests2.DelegateToTest.testReturnException":137,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":224,"org.easymock.tests.MockingTest.testPartialClassMocking":220,"org.easymock.tests.MockClassControlTest.testToString":205,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":337,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":180,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":502,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":373,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":145,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":43,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":102,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":434,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":526,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":56,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":181,"org.easymock.tests2.UsageTest.wrongArguments":114,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":353,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":144,"org.easymock.samples.ExampleTest.answerVsDelegate":307,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":232,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":461,"org.easymock.tests2.UsageConstraintsTest.testNull":52,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":78,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":133,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":209,"org.easymock.tests2.CaptureTest.testPrimitive":10,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":185,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":164,"org.easymock.tests.UsageTest.moreThanOneArgument":273,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":215,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":169,"org.easymock.tests.UsageTest.argumentsOrdered":279,"org.easymock.tests.UsageVarargTest.varargIntAccepted":467,"org.easymock.tests.InvocationTest.testEquals":322,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":540,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":499,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":266,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":103,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":389,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":362,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":486,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":270,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":418,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":536,"org.easymock.tests.ReplayStateInvalidUsageTest.times":445,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":27,"org.easymock.tests2.DependencyTest.testClassMocking":406,"org.easymock.tests2.AnswerTest.answer":21,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":500,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":343,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":464,"org.easymock.tests2.CaptureTest.testAnd":7,"org.easymock.tests2.UsageTest.strictResetToDefault":112,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":520,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":82,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":214,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":178,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":128,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":173,"org.easymock.tests2.DelegateToTest.testDelegate":141,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":417,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":160,"org.easymock.tests.LimitationsTest.mockFinalMethod":508,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":227,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":292,"org.easymock.tests2.DependencyTest.testClassMockingSupport":407,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":218,"org.easymock.tests2.CaptureTest.testCapture1_2446744":11,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":394,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":158,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":3,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":439,"org.easymock.tests.UsageThrowableTest.throwError":197,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":231,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":523,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":363,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":217,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":532,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":385,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":421,"org.easymock.samples.PartialClassMockTest.testGetArea":303,"org.easymock.tests.MockingTest.testInterfaceMocking":459,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":440,"org.easymock.tests2.CompareToTest.testLessOrEqual":325,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":267,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":167,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":146,"org.easymock.tests2.UsageTest.niceToStrict":115,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":374,"org.easymock.tests2.ThreadingTest.testChangeDefault":398,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":484,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":106,"org.easymock.tests2.MockBuilderTest.testCreateMock":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":381,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":350,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":154,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":318,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":129,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":463,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":238,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":476,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":142,"org.easymock.tests.UsageOverloadedMethodTest.overloading":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":383,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":62,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":283,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":252,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":285,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":61,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":16,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":468,"org.easymock.tests2.EasyMockSupportClassTest.testAll":42,"org.easymock.tests.MockClassControlTest.testEquals":208,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":331,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":538,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":162,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":330,"org.easymock.tests2.CaptureTest.testCaptureAll":8,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":290,"org.easymock.tests.MockNameTest.defaultName":235,"org.easymock.tests2.UsageConstraintsTest.testMatches":63,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":437,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":216,"org.easymock.samples.ExampleTest.voteForRemovals":310,"org.easymock.tests.UsageVarargTest.allKinds":261,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":299,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":291,"org.easymock.samples.BasicClassMockTest.testPrintContent":334,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":203,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":36,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":140,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":228,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":359,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":530,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":525,"org.easymock.tests2.UsageConstraintsTest.greaterThan":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":368,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":177,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":85,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":422,"org.easymock.samples.ExampleTest.voteForRemoval":308,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":317,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":397,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":88,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":335,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":233,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":518,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":327,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":414,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":165,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":111,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":491,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":126,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":366,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":223,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":136,"org.easymock.tests2.CaptureTest.testCaptureFirst":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":490,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":127,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":123,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":511,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":248,"org.easymock.tests2.UsageTest.moreThanOneArgument":113,"org.easymock.tests2.CaptureTest.testCapture2_2446744":19,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":501,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":109,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":475,"org.easymock.tests.GenericTest.testBridgedEquals":212,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":482,"org.easymock.tests.UsageExpectAndReturnTest.longType":244,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":124,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":288,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":163,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":186,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":70,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":161,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":188,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":213,"org.easymock.tests.UsageCallCountTest.tooManyCalls":483,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":542,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":382,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":249,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":352,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":150,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":202,"org.easymock.tests.MockingTest.testNiceClassMocking":462,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":93,"org.easymock.tests.MockingTest.testClassMocking":458,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":477,"org.easymock.tests2.UsageConstraintsTest.testContains":60,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":31,"org.easymock.tests2.UsageConstraintsTest.testFind":51,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":287,"org.easymock.tests.MockTypeTest.fromEasyMockClass":230,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":190,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":1,"org.easymock.tests.UsageExpectAndReturnTest.object":251,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":81,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":351,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":132,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":527,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":470,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":296,"org.easymock.tests.UsageTest.exactCallCountByLastCall":280,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":489,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":435,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":170,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":545,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":386,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":465,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":257,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":282,"org.easymock.tests.MockClassControlTest.testHashCode":454,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":355,"org.easymock.tests2.EasyMockSupportTest.testVerify":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":376,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":535,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":171,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":237,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":2,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":323,"org.easymock.tests.UsageVarargTest.varargCharAccepted":469,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":524,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":505,"org.easymock.tests2.UsageTest.openCallCountByLastCall":117,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":135,"org.easymock.tests.DefaultClassInstantiatorTest.object":312,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":236,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":294,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":546,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":377,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":200,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":347,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":354,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":420,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":83,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":207,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":151,"org.easymock.tests.CapturesMatcherTest.test":324,"org.easymock.tests.ReplayStateInvalidCallsTest.times":426,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":258,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":187,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":427,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":537,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":45,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":206,"org.easymock.tests2.UsageTest.resumeIfFailure":122,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":229,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":388,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":226,"org.easymock.tests2.StubTest.stubWithReturnValue":100,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":521,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":71,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":250,"org.easymock.tests2.SerializationTest.testAllMockedMethod":326,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":263,"org.easymock.samples.SupportTest.voteForRemovals":302,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":319,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":455,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":357,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":157,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":264,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":22,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":436,"org.easymock.tests.UsageExpectAndThrowTest.object":155,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":68,"org.easymock.tests2.DelegateToTest.testWrongClass":139,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":424,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":174,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":175,"org.easymock.tests.UsageStrictMockTest.range":194,"org.easymock.samples.ConstructorCalledMockTest.testTax":304,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":391,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":131,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":92,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":156,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":107,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":447,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":365,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":143,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":320,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":416,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":168,"org.easymock.tests2.CaptureTest.testCaptureNone":15,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":402,"org.easymock.tests.UsageUnorderedTest.message":265,"org.easymock.tests.UsageVerifyTest.twoReturns":301,"org.easymock.tests.UsageVarargTest.varargByteAccepted":474,"org.easymock.tests2.ThreadingTest.testThreadSafe":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":379,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":480,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":297,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":333,"org.easymock.tests2.CaptureTest.testCapture_2617107":9,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":541,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":503,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":184,"org.easymock.tests2.UsageConstraintsTest.any":58,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":444,"org.easymock.tests2.StubTest.stub":99,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":189,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":504,"org.easymock.tests.UsageExpectAndThrowTest.longType":148,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":225,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":449,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":443,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":38,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":34,"org.easymock.tests2.SerializationTest.testClass":5,"org.easymock.tests.LimitationsTest.mockNativeMethod":271,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":211,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":260,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":346,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":432,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":41,"org.easymock.tests2.NameTest.nameForMocksControl":341,"org.easymock.tests2.MockedExceptionTest.testMockedException":30,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":369,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":277,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":149,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":222,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":342,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":75,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":108,"org.easymock.tests.MockingTest.testNicePartialClassMocking":221,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":80,"org.easymock.tests2.CaptureTest.testCaptureLast":14,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":344,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":219,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":431,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":98,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":55,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":69,"org.easymock.tests.MockingTest.testTwoMocks":332,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":428,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":400,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":241,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":153,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":120,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":73,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":405,"org.easymock.samples.ExampleTest.removeNonExistingDocument":516,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":441,"org.easymock.tests.UsageStrictMockTest.differentMethods":195,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":349,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":356,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":404,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":314,"org.easymock.tests2.ConstraintsToStringTest.andToString":539,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":89,"org.easymock.tests2.MockBuilderTest.testCreateMockString":110,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":452,"org.easymock.tests.UsageExpectAndThrowTest.floatType":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":370,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":367,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":24,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":517,"org.easymock.tests.UsageVerifyTest.twoThrows":300,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":509,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":44,"org.easymock.samples.ExampleTest.voteAgainstRemoval":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":495,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":166,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":84,"org.easymock.tests.LimitationsTest.privateConstructor":507,"org.easymock.tests2.UsageConstraintsTest.testNotNull":72,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":204,"org.easymock.tests2.UsageTest.defaultResetToNice":119,"org.easymock.samples.ExampleTest.voteAgainstRemovals":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":496,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":256,"org.easymock.tests.UsageVarargTest.differentLength":471,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":345,"org.easymock.tests2.CallbackTest.callback":33,"org.easymock.tests2.UsageConstraintsTest.equals":393,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":543,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":395,"org.easymock.tests.UsageTest.openCallCountByLastCall":276,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":47,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":183,"org.easymock.tests.UsageCallCountTest.tooFewCalls":478,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":95,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":412,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":403,"org.easymock.tests.UsageThrowableTest.throwCheckedException":201,"org.easymock.tests.MockingTest.testStrictClassMocking":457,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":321,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":97,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":240,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":28,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":94,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":446,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":96,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":26,"org.easymock.tests.ObjectMethodsTest.testHashCode":295,"org.easymock.tests2.CompareToTest.testGreateOrEqual":336,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":430,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":91,"org.easymock.tests2.NameTest.nameForNiceMock":340,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":425,"org.easymock.tests2.DependencyTest.testInterfaceMocking":101,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":528,"org.easymock.samples.ExampleTest.addDocument":515,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":380,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":384,"org.easymock.tests2.DelegateToTest.testStubDelegate":138,"org.easymock.tests2.AnswerTest.stubAnswer":25,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":192,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":409,"org.easymock.tests.UsageVarargTest.varargLongAccepted":473,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":196,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":493,"org.easymock.tests.UsageExpectAndReturnTest.floatType":243,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":259,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":46,"org.easymock.tests2.ConstraintsToStringTest.orToString":533,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":305,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":510,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":66,"org.easymock.tests.UsageThrowableTest.noUpperLimit":198,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":361,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":48,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":387,"org.easymock.tests2.SerializationTest.test":6,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":12,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":313,"org.easymock.tests2.UsageConstraintsTest.testSame":53,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":242,"org.easymock.samples.SupportTest.addDocument":512,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":399,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":415,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":442,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":371,"org.easymock.tests.GenericTest.testPackageScope":210,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":172,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":488,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":360,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":460,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":413,"org.easymock.tests2.NameTest.nameForMock":338,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":253,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":522,"org.easymock.tests2.UsageStrictMockTest.differentMethods":40,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":396,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":245,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":159,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":293,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":179,"org.easymock.tests2.MockedExceptionTest.testRealException":32,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":234,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":498,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":392,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":544,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":497,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":37,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":448,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":182,"org.easymock.tests2.NameTest.nameForStrictMock":339,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":408,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":0,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":79,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":390,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":67,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":315,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":104,"org.easymock.tests2.UsageStrictMockTest.range":39,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":419,"org.easymock.tests2.UsageConstraintsTest.lessThan":74,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":358,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":529,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":492,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":125,"org.easymock.tests2.CaptureTest.testCaptureRightOne":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":375,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":401,"org.easymock.tests2.UsageConstraintsTest.testOr":54,"org.easymock.tests.UsageRangeTest.combination":176,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":76,"org.easymock.tests.UsageTest.wrongArguments":275,"org.easymock.tests2.MockBuilderTest.testWithConstructor":519,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":372,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":453,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":246,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":485,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":254,"org.easymock.tests.UsageVarargTest.varargShortAccepted":472,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":316,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":481,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":433,"org.easymock.tests2.UsageConstraintsTest.cmpTo":59,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":23,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":423,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":487,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":118,"org.easymock.tests2.CaptureTest.testCaptureFromStub":18,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":438,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":105,"org.easymock.tests.UsageTest.unexpectedCallWithArray":274,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":429,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":191,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":479,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":255,"org.easymock.tests2.UsageConstraintsTest.constraints":49,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":193,"org.easymock.samples.ExampleTest.addAndChangeDocument":311,"org.easymock.tests2.ConstraintsToStringTest.notToString":534,"org.easymock.tests.UsageStrictMockTest.testVerify":451,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":514,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":450,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":289,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":13,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":268,"org.easymock.tests.LimitationsTest.abstractClass":506,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":247,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":269,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":284,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":531,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":466,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":130}}]

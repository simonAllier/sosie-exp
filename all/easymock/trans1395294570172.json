[{"position":"org.easymock.internal.RecordState:233","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,141,142,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[19,20,22,24,25,27,37,42,74,76,84],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:104","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[46,326],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[327,328,329],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[72,235],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[330],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[5,9,10,13,19,34,45,331,49,332,54,60,62,65,97,100,101,102,109,112,113,114,118,119,120,121,131,178,187,333,223,224,260,261,263,265,266,267,271,334,273,276,277,278,309,310],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[96,335],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"failures":[336],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"org.easymock.internal.EasyMockProperties.PREFIX"}},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:54","sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","type":"CtReturnImpl"},"failures":[91,92,93,94,95,109,116,155,157,158,159,160,161,162,172,192,195,196,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,271,275,282,283,284,285,286,287,309,337,321],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[338,339,340,341,342,343,335],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1163","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:41","sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[344],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"actual","this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[19,20,22,24,25,27,37,42,74,76,84],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,345,45,46,346,47,48,331,49,332,50,51,53,54,55,56,57,58,347,59,348,60,61,62,349,350,351,352,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,141,141,142,142,144,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,183,184,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,219,225,226,353,227,228,354,355,229,230,231,232,249,255,257,258,259,260,356,357,358,359,360,261,263,264,265,266,267,268,270,271,272,334,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,361,362,363,364,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,365,366,308,309,310,311,312,313,314,315,367,316,317,318,319,368,320,321,369,322,370],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[371,372],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[373,374,375],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[19,20,22,24,25,27,37,42,74,76,84],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:94","sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,345,45,46,346,47,48,331,49,332,50,51,52,53,54,55,56,57,58,347,59,348,60,61,62,349,350,351,352,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,141,142,142,143,144,145,146,147,148,149,150,151,152,153,376,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,377,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,333,223,224,225,226,353,227,228,354,355,229,230,231,232,249,255,257,258,259,260,356,357,358,359,360,261,262,263,264,265,266,267,268,269,270,271,272,334,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,361,362,363,364,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,365,366,308,309,310,311,312,313,314,315,367,316,317,318,319,368,320,321,369,322,370],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[378,379,380,381,338,382,383,335,134,138,384],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:853","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[99,101,102,111,260,264,266,267,385,386,387,388,272,308,309,310],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[91,92,93,94,95,109,116,155,157,158,159,160,161,162,172,192,195,196,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,271,275,282,283,284,285,286,287,309,321],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,74,75,77,78,81,82,83,84,85,86,87,88,89,91,94,96,99,101,102,104,105,106,107,108,109,110,111,113,115,116,117,120,121,122,126,128,132,133,134,135,136,137,138,141,141,142,142,144,147,148,150,151,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,184,186,187,188,189,190,191,193,194,197,225,226,229,230,231,232,264,266,267,271,272,274,275,278,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,310,311,312,313,314,315,316,317,318,322],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[50,51,52,389],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[50,51,52,389],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1507","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:61","failures":[19,20,22,24,25,42,74,75,76,81,82,84,87,183,194,195,196],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[390],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:189","failures":[19,49,332,97,100,101,102,109,112,114,118,119,121,260,261,263,265,266,267,271,334,273,276,277,278,309,310],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":20,"org.easymock.tests2.UsageTest.argumentsOrdered":119,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":271,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":243,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":114,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":143,"org.easymock.tests2.DelegateToTest.testReturnException":69,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":283,"org.easymock.tests.MockingTest.testPartialClassMocking":316,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":252,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":105,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":198,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":385,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":89,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":339,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":26,"org.easymock.tests2.UsageTest.wrongArguments":112,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":193,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":363,"org.easymock.samples.ExampleTest.answerVsDelegate":149,"org.easymock.tests2.UsageConstraintsTest.testNull":22,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":56,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":13,"org.easymock.tests2.CaptureTest.testPrimitive":77,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":197,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":217,"org.easymock.tests.UsageTest.moreThanOneArgument":272,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":55,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":313,"org.easymock.tests.UsageTest.argumentsOrdered":277,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":353,"org.easymock.tests.UsageVarargTest.varargIntAccepted":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":248,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":163,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":343,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":345,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":346,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":235,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":167,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":328,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":108,"org.easymock.tests2.AnswerTest.answer":122,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":250,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":352,"org.easymock.tests2.CaptureTest.testAnd":74,"org.easymock.tests2.UsageTest.strictResetToDefault":110,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":348,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":381,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":312,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":189,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":8,"org.easymock.tests2.DelegateToTest.testDelegate":73,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":355,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":213,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":286,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":360,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":365,"org.easymock.tests2.CaptureTest.testCapture1_2446744":78,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":390,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":211,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":350,"org.easymock.tests.UsageThrowableTest.throwError":155,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":315,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":378,"org.easymock.samples.PartialClassMockTest.testGetArea":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":164,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":231,"org.easymock.tests2.UsageTest.niceToStrict":113,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":199,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":233,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":373,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":46,"org.easymock.tests2.MockBuilderTest.testCreateMock":331,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":207,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":9,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":259,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":218,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":361,"org.easymock.tests.UsageOverloadedMethodTest.overloading":171,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":32,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":321,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":170,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":299,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":31,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":324,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":83,"org.easymock.tests2.EasyMockSupportClassTest.testAll":104,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":185,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":215,"org.easymock.tests2.CaptureTest.testCaptureAll":75,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":351,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":358,"org.easymock.tests2.UsageConstraintsTest.testMatches":33,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":314,"org.easymock.samples.ExampleTest.voteForRemovals":153,"org.easymock.tests.UsageVarargTest.allKinds":183,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":308,"org.easymock.samples.BasicClassMockTest.testPrintContent":140,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":359,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":161,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":97,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":72,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":287,"org.easymock.tests2.UsageConstraintsTest.greaterThan":35,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":188,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":62,"org.easymock.samples.ExampleTest.voteForRemoval":150,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":64,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":347,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":109,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":240,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":6,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":157,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":282,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":68,"org.easymock.tests2.CaptureTest.testCaptureFirst":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":239,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":7,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":121,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":370,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":295,"org.easymock.tests2.UsageTest.moreThanOneArgument":111,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":66,"org.easymock.tests2.CaptureTest.testCapture2_2446744":86,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":251,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":182,"org.easymock.tests.GenericTest.testBridgedEquals":372,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":223,"org.easymock.tests.UsageExpectAndReturnTest.longType":291,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":356,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":216,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":326,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":169,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":40,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":214,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":280,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":311,"org.easymock.tests.UsageCallCountTest.tooManyCalls":224,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":329,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":219,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":296,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":203,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":160,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":133,"org.easymock.tests2.UsageConstraintsTest.testContains":30,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":94,"org.easymock.tests2.UsageConstraintsTest.testFind":21,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":172,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":130,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":261,"org.easymock.tests.UsageExpectAndReturnTest.object":298,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":59,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":12,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":340,"org.easymock.tests.UsageTest.exactCallCountByLastCall":278,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":238,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":227,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":335,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":173,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":304,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":320,"org.easymock.tests.ResultTest.createThrowResultToString":337,"org.easymock.tests2.EasyMockSupportTest.testVerify":16,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":327,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":228,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":258,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":319,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":349,"org.easymock.tests.UsageVarargTest.varargCharAccepted":176,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":256,"org.easymock.tests2.UsageTest.openCallCountByLastCall":115,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":15,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":374,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":257,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":377,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":205,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":158,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":60,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":204,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":305,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":107,"org.easymock.tests2.UsageTest.resumeIfFailure":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":285,"org.easymock.tests2.StubTest.stubWithReturnValue":91,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":338,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":41,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":297,"org.easymock.tests2.SerializationTest.testAllMockedMethod":52,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":249,"org.easymock.samples.SupportTest.voteForRemovals":147,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":371,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":210,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":389,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":255,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":123,"org.easymock.tests.UsageExpectAndThrowTest.object":208,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":38,"org.easymock.tests2.DelegateToTest.testWrongClass":71,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":225,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":226,"org.easymock.samples.ConstructorCalledMockTest.testTax":141,"org.easymock.tests.UsageStrictMockTest.range":266,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":11,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":132,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":209,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":47,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":276,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":362,"org.easymock.tests2.CaptureTest.testCaptureNone":82,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":232,"org.easymock.tests.UsageUnorderedTest.message":260,"org.easymock.tests.UsageVerifyTest.twoReturns":310,"org.easymock.tests.UsageVarargTest.varargByteAccepted":181,"org.easymock.tests2.ThreadingTest.testThreadSafe":63,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":222,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":139,"org.easymock.tests2.CaptureTest.testCapture_2617107":76,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":196,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":253,"org.easymock.tests2.UsageConstraintsTest.any":28,"org.easymock.tests2.StubTest.stub":90,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":281,"org.easymock.tests.UsageExpectAndThrowTest.longType":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":254,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":284,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":323,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":100,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":128,"org.easymock.tests2.SerializationTest.testClass":50,"org.easymock.tests.LimitationsTest.mockNativeMethod":229,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":186,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":307,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":103,"org.easymock.tests2.NameTest.nameForMocksControl":3,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":336,"org.easymock.tests2.MockedExceptionTest.testMockedException":93,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":275,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":202,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":318,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":53,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":48,"org.easymock.tests.MockingTest.testNicePartialClassMocking":317,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":58,"org.easymock.tests2.CaptureTest.testCaptureLast":81,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":366,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":138,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":25,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":39,"org.easymock.tests.MockingTest.testTwoMocks":367,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":384,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":288,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":206,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":118,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":43,"org.easymock.samples.ExampleTest.removeNonExistingDocument":376,"org.easymock.tests.UsageStrictMockTest.differentMethods":267,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":65,"org.easymock.tests2.MockBuilderTest.testCreateMockString":332,"org.easymock.tests.UsageExpectAndThrowTest.floatType":200,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":34,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":125,"org.easymock.tests.UsageVerifyTest.twoThrows":309,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":106,"org.easymock.samples.ExampleTest.voteAgainstRemoval":151,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":244,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":61,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":379,"org.easymock.tests2.UsageConstraintsTest.testNotNull":42,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":162,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":92,"org.easymock.tests2.UsageTest.defaultResetToNice":117,"org.easymock.samples.ExampleTest.voteAgainstRemovals":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":245,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":303,"org.easymock.tests.UsageVarargTest.differentLength":178,"org.easymock.tests2.CallbackTest.callback":131,"org.easymock.tests.UsageTest.openCallCountByLastCall":274,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":17,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":195,"org.easymock.tests.UsageCallCountTest.tooFewCalls":220,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":135,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":364,"org.easymock.tests.UsageThrowableTest.throwCheckedException":159,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":137,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":192,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":134,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":136,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":127,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":342,"org.easymock.tests2.NameTest.nameForNiceMock":2,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":67,"org.easymock.tests2.DependencyTest.testInterfaceMocking":88,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":341,"org.easymock.samples.ExampleTest.addDocument":152,"org.easymock.tests2.DelegateToTest.testStubDelegate":70,"org.easymock.tests2.AnswerTest.stubAnswer":126,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":264,"org.easymock.tests.UsageVarargTest.varargLongAccepted":180,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":242,"org.easymock.tests.UsageExpectAndReturnTest.floatType":290,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":306,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":96,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":142,"org.easymock.tests.UsageThrowableTest.noUpperLimit":156,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":36,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":369,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":18,"org.easymock.tests2.SerializationTest.test":51,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":79,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":325,"org.easymock.tests2.UsageConstraintsTest.testSame":23,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":289,"org.easymock.samples.SupportTest.addDocument":146,"org.easymock.tests.GenericTest.testPackageScope":184,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":237,"org.easymock.tests2.NameTest.nameForMock":0,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":300,"org.easymock.tests2.UsageStrictMockTest.differentMethods":102,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":383,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":292,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":212,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":190,"org.easymock.tests2.MockedExceptionTest.testRealException":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":247,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":246,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":194,"org.easymock.tests2.NameTest.nameForStrictMock":1,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":129,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":375,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":57,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":386,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":37,"org.easymock.tests.ErrorMessageTest.testGetters":387,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":45,"org.easymock.tests2.UsageStrictMockTest.range":101,"org.easymock.tests2.UsageConstraintsTest.lessThan":44,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":330,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":241,"org.easymock.tests2.CaptureTest.testCaptureRightOne":84,"org.easymock.tests2.UsageConstraintsTest.testOr":24,"org.easymock.tests.UsageRangeTest.combination":187,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":54,"org.easymock.tests.UsageTest.wrongArguments":273,"org.easymock.tests2.MockBuilderTest.testWithConstructor":380,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":234,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":301,"org.easymock.tests.UsageVarargTest.varargShortAccepted":179,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":333,"org.easymock.tests2.UsageConstraintsTest.cmpTo":29,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":236,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":116,"org.easymock.tests2.CaptureTest.testCaptureFromStub":85,"org.easymock.tests.UsageTest.unexpectedCallWithArray":334,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":263,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":221,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":382,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":302,"org.easymock.tests2.UsageConstraintsTest.constraints":19,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":265,"org.easymock.samples.ExampleTest.addAndChangeDocument":154,"org.easymock.tests2.ConstraintsToStringTest.notToString":344,"org.easymock.tests.UsageStrictMockTest.testVerify":269,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":145,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":262,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":357,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":80,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":165,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":294,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":166,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":322,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":388,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":174,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":10}}]

[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:175","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Constructor<?>.getModifiers())) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[85],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[86,87,88,89,16,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,23,24,26,119,120,121,122,123,124],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:134","sourceCode":"final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[56],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1725","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"failures":[126],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[127,128,47,129],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:59","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:249","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[0,130,131,132,1,2,127,133,134,135,136,137,138,139,3,140,141,142,4,143,144,145],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"failMessage","key":"failMessage"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[146],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[147,148,149,150,151,152,153,154,155,156,157,158],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[159,160,161],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:193","sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:30","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[162],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":52,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":88,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":153,"org.easymock.tests2.UsageConstraintsTest.testMatches":62,"org.easymock.tests2.UsageTest.argumentsOrdered":42,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":86,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":129,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":35,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":136,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":40,"org.easymock.tests2.StubTest.stubWithReturnValue":26,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":150,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":69,"org.easymock.tests2.SerializationTest.testAllMockedMethod":161,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":92,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":110,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":4,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":23,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":43,"org.easymock.tests2.AnswerTest.stubAnswer":47,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":125,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":96,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":128,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":11,"org.easymock.tests.UsageExpectAndThrowTest.object":108,"org.easymock.tests2.UsageConstraintsTest.greaterThan":64,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":135,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":57,"org.easymock.tests2.UsageTest.wrongArguments":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":15,"org.easymock.tests.UsageStrictMockTest.range":12,"org.easymock.tests.UsageThrowableTest.noUpperLimit":19,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":65,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":50,"org.easymock.tests2.UsageConstraintsTest.testNull":126,"org.easymock.tests2.SerializationTest.test":160,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":109,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":77,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":34,"org.easymock.tests2.CaptureTest.testPrimitive":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":133,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":28,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":118,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":117,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":7,"org.easymock.tests2.UsageConstraintsTest.testSame":54,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":91,"org.easymock.tests2.CaptureTest.testCaptureFirst":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":127,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":29,"org.easymock.tests2.CaptureTest.testCapture2_2446744":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":142,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":1,"org.easymock.tests.UsageTest.argumentsOrdered":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":140,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":162,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":158,"org.easymock.tests2.CaptureTest.testCapture_2617107":74,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":85,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":143,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":16,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":152,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":114,"org.easymock.tests2.UsageStrictMockTest.differentMethods":46,"org.easymock.tests2.UsageConstraintsTest.any":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":144,"org.easymock.tests.UsageExpectAndThrowTest.longType":101,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":93,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":112,"org.easymock.tests2.SerializationTest.testClass":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":141,"org.easymock.tests2.MockedExceptionTest.testRealException":124,"org.easymock.tests2.CaptureTest.testAnd":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":3,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":139,"org.easymock.tests2.MockedExceptionTest.testMockedException":122,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":103,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":44,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":22,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":30,"org.easymock.tests2.UsageConstraintsTest.testContains":59,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":87,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":102,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":123,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":113,"org.easymock.tests2.UsageConstraintsTest.testFind":53,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":97,"org.easymock.tests2.CaptureTest.testCaptureLast":79,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":95,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":9,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":154,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":56,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":66,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":68,"org.easymock.tests2.UsageStrictMockTest.range":45,"org.easymock.tests2.UsageConstraintsTest.lessThan":71,"org.easymock.tests2.CaptureTest.testCapture1_2446744":76,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":155,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":33,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":111,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":106,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":41,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":2,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":134,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":27,"org.easymock.tests.UsageThrowableTest.throwError":18,"org.easymock.tests.UsageStrictMockTest.differentMethods":13,"org.easymock.tests2.CaptureTest.testCaptureRightOne":81,"org.easymock.tests2.UsageConstraintsTest.testOr":55,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":147,"org.easymock.tests.UsageRangeTest.combination":25,"org.easymock.tests.UsageTest.wrongArguments":6,"org.easymock.tests2.MockBuilderTest.testWithConstructor":148,"org.easymock.tests.UsageExpectAndThrowTest.floatType":100,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":130,"org.easymock.tests.UsageVerifyTest.twoThrows":5,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":132,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":99,"org.easymock.tests2.UsageTest.niceToStrict":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":145,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":157,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":121,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":120,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":24,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":0,"org.easymock.tests2.CaptureTest.testCaptureFromStub":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":138,"org.easymock.tests2.CallbackTest.callback":37,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":107,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":105,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":31,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":10,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":20,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":49,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":151,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":89,"org.easymock.tests.UsageOverloadedMethodTest.overloading":17,"org.easymock.tests2.UsageConstraintsTest.constraints":51,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":104,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":61,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":90,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":146,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":60,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":80,"org.easymock.tests.UsageThrowableTest.throwCheckedException":21,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":78,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":115,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":32,"org.easymock.tests2.CaptureTest.testCaptureAll":73}}]

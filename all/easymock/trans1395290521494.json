[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"position":"org.easymock.EasyMock:1121","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1555","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[1,2,3,4,5,6,7],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:48","failures":[22],"status":-1,"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[23,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[24,10,11,12,13,25,26,27,28,14,15,16,29,17,30,31,18,19,20,32,33,34,35,36,21,37],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[38],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[39,40,41],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[42,43],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[44,45,46,47],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:117","failures":[48,49,50,51,52,53,54,55],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (this.org.easymock.Capture<T>.hasCaptured()) {\n    this.org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[56,57,58,59],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"capture"}},{"position":"org.easymock.ConstructorArgs:54","failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,45,85,86,87,88,89,90,91,92,93],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:201","failures":[94,95,0,96,97,98,98,99,99,100,101,102,103,42,66,76,82,45,104,105,106,107,108,109,110,111,85,112,43,113,2,114],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[44,45,46,47],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[115,116,117,24,28,14,15,29,30,118,31,32,33,34,35,36,37,119],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[115,120,116,117,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,24,9,10,157,158,11,12,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,13,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,28,14,15,240,241,16,29,242,17,30,118,243,97,244,49,245,246,247,248,249,98,98,99,99,250,251,252,253,254,255,256,257,258,259,260,261,262,263,103,63,66,76,82,264,265,266,267,268,269,270,50,51,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,45,46,47,104,108,297,109,110,112,43,298,299,31,18,300,301,302,303,304,19,20,305,306,52,53,307,54,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,32,33,34,35,326,113,114,327,328,329,55,330,331,332,333,334,335,336,337,338,339,340,341,342,343,57,344,345,346,347,348,349,350,351,352,353,58,59,354,355,36,356,21,37,119],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[263],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[276,22,290,294],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.Capture:134","failures":[56,357],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[24,10,11,12,13,25,26,27,28,14,15,16,29,17,30,31,18,19,20,32,33,34,35,36,21,37],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:201","sourceCode":"java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","type":"CtInvocationImpl"},"failures":[94,95,96,97,100,102,103,42,66,76,82,45,104,105,106,108,109,110,112,43],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mockedMethods":"mockedMethods"}},{"position":"org.easymock.internal.Range:36","failures":[358,359,360,115,120,116,117,121,122,361,362,363,364,365,366,94,367,368,369,370,95,371,372,373,39,374,375,123,124,376,377,378,379,380,381,382,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,48,383,384,385,386,143,23,144,145,387,146,147,148,149,150,151,152,153,154,155,156,24,9,10,157,158,11,12,159,160,161,162,388,163,164,389,165,166,167,168,169,390,40,391,392,393,170,394,171,172,0,173,174,96,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,420,421,422,215,216,423,217,424,425,426,13,218,219,220,221,222,427,428,429,430,431,432,433,434,435,436,223,437,224,225,438,226,439,440,227,441,228,229,230,231,232,233,234,235,236,237,41,442,443,444,445,238,446,447,448,449,450,451,239,28,14,15,452,453,454,455,456,240,241,16,29,242,17,30,118,243,97,244,49,245,246,247,248,457,249,98,99,250,251,252,253,254,255,256,257,258,259,260,261,100,458,262,101,459,263,102,103,460,461,42,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,264,265,266,267,462,268,269,270,463,50,464,51,271,272,273,274,465,275,276,277,278,279,280,22,281,282,283,284,285,286,287,288,289,290,291,292,466,293,294,295,296,45,46,47,104,467,105,106,468,107,108,297,109,1,110,111,85,469,112,470,43,298,299,31,18,300,301,302,303,304,19,20,305,306,471,472,473,474,475,476,477,52,478,479,53,307,54,308,309,310,311,480,481,482,483,484,312,485,486,487,488,489,490,313,314,315,316,317,318,319,320,321,322,323,324,325,491,32,33,34,35,492,493,494,495,496,326,497,498,499,500,501,502,113,2,503,114,327,328,329,55,330,331,332,333,334,335,336,504,505,337,338,506,339,340,341,507,342,343,57,344,345,346,347,348,349,350,351,352,353,58,59,508,354,355,36,356,21,37,119],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[44,45,46,47],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.StartsWith:40","failures":[509],"status":-1,"binaryOperator":"(\"startsWith(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[44,45,46,47],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:52","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[358,359,360,115,116,117,121,122,361,362,363,364,365,366,369,370,371,372,373,39,374,375,123,124,377,380,382,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,48,383,384,385,386,143,23,144,145,146,147,148,149,150,151,152,153,154,155,156,24,9,10,157,158,11,12,159,160,161,162,163,164,389,165,166,167,168,169,40,171,172,173,412,418,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,13,218,219,220,221,222,428,229,230,231,232,233,234,235,236,237,41,442,443,28,14,15,452,453,454,455,456,240,241,16,29,242,17,30,118,243,244,49,245,246,247,248,249,250,251,252,253,258,268,50,51,271,272,273,274,275,276,277,278,279,280,22,281,282,283,284,285,286,287,288,289,290,291,292,466,293,294,295,296,45,46,298,299,31,18,300,301,302,303,304,19,20,305,306,52,478,479,53,307,54,308,309,310,311,312,485,313,314,315,316,317,318,319,320,321,322,323,324,325,32,33,34,35,326,497,114,327,328,329,55,330,331,332,333,334,335,336,337,338,506,339,340,341,507,342,343,57,344,345,346,347,348,349,350,351,352,353,58,59,354,355,36,356,21,37,119],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[44,45,46,47],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:94","failures":[273,274,275,276,277,278,279,280,22,281,290,291,294,295,343,57,344,345,352,353],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:230","failures":[],"status":0,"binaryOperator":"(((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"this.org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[102,42,105,112],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[358,359,360,116,364,365,366,373,39,374,375,123,124,125,126,127,128,129,130,131,132,137,138,139,140,141,142,48,384,385,143,144,145,146,147,148,149,150,156,24,157,158,159,40,170,171,172,173,96,412,418,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,13,218,219,220,221,222,229,230,231,232,233,234,235,236,237,41,443,239,28,14,15,452,453,454,455,456,29,17,30,97,244,49,245,246,248,249,98,98,99,99,253,256,257,258,259,260,261,262,102,103,460,63,66,76,82,264,265,266,267,268,269,270,50,51,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,45,46,105,108,109,110,112,298,299,31,300,302,303,304,305,306,52,478,479,53,307,54,312,313,314,315,316,317,318,319,320,321,322,323,324,326,113,114,327,328,329,55,330,331,332,333,334,335,336,337,338,506,339,340,341,507,342,343,57,345,346,349,350,351,352,353,58,59,36,21,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastControl":"control","this":"this"}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[44,45,46,47],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:189","sourceCode":"java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.StartsWith:40","failures":[509],"status":-1,"binaryOperator":"((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:865","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[293],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:148","sourceCode":"final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:71","sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[44,45,46,47],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[428,429,430,431,433,435],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[115,116,117,121,122,362,363,373,39,374,375,123,124,125,126,127,128,129,130,131,132,383,386,143,144,145,146,147,148,149,150,156,24,10,157,158,11,12,159,160,161,162,163,164,389,165,166,167,168,169,40,170,171,173,174,96,412,418,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,13,218,219,220,221,222,229,230,231,232,233,234,235,236,237,41,442,443,239,28,15,453,454,240,241,16,29,242,17,30,118,243,97,244,245,246,247,248,249,98,98,99,99,250,251,252,253,254,255,256,257,258,259,260,261,262,102,103,460,63,66,76,82,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,466,293,294,295,296,45,46,47,105,108,109,110,112,298,299,31,18,300,301,302,303,304,19,20,305,306,52,307,312,313,314,315,316,317,318,319,320,321,322,323,324,325,32,33,34,35,326,113,328,330,331,332,333,334,335,336,337,338,340,343,57,344,345,346,347,348,349,350,351,352,353,58,59,354,355,36,356,21,37,119],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:195","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"parameterTypes":"candidateParameters","i":"i"}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"this.java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[510,343,344,345,346,347,348,349,351,357,352,353,59],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":274,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":156,"org.easymock.tests2.UsageTest.argumentsOrdered":20,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":323,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":485,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":406,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":301,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":250,"org.easymock.tests2.DelegateToTest.testReturnException":339,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":138,"org.easymock.tests.MockingTest.testPartialClassMocking":215,"org.easymock.tests.MockClassControlTest.testToString":446,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":491,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":415,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":70,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":175,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":66,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":25,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":338,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":3,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":280,"org.easymock.tests2.UsageTest.wrongArguments":18,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":218,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":502,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":135,"org.easymock.samples.ExampleTest.answerVsDelegate":49,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":95,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":425,"org.easymock.tests2.UsageConstraintsTest.testNull":276,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":259,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":451,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":322,"org.easymock.tests2.CaptureTest.testPrimitive":345,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":222,"org.easymock.tests.UsageTest.moreThanOneArgument":24,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":194,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":258,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":235,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":452,"org.easymock.tests.UsageTest.argumentsOrdered":12,"org.easymock.tests.UsageVarargTest.varargIntAccepted":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":411,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":146,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":104,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":7,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":489,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":473,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":398,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":150,"org.easymock.tests.ReplayStateInvalidUsageTest.times":440,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":326,"org.easymock.tests2.DependencyTest.testClassMocking":504,"org.easymock.tests2.AnswerTest.answer":52,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":413,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":311,"org.easymock.tests2.CaptureTest.testAnd":343,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":368,"org.easymock.tests2.UsageTest.strictResetToDefault":299,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":468,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":263,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":234,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":231,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":317,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":456,"org.easymock.tests2.DelegateToTest.testDelegate":342,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":190,"org.easymock.tests.LimitationsTest.mockFinalMethod":394,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":141,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":155,"org.easymock.tests2.DependencyTest.testClassMockingSupport":505,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":442,"org.easymock.tests2.CaptureTest.testCapture1_2446744":346,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":458,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":188,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":309,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":437,"org.easymock.tests.UsageThrowableTest.throwError":125,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":370,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":490,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":387,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":84,"org.easymock.samples.PartialClassMockTest.testGetArea":97,"org.easymock.tests.MockingTest.testInterfaceMocking":423,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":224,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":147,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":39,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":71,"org.easymock.tests2.UsageTest.niceToStrict":300,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":396,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":91,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":108,"org.easymock.tests2.MockBuilderTest.testCreateMock":469,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":79,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":499,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":184,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":318,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":367,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":360,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":115,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":133,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":88,"org.easymock.tests.UsageOverloadedMethodTest.overloading":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":81,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":385,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":285,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":206,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":375,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":284,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":351,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":388,"org.easymock.tests.MockClassControlTest.testEquals":450,"org.easymock.tests2.EasyMockSupportClassTest.testAll":63,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":174,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":192,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":153,"org.easymock.tests2.CaptureTest.testCaptureAll":57,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":310,"org.easymock.tests.MockNameTest.defaultName":382,"org.easymock.tests2.UsageConstraintsTest.testMatches":286,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":436,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":236,"org.easymock.samples.ExampleTest.voteForRemovals":248,"org.easymock.tests.UsageVarargTest.allKinds":169,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":28,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":154,"org.easymock.samples.BasicClassMockTest.testPrintContent":255,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":131,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":354,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":507,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":486,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":142,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":434,"org.easymock.tests2.UsageConstraintsTest.greaterThan":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":64,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":230,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":460,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":435,"org.easymock.samples.ExampleTest.voteForRemoval":245,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":461,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":331,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":371,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":474,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":100,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":239,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":298,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":403,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":315,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":61,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":137,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":506,"org.easymock.tests2.CaptureTest.testCaptureFirst":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":316,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":306,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":23,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":202,"org.easymock.tests2.UsageTest.moreThanOneArgument":31,"org.easymock.tests2.CaptureTest.testCapture2_2446744":58,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":414,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":112,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":168,"org.easymock.tests.GenericTest.testBridgedEquals":395,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":89,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":86,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":362,"org.easymock.tests.UsageExpectAndReturnTest.longType":198,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":151,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":313,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":193,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":466,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":41,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":191,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":233,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":365,"org.easymock.tests.UsageCallCountTest.tooManyCalls":363,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":80,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":203,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":501,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":180,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":130,"org.easymock.tests.MockingTest.testNiceClassMocking":426,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":265,"org.easymock.tests.MockingTest.testClassMocking":421,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":120,"org.easymock.tests2.UsageConstraintsTest.testContains":283,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":328,"org.easymock.tests2.UsageConstraintsTest.testFind":275,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":124,"org.easymock.tests.MockTypeTest.fromEasyMockClass":369,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":51,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":240,"org.easymock.tests.UsageExpectAndReturnTest.object":205,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":262,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":500,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":321,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":164,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":4,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":379,"org.easymock.tests.UsageTest.exactCallCountByLastCall":159,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":90,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":401,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":453,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":390,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":2,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":160,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":211,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":384,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":481,"org.easymock.tests.MockClassControlTest.testHashCode":449,"org.easymock.tests2.EasyMockSupportTest.testVerify":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":73,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":454,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":48,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":359,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":308,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":508,"org.easymock.tests.UsageVarargTest.varargCharAccepted":163,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":427,"org.easymock.tests2.CaptureTest.testCaptureMultiple":510,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":419,"org.easymock.tests2.UsageTest.openCallCountByLastCall":302,"org.easymock.tests.DefaultClassInstantiatorTest.object":428,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":92,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":324,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":358,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":377,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":8,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":74,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":128,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":495,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":480,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":448,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":102,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":181,"org.easymock.tests.CapturesMatcherTest.test":56,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":212,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":364,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":447,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":82,"org.easymock.tests2.UsageTest.resumeIfFailure":305,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":94,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":472,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":140,"org.easymock.tests2.StubTest.stubWithReturnValue":336,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":1,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":204,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":293,"org.easymock.tests2.SerializationTest.testAllMockedMethod":47,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":412,"org.easymock.samples.SupportTest.voteForRemovals":253,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":483,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":187,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":44,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":418,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":478,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":391,"org.easymock.tests.UsageExpectAndThrowTest.object":185,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":291,"org.easymock.tests2.DelegateToTest.testWrongClass":341,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":144,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":145,"org.easymock.samples.ConstructorCalledMockTest.testTax":98,"org.easymock.tests.UsageStrictMockTest.range":17,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":476,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":320,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":264,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":87,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":186,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":109,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":441,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":60,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":134,"org.easymock.tests2.CaptureTest.testCaptureNone":350,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":374,"org.easymock.tests.UsageUnorderedTest.message":13,"org.easymock.tests.UsageVerifyTest.twoReturns":15,"org.easymock.tests.UsageVarargTest.varargByteAccepted":167,"org.easymock.tests2.ThreadingTest.testThreadSafe":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":77,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":122,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":254,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":380,"org.easymock.tests2.CaptureTest.testCapture_2617107":344,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":416,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":221,"org.easymock.tests2.UsageConstraintsTest.any":281,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":439,"org.easymock.tests2.StubTest.stub":335,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":366,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":417,"org.easymock.tests.UsageExpectAndThrowTest.longType":178,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":139,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":432,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":226,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":356,"org.easymock.tests2.SerializationTest.testClass":45,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":312,"org.easymock.tests.LimitationsTest.mockNativeMethod":170,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":96,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":214,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":494,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":119,"org.easymock.tests2.NameTest.nameForMocksControl":35,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":496,"org.easymock.tests2.MockedExceptionTest.testMockedException":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":65,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":158,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":464,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":179,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":217,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":256,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":110,"org.easymock.tests.MockingTest.testNicePartialClassMocking":216,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":261,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":492,"org.easymock.tests2.CaptureTest.testCaptureLast":349,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":443,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":270,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":279,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":292,"org.easymock.tests.MockingTest.testTwoMocks":422,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":463,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":195,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":183,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":19,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":295,"org.easymock.samples.ExampleTest.removeNonExistingDocument":457,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":498,"org.easymock.tests.UsageStrictMockTest.differentMethods":30,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":225,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":482,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":430,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":332,"org.easymock.tests2.MockBuilderTest.testCreateMockString":43,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":445,"org.easymock.tests.UsageExpectAndThrowTest.floatType":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":67,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":62,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":53,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":503,"org.easymock.tests.UsageVerifyTest.twoThrows":14,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":76,"org.easymock.samples.ExampleTest.voteAgainstRemoval":246,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":407,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":373,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":103,"org.easymock.tests.LimitationsTest.privateConstructor":393,"org.easymock.tests2.UsageConstraintsTest.testNotNull":294,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":132,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":114,"org.easymock.tests2.UsageTest.defaultResetToNice":304,"org.easymock.samples.ExampleTest.voteAgainstRemovals":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":408,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":210,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":493,"org.easymock.tests.UsageVarargTest.differentLength":389,"org.easymock.tests2.CallbackTest.callback":55,"org.easymock.tests2.UsageConstraintsTest.equals":465,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":101,"org.easymock.tests.UsageTest.openCallCountByLastCall":157,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":509,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":271,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":220,"org.easymock.tests.UsageCallCountTest.tooFewCalls":117,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":267,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":136,"org.easymock.tests.UsageThrowableTest.throwCheckedException":129,"org.easymock.tests.MockingTest.testStrictClassMocking":420,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":172,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":269,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":497,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":266,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":227,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":268,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":54,"org.easymock.tests.ObjectMethodsTest.testHashCode":378,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":6,"org.easymock.tests2.NameTest.nameForNiceMock":34,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":334,"org.easymock.tests2.DependencyTest.testInterfaceMocking":337,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":5,"org.easymock.samples.ExampleTest.addDocument":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":83,"org.easymock.tests2.DelegateToTest.testStubDelegate":340,"org.easymock.tests2.AnswerTest.stubAnswer":307,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":29,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":111,"org.easymock.tests.UsageVarargTest.varargLongAccepted":166,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":405,"org.easymock.tests.UsageExpectAndReturnTest.floatType":197,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":213,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":113,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":99,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":488,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":386,"org.easymock.tests.UsageThrowableTest.noUpperLimit":126,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":289,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":272,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":471,"org.easymock.tests2.SerializationTest.test":46,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":347,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":429,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":196,"org.easymock.tests2.UsageConstraintsTest.testSame":277,"org.easymock.samples.SupportTest.addDocument":252,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":462,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":68,"org.easymock.tests.GenericTest.testPackageScope":173,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":455,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":400,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":487,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":424,"org.easymock.tests2.NameTest.nameForMock":32,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":207,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":470,"org.easymock.tests2.UsageStrictMockTest.differentMethods":37,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":459,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":199,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":189,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":376,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":232,"org.easymock.tests2.MockedExceptionTest.testRealException":329,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":372,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":409,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":219,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":228,"org.easymock.tests2.NameTest.nameForStrictMock":33,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":107,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":50,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":93,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":260,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":475,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":431,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":26,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":290,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":105,"org.easymock.tests2.UsageStrictMockTest.range":21,"org.easymock.tests2.UsageConstraintsTest.lessThan":296,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":404,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":38,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":72,"org.easymock.tests2.CaptureTest.testCaptureRightOne":352,"org.easymock.tests2.UsageConstraintsTest.testOr":278,"org.easymock.tests.UsageRangeTest.combination":229,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":257,"org.easymock.tests.UsageTest.wrongArguments":10,"org.easymock.tests2.MockBuilderTest.testWithConstructor":467,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":69,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":397,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":208,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":433,"org.easymock.tests.UsageVarargTest.varargShortAccepted":165,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":361,"org.easymock.tests2.UsageConstraintsTest.cmpTo":282,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":399,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":303,"org.easymock.tests2.CaptureTest.testCaptureFromStub":353,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":223,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":106,"org.easymock.tests.UsageTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":16,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":121,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":209,"org.easymock.tests2.CaptureTest.testCapture":357,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":242,"org.easymock.tests2.UsageConstraintsTest.constraints":273,"org.easymock.samples.ExampleTest.addAndChangeDocument":249,"org.easymock.tests.UsageStrictMockTest.testVerify":243,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":251,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":241,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":152,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":348,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":148,"org.easymock.tests.LimitationsTest.abstractClass":392,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":201,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":149,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":143,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":161,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":27,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":319}}]

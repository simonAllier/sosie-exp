[{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:195","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"parameterTypes":"candidateParameters","i":"i"}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"invocation":"invocation","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:47","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short.valueOf(((short)(0))))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[44],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[36],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:70","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[46],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[47,48,49,50],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[51,52],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[53,54,55,56,57,58,59,60,61,62],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[63,64,65,66,49,50,67,68,69],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:275","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[63,64,70,65,71,66,50,67,68,69],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[51,52],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:183","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1080","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:221","sourceCode":"return T","type":"CtReturnImpl"},"failures":[72,72,73,73,53,74,75,55,76,77,78,45,79,80,81,82,83,84,85,86],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[63,87,88,89,90],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[44],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[91,92,93],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[1,4,94,95,96,97,7,8,98,99,12,100,101,102,22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.EasyMock:682","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:206","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[86],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"invocation":"invocation","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[103],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[24,31,126,127,128],"status":-1,"binaryOperator":"int >= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[53,54,74,75,55,57,58,59,129,62],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":25,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":79,"org.easymock.tests2.UsageTest.argumentsOrdered":102,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":50,"org.easymock.tests2.CompareToTest.testGreateOrEqual":128,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":54,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":60,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":121,"org.easymock.tests2.DelegateToTest.testReturnException":88,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":116,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":6,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":83,"org.easymock.tests2.AnswerTest.stubAnswer":49,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":11,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":48,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":82,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":35,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":45,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":125,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":113,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":57,"org.easymock.tests2.DelegateToTest.testWrongClass":89,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":115,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":31,"org.easymock.tests2.UsageTest.wrongArguments":100,"org.easymock.tests.UsageStrictMockTest.range":12,"org.easymock.samples.ConstructorCalledMockTest.testTax":72,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":75,"org.easymock.samples.ExampleTest.answerVsDelegate":63,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":105,"org.easymock.tests2.ConstraintsToStringTest.orToString":14,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":73,"org.easymock.tests2.UsageConstraintsTest.testNull":27,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":74,"org.easymock.tests2.CaptureTest.testPrimitive":41,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":93,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":51,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":96,"org.easymock.tests.UsageTest.moreThanOneArgument":5,"org.easymock.tests2.UsageConstraintsTest.testSame":28,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":47,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":106,"org.easymock.tests.UsageUnorderedTest.message":1,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":98,"org.easymock.tests2.UsageTest.moreThanOneArgument":20,"org.easymock.tests.UsageVerifyTest.twoReturns":8,"org.easymock.tests.UsageTest.argumentsOrdered":97,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":104,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":19,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":44,"org.easymock.tests2.CaptureTest.testCapture_2617107":40,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":61,"org.easymock.tests2.UsageConstraintsTest.any":33,"org.easymock.tests2.UsageStrictMockTest.differentMethods":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":0,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":109,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":91,"org.easymock.tests2.SerializationTest.testClass":53,"org.easymock.tests2.AnswerTest.answer":65,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":32,"org.easymock.tests2.CaptureTest.testAnd":38,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":123,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":3,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":78,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":21,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":70,"org.easymock.tests2.DelegateToTest.testDelegate":90,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":103,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":108,"org.easymock.tests2.UsageConstraintsTest.testFind":26,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":67,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":56,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":68,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":10,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":122,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":34,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":30,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":80,"org.easymock.tests2.UsageStrictMockTest.range":22,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":110,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":9,"org.easymock.tests2.UsageConstraintsTest.lessThan":127,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":119,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":58,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":101,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":37,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":129,"org.easymock.tests2.CaptureTest.testCaptureRightOne":42,"org.easymock.tests.UsageStrictMockTest.differentMethods":13,"org.easymock.tests2.UsageConstraintsTest.testOr":29,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":55,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":76,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":87,"org.easymock.tests.UsageTest.wrongArguments":95,"org.easymock.tests2.ConstraintsToStringTest.andToString":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":81,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":66,"org.easymock.tests.UsageVerifyTest.twoThrows":7,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":52,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":64,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":86,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":112,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":71,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":114,"org.easymock.tests2.UsageConstraintsTest.testNotNull":36,"org.easymock.tests2.CaptureTest.testCaptureFromStub":43,"org.easymock.tests2.CallbackTest.callback":69,"org.easymock.tests.UsageTest.unexpectedCallWithArray":94,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":120,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":4,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":77,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":15,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":99,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":111,"org.easymock.tests2.UsageConstraintsTest.constraints":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":84,"org.easymock.tests2.ConstraintsToStringTest.notToString":16,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":126,"org.easymock.tests.ReplayStateInvalidCallsTest.times":117,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":92,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":118,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":17,"org.easymock.tests2.CompareToTest.testGreateThan":46,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":2,"org.easymock.tests2.CaptureTest.testCaptureAll":39}}]

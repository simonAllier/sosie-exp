[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ObjectMethodsFilter:113","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)) {\n    throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\");\n} ","position":"org.easymock.internal.MocksControl:105","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:155","type":"CtReturnImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.Result:83","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n}","position":"org.easymock.internal.Results:65","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:125","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()))","position":"org.easymock.internal.Injector:233","type":"CtThrowImpl"},"status":-2},{"failures":[1,2],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","position":"org.easymock.internal.ReflectionUtils:189","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:311","type":"CtLocalVariableImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12,13],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:91","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","position":"org.easymock.internal.RecordState:166","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:866","type":"CtReturnImpl"},"status":-2},{"failures":[11,14,12,15,16,17,18,19,20,13,21,22,23],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.setPotentialValue(null)","position":"org.easymock.internal.Invocation:174","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.validateCapture()","position":"org.easymock.internal.Invocation:168","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.ReflectionUtils:157","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","position":"org.easymock.internal.Injector:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:509","type":"CtInvocationImpl"},"status":-2},{"failures":[24,25],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"mutation","status":-1},{"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","position":"org.easymock.internal.MocksBehavior:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:128","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"))","position":"org.easymock.internal.BridgeMethodResolver:94","type":"CtThrowImpl"},"status":-2},{"failures":[40,41,42,43],"variableMapping":{"constructor":"constructor"},"name":"replace","transplant":{"sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:235","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:138","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-504083241204488174L","position":"org.easymock.internal.matchers.GreaterOrEqual:26","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[44],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new (\">=\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int >= 0;\n    }\n}","position":"org.easymock.LogicalOperator:42","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:46","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((this.boolean) != boolean) {\n    return false;\n} else if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:104","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:132","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","position":"org.easymock.internal.ClassProxyFactory:176","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : java.util.List<org.easymock.internal.Injection>) {\n    final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier());\n    final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field);\n    if (org.easymock.internal.InjectionTarget == null) {\n        continue;\n    } \n    if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n        org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n        java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n    } \n}","position":"org.easymock.internal.Injector:161","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"status":-2},{"failures":[3,45,46,47,26,27,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,28,77,78,79,29,30,80,81,82,83,84,85,86,87,88,89,90,91,31,92,32,33,34,35,93,94,95,96,36,97,98,37,38,39,99,100,101],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.MocksBehavior:70","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:121","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:58","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.Range:60","type":"CtReturnImpl"},"status":-2},{"failures":[41,102,42,43,103,104],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","position":"org.easymock.Capture:134","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:242","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException)","position":"org.easymock.internal.DefaultClassInstantiator:47","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getMockedType(java.lang.Object)","position":"org.easymock.internal.Invocation:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1421","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-2},{"failures":[105,106,107,8,108,109,110,46,111,112,47,26,27,113,114,115,116,60,117,118,119,14,12,17,18,19,120,23,61,62,69,121,74,122,123,124,125,28,78,29,30,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,83,84,143,144,145,146,147,148,149,150,151,91,152,31,153,92,32,33,154,155,156,157,36,37,38,39,158,159,160,161,162,163,101,164,165,166,167,168],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","position":"org.easymock.internal.RecordState:181","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:959","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1332","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","position":"org.easymock.internal.BridgeMethodResolver:246","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","position":"org.easymock.EasyMock:2143","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.asStub()","position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"status":0},{"failures":[169],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:345","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    org.easymock.internal.Invocation.validateCaptures();\n    org.easymock.internal.Invocation.clearCaptures();\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:107","type":"CtIfImpl"},"status":-2},{"failures":[170,171,34],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:323","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ExpectedInvocation = new org.easymock.internal.ExpectedInvocation(org.easymock.internal.Invocation , java.util.List<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.RecordState:78","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:293","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:285","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.InjectionTarget:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.ReplayState:61","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","position":"org.easymock.ConstructorArgs:54","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:89","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"private static class MockHandler implements java.lang.reflect.InvocationHandler {\n    private final java.lang.reflect.InvocationHandler delegate;\n\n    private final java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockHandler(java.lang.reflect.InvocationHandler delegate ,java.lang.reflect.Method... mockedMethods) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n        this.java.util.Set<java.lang.reflect.Method> = java.lang.reflect.Method[] != null ? new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[])) : null;\n    }\n\n    public java.lang.Object invoke(java.lang.Object obj, java.lang.reflect.Method method, java.lang.Object[] args) throws java.lang.Throwable {\n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()));\n        if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n            return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    private boolean isMocked(java.lang.reflect.Method method) {\n        return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:67","type":"CtClassImpl"},"status":-2},{"failures":[172,173,174,105,175,176,177,178,179,180,40,106,181,182,183,184,185,186,187,102,188,189,190,3,4,191,5,192,6,7,193,8,108,194,195,44,196,197,45,198,199,9,200,201,109,110,10,0,202,46,112,47,26,27,113,203,48,204,205,206,207,208,50,51,209,52,210,114,115,211,212,213,214,215,53,54,116,55,56,57,58,59,60,117,118,11,14,12,15,16,17,18,19,120,20,13,21,22,23,61,216,217,218,219,220,221,62,63,64,65,67,222,223,224,68,69,225,121,71,72,74,75,226,227,228,229,230,231,232,76,233,234,28,77,78,235,236,79,29,30,80,81,128,237,129,130,132,133,238,238,239,239,240,135,241,242,243,139,85,86,87,88,89,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,143,270,271,272,273,274,275,276,277,278,279,149,280,281,170,171,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,150,151,308,309,310,311,91,31,153,92,32,33,154,312,313,314,315,316,317,318,319,320,321,322,323,324,34,35,325,326,327,328,329,330,331,93,94,95,332,156,157,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,36,97,357,98,37,358,359,38,39,99,100,360,361,362,363,364,365,168],"variableMapping":{"method":"equalsMethod","finalizeMethod":"equalsMethod"},"name":"replace","transplant":{"sourceCode":"if (this.java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:82","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:131","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:133","type":"CtInvocationImpl"},"status":-2},{"failures":[366,367,368,369,370],"variableMapping":{"mockName":"key","methodName":"key"},"name":"replace","transplant":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (this.java.lang.Object[].int) ; int++) {\n    final java.lang.Object java.lang.Object = this.java.lang.Object[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n        if (!(java.lang.Object.equals(java.lang.Object))) {\n            return false;\n        } \n    } else {\n        if (java.lang.Object != java.lang.Object) {\n            return false;\n        } \n    }\n}","position":"org.easymock.internal.Invocation:117","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","position":"org.easymock.internal.ReplayState:48","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:75","type":"CtThrowImpl"},"status":-2},{"failures":[371],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","position":"org.easymock.internal.matchers.Find:41","type":"CtInvocationImpl"},"status":-1},{"failures":[1,2],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:117","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:200","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n    if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n        java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:382","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:337","type":"CtThrowImpl"},"status":-2},{"failures":[372,373,327],"variableMapping":{"value":"proxy"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)","position":"org.easymock.internal.MethodSerializationWrapper:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.DefaultClassInstantiator:164","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Results:60","type":"CtReturnImpl"},"status":-2},{"failures":[172,173,174,105,175,176,177,178,179,180,40,106,181,182,183,184,185,186,187,102,188,107,189,190,3,4,191,5,192,6,7,193,8,108,194,195,44,196,197,45,198,199,9,200,201,109,110,10,0,202,46,111,112,47,26,27,113,203,48,204,205,206,207,49,208,50,51,209,52,114,115,211,212,213,214,215,53,54,116,55,56,57,58,59,60,117,118,119,11,14,12,15,16,17,18,19,120,20,13,21,22,23,61,217,218,219,221,62,63,64,65,66,67,223,224,68,69,121,70,71,72,73,74,75,226,227,228,229,230,231,232,122,123,124,125,76,233,234,28,77,78,235,236,79,29,30,80,81,126,127,128,237,129,130,131,132,133,238,238,239,239,240,134,135,136,137,241,242,243,138,139,140,141,142,82,83,84,85,86,87,88,89,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,143,270,374,271,272,375,273,90,376,376,274,275,276,277,278,279,149,280,281,170,171,282,283,377,284,285,286,378,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,150,151,308,309,311,379,380,91,152,31,153,92,32,33,154,155,312,313,314,315,316,322,323,381,382,383,384,324,34,35,331,93,94,95,96,332,156,157,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,36,385,97,357,98,37,358,359,38,39,99,100,360,361,362,363,158,364],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().contains(org.easymock.internal.Results.getCallCount())","position":"org.easymock.internal.Results:81","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:200","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","position":"org.easymock.internal.EasyMockProperties:128","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>))","name":"math","position":"org.easymock.internal.matchers.CompareTo:49","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<java.lang.Class<?>>.toArray(new java.lang.Class[java.util.List<java.lang.Class<?>>.size()])","position":"org.easymock.internal.BridgeMethodResolver:390","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","position":"org.easymock.ConstructorArgs:66","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"expected","expected":"actual"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:41","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Method.getDeclaringClass().getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[172,175,177,178,179,180,40,181,184,102,188,189,190,3,4,191,5,192,6,7,193,108,194,195,44,196,197,45,198,199,9,200,201,110,10,0,202,112,26,27,203,48,204,205,206,207,208,51,209,52,213,215,53,54,116,55,56,57,58,59,60,117,118,11,14,15,16,19,120,20,13,22,23,61,217,218,219,220,221,67,223,224,69,121,71,72,74,226,227,228,229,230,231,232,76,233,234,77,235,236,79,80,81,128,129,130,132,240,135,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,273,386,387,388,389,390,279,280,281,170,171,282,283,284,285,286,287,288,289,290,291,293,294,295,296,297,298,299,306,307,308,309,153,32,33,322,324,35,331,97,357,358,359,99,100,360,361,362,363,364],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"status":-1},{"failures":[175,177,178,179,180,40,181,184,102,188,189,190,3,4,191,5,192,6,7,193,108,194,195,44,196,197,45,198,199,9,200,201,110,10,0,202,112,26,27,203,48,204,205,206,207,208,51,209,52,213,215,53,54,116,55,56,57,58,59,60,117,118,11,14,15,16,19,120,20,13,22,23,61,217,218,219,220,221,67,223,224,69,121,71,72,74,226,227,228,229,230,231,232,76,233,234,77,235,236,79,80,81,128,129,130,132,240,135,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,273,279,280,281,170,171,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,306,307,308,309,153,32,33,322,324,35,331,97,357,358,359,99,100,360,361,362,363,364],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:971","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1332","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocation","position":"org.easymock.internal.ExpectedInvocationAndResults:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"obj"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : java.util.List<org.easymock.internal.Injection>) {\n    final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier());\n    final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field);\n    if (org.easymock.internal.InjectionTarget == null) {\n        continue;\n    } \n    if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n        org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n        java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n    } \n}","position":"org.easymock.internal.Injector:161","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"rawType":"rawType","typeVariableMap":"typeVariableMap","this":"this","candidateParameter":"candidateParameter"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:200","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.RecordState:61","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1688","type":"CtReturnImpl"},"status":-2},{"failures":[172,173,174,105,175,176,177,178,179,180,40,106,181,182,183,184,185,186,187,102,188,189,190,3,4,191,5,192,6,7,193,108,194,195,44,196,197,45,198,199,9,200,201,110,10,0,202,112,26,27,203,48,204,205,206,207,208,51,209,52,114,115,211,212,213,214,215,53,54,116,55,56,57,58,59,60,117,118,11,14,15,16,19,120,20,13,21,22,23,61,217,218,219,220,221,62,67,223,224,69,121,71,72,74,226,227,228,229,230,231,232,76,233,234,77,235,236,79,80,81,128,237,129,130,132,133,238,238,239,239,240,135,241,242,243,139,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,143,270,271,272,273,274,275,276,277,278,279,149,280,281,170,171,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,150,151,308,309,311,391,153,32,33,312,313,314,315,316,322,323,324,34,35,392,331,393,332,156,157,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,356,36,97,357,358,359,99,100,360,361,362,363,364],"binaryOperator":"org.easymock.internal.MocksControl == null","name":"negateConditional","position":"org.easymock.EasyMock:557","type":"mutation","status":-1},{"failures":[3,45,46,112,47,26,27,113,51,52,53,56,57,60,62,69,74,122,123,124,125,76,234,28,77,78,29,30,81,138,139,140,83,84,91,31,153,92,32,33,154,324,34,35,355,356,36,97,357,37,38,39,99,100,101],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ExpectedInvocation:113","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"bounds":"actualTypeArguments"},"name":"replace","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","position":"org.easymock.internal.BridgeMethodResolver:353","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:322","type":"CtLocalVariableImpl"},"status":0},{"failures":[394],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\"))","position":"org.easymock.internal.matchers.EqualsWithDelta:45","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:47","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.MockBuilder:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","position":"org.easymock.internal.ClassProxyFactory:183","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"stack":"stack"},"name":"add","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":0},{"failures":[395],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int == (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","position":"org.easymock.internal.MocksBehavior:98","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.DefaultClassInstantiator:182","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getAllDeclaredMethods(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:78","type":"CtLocalVariableImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":281,"org.easymock.tests2.MockedExceptionTest.testRealException":214,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":152,"org.easymock.tests.UsageVarargTest.varargIntAccepted":161,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":189,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":40,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":318,"org.easymock.tests.UsageCallCountTest.tooManyCalls":84,"org.easymock.tests.UsageVarargTest.allKinds":168,"org.easymock.tests2.StubTest.stubWithReturnValue":181,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":96,"org.easymock.tests2.CaptureTest.testCaptureAll":14,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":290,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":45,"org.easymock.tests2.CaptureTest.testAnd":11,"org.easymock.tests.UsageStrictMockTest.testVerify":155,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":343,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":271,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":264,"org.easymock.tests.MockClassControlTest.testToString":317,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":226,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":56,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":257,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":351,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":67,"org.easymock.tests.UsageThrowableTest.throwError":279,"org.easymock.samples.SupportTest.addDocument":134,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":308,"org.easymock.tests2.StubTest.stub":106,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":156,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":298,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":366,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":389,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":263,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":390,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":167,"org.easymock.tests.UsageExpectAndThrowTest.object":345,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":219,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":302,"org.easymock.tests2.UsageTest.moreThanOneArgument":234,"org.easymock.tests.UsageVarargTest.varargByteAccepted":166,"org.easymock.tests.MockClassControlTest.testEquals":320,"org.easymock.tests.UsageTest.wrongArguments":37,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":88,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":346,"org.easymock.tests2.UsageTest.defaultResetToNice":79,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":213,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":220,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":72,"org.easymock.tests.InvocationTest.testHashCode":383,"org.easymock.tests2.MockBuilderTest.testCreateMock":73,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":221,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":379,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":391,"org.easymock.samples.ExampleTest.voteAgainstRemovals":128,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":46,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":374,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":361,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":284,"org.easymock.tests2.CaptureTest.testCapture1_2446744":16,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":186,"org.easymock.samples.ExampleTest.voteForRemoval":129,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":142,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":273,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":294,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":42,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":93,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":154,"org.easymock.tests2.CaptureTest.testCaptureRightOne":13,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":250,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":1,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":174,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":207,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":360,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":333,"org.easymock.tests2.UsageConstraintsTest.cmpTo":194,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":368,"org.easymock.tests.MockTypeTest.fromEasyMockClass":265,"org.easymock.tests2.MockedExceptionTest.testMockedException":212,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":110,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":314,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":354,"org.easymock.samples.PartialClassMockTest.testGetArea":240,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":324,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":286,"org.easymock.samples.ConstructorCalledMockTest.testTax":238,"org.easymock.tests2.UsageTest.argumentsOrdered":30,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":173,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":176,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":311,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":249,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":85,"org.easymock.tests2.AnswerTest.answer":172,"org.easymock.tests.MockingTest.testNicePartialClassMocking":288,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":153,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":299,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":157,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":316,"org.easymock.tests.UsageExpectAndThrowTest.longType":338,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":269,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":179,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":58,"org.easymock.tests.UsageTest.argumentsOrdered":39,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":4,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":71,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":262,"org.easymock.tests2.MockBuilderTest.testCreateMockString":75,"org.easymock.tests2.NameTest.nameForStrictMock":123,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":150,"org.easymock.tests2.CaptureTest.testCaptureNone":120,"org.easymock.tests2.SerializationTest.testClass":102,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":388,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":330,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":381,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":126,"org.easymock.tests2.EasyMockSupportTest.testVerify":119,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":326,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":70,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":340,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":109,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":76,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":74,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":261,"org.easymock.tests.GenericTest.testBridgedEquals":365,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":193,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":230,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":203,"org.easymock.tests2.UsageConstraintsTest.testOr":6,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":395,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":218,"org.easymock.tests.MockClassControlTest.testHashCode":373,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":256,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":267,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":283,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":291,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":103,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":313,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":227,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":229,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":367,"org.easymock.tests2.UsageTest.resumeIfFailure":80,"org.easymock.tests2.UsageConstraintsTest.testSame":192,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":242,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":231,"org.easymock.tests.UsageOverloadedMethodTest.overloading":285,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":268,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":216,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":276,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":239,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":158,"org.easymock.tests.UsageTest.openCallCountByLastCall":358,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":341,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":382,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":275,"org.easymock.tests2.NameTest.nameForNiceMock":124,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":222,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":362,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":312,"org.easymock.tests2.CaptureTest.testPrimitive":15,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":204,"org.easymock.samples.BasicClassMockTest.testPrintContent":127,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":241,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":295,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":50,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":83,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":114,"org.easymock.tests2.UsageStrictMockTest.differentMethods":27,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":54,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":364,"org.easymock.tests2.CaptureTest.testCaptureLast":19,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":82,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":336,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":141,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":224,"org.easymock.tests.UsageStrictMockTest.range":32,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":359,"org.easymock.tests.InvocationTest.testEquals":384,"org.easymock.tests.UsageTest.unexpectedCallWithArray":98,"org.easymock.tests.MatchableArgumentsTest.testEquals":377,"org.easymock.samples.ExampleTest.addDocument":131,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":90,"org.easymock.tests2.UsageConstraintsTest.lessThan":202,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":38,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":270,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":332,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":146,"org.easymock.tests2.UsageStrictMockTest.range":26,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":232,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":87,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":355,"org.easymock.tests.UsageTest.moreThanOneArgument":357,"org.easymock.tests2.UsageTest.openCallCountByLastCall":235,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":69,"org.easymock.tests.UsageStrictMockTest.differentMethods":33,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":24,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":386,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":339,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":292,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":244,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":304,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":92,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":208,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":350,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":322,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":137,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":392,"org.easymock.tests2.UsageConstraintsTest.testContains":195,"org.easymock.tests2.UsageConstraintsTest.testFind":191,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":17,"org.easymock.samples.ExampleTest.addAndChangeDocument":133,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":68,"org.easymock.tests.UsageVarargTest.varargCharAccepted":162,"org.easymock.tests2.CaptureTest.testCaptureFromStub":21,"org.easymock.tests.UsageVerifyTest.twoThrows":34,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":163,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":307,"org.easymock.tests2.DelegateToTest.testReturnException":183,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":41,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":78,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":118,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":111,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":243,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":2,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":25,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":20,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":347,"org.easymock.tests2.UsageConstraintsTest.testMatches":197,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":86,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":387,"org.easymock.tests2.UsageConstraintsTest.testNull":5,"org.easymock.tests2.EasyMockSupportClassTest.testAll":177,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":143,"org.easymock.tests2.UsageConstraintsTest.greaterThan":198,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":159,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":9,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":59,"org.easymock.tests.UsageExpectAndReturnTest.object":254,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":113,"org.easymock.tests2.DelegateToTest.testWrongClass":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":342,"org.easymock.samples.ExampleTest.voteAgainstRemoval":130,"org.easymock.tests.CapturesMatcherTest.test":376,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":282,"org.easymock.tests.UsageVarargTest.varargShortAccepted":164,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":334,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":169,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":329,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":297,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":136,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":372,"org.easymock.tests2.SerializationTest.testAllMockedMethod":107,"org.easymock.tests2.NameTest.nameForMocksControl":125,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":151,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":81,"org.easymock.tests2.DelegateToTest.testStubDelegate":184,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":293,"org.easymock.tests.LimitationsTest.mockNativeMethod":309,"org.easymock.tests.UsageUnorderedTest.message":36,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":375,"org.easymock.samples.ExampleTest.answerVsDelegate":237,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":393,"org.easymock.tests.UsageCallCountTest.tooFewCalls":140,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":253,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":105,"org.easymock.tests.UsageVerifyTest.twoReturns":35,"org.easymock.tests2.ThreadingTest.testChangeDefault":370,"org.easymock.tests2.DependencyTest.testInterfaceMocking":223,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":248,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":344,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":301,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":116,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":66,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":7,"org.easymock.tests2.ConstraintsToStringTest.findToString":371,"org.easymock.tests.MockingTest.testTwoMocks":378,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":139,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":94,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":211,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":138,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":255,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":228,"org.easymock.tests.UsageThrowableTest.throwCheckedException":170,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":266,"org.easymock.samples.ExampleTest.voteForRemovals":132,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":280,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":196,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":272,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":303,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":206,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":43,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":97,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":245,"org.easymock.tests2.UsageConstraintsTest.any":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":144,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":252,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":117,"org.easymock.tests2.CallbackTest.callback":62,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":115,"org.easymock.tests2.NameTest.nameForMock":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":145,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":44,"org.easymock.tests.MockNameTest.defaultName":310,"org.easymock.tests2.SerializationTest.test":188,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":394,"org.easymock.tests.UsageExpectAndReturnTest.longType":247,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":18,"org.easymock.tests2.CaptureTest.testCaptureFirst":23,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":200,"org.easymock.tests2.UsageTest.niceToStrict":77,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":300,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":89,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":331,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":91,"org.easymock.tests2.UsageTest.strictResetToDefault":233,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":348,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":209,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":323,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":335,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":251,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":63,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":49,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":160,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":199,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":205,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":305,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":289,"org.easymock.tests2.DelegateToTest.testDelegate":187,"org.easymock.tests2.UsageConstraintsTest.testNotNull":10,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":47,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":61,"org.easymock.tests2.CaptureTest.testCapture_2617107":12,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":147,"org.easymock.tests2.ThreadingTest.testThreadSafe":217,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":148,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":236,"org.easymock.tests.UsageThrowableTest.noUpperLimit":149,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":60,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":53,"org.easymock.tests.UsageExpectAndReturnTest.floatType":246,"org.easymock.tests2.UsageTest.wrongArguments":28,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":8,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":65,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":319,"org.easymock.tests.UsageRangeTest.combination":100,"org.easymock.samples.SupportTest.voteForRemovals":135,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":171,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":0,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":201,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":112,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":258,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":349,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":95,"org.easymock.tests.UsageExpectAndThrowTest.floatType":337,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":48,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":259,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":369,"org.easymock.tests.ExpectedMethodCallTest.testHashCode":380,"org.easymock.tests.UsageTest.exactCallCountByLastCall":99,"org.easymock.tests2.AnswerTest.stubAnswer":175,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":57,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":178,"org.easymock.tests.MockingTest.testPartialClassMocking":287,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":260,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":29,"org.easymock.tests2.UsageConstraintsTest.constraints":3,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":64,"org.easymock.tests.UsageVarargTest.varargLongAccepted":165,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":315,"org.easymock.tests.ObjectMethodsTest.testHashCode":327,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":51,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":52,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":31,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":180,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":274,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":225,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":356,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":296,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":321,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":325,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":55,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":104,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":190,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":121,"org.easymock.tests.DefaultClassInstantiatorTest.object":385,"org.easymock.tests.UsageVarargTest.differentLength":101,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":277,"org.easymock.tests2.CaptureTest.testCapture2_2446744":22,"org.easymock.tests.GenericTest.testPackageScope":363}}]

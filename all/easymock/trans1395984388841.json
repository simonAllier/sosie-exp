[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:183","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injector.org.easymock.internal.Injector.shouldNotAssignTo(java.lang.reflect.Field)) {\n    return null;\n} ","position":"org.easymock.internal.Injector:216","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:194","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:53","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","position":"org.easymock.EasyMock:1915","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","position":"org.easymock.EasyMock:1594","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"status":-2},{"failures":[22,23,24],"variableMapping":{"max":"parameterPosition","java.lang.Integer.MAX_VALUE":"parameterPosition"},"name":"replace","transplant":{"sourceCode":"int = int","position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1))","position":"org.easymock.internal.Invocation:137","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"entry":"entry"},"name":"add","transplant":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:40","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:416","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int >= 0","position":"org.easymock.LogicalOperator:45","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:358","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String java.lang.String = org.easymock.Mock.java.lang.String()","position":"org.easymock.internal.Injector:117","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread()","position":"org.easymock.internal.MocksBehavior:197","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","position":"org.easymock.internal.RecordState:340","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:746","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n    java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n} else {\n    java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n}","position":"org.easymock.internal.Injector:123","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:163","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:81","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"and(\")","position":"org.easymock.internal.matchers.And:47","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:120","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.replay()","position":"org.easymock.EasyMockSupport:542","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:121","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n        return true;\n    } \n}","position":"org.easymock.internal.matchers.Or:38","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"org.easymock.internal.ReflectionUtils.OBJECT_FINALIZE","method":"finalizeMethod"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:53","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","position":"org.easymock.internal.MocksBehavior:98","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n        continue;\n    } \n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n        continue;\n    } \n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n    org.easymock.internal.Invocation.validateCaptures();\n    return org.easymock.internal.Result;\n} finally {\n    org.easymock.internal.Invocation.clearCaptures();\n}","position":"org.easymock.internal.UnorderedBehavior:51","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.MockBuilder:152","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class.java.lang.Class.forName(java.lang.String, true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","position":"org.easymock.internal.MethodSerializationWrapper:63","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ReflectionUtils:227","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"behavior":"behavior"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:190","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","position":"org.easymock.internal.ClassInstantiatorFactory:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>.getName(), java.lang.Byte.java.lang.Class<java.lang.Byte>)","position":"org.easymock.internal.MethodSerializationWrapper:34","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","position":"org.easymock.internal.BridgeMethodResolver:266","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:254","type":"CtWhileImpl"},"status":0},{"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","position":"org.easymock.EasyMock:1482","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:49","type":"CtNewClassImpl"},"status":-2},{"failures":[43,44,45,46,47,48,49,37,38,50,51,52,53,54,55],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ArgumentToString:89","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:814","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","position":"org.easymock.EasyMock:1633","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","position":"org.easymock.EasyMock:1470","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","position":"org.easymock.internal.ObjectMethodsFilter:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"searchType":"searchType","paramTypes":"paramTypes","name":"name","this":"this"},"name":"add","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:412","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.DefaultClassInstantiator:53","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-504083241204488174L","position":"org.easymock.internal.matchers.GreaterOrEqual:26","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:113","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","position":"org.easymock.EasyMock:1847","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","position":"org.easymock.internal.RecordState:55","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type == null) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:335","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectByType(java.lang.Object, java.util.List<java.lang.reflect.Field>, org.easymock.internal.InjectionPlan.getUnqualifiedInjections())","position":"org.easymock.internal.Injector:153","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:1012","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","position":"org.easymock.internal.BridgeMethodResolver:237","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:155","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Result:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.Injection","position":"org.easymock.internal.Injector:240","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.Injector:134","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:231","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n    return false;\n} ","position":"org.easymock.internal.UnorderedBehavior:75","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","position":"org.easymock.internal.ErrorMessage:54","type":"CtInvocationImpl"},"status":-2},{"failures":[56,57,58],"variableMapping":{"data":"data"},"name":"add","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"status":-1},{"failures":[59,60,61],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:331","type":"CtInvocationImpl"},"status":-1},{"failures":[62],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"status":-1},{"failures":[0,1,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,27,85,86,87,28,29,88,30,89,90,31,91,92,93,94,95,22,96,97,98,99,100,101,102,103,23,104,105,106,107,108,109,110,111,112,113,114,115,49,34,116,117,118,119,36,37,38,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,59,166,167,168,169,170,171,172,173,174,175,176,60,177,178,179,180,181,182,183,184,185,186,55,41,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,61,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:79","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:879","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:40","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.matchers.Captures<java.lang.Object>.setPotentialValue(java.lang.Object)","position":"org.easymock.internal.Invocation:162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:320","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","position":"org.easymock.internal.MethodSerializationWrapper:38","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.matchers.NotNull()","position":"org.easymock.internal.matchers.NotNull:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.injectByName(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan.getQualifiedInjections())","position":"org.easymock.internal.Injector:152","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"status":0},{"failures":[247,247,248,248,64,65,66,67,68,70,71,72,249,250,251,25,75,76,77,252,253,78,79,254,255,26,256,257,258,259,260,261,262,263,264,265,266,267,80,268,81,82,83,84,27,85,86,87,28,29,88,30,89,90,31,91,92,93,94,95,269,24,104,105,106,107,108,109,110,111,112,113,270,271,272,273,274,33,49,34,275,276,277,278,279,280,281,282,283,284,116,117,118,119,36,37,38,285,286,287,120,50,123,124,288,125,126,289,290,291,292,293,127,128,294,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,59,166,167,168,169,170,171,172,173,174,295,175,39,176,296,297,298,177,299,178,300,301,179,302,180,181,303,182,183,304,305,184,40,55,41,187,188,190,191,192,193,195,306,198,199,200,201,307,308,202,203,204,309,310,205,206,311,312,207,208,209,210,211,212,213,214,215,216,217,218,313,219,220,221,314,222,315,223,224,61,225,226,316,227,317,228,229,230,231,232,233,234,235,236,237,238,239,240,241,318,242,243,244,245],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","position":"org.easymock.internal.LastControl:48","type":"CtIfImpl"},"status":-1},{"failures":[155,319,168,172],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","position":"org.easymock.internal.LastControl:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:632","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.ExpectedInvocationAndResult:41","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5701204283180444317L","position":"org.easymock.internal.matchers.Or:29","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-1726286682930686024L","position":"org.easymock.internal.ObjectMethodsFilter:29","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)) {\n    return (java.lang.String + \".\") + java.lang.String;\n} ","position":"org.easymock.internal.Invocation:153","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1177","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:69","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().contains(org.easymock.internal.Results.getCallCount())","position":"org.easymock.internal.Results:81","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:336","type":"CtAssignmentImpl"},"status":-2},{"failures":[129,294,320],"variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"method","equalsMethod":"method"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ClassProxyFactory:90","type":"CtAssignmentImpl"},"status":-1},{"failures":[321,322],"name":"returnValue","position":"org.easymock.internal.Invocation:201","type":"mutation","return":"return false","status":-1},{"failures":[219,323],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:105","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2143","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:2000","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","position":"org.easymock.EasyMock:1506","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:283","type":"CtInvocationImpl"},"status":-2},{"failures":[324],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:250","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MockInvocationHandler:43","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"status":0},{"failures":[0,247,248,1,63,64,65,66,67,68,69,70,325,71,72,73,74,249,326,250,251,327,25,43,75,76,77,252,253,78,328,329,330,331,332,333,334,335,336,337,338,339,79,254,255,26,44,45,256,257,46,47,258,340,341,342,343,344,345,346,347,348,349,350,351,352,259,260,261,353,262,354,263,264,265,266,267,80,268,81,82,83,84,27,85,86,87,28,29,88,30,89,90,31,91,92,93,94,95,355,269,32,22,96,97,356,98,99,357,100,101,102,103,23,24,104,105,358,359,360,106,107,361,108,362,363,364,365,366,367,368,369,56,370,371,372,109,110,111,112,113,270,271,272,273,274,373,114,48,33,115,49,34,35,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,275,397,398,399,400,401,276,402,277,278,279,280,281,282,283,284,116,117,118,119,36,37,38,285,286,287,403,404,120,405,121,122,406,407,408,50,123,124,288,125,126,289,290,291,292,293,409,410,127,411,412,128,129,294,320,413,414,415,416,417,418,419,420,421,324,422,423,424,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,321,425,426,427,428,429,430,431,432,150,151,152,153,433,154,155,156,157,158,159,319,160,161,162,163,164,165,59,166,167,168,169,170,434,171,172,173,174,295,175,39,52,176,60,296,297,298,53,54,177,299,2,3,4,435,5,178,6,7,8,9,10,11,300,301,179,302,436,437,438,439,180,440,181,303,182,183,304,305,184,441,185,40,186,55,41,42,187,188,189,190,12,13,14,442,15,191,16,17,18,19,20,21,192,193,194,195,306,196,197,198,199,200,201,307,308,202,203,204,309,310,205,206,311,312,207,208,209,210,211,212,213,443,214,215,216,444,445,446,217,218,447,448,313,449,450,451,219,452,220,453,221,454,455,456,314,457,458,222,315,223,224,61,225,459,460,226,461,462,463,316,227,317,464,465,466,467,468,228,469,470,229,471,472,473,474,475,476,477,478,479,230,480,481,482,483,484,231,485,486,232,233,234,487,488,235,236,237,238,239,240,241,318,242,243,244,245,246,322,489,490,491,492],"binaryOperator":"(int >= 0)","name":"negateConditional","position":"org.easymock.internal.Range:40","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : org.easymock.internal.Invocation.getArguments()) {\n    java.util.List<org.easymock.IArgumentMatcher>.add(new org.easymock.internal.matchers.Equals(java.lang.Object));\n}","position":"org.easymock.internal.ExpectedInvocation:61","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) == (java.lang.Integer.int)","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:50","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:352","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:57","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:66","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","position":"org.easymock.internal.MockBuilder:128","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.Injector:190","type":"CtContinueImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","position":"org.easymock.EasyMock:1470","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","position":"org.easymock.internal.DefaultClassInstantiator:188","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"state":"state","behavior":"behavior"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:213","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while ((int) < (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation);\n    if (org.easymock.internal.Result != null) {\n        return org.easymock.internal.Result;\n    } \n    if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n        break;\n    } \n    (int)++;\n}","position":"org.easymock.internal.MocksBehavior:86","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:90","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","position":"org.easymock.internal.BridgeMethodResolver:266","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","position":"org.easymock.internal.ClassProxyFactory:226","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:665","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","position":"org.easymock.internal.Results:92","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:299","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.RecordState:61","type":"CtInvocationImpl"},"status":-2},{"failures":[252,254,264,265,266,267,80,268,300,301,179,302,233],"variableMapping":{"behavior":"behavior"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","position":"org.easymock.internal.RecordState:156","type":"CtInvocationImpl"},"status":-1},{"failures":[469],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1459","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:325","type":"CtReturnImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":289,"org.easymock.tests2.MockedExceptionTest.testRealException":302,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":471,"org.easymock.tests.UsageVarargTest.varargIntAccepted":97,"org.easymock.tests.LimitationsTest.mockFinalMethod":411,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":150,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":234,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":343,"org.easymock.tests.UsageCallCountTest.tooManyCalls":408,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":416,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":481,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":444,"org.easymock.tests.UsageVarargTest.allKinds":23,"org.easymock.tests2.StubTest.stubWithReturnValue":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":486,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":339,"org.easymock.tests2.CaptureTest.testCaptureAll":193,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":123,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":59,"org.easymock.tests2.CaptureTest.testAnd":192,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":488,"org.easymock.tests.UsageStrictMockTest.testVerify":374,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":28,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":250,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":328,"org.easymock.tests.MockClassControlTest.testToString":342,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":62,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":210,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":422,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":240,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":92,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":143,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":191,"org.easymock.tests.UsageThrowableTest.throwError":288,"org.easymock.samples.SupportTest.addDocument":63,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":78,"org.easymock.tests2.StubTest.stub":232,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":278,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":417,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":12,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":112,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":460,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":76,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":401,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":149,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":465,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":402,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":464,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":103,"org.easymock.tests.UsageExpectAndThrowTest.object":88,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":309,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":483,"org.easymock.tests2.UsageTest.moreThanOneArgument":39,"org.easymock.tests.UsageVarargTest.varargByteAccepted":102,"org.easymock.tests.MockClassControlTest.testEquals":346,"org.easymock.tests.UsageTest.wrongArguments":45,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":351,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":378,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":15,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":30,"org.easymock.tests2.UsageTest.defaultResetToNice":298,"org.easymock.tests.MockingTest.testNiceClassMocking":364,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":179,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":310,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":221,"org.easymock.tests2.MockBuilderTest.testCreateMock":456,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":205,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":413,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":418,"org.easymock.samples.ExampleTest.voteAgainstRemovals":65,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":441,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":326,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":442,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":118,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":24,"org.easymock.tests2.CaptureTest.testCapture1_2446744":306,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":305,"org.easymock.samples.ExampleTest.voteForRemoval":67,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":430,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":122,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":25,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":428,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":261,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":453,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":35,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":336,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":136,"org.easymock.tests2.CaptureTest.testCaptureRightOne":201,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":414,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":312,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":225,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":117,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":280,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":415,"org.easymock.tests2.UsageConstraintsTest.cmpTo":161,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":56,"org.easymock.tests.MockTypeTest.fromEasyMockClass":331,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":19,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":454,"org.easymock.tests2.MockedExceptionTest.testMockedException":301,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":95,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":171,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":272,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":36,"org.easymock.samples.PartialClassMockTest.testGetArea":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":388,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":105,"org.easymock.samples.ConstructorCalledMockTest.testTax":247,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":443,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":426,"org.easymock.tests2.UsageTest.argumentsOrdered":54,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":311,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":329,"org.easymock.samples.ExampleTest.removeNonExistingDocument":325,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":431,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":209,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":368,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":263,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":135,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":348,"org.easymock.tests2.AnswerTest.answer":206,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":20,"org.easymock.tests.MockingTest.testNicePartialClassMocking":107,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":33,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":113,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":274,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":279,"org.easymock.tests.UsageExpectAndThrowTest.longType":84,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":335,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":230,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":318,"org.easymock.tests.UsageTest.argumentsOrdered":47,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":153,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":220,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":148,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":252,"org.easymock.tests2.MockBuilderTest.testCreateMockString":458,"org.easymock.tests2.NameTest.nameForStrictMock":490,"org.easymock.tests2.CaptureTest.testCaptureNone":199,"org.easymock.tests2.SerializationTest.testClass":187,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":387,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":400,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":380,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":73,"org.easymock.tests.MockingTest.testInterfaceMocking":361,"org.easymock.tests2.EasyMockSupportTest.testVerify":246,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":376,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":17,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":452,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":85,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":363,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":434,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":295,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":147,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":314,"org.easymock.tests.GenericTest.testBridgedEquals":320,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":159,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":214,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":222,"org.easymock.tests2.UsageConstraintsTest.testOr":157,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":204,"org.easymock.tests.MockClassControlTest.testHashCode":345,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":3,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":322,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":124,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":142,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":293,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":333,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":57,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":271,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":211,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":469,"org.easymock.tests2.UsageConstraintsTest.testSame":156,"org.easymock.tests2.UsageTest.resumeIfFailure":177,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":286,"org.easymock.tests.UsageOverloadedMethodTest.overloading":104,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":215,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":334,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":461,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":5,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":476,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":284,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":248,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":475,"org.easymock.tests.UsageTest.openCallCountByLastCall":256,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":86,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":321,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":283,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":420,"org.easymock.tests2.NameTest.nameForNiceMock":491,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":16,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":119,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":270,"org.easymock.tests2.CaptureTest.testPrimitive":195,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":223,"org.easymock.samples.BasicClassMockTest.testPrintContent":74,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":285,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":109,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":463,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":180,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":407,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":404,"org.easymock.tests2.UsageStrictMockTest.differentMethods":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":477,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":237,"org.easymock.tests.MockingTest.testClassMocking":359,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":294,"org.easymock.tests2.CaptureTest.testCaptureLast":198,"org.easymock.tests2.UsageConstraintsTest.equals":433,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":323,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":82,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":406,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":121,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":218,"org.easymock.tests.UsageStrictMockTest.range":49,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":257,"org.easymock.tests.UsageTest.unexpectedCallWithArray":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":478,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":384,"org.easymock.samples.ExampleTest.addDocument":69,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":362,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":43,"org.easymock.tests2.UsageConstraintsTest.lessThan":174,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":46,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":249,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":277,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":58,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":393,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":425,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":372,"org.easymock.tests2.MockBuilderTest.testWithConstructor":448,"org.easymock.tests2.UsageStrictMockTest.range":55,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":216,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":350,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":386,"org.easymock.tests.UsageTest.moreThanOneArgument":26,"org.easymock.tests2.UsageTest.openCallCountByLastCall":296,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":313,"org.easymock.tests.UsageStrictMockTest.differentMethods":34,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":390,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":429,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":27,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":259,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":130,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":470,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":14,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":115,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":226,"org.easymock.tests2.DependencyTest.testClassMockingSupport":446,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":91,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":79,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":435,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":0,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":353,"org.easymock.tests2.UsageConstraintsTest.testContains":162,"org.easymock.tests2.UsageConstraintsTest.testFind":154,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":196,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":369,"org.easymock.samples.ExampleTest.addAndChangeDocument":71,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":447,"org.easymock.tests.UsageVarargTest.varargCharAccepted":98,"org.easymock.tests2.CaptureTest.testCaptureFromStub":307,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":21,"org.easymock.tests.UsageVerifyTest.twoThrows":37,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":330,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":77,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":99,"org.easymock.tests2.DelegateToTest.testReturnException":182,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":60,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":487,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":245,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":185,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":412,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":440,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":287,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":370,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":423,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":200,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":89,"org.easymock.tests2.UsageConstraintsTest.testMatches":165,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":391,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":392,"org.easymock.tests2.UsageConstraintsTest.testNull":155,"org.easymock.tests.LimitationsTest.abstractClass":409,"org.easymock.tests2.EasyMockSupportClassTest.testAll":228,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":371,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":75,"org.easymock.tests2.UsageConstraintsTest.greaterThan":166,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":22,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":419,"org.easymock.tests.UsageExpectAndReturnTest.object":140,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":168,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":242,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":42,"org.easymock.tests2.DelegateToTest.testWrongClass":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":383,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":87,"org.easymock.samples.ExampleTest.voteAgainstRemoval":68,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":292,"org.easymock.tests.UsageVarargTest.varargShortAccepted":100,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":281,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":379,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":10,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":111,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":468,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":340,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":13,"org.easymock.tests2.SerializationTest.testAllMockedMethod":189,"org.easymock.tests2.NameTest.nameForMocksControl":492,"org.easymock.tests.MockingTest.testStrictClassMocking":358,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":253,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":474,"org.easymock.tests.LimitationsTest.mockNativeMethod":127,"org.easymock.tests2.DelegateToTest.testStubDelegate":183,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":260,"org.easymock.tests.UsageUnorderedTest.message":50,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":395,"org.easymock.samples.ExampleTest.answerVsDelegate":66,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":354,"org.easymock.tests.UsageCallCountTest.tooFewCalls":405,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":139,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":207,"org.easymock.tests.UsageVerifyTest.twoReturns":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":482,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":29,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":134,"org.easymock.tests2.DependencyTest.testInterfaceMocking":217,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":394,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":235,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":396,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":238,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":439,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":158,"org.easymock.tests.MockingTest.testTwoMocks":360,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":120,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":337,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":300,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":472,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":141,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":212,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":18,"org.easymock.tests.UsageThrowableTest.throwCheckedException":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":467,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":332,"org.easymock.samples.ExampleTest.voteForRemovals":70,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":126,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":164,"org.easymock.tests.ReplayStateInvalidUsageTest.times":421,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":251,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":473,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":61,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":381,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":131,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":427,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":4,"org.easymock.tests2.UsageConstraintsTest.any":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":382,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":385,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":244,"org.easymock.tests.LimitationsTest.privateConstructor":410,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":181,"org.easymock.tests2.CallbackTest.callback":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":389,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":457,"org.easymock.tests2.NameTest.nameForMock":489,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":163,"org.easymock.tests.MockNameTest.defaultName":424,"org.easymock.tests2.SerializationTest.test":188,"org.easymock.tests.UsageExpectAndReturnTest.longType":133,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":197,"org.easymock.tests2.CaptureTest.testCaptureFirst":202,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":32,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":169,"org.easymock.tests2.UsageTest.niceToStrict":176,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":264,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":352,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":262,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":365,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":373,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":90,"org.easymock.tests2.UsageTest.strictResetToDefault":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":466,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":51,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":227,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":254,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":81,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":137,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":436,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":451,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":459,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":96,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":167,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":224,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":268,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":108,"org.easymock.tests2.DelegateToTest.testDelegate":184,"org.easymock.tests2.UsageConstraintsTest.testNotNull":172,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":186,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":450,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":178,"org.easymock.tests2.CaptureTest.testCapture_2617107":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":397,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":324,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":7,"org.easymock.tests2.ThreadingTest.testThreadSafe":203,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":398,"org.easymock.tests.UsageThrowableTest.noUpperLimit":125,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":356,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":243,"org.easymock.tests.UsageExpectAndReturnTest.floatType":132,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":236,"org.easymock.tests2.UsageTest.wrongArguments":52,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":319,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":438,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":344,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":455,"org.easymock.samples.SupportTest.voteForRemovals":64,"org.easymock.tests.UsageRangeTest.combination":116,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":479,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":173,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":484,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":11,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":40,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":144,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":31,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":338,"org.easymock.tests.UsageExpectAndThrowTest.floatType":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":480,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":145,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":315,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":2,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":462,"org.easymock.tests.UsageTest.exactCallCountByLastCall":258,"org.easymock.tests2.AnswerTest.stubAnswer":208,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":241,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":229,"org.easymock.tests.MockingTest.testPartialClassMocking":106,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":146,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":53,"org.easymock.tests2.UsageConstraintsTest.constraints":152,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":437,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":432,"org.easymock.tests.UsageVarargTest.varargLongAccepted":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":273,"org.easymock.tests.ObjectMethodsTest.testHashCode":377,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":316,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":317,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":48,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":231,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":282,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":269,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":449,"org.easymock.tests2.DependencyTest.testClassMocking":445,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":110,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":347,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":375,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":9,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":239,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":151,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":341,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":219,"org.easymock.tests.DefaultClassInstantiatorTest.object":366,"org.easymock.tests.UsageVarargTest.differentLength":357,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":275,"org.easymock.tests2.CaptureTest.testCapture2_2446744":308,"org.easymock.tests.GenericTest.testPackageScope":128}}]

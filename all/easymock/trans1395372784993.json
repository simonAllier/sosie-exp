[{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if (org.easymock.ConstructorArgs == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[66,67,68],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[7,14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[69,70,0,71,72,66,67,73,74,75,76,1,77,78,79,80,81,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,82,83,84,85,86,32,33,35,36,39,40,41,42,44,45,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,46,126,127,128,129,130,131,132,133,134,135,136,47,48,49,50,51,137,138,139,54,140,141,142,143,144,145,146,147,55,56,59,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,62,63,177,178,179,180,181,182,183,64,184,185,186],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[66,68,187,188,189,190,191,192,193,194,78,195,196,79,197,198,199,200,201,202,203,204,205,80,206,207,208,209,210,81,211,212,213,214,82,215,216,83,217,84,85,218,219,86,220,221,222,223,100,224,225,111,226,112,113,114,115,117,118,120,121,123,124,125,227,46,228,229,230,126,127,128,231,232,131,233,233,234,234,235,236,237,238,239,240,241,242,243,244,245,246,146,247,248,249,250,150,251,151,252,253,254,255,256,184,185,186,257,258,259,260,261,262,263,264,265],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[18],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"expected","myArgument":"actual"}},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:209","sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"exception":"candidateParameter","throwableClass":"candidateParameter"}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[69,0,102,106,107,110,54,148,149,172,174,175,176],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:225","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[213,217,227,232],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[266,267,268,269,270,271,272,226,114,118,273],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"paramType"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:63","sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[274,275,276,277],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:193","sourceCode":"if (!(this.boolean)) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[69,278,279,280,70,281,282,283,0,284,71,72,285,66,67,68,73,74,75,76,1,77,78,79,80,81,2,3,286,287,288,289,290,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,213,82,83,217,84,85,219,86,221,291,32,33,34,35,36,37,38,39,40,41,42,43,44,45,87,88,89,90,91,92,93,94,95,96,97,98,99,292,222,223,100,293,294,295,101,296,297,298,299,300,301,302,102,103,104,303,105,304,106,107,108,305,306,109,110,111,112,113,114,115,116,117,118,307,119,120,121,122,123,124,125,227,46,230,126,127,128,129,130,131,308,233,233,234,234,309,132,310,133,311,134,135,312,136,313,314,235,236,47,48,49,50,51,315,316,317,318,52,319,137,138,139,320,321,322,323,53,54,324,140,141,325,326,327,328,329,330,237,331,142,143,144,145,332,333,334,238,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,146,350,351,352,353,354,147,355,356,357,358,359,55,56,57,58,59,148,360,149,361,362,363,364,365,366,367,368,369,370,150,251,151,371,372,373,374,375,376,377,378,379,380,60,381,382,383,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,61,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,172,173,404,405,174,175,406,407,176,408,409,410,411,412,413,414,62,63,177,415,178,179,180,181,182,183,64,65,256,184,185,186,416,417,418,419,420,421,422,423,424,258,259,260,261,262,263,264,265],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"shouldBeUsedInOneThread":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[280,2,3,286,425],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:203","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:48","failures":[],"status":-2,"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[108],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:44","sourceCode":"new java.util.ArrayList<org.easymock.internal.matchers.Captures<?>>(0)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:107","sourceCode":"java.io.ObjectInputStream.defaultReadObject()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[69,280,70,281,283,0,284,71,72,285,66,67,68,73,74,75,76,1,77,78,79,80,81,2,3,286,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,83,84,85,32,33,34,35,36,37,38,39,40,41,42,44,45,87,88,89,90,91,92,93,94,96,97,98,99,292,100,295,101,296,298,102,103,104,303,105,304,106,107,305,306,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,46,127,129,130,131,308,309,132,310,133,311,134,135,312,136,314,235,236,47,48,49,50,51,52,137,138,139,323,53,54,324,140,141,325,237,142,146,350,352,353,55,56,57,58,59,148,360,149,150,251,371,372,373,374,375,377,378,379,380,60,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,61,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,172,173,405,174,175,406,407,176,62,63,177,415,178,179,180,181,182,183,64,184,185,186,418,419,420,421,423,424],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"this.java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"lock":"lock"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:196","sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"position":"org.easymock.internal.MockBuilder:210","failures":[66,218,111,226,228,233,233,234,234],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":7,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":172,"org.easymock.tests2.UsageTest.argumentsOrdered":306,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":98,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":304,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":308,"org.easymock.tests2.DelegateToTest.testReturnException":295,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":316,"org.easymock.tests.MockingTest.testPartialClassMocking":184,"org.easymock.tests.MockClassControlTest.testToString":260,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":356,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":200,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":384,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":79,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":130,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":13,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":55,"org.easymock.tests2.UsageTest.wrongArguments":303,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":329,"org.easymock.samples.ExampleTest.answerVsDelegate":311,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":249,"org.easymock.tests2.UsageConstraintsTest.testNull":9,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":123,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":97,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":265,"org.easymock.tests2.CaptureTest.testPrimitive":35,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":59,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":403,"org.easymock.tests.UsageTest.moreThanOneArgument":173,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":122,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":363,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":408,"org.easymock.tests.UsageTest.argumentsOrdered":407,"org.easymock.tests.UsageVarargTest.varargIntAccepted":373,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":47,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":213,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":217,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":51,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":73,"org.easymock.tests.ReplayStateInvalidUsageTest.times":343,"org.easymock.tests2.AnswerTest.answer":69,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":14,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":302,"org.easymock.tests2.CaptureTest.testAnd":32,"org.easymock.tests2.UsageTest.strictResetToDefault":103,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":230,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":269,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":362,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":144,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":92,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":412,"org.easymock.tests2.DelegateToTest.testDelegate":298,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":399,"org.easymock.tests.LimitationsTest.mockFinalMethod":247,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":52,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":370,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":413,"org.easymock.tests2.CaptureTest.testCapture1_2446744":36,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":397,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":300,"org.easymock.tests.UsageThrowableTest.throwError":177,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":337,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":365,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":212,"org.easymock.samples.PartialClassMockTest.testGetArea":131,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":338,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":48,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":358,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":385,"org.easymock.tests2.UsageTest.niceToStrict":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":201,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":253,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":83,"org.easymock.tests2.MockBuilderTest.testCreateMock":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":208,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":393,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":93,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":334,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":416,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":327,"org.easymock.tests.UsageOverloadedMethodTest.overloading":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":210,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":19,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":353,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":163,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":137,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":18,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":41,"org.easymock.tests2.EasyMockSupportClassTest.testAll":78,"org.easymock.tests.MockClassControlTest.testEquals":264,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":251,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":401,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":187,"org.easymock.tests2.CaptureTest.testCaptureAll":33,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":301,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":368,"org.easymock.tests2.UsageConstraintsTest.testMatches":20,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":335,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":364,"org.easymock.samples.ExampleTest.voteForRemovals":136,"org.easymock.tests.UsageVarargTest.allKinds":60,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":148,"org.easymock.samples.BasicClassMockTest.testPrintContent":236,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":369,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":182,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":282,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":297,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":319,"org.easymock.tests2.UsageConstraintsTest.greaterThan":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":195,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":143,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":128,"org.easymock.samples.ExampleTest.voteForRemoval":134,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":244,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":75,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":231,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":227,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":102,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":237,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":90,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":193,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":315,"org.easymock.tests2.CaptureTest.testCaptureFirst":45,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":294,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":91,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":110,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":355,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":159,"org.easymock.tests2.UsageTest.moreThanOneArgument":104,"org.easymock.tests2.CaptureTest.testCapture2_2446744":44,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":1,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":86,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":380,"org.easymock.tests.GenericTest.testBridgedEquals":252,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":423,"org.easymock.tests.UsageExpectAndReturnTest.longType":155,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":88,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":366,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":402,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":220,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":27,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":331,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":400,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":348,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":361,"org.easymock.tests.UsageCallCountTest.tooManyCalls":424,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":209,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":160,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":389,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":181,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":113,"org.easymock.tests.MockingTest.testNiceClassMocking":257,"org.easymock.tests.MockingTest.testClassMocking":255,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":417,"org.easymock.tests2.UsageConstraintsTest.testContains":17,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":214,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":100,"org.easymock.tests2.UsageConstraintsTest.testFind":8,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":139,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":3,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":322,"org.easymock.tests.UsageExpectAndReturnTest.object":162,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":46,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":96,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":375,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":383,"org.easymock.tests.UsageTest.exactCallCountByLastCall":176,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":64,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":409,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":226,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":168,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":371,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":352,"org.easymock.tests.MockClassControlTest.testHashCode":263,"org.easymock.tests2.EasyMockSupportTest.testVerify":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":203,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":410,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":333,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":350,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":299,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":291,"org.easymock.tests.UsageVarargTest.varargCharAccepted":374,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":283,"org.easymock.tests2.UsageTest.openCallCountByLastCall":106,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":99,"org.easymock.tests.DefaultClassInstantiatorTest.object":238,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":332,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":381,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":204,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":191,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":179,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":126,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":262,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":390,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":169,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":81,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":261,"org.easymock.tests2.UsageTest.resumeIfFailure":109,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":248,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":318,"org.easymock.tests2.StubTest.stubWithReturnValue":119,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":270,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":161,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":28,"org.easymock.tests2.SerializationTest.testAllMockedMethod":68,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":320,"org.easymock.samples.SupportTest.voteForRemovals":132,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":250,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":396,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":321,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":278,"org.easymock.tests.UsageExpectAndThrowTest.object":394,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":25,"org.easymock.tests2.DelegateToTest.testWrongClass":296,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":62,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":63,"org.easymock.tests.UsageStrictMockTest.range":140,"org.easymock.samples.ConstructorCalledMockTest.testTax":233,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":95,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":395,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":84,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":192,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":345,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":328,"org.easymock.tests2.CaptureTest.testCaptureNone":40,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":359,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":275,"org.easymock.tests.UsageUnorderedTest.message":61,"org.easymock.tests.UsageVerifyTest.twoReturns":149,"org.easymock.tests.UsageVarargTest.varargByteAccepted":379,"org.easymock.tests2.ThreadingTest.testThreadSafe":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":206,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":421,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":235,"org.easymock.tests2.CaptureTest.testCapture_2617107":34,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":58,"org.easymock.tests2.UsageConstraintsTest.any":15,"org.easymock.tests2.StubTest.stub":307,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":342,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":349,"org.easymock.tests.UsageExpectAndThrowTest.longType":387,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":317,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":242,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":341,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":284,"org.easymock.tests2.SerializationTest.testClass":66,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":87,"org.easymock.tests.LimitationsTest.mockNativeMethod":146,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":171,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":151,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":190,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":285,"org.easymock.tests2.NameTest.nameForMocksControl":290,"org.easymock.tests2.MockedExceptionTest.testMockedException":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":196,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":175,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":388,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":186,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":120,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":85,"org.easymock.tests.MockingTest.testNicePartialClassMocking":185,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":125,"org.easymock.tests2.CaptureTest.testCaptureLast":39,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":414,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":118,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":12,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":26,"org.easymock.tests.MockingTest.testTwoMocks":256,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":273,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":152,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":392,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":305,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":30,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":277,"org.easymock.samples.ExampleTest.removeNonExistingDocument":313,"org.easymock.tests.UsageStrictMockTest.differentMethods":141,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":339,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":240,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":76,"org.easymock.tests2.MockBuilderTest.testCreateMockString":221,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":258,"org.easymock.tests.UsageExpectAndThrowTest.floatType":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":197,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":194,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":280,"org.easymock.tests.UsageVerifyTest.twoThrows":360,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":80,"org.easymock.samples.ExampleTest.voteAgainstRemoval":135,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":357,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":127,"org.easymock.tests.LimitationsTest.privateConstructor":246,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":267,"org.easymock.tests2.UsageConstraintsTest.testNotNull":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":183,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":222,"org.easymock.tests2.UsageTest.defaultResetToNice":108,"org.easymock.samples.ExampleTest.voteAgainstRemovals":133,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":167,"org.easymock.tests.UsageVarargTest.differentLength":376,"org.easymock.tests2.CallbackTest.callback":286,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":228,"org.easymock.tests.UsageTest.openCallCountByLastCall":174,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":4,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":57,"org.easymock.tests.UsageCallCountTest.tooFewCalls":419,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":115,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":330,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":276,"org.easymock.tests.UsageThrowableTest.throwCheckedException":180,"org.easymock.tests.MockingTest.testStrictClassMocking":254,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":117,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":65,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":114,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":344,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":116,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":281,"org.easymock.tests.ObjectMethodsTest.testHashCode":382,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":77,"org.easymock.tests2.NameTest.nameForNiceMock":289,"org.easymock.tests2.DependencyTest.testInterfaceMocking":129,"org.easymock.samples.ExampleTest.addDocument":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":207,"org.easymock.tests2.DelegateToTest.testStubDelegate":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":211,"org.easymock.tests2.AnswerTest.stubAnswer":70,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":54,"org.easymock.tests.UsageVarargTest.varargLongAccepted":378,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":325,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":170,"org.easymock.tests.UsageExpectAndReturnTest.floatType":154,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":111,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":234,"org.easymock.tests.UsageThrowableTest.noUpperLimit":415,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":23,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":354,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":5,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":224,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":37,"org.easymock.tests2.SerializationTest.test":67,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":239,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":153,"org.easymock.tests2.UsageConstraintsTest.testSame":10,"org.easymock.samples.SupportTest.addDocument":309,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":198,"org.easymock.tests.GenericTest.testPackageScope":150,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":411,"org.easymock.tests2.NameTest.nameForMock":287,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":164,"org.easymock.tests2.UsageStrictMockTest.differentMethods":72,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":272,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":229,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":156,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":398,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":145,"org.easymock.tests2.MockedExceptionTest.testRealException":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":425,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":56,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":346,"org.easymock.tests2.NameTest.nameForStrictMock":288,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":216,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":2,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":124,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":225,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":24,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":241,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":82,"org.easymock.tests2.UsageStrictMockTest.range":71,"org.easymock.tests2.UsageConstraintsTest.lessThan":31,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":188,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":89,"org.easymock.tests2.CaptureTest.testCaptureRightOne":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":202,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":274,"org.easymock.tests2.UsageConstraintsTest.testOr":11,"org.easymock.tests.UsageRangeTest.combination":142,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":121,"org.easymock.tests.UsageTest.wrongArguments":405,"org.easymock.tests2.MockBuilderTest.testWithConstructor":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":199,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":259,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":157,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":165,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":243,"org.easymock.tests.UsageVarargTest.varargShortAccepted":377,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":422,"org.easymock.tests2.UsageConstraintsTest.cmpTo":16,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":279,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":107,"org.easymock.tests2.CaptureTest.testCaptureFromStub":43,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":336,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":215,"org.easymock.tests.UsageTest.unexpectedCallWithArray":404,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":53,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":420,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":271,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":166,"org.easymock.tests2.UsageConstraintsTest.constraints":6,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":324,"org.easymock.samples.ExampleTest.addAndChangeDocument":314,"org.easymock.tests.UsageStrictMockTest.testVerify":326,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":310,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":323,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":367,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":38,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":49,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":158,"org.easymock.tests.LimitationsTest.abstractClass":245,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":147,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":50,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":94,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":372}}]

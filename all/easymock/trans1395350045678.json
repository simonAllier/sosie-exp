[{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[13,6,14,14,15,15],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[16],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"expected","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:230","sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[18],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[19,20,21,22,23,24,25,26,0,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,5,42,43,44,45,46,47,48,49,50,7,51,9,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,16,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,14,14,15,15,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,12,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,18,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,17,268],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:108","sourceCode":"return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation)","type":"CtReturnImpl"},"failures":[25,29,31,35,36,39,269,60,61,65,270,87,271,204,205,235],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[19,20,21,22,23,24,25,272,26,273,0,274,27,28,3,29,4,30,31,32,33,34,35,36,37,38,39,40,41,5,42,43,44,45,46,47,48,275,49,276,50,7,51,8,9,52,277,53,54,55,56,57,58,269,59,278,60,61,279,62,63,64,280,65,270,66,67,68,281,282,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,16,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,283,284,285,286,125,287,126,127,128,129,130,131,132,133,134,135,136,137,138,14,14,15,15,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,288,289,290,291,292,155,293,156,157,294,158,295,159,160,161,162,163,164,165,12,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,296,199,200,201,297,18,271,202,203,298,204,205,299,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,300,226,227,228,229,230,301,302,231,232,303,304,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,305,306,307,308,259,309,310,311,312,313,314,315,316,317,260,261,262,263,264,265,266,267,17,268,318,319,320,321,322,323],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (this.org.easymock.Capture<T>.hasCaptured()) {\n    this.org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[112,123,124,324],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"capture"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[325,326,202,301,327,328],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[19,22,23,24,25,272,0,274,5,42,329,43,45,46,47,48,49,276,7,9,54,55,58,330,59,61,279,63,64,65,270,68,69,71,72,73,74,75,76,77,78,79,80,82,83,84,16,85,86,87,88,89,90,91,92,94,95,96,97,98,99,104,106,107,110,111,112,113,114,116,117,118,119,120,121,124,283,284,285,286,127,128,131,132,133,134,135,136,137,138,331,332,333,334,141,142,143,144,335,145,146,336,337,147,338,339,340,148,150,151,152,153,154,341,158,159,160,161,162,163,164,165,342,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,199,200,201,343,344,203,205,299,345,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,230,235,236,237,238,239,240,243,244,250,251,252,253,254,255,309,310,311,312,313,314,315,316,317,261,262,263,264,265,266,267,346,347,348,349,350,351,352,353,354,268],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"failures":[355,356,357,358,359,360,2,5,9,10],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[2,5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:190","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:122","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[5,42,329],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[361,362,363,364,365,366],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1964","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.Null:35","failures":[76,93,109,268],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[111,113,114,115,116,117,118,120,367,121,122,124],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:41","sourceCode":"new java.util.Properties()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[368],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"failures":[369,234],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[1,13,370,371,372,6,14,15],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[373,374,375],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:47","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:45","sourceCode":"synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n    if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n        org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n    } \n}","type":"CtSynchronizedImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:80","failures":[272,376,26,273,0,274,27,28,3,29,377,378,4,5,275,139,12,318,321],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:58","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","type":"CtInvocationImpl"},"failures":[0,44,47,49,50,7,51,59,60,61,104,105,152,203,204,205,211,217,218,219,235,236,237,238,239],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":74,"org.easymock.tests2.UsageTest.argumentsOrdered":282,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":229,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":40,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":277,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":253,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":270,"org.easymock.tests2.StubTest.stubWithReturnValue":138,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":360,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":215,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":94,"org.easymock.tests2.SerializationTest.testAllMockedMethod":329,"org.easymock.tests2.DelegateToTest.testReturnException":54,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":251,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":166,"org.easymock.tests.MockingTest.testPartialClassMocking":199,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":326,"org.easymock.samples.SupportTest.voteForRemovals":140,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":11,"org.easymock.tests.MockClassControlTest.testToString":289,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":259,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":8,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":183,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":101,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":167,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":171,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":20,"org.easymock.tests.UsageExpectAndThrowTest.object":181,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":91,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":105,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":355,"org.easymock.tests2.DelegateToTest.testWrongClass":56,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":266,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":267,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":80,"org.easymock.tests2.UsageTest.wrongArguments":280,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":239,"org.easymock.tests.UsageStrictMockTest.range":204,"org.easymock.samples.ConstructorCalledMockTest.testTax":14,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":311,"org.easymock.samples.ExampleTest.answerVsDelegate":142,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":37,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":321,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":126,"org.easymock.tests2.UsageConstraintsTest.testNull":76,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":46,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":182,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":27,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":39,"org.easymock.tests2.CaptureTest.testPrimitive":114,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":243,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":303,"org.easymock.tests.UsageTest.moreThanOneArgument":230,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":190,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":310,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":45,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":327,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":152,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":228,"org.easymock.tests2.CaptureTest.testCaptureNone":119,"org.easymock.tests.UsageUnorderedTest.message":234,"org.easymock.tests.UsageVerifyTest.twoReturns":265,"org.easymock.tests.UsageVarargTest.varargByteAccepted":353,"org.easymock.tests2.ThreadingTest.testThreadSafe":106,"org.easymock.tests.UsageTest.argumentsOrdered":304,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":245,"org.easymock.tests.UsageVarargTest.varargIntAccepted":348,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":340,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":307,"org.easymock.tests2.CaptureTest.testCapture_2617107":113,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":159,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":272,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":343,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":242,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":274,"org.easymock.tests2.UsageConstraintsTest.any":82,"org.easymock.tests2.StubTest.stub":137,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":258,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":252,"org.easymock.tests.UsageExpectAndThrowTest.longType":174,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":373,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":278,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":52,"org.easymock.tests2.SerializationTest.testClass":5,"org.easymock.tests.LimitationsTest.mockNativeMethod":244,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":125,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":372,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":225,"org.easymock.tests2.AnswerTest.answer":19,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":12,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":81,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":286,"org.easymock.tests2.CaptureTest.testAnd":111,"org.easymock.tests2.UsageTest.strictResetToDefault":63,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":368,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":279,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":276,"org.easymock.tests2.NameTest.nameForMocksControl":334,"org.easymock.tests2.MockedExceptionTest.testMockedException":134,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":151,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":237,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":34,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":232,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":249,"org.easymock.tests2.DelegateToTest.testDelegate":58,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":201,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":175,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":43,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":28,"org.easymock.tests.MockingTest.testNicePartialClassMocking":200,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":186,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":48,"org.easymock.tests2.CaptureTest.testCaptureLast":118,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":254,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":18,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":79,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":132,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":317,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":92,"org.easymock.tests.MockingTest.testTwoMocks":296,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":297,"org.easymock.tests2.CaptureTest.testCapture1_2446744":115,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":206,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":184,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":284,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":179,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":281,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":96,"org.easymock.tests.UsageThrowableTest.throwError":191,"org.easymock.tests.UsageStrictMockTest.differentMethods":205,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":320,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":363,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":108,"org.easymock.tests2.MockBuilderTest.testCreateMockString":4,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":288,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":154,"org.easymock.tests.UsageExpectAndThrowTest.floatType":173,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":87,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":22,"org.easymock.tests.UsageVerifyTest.twoThrows":264,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":371,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":102,"org.easymock.samples.PartialClassMockTest.testGetArea":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":160,"org.easymock.samples.ExampleTest.voteAgainstRemoval":144,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":227,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":226,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":7,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":308,"org.easymock.tests2.UsageTest.niceToStrict":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":172,"org.easymock.tests2.UsageConstraintsTest.testNotNull":95,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":198,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":133,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":0,"org.easymock.tests2.UsageTest.defaultResetToNice":68,"org.easymock.tests2.MockBuilderTest.testCreateMock":3,"org.easymock.samples.ExampleTest.voteAgainstRemovals":141,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":221,"org.easymock.tests2.CallbackTest.callback":25,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":6,"org.easymock.tests.UsageTest.openCallCountByLastCall":231,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":325,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":180,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":35,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":71,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":170,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":336,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":309,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":241,"org.easymock.tests.UsageCallCountTest.tooFewCalls":338,"org.easymock.tests.UsageOverloadedMethodTest.overloading":261,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":85,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":157,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":260,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":217,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":129,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":374,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":16,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":120,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":312,"org.easymock.tests.UsageThrowableTest.throwCheckedException":195,"org.easymock.tests2.EasyMockSupportClassTest.testAll":100,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":342,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":328,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":188,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":315,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":285,"org.easymock.tests2.CaptureTest.testCaptureAll":112,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":131,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":149,"org.easymock.tests.MockNameTest.defaultName":300,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":287,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":128,"org.easymock.tests2.UsageConstraintsTest.testMatches":86,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":130,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":24,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":153,"org.easymock.tests.ObjectMethodsTest.testHashCode":306,"org.easymock.samples.ExampleTest.voteForRemovals":145,"org.easymock.tests2.NameTest.nameForNiceMock":333,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":110,"org.easymock.tests.UsageVarargTest.allKinds":268,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":263,"org.easymock.tests2.DependencyTest.testInterfaceMocking":104,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":357,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":316,"org.easymock.samples.ExampleTest.addDocument":335,"org.easymock.tests2.DelegateToTest.testStubDelegate":55,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":197,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":269,"org.easymock.tests2.AnswerTest.stubAnswer":23,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":255,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":57,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":203,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":359,"org.easymock.tests2.UsageConstraintsTest.greaterThan":88,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":1,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":236,"org.easymock.tests.UsageVarargTest.varargLongAccepted":352,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":51,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":299,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":366,"org.easymock.samples.ExampleTest.voteForRemoval":143,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":107,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":224,"org.easymock.tests.UsageExpectAndReturnTest.floatType":208,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":377,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":322,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":275,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":9,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":15,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":294,"org.easymock.tests.UsageThrowableTest.noUpperLimit":192,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":89,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":72,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":62,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":164,"org.easymock.tests2.SerializationTest.test":42,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":116,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":2,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":375,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":32,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":193,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":207,"org.easymock.tests2.UsageConstraintsTest.testSame":77,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":250,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":53,"org.easymock.tests2.CaptureTest.testCaptureFirst":124,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":33,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":70,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":295,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":213,"org.easymock.tests.GenericTest.testPackageScope":165,"org.easymock.tests2.UsageTest.moreThanOneArgument":64,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":109,"org.easymock.tests2.CaptureTest.testCapture2_2446744":123,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":248,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":29,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":354,"org.easymock.tests2.NameTest.nameForMock":331,"org.easymock.tests.UsageExpectAndReturnTest.longType":209,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":313,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":30,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":378,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":218,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":189,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":93,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":17,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":370,"org.easymock.tests2.UsageStrictMockTest.differentMethods":61,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":187,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":257,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":150,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":210,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":185,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":238,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":147,"org.easymock.tests2.MockedExceptionTest.testRealException":136,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":323,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":214,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":59,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":176,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":240,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":196,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":127,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":376,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":337,"org.easymock.tests2.NameTest.nameForStrictMock":332,"org.easymock.tests2.UsageConstraintsTest.testContains":84,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":135,"org.easymock.tests2.UsageConstraintsTest.testFind":75,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":262,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":98,"org.easymock.tests.MockTypeTest.fromEasyMockClass":319,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":47,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":271,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":99,"org.easymock.tests.UsageExpectAndReturnTest.object":216,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":369,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":364,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":90,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":49,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":26,"org.easymock.tests2.UsageStrictMockTest.range":60,"org.easymock.tests2.UsageConstraintsTest.lessThan":97,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":38,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":356,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":350,"org.easymock.tests.UsageTest.exactCallCountByLastCall":233,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":148,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":358,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":31,"org.easymock.tests2.CaptureTest.testCaptureRightOne":121,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":246,"org.easymock.tests2.UsageConstraintsTest.testOr":78,"org.easymock.tests.UsageRangeTest.combination":235,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":10,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":346,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":222,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":44,"org.easymock.tests.UsageTest.wrongArguments":302,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":156,"org.easymock.tests.MockClassControlTest.testHashCode":292,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":341,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":211,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":219,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":247,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":365,"org.easymock.tests.UsageVarargTest.varargShortAccepted":351,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":155,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":169,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":283,"org.easymock.tests2.UsageConstraintsTest.cmpTo":83,"org.easymock.tests.UsageVarargTest.varargCharAccepted":349,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":21,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":330,"org.easymock.tests2.UsageTest.openCallCountByLastCall":66,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":67,"org.easymock.tests.DefaultClassInstantiatorTest.object":361,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":41,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":168,"org.easymock.tests2.CaptureTest.testCaptureFromStub":122,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":273,"org.easymock.tests.UsageTest.unexpectedCallWithArray":301,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":305,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":178,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":202,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":194,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":339,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":13,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":220,"org.easymock.tests2.CaptureTest.testCapture":367,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":298,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":291,"org.easymock.tests2.UsageConstraintsTest.constraints":73,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":50,"org.easymock.samples.ExampleTest.addAndChangeDocument":146,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":177,"org.easymock.tests.CapturesMatcherTest.test":324,"org.easymock.tests.UsageStrictMockTest.testVerify":345,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":223,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":256,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":344,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":314,"org.easymock.tests2.UsageTest.resumeIfFailure":69,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":161,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":318,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":212,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":158,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":162,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":347,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":36}}]

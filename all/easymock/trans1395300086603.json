[{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:217","failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,19,20,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,1,2,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[359,360,361,362,295,342],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[73,363],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[14,15,16,19,19,20,20,32,66,364,365,366,367,78,368,79,369,80,81,82,83,84,85,370,86,0,2,137,138,139,140,142,143,151,152,154,155,156,157,158,159,160,161,162,164,165,166,167,196,197,198,199,200,201,202,208,271,371,372,306],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[373,374,375],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:83","failures":[127,133,134,148,376,377,295,296,299,300,323,338,342,345,350,351],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[378],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.matchers.Find:41","failures":[379],"status":-1,"binaryOperator":"((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[380],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:182","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[107,241,319,381,358],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:163","failures":[19,20,382,383,384],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[152],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:42","sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"c":"c","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[4,5,6,7,8,9,11,12,13,14,15,16,17,18,24,25,32,39,41,44,45,47,48,50,53,56,57,58,59,60,61,64,65,66,72,75,80,82,83,88,90,92,93,94,95,96,98,99,100,101,102,103,106,0,1,2,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,125,127,128,129,133,134,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,158,161,163,164,165,166,167,178,179,181,186,191,197,198,199,200,201,208,211,212,214,219,224,251,252,253,254,255,257,258,259,260,261,262,263,264,265,266,267,268,269,296,299,300,301,306,310,311,312,314,315,316,317,318,319,323,328,332,334,335,337,341,342,343,344,345,346,347,350,351,354,355],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[56,57],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:34","failures":[385,359,386,387,388,389,390,391,360,392,393,126,127,133,134,146,148,149,361,394,362,395,396,377,294,295,296,299,300,321,322,323,333,336,337,338,342,343,345,346,349,350,351],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[127,133,134,148,377,295,296,299,300,323,342,345,350,351],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[76,77],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[87,89,397],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[241],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[4,5,6,7,8,9,11,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,68,69,70,71,72,75,76,77,78,80,81,85,86,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,1,2,107,108,122,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,161,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,199,200,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,243,251,252,253,254,255,257,258,259,260,261,262,263,264,265,266,267,268,269,271,281,282,283,284,285,289,290,291,292,293,294,295,296,297,298,299,300,301,306,307,308,309,310,311,312,316,317,318,319,320,322,323,328,329,330,331,337,340,341,342,343,344,345,346,347,348,349,350,351,352,353,355,356],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[398],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[39],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:305","failures":[4,5,6,7,9,16,18,21,22,23,24,25,32,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,76,77,79,80,82,83,85,88,89,90,92,93,94,95,96,97,100,101,102,103,105,106,0,1,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,130,131,132,135,136,137,138,139,140,141,142,143,146,148,149,151,152,153,154,155,156,158,160,161,162,163,164,165,166,167,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,199,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,262,264,265,266,267,268,269,293,294,297,298,301,316,317,320,321,322,328,329,330,331,332,334,335,337,343,345,346,349,350,351,352,353,354,355,356,357],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[19,19,20,20,36,37,40,41,42,43,49,51,52,54,55,61,62,63,104,108,146,174,203,204,205,206,207,229,230,231,232,233,316,317,320,339,343,352,353,399,400,401,402,403],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[373,374,375],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[359,360,361,362,295,342],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"value","i":"i"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[87,89],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:158","sourceCode":"return ((java.lang.Class<?>.getSimpleName()) + \".\") + java.lang.String","type":"CtReturnImpl"},"failures":[126,127,133,134,146,148,149,294,295,296,299,300,321,322,323,342,343,345,346,349,350,351,404],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[26,27,28,29,126,127,133,134,146,148,149,405,406,407,294,296,299,300,323,342,343,345,346,349,350,351],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,19,20,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,1,2,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,306,307,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"ret":"ret","clazz":"clazz"}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1191","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":39,"org.easymock.tests.ClassInstantiatorFactoryTest.getJVM":378,"org.easymock.tests2.UsageTest.argumentsOrdered":134,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":293,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":119,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":397,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":129,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":12,"org.easymock.tests2.DelegateToTest.testReturnException":88,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":169,"org.easymock.tests.MockingTest.testPartialClassMocking":197,"org.easymock.tests.MockClassControlTest.testToString":272,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":380,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":403,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":176,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":165,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":405,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":65,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":45,"org.easymock.tests2.UsageTest.wrongArguments":127,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":316,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":291,"org.easymock.samples.ExampleTest.answerVsDelegate":5,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":372,"org.easymock.tests2.UsageConstraintsTest.testNull":41,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":154,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":118,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":277,"org.easymock.tests2.CaptureTest.testPrimitive":96,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":320,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":195,"org.easymock.tests.UsageTest.moreThanOneArgument":294,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":153,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":231,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":234,"org.easymock.tests.UsageTest.argumentsOrdered":300,"org.easymock.tests.UsageVarargTest.varargIntAccepted":253,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":381,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":203,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":78,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":81,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":207,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":388,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":163,"org.easymock.tests.ReplayStateInvalidUsageTest.times":247,"org.easymock.tests2.AnswerTest.answer":72,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":46,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":71,"org.easymock.tests2.CaptureTest.testAnd":93,"org.easymock.tests2.UsageTest.strictResetToDefault":125,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":159,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":230,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":113,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":330,"org.easymock.tests2.DelegateToTest.testDelegate":92,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":238,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":172,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":285,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":321,"org.easymock.tests2.CaptureTest.testCapture1_2446744":97,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":189,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":69,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":241,"org.easymock.tests.UsageThrowableTest.throwError":262,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":404,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":233,"org.easymock.samples.PartialClassMockTest.testGetArea":16,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":242,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":204,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":279,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":177,"org.easymock.tests2.UsageTest.niceToStrict":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":375,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":80,"org.easymock.tests2.MockBuilderTest.testCreateMock":84,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":185,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":359,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":114,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":326,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":307,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":289,"org.easymock.tests.UsageOverloadedMethodTest.overloading":355,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":51,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":335,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":220,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":354,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":50,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":102,"org.easymock.tests2.EasyMockSupportClassTest.testAll":164,"org.easymock.tests.MockClassControlTest.testEquals":276,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":201,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":390,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":193,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":364,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":70,"org.easymock.tests2.CaptureTest.testCaptureAll":94,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":283,"org.easymock.tests2.UsageConstraintsTest.testMatches":52,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":232,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":239,"org.easymock.samples.ExampleTest.voteForRemovals":9,"org.easymock.tests.UsageVarargTest.allKinds":261,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":349,"org.easymock.samples.BasicClassMockTest.testPrintContent":15,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":284,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":268,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":144,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":173,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":91,"org.easymock.tests2.UsageConstraintsTest.greaterThan":54,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":329,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":162,"org.easymock.samples.ExampleTest.voteForRemoval":6,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":22,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":398,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":157,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":124,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":306,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":111,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":264,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":168,"org.easymock.tests2.CaptureTest.testCaptureFirst":106,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":363,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":112,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":136,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":338,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":216,"org.easymock.tests2.UsageTest.moreThanOneArgument":126,"org.easymock.tests2.CaptureTest.testCapture2_2446744":105,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":24,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":85,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":260,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":314,"org.easymock.tests.UsageExpectAndReturnTest.longType":212,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":109,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":281,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":194,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":370,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":59,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":339,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":192,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":229,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":287,"org.easymock.tests.UsageCallCountTest.tooManyCalls":315,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":394,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":309,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":217,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":181,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":267,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":138,"org.easymock.tests2.UsageConstraintsTest.testContains":49,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":308,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":368,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":32,"org.easymock.tests2.UsageConstraintsTest.testFind":40,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":356,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":35,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":340,"org.easymock.tests.UsageExpectAndReturnTest.object":219,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":158,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":117,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":255,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":304,"org.easymock.tests.UsageTest.exactCallCountByLastCall":301,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":401,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":235,"org.easymock.tests2.ConstraintsToStringTest.findToString":379,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":396,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":225,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":251,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":334,"org.easymock.tests.MockClassControlTest.testHashCode":275,"org.easymock.tests2.EasyMockSupportTest.testVerify":121,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":387,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":236,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":325,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":332,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":68,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":376,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":67,"org.easymock.tests.UsageVarargTest.varargCharAccepted":254,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":145,"org.easymock.tests2.UsageTest.openCallCountByLastCall":130,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":120,"org.easymock.tests.DefaultClassInstantiatorTest.object":305,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":373,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":324,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":302,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":377,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":183,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":265,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":367,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":160,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":274,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":182,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":226,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":286,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":167,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":273,"org.easymock.tests2.UsageTest.resumeIfFailure":135,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":371,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":171,"org.easymock.tests2.StubTest.stubWithReturnValue":108,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":60,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":218,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":357,"org.easymock.samples.SupportTest.voteForRemovals":18,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":360,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":188,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":3,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":358,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":73,"org.easymock.tests.UsageExpectAndThrowTest.object":186,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":57,"org.easymock.tests2.DelegateToTest.testWrongClass":90,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":352,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":353,"org.easymock.samples.ConstructorCalledMockTest.testTax":19,"org.easymock.tests.UsageStrictMockTest.range":345,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":116,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":137,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":187,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":82,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":249,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":299,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":290,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":361,"org.easymock.tests2.CaptureTest.testCaptureNone":101,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":280,"org.easymock.tests.UsageUnorderedTest.message":323,"org.easymock.tests.UsageVerifyTest.twoReturns":351,"org.easymock.tests.UsageVarargTest.varargByteAccepted":259,"org.easymock.tests2.ThreadingTest.testThreadSafe":21,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":312,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":14,"org.easymock.tests2.CaptureTest.testCapture_2617107":95,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":393,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":319,"org.easymock.tests2.UsageConstraintsTest.any":47,"org.easymock.tests2.StubTest.stub":107,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":246,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":288,"org.easymock.tests.UsageExpectAndThrowTest.longType":179,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":170,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":245,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":147,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":123,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests.LimitationsTest.mockNativeMethod":208,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":202,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":228,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":366,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":150,"org.easymock.tests2.NameTest.nameForMocksControl":29,"org.easymock.tests2.MockedExceptionTest.testMockedException":31,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":298,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":180,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":199,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":151,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":83,"org.easymock.tests.MockingTest.testNicePartialClassMocking":198,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":156,"org.easymock.tests2.CaptureTest.testCaptureLast":100,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":322,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":143,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":44,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":58,"org.easymock.tests.MockingTest.testTwoMocks":196,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":209,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":184,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":133,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":62,"org.easymock.samples.ExampleTest.removeNonExistingDocument":10,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":243,"org.easymock.tests.UsageStrictMockTest.differentMethods":346,"org.easymock.tests2.ConstraintsToStringTest.andToString":391,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":23,"org.easymock.tests2.MockBuilderTest.testCreateMockString":86,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":270,"org.easymock.tests.UsageExpectAndThrowTest.floatType":178,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":53,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":75,"org.easymock.tests.UsageVerifyTest.twoThrows":350,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":166,"org.easymock.samples.ExampleTest.voteAgainstRemoval":7,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":278,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":161,"org.easymock.tests2.UsageConstraintsTest.testNotNull":61,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":30,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":269,"org.easymock.tests2.UsageTest.defaultResetToNice":132,"org.easymock.samples.ExampleTest.voteAgainstRemovals":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":224,"org.easymock.tests.UsageVarargTest.differentLength":256,"org.easymock.tests2.CallbackTest.callback":122,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":384,"org.easymock.tests.UsageTest.openCallCountByLastCall":297,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":318,"org.easymock.tests.UsageCallCountTest.tooFewCalls":310,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":140,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":292,"org.easymock.tests.UsageThrowableTest.throwCheckedException":266,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":362,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":175,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":142,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":139,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":248,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":141,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":77,"org.easymock.tests.ObjectMethodsTest.testHashCode":303,"org.easymock.tests2.NameTest.nameForNiceMock":28,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":25,"org.easymock.tests2.DependencyTest.testInterfaceMocking":64,"org.easymock.samples.ExampleTest.addDocument":8,"org.easymock.tests2.DelegateToTest.testStubDelegate":89,"org.easymock.tests2.AnswerTest.stubAnswer":76,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":343,"org.easymock.tests.UsageVarargTest.varargLongAccepted":258,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":347,"org.easymock.tests.UsageExpectAndReturnTest.floatType":211,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":227,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":66,"org.easymock.tests2.ConstraintsToStringTest.orToString":385,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":20,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":55,"org.easymock.tests.UsageThrowableTest.noUpperLimit":263,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":336,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":37,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":98,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.UsageConstraintsTest.testSame":42,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":210,"org.easymock.samples.SupportTest.addDocument":17,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":244,"org.easymock.tests.GenericTest.testPackageScope":200,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":400,"org.easymock.tests2.NameTest.nameForMock":26,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":221,"org.easymock.tests2.UsageStrictMockTest.differentMethods":149,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":383,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":213,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":190,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":331,"org.easymock.tests2.MockedExceptionTest.testRealException":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":402,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":395,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":146,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":250,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":317,"org.easymock.tests2.NameTest.nameForStrictMock":27,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":34,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":374,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":155,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":406,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":56,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":79,"org.easymock.tests2.UsageStrictMockTest.range":148,"org.easymock.tests2.UsageConstraintsTest.lessThan":63,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":110,"org.easymock.tests2.CaptureTest.testCaptureRightOne":103,"org.easymock.tests2.UsageConstraintsTest.testOr":43,"org.easymock.tests.UsageRangeTest.combination":328,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":152,"org.easymock.tests.UsageTest.wrongArguments":296,"org.easymock.tests2.MockBuilderTest.testWithConstructor":382,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":271,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":214,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":222,"org.easymock.tests.UsageVarargTest.varargShortAccepted":257,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":313,"org.easymock.tests2.UsageConstraintsTest.cmpTo":48,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":74,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":131,"org.easymock.tests2.CaptureTest.testCaptureFromStub":104,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":240,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":369,"org.easymock.tests.UsageTest.unexpectedCallWithArray":295,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":342,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":311,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":223,"org.easymock.tests2.UsageConstraintsTest.constraints":38,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":344,"org.easymock.samples.ExampleTest.addAndChangeDocument":11,"org.easymock.tests2.ConstraintsToStringTest.notToString":386,"org.easymock.tests.UsageStrictMockTest.testVerify":348,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":13,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":341,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":282,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":99,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":205,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":365,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":215,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":206,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":337,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":407,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":115,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":252}}]

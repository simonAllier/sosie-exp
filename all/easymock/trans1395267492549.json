[{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[2,3],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[4,5,6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:200","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:153","failures":[7,8,14,15,16,17,18,19,21,22,23,24],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:159","failures":[40,41,42,43,44,45,46],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"candidateMethod"}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[25,27,47,48,34,35,36],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"position":"org.easymock.ConstructorArgs:60","failures":[49,50,51,52,42,53,54,43,45,55,56],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[6],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","toStringMethod":"hashCodeMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,40,40,41,41,81,20,82,83,84,85,86,87,5,88,89,90,91,92,93,94,95,96],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[97,98,99,100],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[26,101,102,29,103,104],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[105,106,107,108,109,52,54,110,98],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:37","failures":[57,111,58,59,8,112,60,25,113,62,114,27,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,68,69,70,71,72,150,151,152,153,154,155,156,157,158,159,160,161,162,14,15,16,17,18,19,74,75,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,34,35,76,77,78,79,80,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,81,204,36,205,206,207,20,208,209,210,211,212,213,214,215,216,217,0,1,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,4,86,5,250,94,98,99,251],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[44],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,40,40,41,41,81,20,82,83,84,85,86,87,5,88,89,90,91,92,93,94,95,96],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((java.util.Comparator<? super T>) + \"(\") + (T))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:708","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:562","sourceCode":"return ((org.easymock.IExpectationSetters<T>)(org.easymock.internal.MocksControl))","type":"CtReturnImpl"},"failures":[57,7,252,253,254,255,256,257,58,59,8,112,60,25,258,62,27,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,259,145,146,147,148,149,260,261,11,12,13,68,69,70,71,72,150,151,152,262,263,264,265,73,266,267,268,14,15,16,17,18,19,269,270,271,272,273,74,75,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,274,275,276,277,186,34,35,76,77,78,79,80,187,188,189,190,192,193,40,40,41,41,278,199,200,201,202,81,36,205,207,20,279,280,49,281,282,283,50,208,209,210,211,213,214,284,215,216,21,22,23,24,217,0,1,285,218,286,287,219,220,221,288,289,290,291,292,293,222,294,295,223,296,297,298,224,299,225,300,301,226,227,302,303,304,305,228,229,230,306,231,232,233,307,308,234,235,309,236,82,310,237,238,239,240,241,242,243,244,311,245,246,247,248,249,83,84,312,4,85,86,87,5,250,313,314,315,88,316,89,90,317,91,92,93,318,319,320,94,95,96,98,99,251],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:853","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[25,62,27,115,146,321,47,322,48,186,34,35,81,36,205,210],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[2,256,111,257,3],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[323,324],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[25,62,27,115,325,326,146,30,31,32,327,328,262,186,34,35,81,36,205,210,37,38,39,329,330,331,332,104,333,334],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"expected"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[97,98,99,100],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[57,7,252,253,254,255,256,257,58,59,8,112,60,25,258,62,27,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,326,259,145,146,147,148,149,260,261,11,12,13,335,68,69,70,71,72,150,151,152,262,263,264,265,73,266,267,268,14,15,16,17,18,19,269,270,271,272,273,74,75,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,274,275,276,277,186,34,35,76,77,78,79,80,187,188,189,190,192,193,40,40,41,41,278,199,200,201,202,81,36,205,207,20,279,280,49,281,282,283,50,208,209,210,211,213,214,284,215,216,21,22,23,24,217,0,1,285,218,286,287,219,220,221,288,289,290,291,292,293,222,294,295,223,296,297,298,224,299,225,300,301,226,227,302,303,304,305,228,229,230,306,231,232,233,307,308,234,235,309,236,82,310,237,238,239,240,241,242,243,244,311,245,246,247,248,249,83,84,312,4,85,86,87,5,250,313,314,315,88,316,89,90,317,91,92,93,318,319,320,94,95,96,98,99,251],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[57,336,337,255,338,339,340,256,111,58,59,60,258,113,62,115,116,341,118,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,342,146,335,68,69,70,71,72,343,344,345,346,347,262,153,154,155,156,157,158,159,160,161,162,266,267,268,14,15,16,17,18,19,74,75,348,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,274,275,276,277,186,34,35,349,350,351,352,76,77,78,79,80,187,188,189,190,191,192,193,40,41,278,194,195,196,197,198,199,200,201,202,203,81,205,206,207,20,279,280,49,281,282,283,50,209,210,211,212,284,215,21,22,23,24,217,0,218,286,353,354,355,356,357,219,358,220,221,289,290,291,292,293,294,295,223,296,297,359,224,225,226,227,302,303,304,228,229,231,232,233,360,307,361,362,234,235,309,236,237,238,239,240,241,242,243,244,311,245,246,247,248,363,249,364,365,366,367,83,84,312,4,85,86,87,5,250,313,314,315,88,316,89,90,317,91,92,93,318,319,320,94,95,96,98,99,100,251],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"(\"Invalid key (\" + java.lang.String)","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":4,"org.easymock.tests2.UsageTest.argumentsOrdered":39,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":145,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":247,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":17,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":212,"org.easymock.tests2.StubTest.stubWithReturnValue":20,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":54,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":320,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":194,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":134,"org.easymock.tests2.SerializationTest.testAllMockedMethod":100,"org.easymock.tests2.DelegateToTest.testReturnException":228,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":260,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":15,"org.easymock.tests.MockingTest.testPartialClassMocking":266,"org.easymock.samples.SupportTest.voteForRemovals":199,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":104,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":2,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":67,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":178,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":97,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":290,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":261,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":166,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":300,"org.easymock.tests.UsageExpectAndThrowTest.object":176,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":321,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":318,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":202,"org.easymock.tests2.DelegateToTest.testWrongClass":230,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":105,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":74,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":75,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":313,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":58,"org.easymock.tests2.UsageTest.wrongArguments":37,"org.easymock.tests.UsageStrictMockTest.range":27,"org.easymock.samples.ConstructorCalledMockTest.testTax":40,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":351,"org.easymock.samples.ExampleTest.answerVsDelegate":188,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":311,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":279,"org.easymock.tests2.UsageConstraintsTest.testNull":86,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":295,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":177,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":246,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":220,"org.easymock.tests2.CaptureTest.testPrimitive":307,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":60,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":9,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":31,"org.easymock.tests.UsageTest.moreThanOneArgument":146,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":185,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":350,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":294,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":78,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":101,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":265,"org.easymock.tests2.CaptureTest.testCaptureNone":235,"org.easymock.tests.UsageUnorderedTest.message":25,"org.easymock.tests.UsageVerifyTest.twoReturns":35,"org.easymock.tests.UsageVarargTest.varargByteAccepted":160,"org.easymock.tests2.ThreadingTest.testThreadSafe":217,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":269,"org.easymock.tests.UsageTest.argumentsOrdered":32,"org.easymock.tests.UsageVarargTest.varargIntAccepted":155,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":340,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":196,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":333,"org.easymock.tests2.CaptureTest.testCapture_2617107":360,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":68,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":334,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":357,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":109,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":342,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":112,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":358,"org.easymock.tests2.UsageConstraintsTest.any":314,"org.easymock.tests2.StubTest.stub":207,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":72,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":16,"org.easymock.tests.UsageExpectAndThrowTest.longType":169,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":331,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":204,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":200,"org.easymock.tests2.SerializationTest.testClass":98,"org.easymock.tests.LimitationsTest.mockNativeMethod":258,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":249,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":257,"org.easymock.tests2.AnswerTest.answer":225,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":144,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":6,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":367,"org.easymock.tests2.CaptureTest.testAnd":232,"org.easymock.tests2.UsageTest.strictResetToDefault":209,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":359,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":206,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":53,"org.easymock.tests2.NameTest.nameForMocksControl":356,"org.easymock.tests2.MockedExceptionTest.testMockedException":22,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":77,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":276,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":242,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":148,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":273,"org.easymock.tests2.DelegateToTest.testDelegate":231,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":268,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":170,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":293,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":221,"org.easymock.tests.MockingTest.testNicePartialClassMocking":267,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":181,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":296,"org.easymock.tests2.CaptureTest.testCaptureLast":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":18,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":326,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":250,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":50,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":347,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":319,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":325,"org.easymock.tests2.CaptureTest.testCapture1_2446744":308,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":51,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":125,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":179,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":365,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":174,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":38,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":95,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":324,"org.easymock.tests.UsageThrowableTest.throwError":117,"org.easymock.tests.UsageStrictMockTest.differentMethods":115,"org.easymock.tests2.ConstraintsToStringTest.andToString":332,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":1,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":80,"org.easymock.tests.UsageExpectAndThrowTest.floatType":168,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":317,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":226,"org.easymock.tests.UsageVerifyTest.twoThrows":34,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":327,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":291,"org.easymock.samples.PartialClassMockTest.testGetArea":278,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":69,"org.easymock.samples.ExampleTest.voteAgainstRemoval":190,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":264,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":263,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":224,"org.easymock.tests2.UsageTest.niceToStrict":211,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":167,"org.easymock.tests2.ThreadingTest.testChangeDefault":323,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":56,"org.easymock.tests2.UsageConstraintsTest.testNotNull":94,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":21,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":63,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":219,"org.easymock.tests2.UsageTest.defaultResetToNice":284,"org.easymock.samples.ExampleTest.voteAgainstRemovals":187,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":140,"org.easymock.tests2.CallbackTest.callback":251,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":46,"org.easymock.tests.UsageTest.openCallCountByLastCall":147,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":103,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":175,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":243,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":83,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":254,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":336,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":349,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":8,"org.easymock.tests.UsageCallCountTest.tooFewCalls":338,"org.easymock.tests.UsageOverloadedMethodTest.overloading":164,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":89,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":152,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":281,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":136,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":163,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":316,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":309,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":352,"org.easymock.tests.UsageThrowableTest.throwCheckedException":121,"org.easymock.tests2.EasyMockSupportClassTest.testAll":289,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":111,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":102,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":183,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":366,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":345,"org.easymock.tests2.CaptureTest.testCaptureAll":233,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":44,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":283,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":7,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":49,"org.easymock.tests2.UsageConstraintsTest.testMatches":90,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":282,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":302,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":79,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":61,"org.easymock.samples.ExampleTest.voteForRemovals":192,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":108,"org.easymock.tests2.NameTest.nameForNiceMock":355,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":218,"org.easymock.tests.UsageVarargTest.allKinds":162,"org.easymock.tests2.DependencyTest.testInterfaceMocking":201,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":186,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":107,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":346,"org.easymock.samples.BasicClassMockTest.testPrintContent":197,"org.easymock.samples.ExampleTest.addDocument":191,"org.easymock.tests2.DelegateToTest.testStubDelegate":229,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":123,"org.easymock.tests2.AnswerTest.stubAnswer":227,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":306,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":19,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":62,"org.easymock.tests2.UsageConstraintsTest.greaterThan":91,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":275,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":299,"org.easymock.tests.UsageVarargTest.varargLongAccepted":159,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":116,"org.easymock.samples.ExampleTest.voteForRemoval":189,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":0,"org.easymock.tests.UsageExpectAndReturnTest.floatType":127,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":143,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":286,"org.easymock.tests2.ConstraintsToStringTest.orToString":329,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":41,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":328,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":92,"org.easymock.tests.UsageThrowableTest.noUpperLimit":118,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":335,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":208,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":84,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":361,"org.easymock.tests2.SerializationTest.test":99,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":110,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":10,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":240,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":119,"org.easymock.tests2.UsageConstraintsTest.testSame":87,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":126,"org.easymock.samples.SupportTest.addDocument":198,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":14,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":305,"org.easymock.tests2.CaptureTest.testCaptureFirst":237,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":241,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":216,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":33,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":132,"org.easymock.tests.GenericTest.testPackageScope":256,"org.easymock.tests2.CaptureTest.testCapture2_2446744":310,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":285,"org.easymock.tests2.UsageTest.moreThanOneArgument":210,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":272,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":288,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":64,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":161,"org.easymock.tests.GenericTest.testBridgedEquals":3,"org.easymock.tests2.NameTest.nameForMock":353,"org.easymock.tests.UsageExpectAndReturnTest.longType":128,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":343,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":137,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":184,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":73,"org.easymock.tests2.UsageStrictMockTest.differentMethods":205,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":45,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":182,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":76,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":12,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":129,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":180,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":277,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":255,"org.easymock.tests2.MockedExceptionTest.testRealException":24,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":133,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":66,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":81,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":171,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":59,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":122,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":280,"org.easymock.tests2.NameTest.nameForStrictMock":354,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":337,"org.easymock.tests2.UsageConstraintsTest.testContains":88,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":23,"org.easymock.tests2.UsageConstraintsTest.testFind":85,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":165,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":303,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":223,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":304,"org.easymock.tests.UsageExpectAndReturnTest.object":135,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":93,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":47,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":297,"org.easymock.tests.ErrorMessageTest.testGetters":322,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":287,"org.easymock.tests2.UsageStrictMockTest.range":36,"org.easymock.tests2.UsageConstraintsTest.lessThan":96,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":245,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":106,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":157,"org.easymock.tests.UsageTest.exactCallCountByLastCall":149,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":65,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":239,"org.easymock.tests2.CaptureTest.testCaptureRightOne":236,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":270,"org.easymock.tests2.UsageConstraintsTest.testOr":5,"org.easymock.tests.UsageRangeTest.combination":274,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":52,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":222,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":141,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":153,"org.easymock.tests.UsageTest.wrongArguments":30,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":151,"org.easymock.tests2.MockBuilderTest.testWithConstructor":42,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":348,"org.easymock.tests2.EasyMockSupportTest.testVerify":363,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":130,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":138,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":271,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":253,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":150,"org.easymock.tests.UsageVarargTest.varargShortAccepted":158,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":364,"org.easymock.tests2.UsageConstraintsTest.cmpTo":315,"org.easymock.tests.UsageVarargTest.varargCharAccepted":156,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":301,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":203,"org.easymock.tests2.UsageTest.openCallCountByLastCall":213,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":214,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":248,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":252,"org.easymock.tests2.CaptureTest.testCaptureFromStub":82,"org.easymock.tests.UsageTest.unexpectedCallWithArray":29,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":28,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":173,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":26,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":120,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":339,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":43,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":139,"org.easymock.tests2.UsageConstraintsTest.constraints":312,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":298,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":114,"org.easymock.samples.ExampleTest.addAndChangeDocument":193,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":172,"org.easymock.tests2.ConstraintsToStringTest.notToString":330,"org.easymock.tests.UsageStrictMockTest.testVerify":341,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":142,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":11,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":292,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":113,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":344,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":362,"org.easymock.tests2.UsageTest.resumeIfFailure":215,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":70,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":131,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":262,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":71,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":244,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":48,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":154}}]

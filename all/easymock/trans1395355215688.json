[{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:136","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:184","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[3,4,5,6,7,8,9],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:49","sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[26],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:130","sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n    if (org.easymock.internal.ErrorMessage.isMatching()) {\n        int++;\n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[27],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[28,6,7],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[29,30,31,32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[33,28,3,4,5,6,7,34,8,35,36,37,38,9],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:67","sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[39,40],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[41,42,43,44,45,8,46,47,9,48,49,50],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[51,52,53],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[54,55,56,57,15,58,16,59,60,61,62,63,64,17,65,66,18,67,68,19,69,70,20,71,72,21,22,73,23,74,75,24,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,25,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:137","sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"failures":[29,110,111,30,97,31,112,113,114,105,115,116,117,32],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"result","matches":"i"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matching"}},{"transplant":{"position":"org.easymock.internal.MocksControl:241","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[118,119,120],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:47","sourceCode":"java.lang.StringBuffer.append(\"and(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[54,29,121,122,123,124,125,126,26,127,98,31,128,129,130,131,132,133,134,112,135,113,114,105,136,137,138],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[33,139,140,141],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[124,142,97,143,133,115],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Any:40","sourceCode":"java.lang.StringBuffer.append(\"<any>\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[54,29,121,122,110,111,30,123,125,144,26,142,127,145,98,31,128,129,130,131,135,113,114,105,136,116,117,32,137,138],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:37","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(int.int, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[3,4,5,6,7,34,8,36,9],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[59,63],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"failures":[146,147,148,149],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:439","failures":[150,151,152],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":59,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":109,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":48,"org.easymock.tests2.UsageConstraintsTest.testMatches":69,"org.easymock.tests2.UsageTest.argumentsOrdered":30,"org.easymock.tests2.CompareToTest.testGreateOrEqual":13,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":8,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":6,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":23,"org.easymock.tests2.SerializationTest.testAllMockedMethod":140,"org.easymock.tests.UsageVarargTest.allKinds":104,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":135,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":37,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":142,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":5,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":141,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":40,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":98,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":34,"org.easymock.tests2.UsageConstraintsTest.greaterThan":20,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":53,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":3,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":106,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":107,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":17,"org.easymock.tests2.UsageTest.wrongArguments":110,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":99,"org.easymock.tests.UsageStrictMockTest.range":31,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":38,"org.easymock.tests2.ConstraintsToStringTest.orToString":123,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":130,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":71,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":148,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":58,"org.easymock.tests2.UsageConstraintsTest.testNull":61,"org.easymock.tests2.SerializationTest.test":139,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":82,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":35,"org.easymock.tests2.CaptureTest.testPrimitive":80,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":2,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":103,"org.easymock.tests.UsageTest.moreThanOneArgument":136,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":117,"org.easymock.tests2.UsageConstraintsTest.testSame":62,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":143,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":39,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":51,"org.easymock.tests2.CaptureTest.testCaptureNone":85,"org.easymock.tests2.CaptureTest.testCaptureFirst":90,"org.easymock.tests.UsageUnorderedTest.message":105,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":132,"org.easymock.tests.GenericTest.testPackageScope":150,"org.easymock.tests2.UsageTest.moreThanOneArgument":122,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":55,"org.easymock.tests2.CaptureTest.testCapture2_2446744":89,"org.easymock.tests.UsageVerifyTest.twoReturns":114,"org.easymock.tests.UsageTest.argumentsOrdered":32,"org.easymock.tests.GenericTest.testBridgedEquals":152,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":127,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":43,"org.easymock.tests2.CaptureTest.testCapture_2617107":79,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":91,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":7,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":102,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":73,"org.easymock.tests2.UsageStrictMockTest.differentMethods":121,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":47,"org.easymock.tests2.UsageConstraintsTest.any":66,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":95,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":144,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":0,"org.easymock.tests2.SerializationTest.testClass":33,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":27,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":151,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":65,"org.easymock.tests2.CaptureTest.testAnd":77,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":134,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":45,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":36,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":54,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":100,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Default":147,"org.easymock.tests2.UsageConstraintsTest.testContains":67,"org.easymock.tests2.UsageConstraintsTest.testFind":60,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_BackToDefault":146,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":56,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":28,"org.easymock.tests2.CompareToTest.testCompareEqual":12,"org.easymock.tests2.CaptureTest.testCaptureLast":84,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":96,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":57,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":138,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":49,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":64,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":72,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":25,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":22,"org.easymock.tests2.UsageStrictMockTest.range":29,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":137,"org.easymock.tests2.UsageConstraintsTest.lessThan":24,"org.easymock.tests2.CaptureTest.testCapture1_2446744":81,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":50,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":4,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":120,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":111,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":108,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":75,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":119,"org.easymock.tests.UsageStrictMockTest.differentMethods":128,"org.easymock.tests2.CaptureTest.testCaptureRightOne":87,"org.easymock.tests2.UsageConstraintsTest.testOr":63,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageTest.wrongArguments":116,"org.easymock.tests2.ConstraintsToStringTest.andToString":26,"org.easymock.tests2.MockBuilderTest.testWithConstructor":44,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":70,"org.easymock.tests.UsageVerifyTest.twoThrows":113,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":129,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":41,"org.easymock.tests2.UsageConstraintsTest.cmpTo":18,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":76,"org.easymock.tests2.CompareToTest.testLessOrEqual":14,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":52,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":92,"org.easymock.tests2.CompareToTest.testLessThan":10,"org.easymock.tests.LimitationsTest.privateConstructor":149,"org.easymock.tests2.ThreadingTest.testChangeDefault":118,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":42,"org.easymock.tests2.UsageConstraintsTest.testNotNull":74,"org.easymock.tests2.CaptureTest.testCaptureFromStub":88,"org.easymock.tests.UsageTest.unexpectedCallWithArray":115,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":112,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":124,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":97,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":15,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":46,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":101,"org.easymock.tests2.UsageConstraintsTest.constraints":16,"org.easymock.tests2.ConstraintsToStringTest.notToString":125,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":19,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":1,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":68,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":86,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":126,"org.easymock.tests2.CompareToTest.testGreateThan":11,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":93,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":133,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":131,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":94,"org.easymock.tests2.CaptureTest.testCaptureAll":78}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[3],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:77","failures":[18,19],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:52","failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,5,6,7,8,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,15,16,17],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:107","sourceCode":"java.io.ObjectInputStream.defaultReadObject()","type":"CtInvocationImpl"},"failures":[62,63,64],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[65,66,4,5,67,68],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"toStringMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[26,27,30,31,35,36,37,38,5,6,7,8,49,50,53,54,57,58,59,60,15,16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1052","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.InjectionPlan:51","failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"failures":[95,42,96,97,46,98,99],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[100,101,102,103,104,105,106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Any:40","sourceCode":"java.lang.StringBuffer.append(\"<any>\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[66,107,108,26,35,109,110,36,37,38,6,7,8,49,111,67,112,113,114,115,15,16,17],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[19,116,117],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:34","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(byte.byte, java.lang.Byte.java.lang.Byte)","type":"CtInvocationImpl"},"failures":[118],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[119,120,121,122,123,124],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:136","failures":[125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,160,161,161,162,163,164,10,11,165,12,166,167,168,169,13,170,171,14,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,62,64,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,101,222,223,224,225,226],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[227],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[228,95,42,229,96,97,230,46,98,231,99],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[65,66,232,26,4,27,30,31,5,49,50,53,54,67,233,68,234],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[235,236,237,238,239,240,121,241,242,243,244,245,246,247,7,8,16,17],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[119,248,249,250,251,252,253,254,255,256,257,124,258,259,260,261,6,160,161,262,263,264,42,43,229,265,266,267,268,269,46,47,270,271,272,15],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[273],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[125,126,274,129,132,133,134,135,138,139,140,141,150,151,152,153,154,155,156,157,158,159,160,160,161,161,162,163,164,10,11,165,12,166,167,13,170,171,14,173,177,180,190,196,199,200,201,202,203,204,62,64,205,206,207,209,210,211,212,214,215,216,221,224],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"substring"}},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[13],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:172","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[95],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[246],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[65,66,4,5,67,68],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:315","failures":[23,24,275,276,277,278,279,280,281,282,283,25,29,284,285,286,287,288,236,289,290,291,237,238,292,239,293,294,240,295,296,297,298,299,300,301,48,52,222,223,224,302,271],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[303,304,20,26,36,37,38,6,8,305,49,57,58,59,60,15,17,306],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[268,307],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[308,266,270,309],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[310],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[132,134,135],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"leafClass"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[225,226],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[273,311,312,231,313,314,315,316,317,318],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[119,248,249,250,251,252,253,129,319,320,120,321,121,322,241,242,243,323,324,325,326,327,122,123,139,140,141,255,328,329,330,331,124,258,259,260,6,7,8,159,332,333,334,335,336,164,10,337,11,165,12,167,170,171,14,177,180,190,196,199,200,201,202,338,203,204,206,209,211,212,215,221,339,340,341,342,15,16,17],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[343],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":95,"org.easymock.tests2.UsageTest.argumentsOrdered":54,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":25,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":280,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":77,"org.easymock.tests2.StubTest.stubWithReturnValue":271,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":100,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":242,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":69,"org.easymock.tests2.SerializationTest.testAllMockedMethod":64,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":278,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":3,"org.easymock.tests.MockingTest.testPartialClassMocking":139,"org.easymock.samples.SupportTest.voteForRemovals":336,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":68,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":131,"org.easymock.tests.MockClassControlTest.testToString":152,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":74,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":293,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":184,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":285,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":180,"org.easymock.tests.UsageExpectAndThrowTest.object":292,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":341,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":102,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":119,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":248,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":308,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":255,"org.easymock.tests2.UsageTest.wrongArguments":50,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":94,"org.easymock.tests.UsageStrictMockTest.range":7,"org.easymock.samples.ConstructorCalledMockTest.testTax":160,"org.easymock.samples.ExampleTest.answerVsDelegate":41,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":199,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":126,"org.easymock.tests2.UsageConstraintsTest.testNull":42,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":239,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":11,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":211,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":157,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":257,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":299,"org.easymock.tests.UsageTest.moreThanOneArgument":26,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":174,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":337,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":259,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":65,"org.easymock.tests2.CaptureTest.testCaptureNone":317,"org.easymock.tests.UsageUnorderedTest.message":35,"org.easymock.tests.UsageVerifyTest.twoReturns":38,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":245,"org.easymock.tests.UsageTest.argumentsOrdered":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":191,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":21,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":162,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":115,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":249,"org.easymock.tests2.CaptureTest.testCapture_2617107":231,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":234,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":205,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":106,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":301,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":219,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":81,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":210,"org.easymock.tests2.UsageConstraintsTest.any":44,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":253,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":2,"org.easymock.tests.UsageExpectAndThrowTest.longType":288,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":279,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":147,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":76,"org.easymock.tests2.SerializationTest.testClass":62,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":88,"org.easymock.tests.LimitationsTest.mockNativeMethod":129,"org.easymock.tests2.DependencyTest.testClassMocking":225,"org.easymock.tests2.AnswerTest.answer":56,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":123,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":134,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":97,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":85,"org.easymock.tests2.CaptureTest.testAnd":98,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":306,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":13,"org.easymock.tests2.NameTest.nameForMocksControl":60,"org.easymock.tests2.MockedExceptionTest.testMockedException":223,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":87,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":258,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":179,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":29,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":247,"org.easymock.tests2.DelegateToTest.testDelegate":61,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":236,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":141,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":164,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":212,"org.easymock.tests.MockingTest.testNicePartialClassMocking":140,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":295,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":12,"org.easymock.tests.LimitationsTest.mockFinalMethod":130,"org.easymock.tests2.CaptureTest.testCaptureLast":316,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":83,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":281,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":110,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":204,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":96,"org.easymock.tests2.DependencyTest.testClassMockingSupport":226,"org.easymock.tests.MockingTest.testTwoMocks":138,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":109,"org.easymock.tests2.CaptureTest.testCapture1_2446744":313,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":310,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":319,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":294,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":237,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":53,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":47,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":90,"org.easymock.tests.UsageStrictMockTest.differentMethods":8,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":73,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":145,"org.easymock.tests2.ConstraintsToStringTest.andToString":114,"org.easymock.tests2.MockBuilderTest.testCreateMockString":216,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":82,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":150,"org.easymock.tests.UsageExpectAndThrowTest.floatType":287,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":181,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":176,"org.easymock.tests.UsageVerifyTest.twoThrows":37,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":190,"org.easymock.samples.PartialClassMockTest.testGetArea":159,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":250,"org.easymock.samples.ExampleTest.voteAgainstRemoval":334,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":171,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":286,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":185,"org.easymock.tests.LimitationsTest.privateConstructor":128,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":18,"org.easymock.tests2.UsageConstraintsTest.testNotNull":46,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":276,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":222,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":19,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":209,"org.easymock.tests2.MockBuilderTest.testCreateMock":214,"org.easymock.samples.ExampleTest.voteAgainstRemovals":332,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":193,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":84,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":91,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":168,"org.easymock.tests.UsageTest.openCallCountByLastCall":28,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":238,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":67,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":262,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":303,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":300,"org.easymock.tests.UsageCallCountTest.tooFewCalls":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":189,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":283,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":266,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":243,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":202,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":343,"org.easymock.tests.MockClassControlTest.testEquals":156,"org.easymock.tests2.EasyMockSupportClassTest.testAll":177,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":133,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":297,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":233,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":66,"org.easymock.tests.MockingTest.testStrictClassMocking":136,"org.easymock.tests2.CaptureTest.testCaptureAll":312,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":284,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":203,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":201,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":89,"org.easymock.tests2.UsageConstraintsTest.testMatches":267,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":338,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":260,"org.easymock.tests2.CompareToTest.testGreateOrEqual":309,"org.easymock.samples.ExampleTest.voteForRemovals":335,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":105,"org.easymock.tests2.NameTest.nameForNiceMock":59,"org.easymock.tests.UsageVarargTest.allKinds":34,"org.easymock.tests2.DependencyTest.testInterfaceMocking":340,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":36,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":104,"org.easymock.samples.BasicClassMockTest.testPrintContent":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":192,"org.easymock.tests2.DelegateToTest.testStubDelegate":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":197,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":275,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":282,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":78,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":6,"org.easymock.tests2.UsageConstraintsTest.greaterThan":268,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":178,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":329,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":14,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":305,"org.easymock.samples.ExampleTest.voteForRemoval":333,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":149,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":172,"org.easymock.tests.UsageExpectAndReturnTest.floatType":120,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":122,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":221,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":166,"org.easymock.tests2.ConstraintsToStringTest.orToString":111,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":161,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":269,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":80,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":263,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":48,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":158,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":217,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":314,"org.easymock.tests2.SerializationTest.test":63,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":213,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":144,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":24,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":320,"org.easymock.tests2.UsageConstraintsTest.testSame":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":175,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":277,"org.easymock.tests2.CaptureTest.testCaptureFirst":318,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":182,"org.easymock.tests.GenericTest.testPackageScope":132,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":339,"org.easymock.tests2.UsageTest.moreThanOneArgument":49,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":246,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":215,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":79,"org.easymock.tests.GenericTest.testBridgedEquals":135,"org.easymock.tests2.NameTest.nameForMock":57,"org.easymock.tests.UsageExpectAndReturnTest.longType":321,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":323,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":298,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":311,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":296,"org.easymock.tests2.UsageStrictMockTest.differentMethods":17,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":1,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":124,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":169,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":121,"org.easymock.tests.UsageCallCountTest.tooManyCalls":22,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":240,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":331,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":304,"org.easymock.tests2.MockedExceptionTest.testRealException":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":194,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":241,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":93,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":107,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":289,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":15,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":256,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":200,"org.easymock.tests.MockingTest.testNiceClassMocking":142,"org.easymock.tests.MockingTest.testClassMocking":137,"org.easymock.tests2.UsageConstraintsTest.testContains":265,"org.easymock.tests2.NameTest.nameForStrictMock":58,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":224,"org.easymock.tests2.UsageConstraintsTest.testFind":264,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":23,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":208,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":117,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":165,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":220,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":230,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":146,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":167,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":206,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":92,"org.easymock.tests2.UsageStrictMockTest.range":16,"org.easymock.tests2.UsageConstraintsTest.lessThan":270,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":103,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":75,"org.easymock.tests.UsageTest.exactCallCountByLastCall":32,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":235,"org.easymock.tests2.CaptureTest.testCaptureRightOne":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":186,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":39,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":232,"org.easymock.tests2.UsageConstraintsTest.testOr":229,"org.easymock.tests.UsageRangeTest.combination":328,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":101,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":326,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":10,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":33,"org.easymock.tests.UsageTest.wrongArguments":27,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":72,"org.easymock.tests.MockClassControlTest.testHashCode":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":183,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":151,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":322,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":187,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":40,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":148,"org.easymock.tests2.UsageConstraintsTest.cmpTo":45,"org.easymock.tests2.UsageTest.openCallCountByLastCall":51,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":52,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":116,"org.easymock.tests.DefaultClassInstantiatorTest.object":143,"org.easymock.tests2.CaptureTest.testCaptureFromStub":272,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":207,"org.easymock.tests.UsageTest.unexpectedCallWithArray":4,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":108,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":188,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":86,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":71,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":244,"org.easymock.tests2.UsageConstraintsTest.constraints":228,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":154,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":170,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":290,"org.easymock.tests2.ConstraintsToStringTest.notToString":112,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":327,"org.easymock.tests.UsageStrictMockTest.testVerify":9,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":0,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":196,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":113,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":153,"org.easymock.tests2.CompareToTest.testGreateThan":307,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":315,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":251,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":125,"org.easymock.tests.LimitationsTest.abstractClass":127,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":252,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":218}}]

[{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[81],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:241","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[82,83,84],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1672","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[85,41,42,43,44,45,46,47,48,49,50,86,51,52,53,54,55,87,88],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:592","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[22,79],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[89],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[90,91,92],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"expected"}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[93,94,95,96,97,98,99],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:60","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[100],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[101],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[102],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[13,19,41,43,51],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[100],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cl":"cl","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[103,104,105,106,107],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[108,109,110,111,112,113,114,115,116,117,118,119],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[120,111,112,113,121,115,122,116,123,124,125,126],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:49","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[127,128],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[100,129],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[14,18,21],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":14,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":80,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":117,"org.easymock.tests2.UsageConstraintsTest.testMatches":27,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":99,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":113,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":35,"org.easymock.tests.UsageVarargTest.allKinds":73,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":4,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":100,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":97,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":76,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":89,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":67,"org.easymock.tests2.UsageConstraintsTest.greaterThan":29,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":32,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":77,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":78,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":20,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":68,"org.easymock.samples.ConstructorCalledMockTest.testTax":125,"org.easymock.tests.UsageStrictMockTest.range":2,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":122,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":126,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":30,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":12,"org.easymock.tests2.UsageConstraintsTest.testNull":16,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":46,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":121,"org.easymock.tests2.CaptureTest.testPrimitive":44,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":84,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":72,"org.easymock.tests2.UsageConstraintsTest.testSame":17,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":63,"org.easymock.tests2.CaptureTest.testCaptureNone":49,"org.easymock.tests2.CaptureTest.testCaptureFirst":54,"org.easymock.tests.UsageUnorderedTest.message":75,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":7,"org.easymock.tests2.CaptureTest.testCapture2_2446744":53,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":94,"org.easymock.tests.GenericTest.testBridgedEquals":129,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":110,"org.easymock.tests2.CaptureTest.testCapture_2617107":43,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":58,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":39,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":98,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":34,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":71,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":115,"org.easymock.tests2.UsageStrictMockTest.differentMethods":1,"org.easymock.tests2.UsageConstraintsTest.any":22,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":62,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":82,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":6,"org.easymock.tests2.SerializationTest.testClass":120,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":55,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":21,"org.easymock.tests2.MockedExceptionTest.testRealException":127,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":106,"org.easymock.tests2.CaptureTest.testAnd":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":96,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":112,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":57,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":5,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":69,"org.easymock.tests2.UsageConstraintsTest.testContains":24,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":102,"org.easymock.tests2.UsageConstraintsTest.testFind":15,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":8,"org.easymock.tests2.CaptureTest.testCaptureLast":48,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":64,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":9,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":118,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":31,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":19,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":33,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":56,"org.easymock.tests2.UsageStrictMockTest.range":0,"org.easymock.tests2.UsageConstraintsTest.lessThan":38,"org.easymock.tests2.CaptureTest.testCapture1_2446744":45,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":119,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":79,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":104,"org.easymock.tests.UsageStrictMockTest.differentMethods":3,"org.easymock.tests2.CaptureTest.testCaptureRightOne":51,"org.easymock.tests2.UsageConstraintsTest.testOr":18,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":116,"org.easymock.tests2.MockBuilderTest.testWithConstructor":111,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":88,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":28,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":103,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":90,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":123,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":108,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":40,"org.easymock.tests2.UsageConstraintsTest.cmpTo":23,"org.easymock.tests2.CompareToTest.testLessOrEqual":101,"org.easymock.tests2.CaptureTest.testCaptureMultiple":85,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":59,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":109,"org.easymock.tests2.UsageConstraintsTest.testNotNull":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":93,"org.easymock.tests2.CaptureTest.testCaptureFromStub":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":105,"org.easymock.tests2.CallbackTest.callback":10,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":74,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":124,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":66,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":11,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":114,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":70,"org.easymock.tests2.CaptureTest.testCapture":86,"org.easymock.tests2.UsageConstraintsTest.constraints":13,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":128,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":26,"org.easymock.tests.CapturesMatcherTest.test":87,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":25,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":83,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":50,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":91,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":47,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":60,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":61,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":92,"org.easymock.tests2.CaptureTest.testCaptureAll":42}}]

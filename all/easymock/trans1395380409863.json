[{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[29],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1634","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[30,31,32,33,34,35,36,37,38],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,1,71,72,73,74,75,76,77,39,78,79,80,81,82,83,42,84,85,43,44,86,87,88,89,90,91,92,93,94,95,2,3,4,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,5,117,118,119,120,45,46,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,48,166,167,49,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,6,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,7,235,236,9,10,11,237,238,239,50,240,241,242,243,51,52,244,245,13,246,247,248,249,250,14,251,15,16,252,17,253,254,18,19,20,21,22,23,24,255,256,257,258,259,260,53,261,262,25,26,27,28],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:62","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:47","sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"leafClass"}},{"transplant":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[71,81,263,264,265,88,91,92,93,94,95,45,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,163,256],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[263,264,265],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:116","sourceCode":"try {\n    java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mockedMethods":"mockedMethods"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[266],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:225","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[267,268,269,270,271,26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[272,213],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:346","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[273,274,275,276],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[0,54,55,277,277,278,278,69,70,279,280,1,78,281,2,3,4,282,283,284,285,286,287,288,289,182,231,233,268,8,290,9,269,10,11,291,12,292,13,14,251,16,252,17,270,253,293,294,254,295,271,18,19,20,21,23,24,25,26,27,28],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[71,81,82,85,88,90,91,92,93,94,95,45,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,163,237,243,256],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[251,271,296,297],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[29,298,299,300,71,301,302,303,136,304,305,306,307,267,308,182,309,256],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:155","sourceCode":"return this","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[0,277,278,59,60,61,62,63,65,310,311,312,313,314,69,1,29,298,299,300,71,301,315,316,317,318,319,79,80,81,82,83,84,85,86,87,303,88,90,91,92,93,94,95,2,3,4,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,5,117,118,119,120,45,46,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,320,321,322,323,166,49,168,170,171,172,173,174,175,176,324,177,178,179,180,267,308,182,309,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,206,207,208,209,210,211,212,213,6,214,215,216,217,219,220,223,224,225,226,325,227,228,229,230,231,232,234,7,235,236,326,327,328,329,268,9,269,10,11,237,238,239,240,242,243,330,244,245,13,246,247,248,331,249,250,14,251,15,16,252,17,270,253,293,254,18,19,20,21,22,23,24,256,257,259,53,261,25,26,27,28],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[231,332,333,13,334,335,336,337,338,339],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1831","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","type":"CtInvocationImpl"},"failures":[201],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[191,216,218,226],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[202],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[277,278,340,341,342,343],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[344],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[29,298,299,300,71,301,303,136,304,305,306,307,267,308,182,309,256],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[295,271,345],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":186,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":82,"org.easymock.tests2.UsageTest.argumentsOrdered":52,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":179,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":300,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":241,"org.easymock.tests2.StubTest.stubWithReturnValue":256,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":332,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":206,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":56,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":105,"org.easymock.tests2.SerializationTest.testAllMockedMethod":233,"org.easymock.tests2.DelegateToTest.testReturnException":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":298,"org.easymock.tests.MockingTest.testPartialClassMocking":2,"org.easymock.samples.SupportTest.voteForRemovals":59,"org.easymock.tests.MockClassControlTest.testToString":283,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":296,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":30,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":271,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":151,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":139,"org.easymock.tests.UsageExpectAndThrowTest.object":149,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":230,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":203,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":335,"org.easymock.tests2.DelegateToTest.testWrongClass":235,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":159,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":160,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":192,"org.easymock.tests2.UsageTest.wrongArguments":50,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":134,"org.easymock.samples.ConstructorCalledMockTest.testTax":277,"org.easymock.tests.UsageStrictMockTest.range":49,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":322,"org.easymock.samples.ExampleTest.answerVsDelegate":61,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":324,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":288,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":18,"org.easymock.tests2.UsageConstraintsTest.testNull":188,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":16,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":150,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":286,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":10,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":178,"org.easymock.tests2.CaptureTest.testPrimitive":219,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":138,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":302,"org.easymock.tests.UsageTest.moreThanOneArgument":83,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":158,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":321,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":15,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":317,"org.easymock.tests2.CaptureTest.testCaptureNone":224,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":33,"org.easymock.tests.UsageUnorderedTest.message":39,"org.easymock.tests.UsageVerifyTest.twoReturns":46,"org.easymock.tests.UsageVarargTest.varargByteAccepted":128,"org.easymock.tests2.ThreadingTest.testThreadSafe":211,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":273,"org.easymock.tests.UsageTest.argumentsOrdered":44,"org.easymock.tests.UsageVarargTest.varargIntAccepted":123,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":75,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":54,"org.easymock.tests2.CaptureTest.testCapture_2617107":218,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":116,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":137,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":269,"org.easymock.tests2.UsageConstraintsTest.any":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":344,"org.easymock.tests2.StubTest.stub":255,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":306,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":119,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":37,"org.easymock.tests.UsageExpectAndThrowTest.longType":142,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":260,"org.easymock.tests2.SerializationTest.testClass":231,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":210,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":215,"org.easymock.tests.LimitationsTest.mockNativeMethod":1,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":279,"org.easymock.tests2.AnswerTest.answer":246,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":115,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":329,"org.easymock.tests2.CaptureTest.testAnd":216,"org.easymock.tests2.UsageTest.strictResetToDefault":238,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":293,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":262,"org.easymock.tests2.MockedExceptionTest.testMockedException":308,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":316,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":132,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":174,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":85,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":275,"org.easymock.tests2.DelegateToTest.testDelegate":236,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":4,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":143,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":14,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":11,"org.easymock.tests.MockingTest.testNicePartialClassMocking":3,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":154,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":17,"org.easymock.tests2.CaptureTest.testCaptureLast":223,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":71,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":24,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":191,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":314,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":204,"org.easymock.tests.MockingTest.testTwoMocks":281,"org.easymock.tests2.CaptureTest.testCapture1_2446744":220,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":96,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":152,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":327,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":147,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":51,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":208,"org.easymock.tests.UsageThrowableTest.throwError":88,"org.easymock.tests.UsageStrictMockTest.differentMethods":168,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":213,"org.easymock.tests2.MockBuilderTest.testCreateMockString":292,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":319,"org.easymock.tests.UsageExpectAndThrowTest.floatType":141,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":199,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":247,"org.easymock.tests.UsageVerifyTest.twoThrows":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":27,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":5,"org.easymock.samples.ExampleTest.voteAgainstRemoval":63,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":31,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":32,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":35,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":254,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":289,"org.easymock.tests2.UsageTest.niceToStrict":240,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":140,"org.easymock.tests2.UsageConstraintsTest.testNotNull":207,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":267,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":95,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":9,"org.easymock.tests2.UsageTest.defaultResetToNice":330,"org.easymock.tests2.MockBuilderTest.testCreateMock":291,"org.easymock.samples.ExampleTest.voteAgainstRemovals":60,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":111,"org.easymock.tests2.CallbackTest.callback":257,"org.easymock.tests2.UsageConstraintsTest.equals":266,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":343,"org.easymock.tests.UsageTest.openCallCountByLastCall":84,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":148,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":175,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":183,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":265,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":320,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":136,"org.easymock.tests.UsageCallCountTest.tooFewCalls":73,"org.easymock.tests.UsageOverloadedMethodTest.overloading":80,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":197,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":163,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":79,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":21,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":107,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":196,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":225,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":323,"org.easymock.tests.UsageThrowableTest.throwCheckedException":92,"org.easymock.tests2.EasyMockSupportClassTest.testAll":25,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":70,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":156,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":328,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":312,"org.easymock.tests2.CaptureTest.testCaptureAll":217,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":303,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":23,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":20,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":272,"org.easymock.tests2.UsageConstraintsTest.testMatches":198,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":22,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":331,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":318,"org.easymock.samples.ExampleTest.voteForRemovals":65,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":214,"org.easymock.tests.UsageVarargTest.allKinds":130,"org.easymock.tests2.DependencyTest.testInterfaceMocking":229,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":120,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":337,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":313,"org.easymock.samples.BasicClassMockTest.testPrintContent":55,"org.easymock.samples.ExampleTest.addDocument":64,"org.easymock.tests2.DelegateToTest.testStubDelegate":7,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":94,"org.easymock.tests2.AnswerTest.stubAnswer":248,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":301,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":166,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":339,"org.easymock.tests2.UsageConstraintsTest.greaterThan":200,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":295,"org.easymock.tests.UsageVarargTest.varargLongAccepted":127,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":169,"org.easymock.samples.ExampleTest.voteForRemoval":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":34,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":212,"org.easymock.tests.UsageExpectAndReturnTest.floatType":98,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":114,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":270,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":13,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":278,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":201,"org.easymock.tests.UsageThrowableTest.noUpperLimit":89,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":237,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":78,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":184,"org.easymock.tests2.SerializationTest.test":232,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":221,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":307,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":172,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":90,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":97,"org.easymock.tests2.UsageConstraintsTest.testSame":189,"org.easymock.samples.SupportTest.addDocument":58,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":29,"org.easymock.tests2.CaptureTest.testCaptureFirst":228,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":173,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":245,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":47,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":103,"org.easymock.tests.GenericTest.testPackageScope":69,"org.easymock.tests2.UsageTest.moreThanOneArgument":239,"org.easymock.tests2.CaptureTest.testCapture2_2446744":227,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":6,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":274,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":12,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":129,"org.easymock.tests.GenericTest.testBridgedEquals":280,"org.easymock.tests2.NameTest.nameForMock":297,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":76,"org.easymock.tests.UsageExpectAndReturnTest.longType":99,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":310,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":170,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":108,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":157,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":205,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":342,"org.easymock.tests2.UsageStrictMockTest.differentMethods":261,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":155,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":315,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":305,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":100,"org.easymock.tests.UsageCallCountTest.tooManyCalls":77,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":153,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":133,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":72,"org.easymock.tests2.MockedExceptionTest.testRealException":309,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":104,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":259,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":144,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":93,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":135,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":19,"org.easymock.tests2.NameTest.nameForStrictMock":345,"org.easymock.tests2.UsageConstraintsTest.testContains":195,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":182,"org.easymock.tests2.UsageConstraintsTest.testFind":187,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":81,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":249,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":252,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":250,"org.easymock.tests.UsageExpectAndReturnTest.object":106,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":202,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":253,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":8,"org.easymock.tests2.UsageStrictMockTest.range":53,"org.easymock.tests2.UsageConstraintsTest.lessThan":209,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":336,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":125,"org.easymock.tests.UsageTest.exactCallCountByLastCall":86,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":87,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":276,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":171,"org.easymock.tests2.CaptureTest.testCaptureRightOne":226,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":67,"org.easymock.tests2.UsageConstraintsTest.testOr":190,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":334,"org.easymock.tests.UsageRangeTest.combination":131,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":251,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":112,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":121,"org.easymock.tests.UsageTest.wrongArguments":42,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":162,"org.easymock.tests2.MockBuilderTest.testWithConstructor":340,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":282,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":101,"org.easymock.tests2.EasyMockSupportTest.testVerify":181,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":109,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":68,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":264,"org.easymock.tests.UsageVarargTest.varargShortAccepted":126,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":161,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":326,"org.easymock.tests2.UsageConstraintsTest.cmpTo":194,"org.easymock.tests.UsageVarargTest.varargCharAccepted":124,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":38,"org.easymock.tests2.UsageTest.openCallCountByLastCall":242,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":243,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":180,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":263,"org.easymock.tests2.CaptureTest.testCaptureFromStub":325,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":290,"org.easymock.tests.UsageTest.unexpectedCallWithArray":41,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":40,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":146,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":91,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":48,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":74,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":341,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":110,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":294,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":285,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":167,"org.easymock.tests2.UsageConstraintsTest.constraints":185,"org.easymock.samples.ExampleTest.addAndChangeDocument":66,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":145,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":113,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":304,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":57,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":28,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":165,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":311,"org.easymock.tests2.UsageTest.resumeIfFailure":244,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":222,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":117,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":287,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":102,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":118,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":164,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":122,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":176}}]

[{"position":"org.easymock.internal.ReflectionUtils:117","failures":[0,1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[56,57],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[58,59,60,61,62,63],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[64],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:280","failures":[65,66,67,68,69,70,71,72],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[74,65,75,76,77,78,79,80,5,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,6,8,10,11,14,15,17,118,56,119,120,121,122,123,124,125,126,127,128,57,129,18,19,130,20,21,22,23,24,25,26,27,28,131,132,133,134,135,136,137,29,138,139,140,141,142,143,144,145,146,64,147,148,149,150,151,152,153,154,67,68,69,71,155,156,31,32,34,35,157,158,159,160,161,162,163,164,165,166,167,42,168,43,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,45,46,47,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,72,228,229,230,231,232,233,234,235,236,237,62,238,239,240,241,242,243,50,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,51,52,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,54,276,277,278,279,280,281,55,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,63,321,322,323,324,325,326],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[327],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[74,65,75,76,77,78,80,5,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,6,10,11,118,56,119,120,121,122,123,124,125,126,127,128,57,129,18,19,130,20,21,22,23,24,25,27,131,132,133,134,135,136,137,29,138,139,140,141,142,143,144,145,146,64,147,148,149,150,151,152,67,68,69,71,155,156,31,32,34,35,157,158,159,160,162,163,164,165,166,167,42,168,43,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,45,46,47,213,221,222,223,224,225,226,72,228,229,231,232,234,235,236,237,238,239,240,241,242,243,50,244,245,246,247,248,250,251,252,253,254,255,256,257,258,259,260,51,52,261,262,263,264,265,266,267,268,270,271,272,273,274,55,282,283,284,285,286,287,288,289,290,291,292,293,294,295,299,300,301,302,303,304,305,306,307,310,311,312,313,315,316,317,318,320,63,321,322,323,324,325],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[0,1,2,74,65,75,76,77,78,79,80,328,3,4,329,330,331,5,332,333,334,81,82,83,84,85,335,86,87,88,89,90,336,91,92,93,94,95,96,337,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,6,338,8,9,339,340,10,11,12,341,13,342,343,14,15,344,17,118,56,119,120,121,122,123,124,125,126,127,128,57,129,18,19,130,20,21,22,23,345,24,346,347,25,26,27,28,348,349,131,132,133,134,135,136,137,29,138,350,351,352,353,354,355,356,357,358,359,360,361,139,140,141,142,143,144,145,146,64,147,148,149,150,362,363,151,364,152,153,365,366,367,368,369,154,370,371,372,373,374,375,66,67,68,69,70,71,376,377,378,379,380,381,382,155,156,30,31,32,33,383,384,34,35,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,38,402,403,39,404,405,406,407,408,409,410,411,412,40,413,414,415,416,417,41,418,419,157,420,421,158,159,160,161,162,163,164,165,166,167,42,168,43,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,422,423,424,425,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,426,427,44,45,46,428,47,429,430,431,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,48,432,433,434,435,49,436,437,226,227,72,228,438,229,230,439,231,440,441,232,233,234,235,236,237,62,238,239,240,241,242,243,50,442,443,444,445,446,244,245,246,247,248,447,249,448,449,450,451,452,453,454,250,455,456,457,251,252,458,253,254,255,256,257,258,259,260,459,51,52,53,460,261,262,263,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,264,265,266,485,267,268,269,270,271,272,273,274,275,54,276,277,278,279,280,281,486,487,55,488,282,283,284,285,286,287,288,289,290,291,292,293,294,295,489,490,491,492,296,297,298,493,494,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,63,321,322,323,324,325,326,495,496,497],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[498,499,500],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[0,1,1,2,2,74,65,75,76,78,80,331,5,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,8,10,12,13,15,118,56,120,121,124,125,126,127,128,57,129,18,19,130,20,21,22,24,26,27,28,131,132,133,134,135,136,137,29,138,355,139,140,141,143,145,146,64,149,150,151,364,152,154,66,67,68,69,70,71,155,156,30,31,32,33,384,34,35,386,387,388,389,390,391,392,393,394,395,396,397,38,39,40,41,157,420,421,158,159,160,163,165,166,42,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,422,423,424,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,45,46,47,221,222,223,224,225,226,72,228,229,231,441,232,233,234,235,236,237,239,240,243,50,442,443,444,445,446,250,455,456,457,251,252,253,254,255,256,257,258,259,260,51,53,261,262,263,477,483,55,282,283,284,285,286,291,292,293,294,295,490,299,300,301,302,303,304,305,306,307,310,317,318,321,323,324,495,496,497],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[93],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"expected"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[70,463],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[249,448,449,450,452,454],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[291],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[102],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[42,168,43],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","bridgeMethod":"hashCodeMethod"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[501,87,104,110],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[89,90,92,94,95,337,106,111,118,119,127],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:62","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","type":"CtAssignmentImpl"},"failures":[85,86,87,88,89,90,91,92,93,94,95,96,337,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,56,119,120,121,122,123,124,125,126,127,128,57,129,24,134,153,163,250,251,252,274,282,283,284,285,286,291,292,293,294,295,303,317,318,63,321],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[0,1,1,2,2,3,4,5,332,6,8,9,340,10,11,12,13,343,14,15,17,18,19,20,21,22,23,24,346,347,25,26,27,28,348,349,136,137,29,362,363,376,377,378,380,30,31,32,33,34,35,399,400,401,38,402,403,39,404,405,406,407,408,409,410,411,412,40,413,414,415,416,417,41,418,419,42,43,426,427,44,45,46,47,431,48,49,50,249,448,449,450,451,452,454,459,51,52,53,460,275,54,276,277,278,279,280,281,486,487,55,488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[65,85,86,152,157,421,158,160,226,474],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"this.java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"failures":[502,118,119,120,121,122,123,124,126,73,127,128,129],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[459,460],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[420],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[163,165,166,63,321,323,324,326],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:116","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"failures":[503],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[498,499,500],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[80,85,86,87,88,89,91,92,93,94,99,100,101,102,104,105,112,113,56,119,121,122,124,125,57,129,131,132,133,141,144,145,146,149,152,71,155,165,166,169,170,173,175,176,177,178,180,181,182,183,185,186,187,188,189,190,193,195,196,197,198,200,201,202,203,205,206,207,208,232,233,234,235,236,237,239,240,250,254,263,305,310,323,324],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[92,109,134,274],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[0,1,1,2,2,74,65,75,76,77,78,79,80,328,3,4,329,330,331,5,332,85,335,86,87,88,89,90,336,91,92,93,94,95,96,337,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,8,340,10,11,12,343,14,118,56,119,120,121,122,123,124,125,126,127,128,57,129,18,19,130,20,21,22,23,24,346,347,25,26,27,28,348,131,132,133,134,135,136,137,29,138,350,351,352,353,354,355,356,357,358,359,360,361,139,140,141,142,143,144,145,146,64,147,148,149,150,151,364,152,153,365,366,367,368,369,154,370,371,372,373,374,375,66,67,68,69,70,71,376,380,381,382,155,156,32,33,384,34,386,387,388,390,391,393,395,396,397,398,399,38,403,39,405,406,409,410,411,412,40,414,417,41,418,419,157,420,421,158,159,160,161,162,163,164,165,166,167,42,168,43,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,422,423,424,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,426,427,44,45,46,428,47,429,430,431,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,434,49,437,226,227,72,228,438,229,230,439,231,440,441,232,233,234,235,236,237,62,238,239,240,241,242,243,50,442,443,444,445,446,244,245,246,247,248,249,448,449,450,451,452,454,250,455,456,457,251,252,458,253,254,255,256,257,258,259,260,459,51,52,53,460,261,262,263,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,264,265,266,485,267,268,269,270,271,272,273,274,275,54,276,277,278,279,280,281,486,487,55,488,282,283,284,285,286,287,288,289,290,291,292,293,294,295,489,490,491,492,296,297,298,493,494,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,63,321,322,323,324,325,326,495,496,497],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"failures":[0,1,2,74,65,75,76,77,78,80,328,3,4,329,330,331,5,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,6,8,10,11,12,13,14,15,17,118,56,119,120,121,122,123,124,125,126,127,128,57,129,18,19,130,20,21,22,23,24,25,26,27,28,131,132,133,134,135,136,137,29,138,355,139,140,141,142,143,144,145,146,64,147,148,149,150,151,364,152,154,67,68,69,71,155,156,30,31,32,33,384,34,35,386,387,388,389,390,391,392,393,394,395,396,397,398,38,39,40,41,157,158,159,160,161,162,163,164,165,166,167,42,168,43,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,45,46,47,221,222,223,224,225,226,72,228,230,232,234,235,236,237,62,238,239,240,241,242,243,50,244,245,246,247,248,250,251,252,253,254,255,256,257,258,259,260,51,52,261,262,263,264,265,266,267,268,269,270,271,272,273,274,504,504,55,282,283,284,285,286,287,288,289,290,291,292,293,294,295,299,300,301,302,303,304,305,306,307,310,311,312,313,314,315,316,317,318,319,320,63,321,322,323,324,325],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[42,168,43],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:105","failures":[74,65,75,76,77,78,79,80,328,329,330,331,334,81,82,83,84,85,335,86,87,88,89,90,336,91,92,93,94,95,96,337,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,56,119,120,121,122,123,124,125,126,127,128,57,129,130,131,132,133,134,135,136,137,29,138,350,351,352,353,354,355,356,357,358,359,360,361,139,140,141,142,143,144,145,146,64,147,148,149,150,151,364,152,153,365,366,367,368,369,154,370,371,372,373,374,375,66,67,68,69,70,71,381,382,155,156,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,157,420,421,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,422,423,424,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,428,429,430,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,434,435,436,437,226,227,72,228,438,229,230,439,231,440,441,232,233,234,235,236,237,62,238,239,240,241,242,243,442,443,444,445,446,244,245,246,247,248,250,455,456,457,251,252,458,253,254,255,256,257,258,259,260,261,262,263,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,264,265,266,485,267,268,269,270,271,272,273,274,282,283,284,285,286,287,288,289,290,291,292,293,294,295,489,490,491,492,296,297,298,493,494,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,63,321,322,323,324,325,326,495,496,497],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[136,137,29,138,139,146,156,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,228,236,240,252,253,255,256,257,258,259,260,263,284,285,299,300,301,302,303,304,306],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[421,474],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":90,"org.easymock.tests2.UsageTest.argumentsOrdered":148,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":236,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":396,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":356,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":471,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":144,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":328,"org.easymock.tests2.DelegateToTest.testReturnException":67,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":300,"org.easymock.tests.MockingTest.testPartialClassMocking":45,"org.easymock.tests.MockClassControlTest.testToString":276,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":334,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":480,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":407,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":169,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":39,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":364,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":96,"org.easymock.tests2.UsageTest.wrongArguments":142,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":282,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":375,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":289,"org.easymock.samples.ExampleTest.answerVsDelegate":65,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":49,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":430,"org.easymock.tests2.UsageConstraintsTest.testNull":92,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":20,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":395,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":281,"org.easymock.tests2.CaptureTest.testPrimitive":120,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":286,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":188,"org.easymock.tests.UsageTest.moreThanOneArgument":237,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":130,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":223,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":442,"org.easymock.tests.UsageTest.argumentsOrdered":242,"org.easymock.tests.UsageVarargTest.varargIntAccepted":266,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":476,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":291,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":6,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":360,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":378,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":463,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":295,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":154,"org.easymock.tests.ReplayStateInvalidUsageTest.times":217,"org.easymock.tests2.DependencyTest.testClassMocking":362,"org.easymock.tests2.AnswerTest.answer":157,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":337,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":478,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":117,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":433,"org.easymock.tests2.CaptureTest.testAnd":118,"org.easymock.tests2.UsageTest.strictResetToDefault":140,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":25,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":339,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":222,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":390,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":234,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":446,"org.easymock.tests2.DelegateToTest.testDelegate":71,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":184,"org.easymock.tests.LimitationsTest.mockFinalMethod":488,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":303,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":248,"org.easymock.tests2.DependencyTest.testClassMockingSupport":363,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":439,"org.easymock.tests2.CaptureTest.testCapture1_2446744":121,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":345,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":182,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":115,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":211,"org.easymock.tests.UsageThrowableTest.throwError":253,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":435,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":425,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":361,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":419,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests.MockingTest.testInterfaceMocking":428,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":212,"org.easymock.tests2.CompareToTest.testLessOrEqual":501,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":292,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":496,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":494,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":408,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":170,"org.easymock.tests2.UsageTest.niceToStrict":143,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":500,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":461,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":10,"org.easymock.tests2.MockBuilderTest.testCreateMock":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":415,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":372,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":178,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":58,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":391,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":432,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":457,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":308,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":287,"org.easymock.tests.UsageOverloadedMethodTest.overloading":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":417,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":412,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":101,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":228,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":200,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":261,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":100,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":126,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":485,"org.easymock.tests2.EasyMockSupportClassTest.testAll":38,"org.easymock.tests.MockClassControlTest.testEquals":280,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":52,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":186,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":36,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":116,"org.easymock.tests2.CaptureTest.testCaptureAll":56,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":246,"org.easymock.tests.MockNameTest.defaultName":458,"org.easymock.tests2.UsageConstraintsTest.testMatches":102,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":209,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":224,"org.easymock.samples.ExampleTest.voteForRemovals":78,"org.easymock.tests2.ConstraintsToStringTest.notNullToString":503,"org.easymock.tests.UsageVarargTest.allKinds":274,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":305,"org.easymock.samples.BasicClassMockTest.testPrintContent":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":247,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":259,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":161,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":70,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":304,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":357,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":453,"org.easymock.tests2.UsageConstraintsTest.greaterThan":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":402,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":233,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":28,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":454,"org.easymock.samples.ExampleTest.voteForRemoval":75,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":132,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":348,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":327,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":436,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":379,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":23,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":139,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":50,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":468,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":388,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":400,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":299,"org.easymock.tests2.CaptureTest.testCaptureFirst":129,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":467,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":389,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":150,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":230,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":196,"org.easymock.tests2.UsageTest.moreThanOneArgument":141,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":134,"org.easymock.tests2.CaptureTest.testCapture2_2446744":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":479,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":15,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":273,"org.easymock.tests.GenericTest.testBridgedEquals":460,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":315,"org.easymock.tests.UsageExpectAndReturnTest.longType":192,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":386,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":244,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":187,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":16,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":441,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":109,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":185,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":423,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":221,"org.easymock.tests.UsageCallCountTest.tooManyCalls":316,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":416,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":197,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":374,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":174,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":258,"org.easymock.tests.MockingTest.testNiceClassMocking":431,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":31,"org.easymock.tests.MockingTest.testClassMocking":427,"org.easymock.tests2.UsageConstraintsTest.testContains":99,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":7,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":309,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":29,"org.easymock.tests2.UsageConstraintsTest.testFind":91,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":263,"org.easymock.tests.MockTypeTest.fromEasyMockClass":434,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":86,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":319,"org.easymock.tests.UsageExpectAndReturnTest.object":199,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":24,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":373,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":394,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":268,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":298,"org.easymock.tests.UsageTest.exactCallCountByLastCall":243,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":466,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":489,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":443,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":332,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":205,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":264,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":72,"org.easymock.tests.MockClassControlTest.testHashCode":279,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":351,"org.easymock.tests2.EasyMockSupportTest.testVerify":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":410,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":444,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":456,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":226,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":114,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":153,"org.easymock.tests.UsageVarargTest.varargCharAccepted":267,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":447,"org.easymock.tests2.CaptureTest.testCaptureMultiple":502,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":484,"org.easymock.tests2.UsageTest.openCallCountByLastCall":145,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":498,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":397,"org.easymock.tests.DefaultClassInstantiatorTest.object":249,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":455,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":411,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":176,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":256,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":368,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":350,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":26,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":278,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":175,"org.easymock.tests.CapturesMatcherTest.test":504,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":206,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":422,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":41,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":277,"org.easymock.tests2.UsageTest.resumeIfFailure":149,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":48,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":377,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":302,"org.easymock.tests2.StubTest.stubWithReturnValue":156,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":341,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":110,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":198,"org.easymock.tests2.SerializationTest.testAllMockedMethod":43,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":477,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":59,"org.easymock.samples.SupportTest.voteForRemovals":331,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":459,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":353,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":181,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":483,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":420,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":491,"org.easymock.tests.UsageExpectAndThrowTest.object":179,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":107,"org.easymock.tests2.DelegateToTest.testWrongClass":69,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":317,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":318,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests.UsageStrictMockTest.range":323,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":381,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":393,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":180,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":399,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":219,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":241,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":288,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":60,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":497,"org.easymock.tests2.CaptureTest.testCaptureNone":125,"org.easymock.tests.UsageUnorderedTest.message":250,"org.easymock.tests.UsageVerifyTest.twoReturns":307,"org.easymock.tests.UsageVarargTest.varargByteAccepted":272,"org.easymock.tests2.ThreadingTest.testThreadSafe":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":413,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":313,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":493,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":3,"org.easymock.tests2.CaptureTest.testCapture_2617107":119,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":481,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":285,"org.easymock.tests2.UsageConstraintsTest.any":97,"org.easymock.tests2.StubTest.stub":155,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":216,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":482,"org.easymock.tests.UsageExpectAndThrowTest.longType":172,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":301,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":451,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":215,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":164,"org.easymock.tests2.SerializationTest.testClass":42,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":355,"org.easymock.tests.LimitationsTest.mockNativeMethod":55,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":53,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":208,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":367,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":167,"org.easymock.tests2.NameTest.nameForMocksControl":84,"org.easymock.tests2.MockedExceptionTest.testMockedException":137,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":403,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":240,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":173,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":47,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":335,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":18,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":13,"org.easymock.tests.MockingTest.testNicePartialClassMocking":46,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":22,"org.easymock.tests2.CaptureTest.testCaptureLast":124,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":365,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":231,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":35,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":95,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":108,"org.easymock.tests.MockingTest.testTwoMocks":44,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":385,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":189,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":177,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":147,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":112,"org.easymock.samples.ExampleTest.removeNonExistingDocument":79,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":213,"org.easymock.tests.UsageStrictMockTest.differentMethods":324,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":371,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":352,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":449,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":133,"org.easymock.tests2.MockBuilderTest.testCreateMockString":17,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":404,"org.easymock.tests.UsageExpectAndThrowTest.floatType":171,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":401,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":158,"org.easymock.tests.UsageVerifyTest.twoThrows":306,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":333,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":40,"org.easymock.samples.ExampleTest.voteAgainstRemoval":76,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":495,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":472,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":27,"org.easymock.tests.LimitationsTest.privateConstructor":487,"org.easymock.tests2.UsageConstraintsTest.testNotNull":111,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":136,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":260,"org.easymock.tests2.UsageTest.defaultResetToNice":64,"org.easymock.samples.ExampleTest.voteAgainstRemovals":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":473,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":204,"org.easymock.tests.UsageVarargTest.differentLength":269,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":366,"org.easymock.tests2.CallbackTest.callback":152,"org.easymock.tests2.UsageConstraintsTest.equals":336,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":346,"org.easymock.tests.UsageTest.openCallCountByLastCall":239,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":87,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":284,"org.easymock.tests.UsageCallCountTest.tooFewCalls":311,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":33,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":290,"org.easymock.tests.UsageThrowableTest.throwCheckedException":257,"org.easymock.tests.MockingTest.testStrictClassMocking":426,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":61,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":34,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":252,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":32,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":370,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":218,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":384,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":160,"org.easymock.tests.ObjectMethodsTest.testHashCode":297,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":135,"org.easymock.tests2.NameTest.nameForNiceMock":83,"org.easymock.tests2.DependencyTest.testInterfaceMocking":151,"org.easymock.samples.ExampleTest.addDocument":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":418,"org.easymock.tests2.DelegateToTest.testStubDelegate":68,"org.easymock.tests2.AnswerTest.stubAnswer":159,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":321,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":342,"org.easymock.tests.UsageVarargTest.varargLongAccepted":271,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":325,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":470,"org.easymock.tests.UsageExpectAndReturnTest.floatType":191,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":207,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":5,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":438,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":105,"org.easymock.tests.UsageThrowableTest.noUpperLimit":254,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":359,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":88,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":376,"org.easymock.tests2.SerializationTest.test":168,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":122,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":448,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":190,"org.easymock.tests2.UsageConstraintsTest.testSame":93,"org.easymock.samples.SupportTest.addDocument":330,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":383,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":405,"org.easymock.tests.GenericTest.testPackageScope":51,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":445,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":465,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":358,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":429,"org.easymock.tests2.NameTest.nameForMock":81,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":201,"org.easymock.tests2.UsageStrictMockTest.differentMethods":166,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":344,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":347,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":193,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":183,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":492,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":235,"org.easymock.tests2.MockedExceptionTest.testRealException":138,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":475,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":474,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":163,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":220,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":283,"org.easymock.tests2.NameTest.nameForStrictMock":82,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":340,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":499,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":85,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":21,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":380,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":450,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":106,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":8,"org.easymock.tests2.UsageStrictMockTest.range":165,"org.easymock.tests2.UsageConstraintsTest.lessThan":113,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":469,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":409,"org.easymock.tests2.CaptureTest.testCaptureRightOne":127,"org.easymock.tests2.UsageConstraintsTest.testOr":94,"org.easymock.tests.UsageRangeTest.combination":232,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":19,"org.easymock.tests.UsageTest.wrongArguments":238,"org.easymock.tests2.MockBuilderTest.testWithConstructor":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":406,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":54,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":462,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":202,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":452,"org.easymock.tests.UsageVarargTest.varargShortAccepted":270,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":314,"org.easymock.tests2.UsageConstraintsTest.cmpTo":98,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":421,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":464,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":146,"org.easymock.tests2.CaptureTest.testCaptureFromStub":128,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":210,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":9,"org.easymock.tests.UsageTest.unexpectedCallWithArray":62,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":63,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":312,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":203,"org.easymock.tests2.CaptureTest.testCapture":73,"org.easymock.tests2.UsageConstraintsTest.constraints":89,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":322,"org.easymock.samples.ExampleTest.addAndChangeDocument":80,"org.easymock.tests.UsageStrictMockTest.testVerify":326,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":329,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":320,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":245,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":123,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":37,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":293,"org.easymock.tests.LimitationsTest.abstractClass":486,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":195,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":229,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":294,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":392,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":265}}]

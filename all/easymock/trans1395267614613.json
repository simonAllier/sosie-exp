[{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,35,36,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[117,118,119,120,121,122],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[123,115,124,116],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"methods":"methods","name":"name","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[125,126,127,128,129,130,131,132,133,134,135],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[136,137,138,139,140,141,119,142,143,144,145,146,147,148,149,150,151,152,121,153,154,155,156],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[123,115,124,116],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[157,158,159,160,161,162,163,164,165,1,2,166,167,168,169,170,136,171,172,173,174,175,176,177,178,179,180,181,182,7,183,184,117,137,185,138,139,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,141,216,144,120,217,218,219,220,221,222,9,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,14,15,16,252,253,254,255,256,257,258,259,20,21,22,23,24,25,26,27,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,145,146,147,287,288,289,290,28,291,292,293,294,295,296,297,298,299,300,301,302,303,35,35,36,36,37,304,305,38,39,306,307,308,309,310,311,312,148,313,149,150,314,315,316,48,49,50,51,317,52,53,318,319,151,320,321,322,323,324,325,326,327,328,329,54,55,56,330,331,332,333,334,335,57,336,337,338,339,60,65,66,67,68,70,71,74,78,81,91,97,100,101,340,102,103,104,105,106,109,110,111,112,341,342,343,344,345,346,347,348,349,350,125,351,126,352,353,354,355,356,357,358,127,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,128,129,383,130,384,131,132,385,386,387,388,389,390,391,392,393,394,134,395,396,397,135,398,399,115,124,116,400],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[401],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[402,403,404,405,406,58,407],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[117,118,119,120,121,122],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.Capture:134","failures":[408,409],"status":-1,"binaryOperator":"(this.java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[157,159,160,161,162,163,164,1,2,166,167,170,7,184,137,139,186,187,189,190,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,410,144,9,223,224,225,226,227,228,229,230,231,232,237,239,240,241,242,243,244,245,246,247,248,14,15,16,252,253,254,255,256,257,258,259,21,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,145,146,147,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,309,312,148,150,314,315,316,49,50,52,53,319,151,321,322,325,328,54,55,56,330,331,332,335,57,336,337,338,339,60,65,66,100,340,102,103,104,106,109,111,341,342,343,344,345,346,347,348,350,125,351,126,352,354,355,356,357,358,127,361,377,378,379,380,381,382,128,129,383,130,384,131,132,385,386,387,388,389,390,391,392,393,394,134,395,396,397,135,398,399,115,124,116,400],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[136,117,138,143,120,217,220,221,238,146,147,149,320,326,327],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[112],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.RecordState:305","failures":[157,158,1,166,167,170,136,7,137,138,139,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,140,141,216,144,218,219,222,411,223,224,225,226,227,228,233,235,236,237,14,15,16,256,258,259,20,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,145,146,147,296,297,298,299,301,37,307,308,309,310,148,149,150,316,48,49,50,51,317,52,53,318,319,151,321,323,324,325,328,329,56,331,332,333,334,335,57,62,65,67,68,71,78,81,91,97,100,101,340,102,103,104,106,110,111,112,341,343,344,347,348,349,350,125,351,126,352,353,356,357,358,127,360,361,362,363,364,365,366,367,368,369,370,371,372,373,376,381,382,128,129,383,130,384,131,132,385,386,387,388,389,390,391,392,393,394,134,395,396,412,397,135,398,399,115,124,400],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[177],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"value"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:68","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[136,117,138,142,143,120,217,220,221,238,146,147,149,320,326,327,392],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"argument"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[117,118,119,120,121,122],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[402,403,404,413,414,57,58,407,69,115],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[180],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[159,161,162,137,139,186,410,144,145,146,147,148,150,314,151,336,337,338,339],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[157,158,159,160,161,162,163,164,165,415,416,1,2,166,167,168,169,170,136,171,172,173,174,175,176,177,178,179,180,181,182,7,183,184,117,137,185,138,139,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,141,216,144,120,217,218,219,220,221,222,9,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,417,244,245,246,247,248,249,250,251,14,15,16,252,253,254,255,256,257,258,259,20,21,22,23,24,25,26,27,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,145,146,147,287,288,289,290,28,291,292,293,294,295,296,297,298,299,300,301,302,303,309,311,312,148,313,149,150,314,315,316,49,50,52,53,318,319,151,320,321,322,323,324,325,326,327,328,329,54,55,56,330,331,332,333,334,335,57,336,337,338,339,60,62,65,66,70,71,74,100,101,340,102,103,104,105,106,109,110,111,112,341,342,343,344,345,346,347,348,349,350,125,351,126,352,353,354,355,356,357,358,127,359,360,361,375,376,377,378,379,380,381,382,128,129,383,130,384,131,132,385,386,387,388,389,390,391,392,393,394,134,395,396,412,397,135,398,399,115,124,116,400],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[61,73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[157,158,159,160,161,162,163,164,165,415,416,1,2,166,167,168,169,170,136,171,172,173,174,175,176,177,178,179,180,181,182,7,183,184,117,137,185,138,139,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,141,216,144,120,217,218,219,220,221,222,9,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,417,244,245,246,247,248,249,250,251,14,15,16,252,253,254,255,256,257,258,259,20,21,22,23,24,25,26,27,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,145,146,147,287,288,289,290,28,291,292,293,294,295,296,297,298,299,300,301,302,303,309,311,312,148,313,149,150,314,315,316,49,50,52,53,318,319,151,320,321,322,323,324,325,326,327,328,329,54,55,56,330,331,332,333,334,335,57,336,337,338,339,60,62,65,66,70,71,74,100,101,340,102,103,104,105,106,109,110,111,112,341,342,343,344,345,346,347,348,349,350,125,351,126,352,353,354,355,356,357,358,127,359,360,361,376,377,378,379,380,381,382,128,129,383,130,384,131,132,385,386,387,388,389,390,391,392,393,394,134,395,396,412,397,135,398,399,115,124,116,400],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[418,419],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[402,403,404,413,414,57,58,407,69,115],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:230","sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1672","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","type":"CtInvocationImpl"},"failures":[389],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","constructorArgs":"constructorArgs","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:682","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[109],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[402,403,404,413,414,57,58,407,69,115],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[101],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[1,2,3,7,9,13,14,15,16,18,19,21,35,35,36,36,37,38,39,43,48,49,50,51,52,53,56,57,60,61,62,63,65,66,67,68,70,71,73,74,78,81,91,97,100,101,102,103,104,105,106,109,110,111,112,115,116],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"method","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[319,108],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[123,115,124,116],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[420],"status":-1,"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"leafClass"}},{"transplant":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[117,118,119,120,121,122],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[337,112,114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":129,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":216,"org.easymock.tests2.UsageTest.argumentsOrdered":327,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":372,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":322,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":304,"org.easymock.tests2.DelegateToTest.testReturnException":347,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":253,"org.easymock.tests.MockingTest.testPartialClassMocking":14,"org.easymock.tests.MockClassControlTest.testToString":22,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":85,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":81,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":263,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":310,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":402,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":385,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":166,"org.easymock.tests2.UsageTest.wrongArguments":320,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":289,"org.easymock.samples.ExampleTest.answerVsDelegate":297,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":19,"org.easymock.tests2.UsageConstraintsTest.testNull":130,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":102,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":27,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":371,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":40,"org.easymock.tests2.CaptureTest.testPrimitive":352,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":170,"org.easymock.tests.UsageTest.moreThanOneArgument":144,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":282,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":340,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":293,"org.easymock.tests.UsageTest.argumentsOrdered":221,"org.easymock.tests.UsageVarargTest.varargIntAccepted":241,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":156,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":223,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":406,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":60,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":66,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":227,"org.easymock.tests.ReplayStateInvalidUsageTest.times":179,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":376,"org.easymock.tests2.AnswerTest.answer":341,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":133,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":380,"org.easymock.tests2.CaptureTest.testAnd":125,"org.easymock.tests2.UsageTest.strictResetToDefault":319,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":109,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":292,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":285,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":366,"org.easymock.tests2.DelegateToTest.testDelegate":350,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":278,"org.easymock.tests.LimitationsTest.mockFinalMethod":8,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":256,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":232,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":140,"org.easymock.tests2.CaptureTest.testCapture1_2446744":353,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":276,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":378,"org.easymock.tests.UsageThrowableTest.throwError":188,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":173,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":99,"org.easymock.samples.PartialClassMockTest.testGetArea":37,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":174,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":224,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":264,"org.easymock.tests2.UsageTest.niceToStrict":321,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":65,"org.easymock.tests2.MockBuilderTest.testCreateMock":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":94,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":121,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":272,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":367,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":159,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":287,"org.easymock.tests.UsageOverloadedMethodTest.overloading":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":90,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":390,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":236,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":207,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":260,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":389,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":358,"org.easymock.tests.MockClassControlTest.testEquals":26,"org.easymock.tests2.EasyMockSupportClassTest.testAll":78,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":2,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":280,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":41,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":230,"org.easymock.tests2.CaptureTest.testCaptureAll":351,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":379,"org.easymock.tests2.UsageConstraintsTest.testMatches":391,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":171,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":294,"org.easymock.samples.ExampleTest.voteForRemovals":301,"org.easymock.tests.UsageVarargTest.allKinds":248,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":145,"org.easymock.samples.BasicClassMockTest.testPrintContent":39,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":231,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":194,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":311,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":414,"org.easymock.tests2.UsageConstraintsTest.greaterThan":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":79,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":284,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":112,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":34,"org.easymock.samples.ExampleTest.voteForRemoval":298,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":113,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":332,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":72,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":105,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":9,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":318,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":69,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":364,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":76,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":252,"org.easymock.tests2.CaptureTest.testCaptureFirst":361,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":365,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":329,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":238,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":203,"org.easymock.tests2.UsageTest.moreThanOneArgument":151,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":334,"org.easymock.tests2.CaptureTest.testCapture2_2446744":360,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":71,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":247,"org.easymock.tests.GenericTest.testBridgedEquals":4,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":415,"org.easymock.tests.UsageExpectAndReturnTest.longType":199,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":228,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":362,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":73,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":281,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":412,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":279,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":291,"org.easymock.tests.UsageCallCountTest.tooManyCalls":416,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":95,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":204,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":268,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":193,"org.easymock.tests.MockingTest.testNiceClassMocking":17,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":49,"org.easymock.tests.MockingTest.testClassMocking":12,"org.easymock.tests2.UsageConstraintsTest.testContains":388,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":160,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":61,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":56,"org.easymock.tests2.UsageConstraintsTest.testFind":383,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":262,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":183,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":346,"org.easymock.tests.UsageExpectAndReturnTest.object":206,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":106,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":370,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":403,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":243,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":251,"org.easymock.tests.UsageTest.exactCallCountByLastCall":222,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":157,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":58,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":212,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":239,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":235,"org.easymock.tests.MockClassControlTest.testHashCode":25,"org.easymock.tests2.EasyMockSupportTest.testVerify":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":88,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":233,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":377,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":375,"org.easymock.tests.UsageVarargTest.varargCharAccepted":242,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":312,"org.easymock.tests2.UsageTest.openCallCountByLastCall":323,"org.easymock.tests.DefaultClassInstantiatorTest.object":28,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":373,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":249,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":89,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":270,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":191,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":45,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":110,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":24,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":269,"org.easymock.tests.CapturesMatcherTest.test":408,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":213,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":97,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":23,"org.easymock.tests2.UsageTest.resumeIfFailure":328,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":18,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":255,"org.easymock.tests2.StubTest.stubWithReturnValue":316,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":407,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":397,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":205,"org.easymock.tests2.SerializationTest.testAllMockedMethod":116,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":411,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":122,"org.easymock.samples.SupportTest.voteForRemovals":307,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":275,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":123,"org.easymock.tests.UsageExpectAndThrowTest.object":273,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":395,"org.easymock.tests2.DelegateToTest.testWrongClass":349,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":258,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":259,"org.easymock.tests.UsageStrictMockTest.range":138,"org.easymock.samples.ConstructorCalledMockTest.testTax":35,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":369,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":48,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":274,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":67,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":75,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":220,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":288,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":118,"org.easymock.tests2.CaptureTest.testCaptureNone":357,"org.easymock.tests.UsageUnorderedTest.message":136,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":420,"org.easymock.tests.UsageVerifyTest.twoReturns":147,"org.easymock.tests.UsageVarargTest.varargByteAccepted":246,"org.easymock.tests2.ThreadingTest.testThreadSafe":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":92,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":164,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":38,"org.easymock.tests2.CaptureTest.testCapture_2617107":126,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":410,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":169,"org.easymock.tests2.UsageConstraintsTest.any":386,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":178,"org.easymock.tests2.StubTest.stub":315,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":254,"org.easymock.tests.UsageExpectAndThrowTest.longType":266,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":32,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":177,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":313,"org.easymock.tests2.SerializationTest.testClass":115,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":308,"org.easymock.tests.LimitationsTest.mockNativeMethod":7,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":3,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":215,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":44,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":314,"org.easymock.tests2.NameTest.nameForMocksControl":339,"org.easymock.tests2.MockedExceptionTest.testMockedException":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":80,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":219,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":16,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":267,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":100,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":68,"org.easymock.tests.MockingTest.testNicePartialClassMocking":15,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":104,"org.easymock.tests2.CaptureTest.testCaptureLast":356,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":141,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":132,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":53,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":396,"org.easymock.tests.MockingTest.testTwoMocks":13,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":196,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":271,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":326,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":398,"org.easymock.samples.ExampleTest.removeNonExistingDocument":302,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":175,"org.easymock.tests.UsageStrictMockTest.differentMethods":139,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":419,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":30,"org.easymock.tests2.ConstraintsToStringTest.andToString":155,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":333,"org.easymock.tests2.MockBuilderTest.testCreateMockString":74,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":82,"org.easymock.tests.UsageExpectAndThrowTest.floatType":265,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":77,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":342,"org.easymock.tests.UsageVerifyTest.twoThrows":146,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":91,"org.easymock.samples.ExampleTest.voteAgainstRemoval":299,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":111,"org.easymock.tests.LimitationsTest.privateConstructor":6,"org.easymock.tests2.UsageConstraintsTest.testNotNull":135,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":54,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":195,"org.easymock.tests2.UsageTest.defaultResetToNice":325,"org.easymock.samples.ExampleTest.voteAgainstRemovals":296,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":211,"org.easymock.tests.UsageVarargTest.differentLength":417,"org.easymock.tests2.CallbackTest.callback":400,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":107,"org.easymock.tests.UsageTest.openCallCountByLastCall":218,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":381,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":168,"org.easymock.tests.UsageCallCountTest.tooFewCalls":162,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":51,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":290,"org.easymock.tests.UsageThrowableTest.throwCheckedException":192,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":119,"org.easymock.tests.MockingTest.testStrictClassMocking":11,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":158,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":52,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":50,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":180,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":317,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":344,"org.easymock.tests.ObjectMethodsTest.testHashCode":250,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":405,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":335,"org.easymock.tests2.NameTest.nameForNiceMock":338,"org.easymock.tests2.DependencyTest.testInterfaceMocking":309,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":404,"org.easymock.samples.ExampleTest.addDocument":300,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":98,"org.easymock.tests2.DelegateToTest.testStubDelegate":348,"org.easymock.tests2.AnswerTest.stubAnswer":343,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":137,"org.easymock.tests.UsageVarargTest.varargLongAccepted":245,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":186,"org.easymock.tests.UsageExpectAndReturnTest.floatType":198,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":214,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":57,"org.easymock.tests2.ConstraintsToStringTest.orToString":152,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":36,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":394,"org.easymock.tests.UsageThrowableTest.noUpperLimit":189,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":382,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":46,"org.easymock.tests2.SerializationTest.test":124,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":354,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":29,"org.easymock.tests2.UsageConstraintsTest.testSame":384,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":197,"org.easymock.samples.SupportTest.addDocument":306,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":83,"org.easymock.tests.GenericTest.testPackageScope":1,"org.easymock.tests2.NameTest.nameForMock":336,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":208,"org.easymock.tests2.UsageStrictMockTest.differentMethods":150,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":108,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":200,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":277,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":286,"org.easymock.tests2.MockedExceptionTest.testRealException":330,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":142,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":148,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":182,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":167,"org.easymock.tests2.NameTest.nameForStrictMock":337,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":64,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":345,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":103,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":47,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":134,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":31,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":62,"org.easymock.tests2.UsageStrictMockTest.range":149,"org.easymock.tests2.UsageConstraintsTest.lessThan":399,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":42,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":59,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":413,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":363,"org.easymock.tests2.CaptureTest.testCaptureRightOne":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":87,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":418,"org.easymock.tests2.UsageConstraintsTest.testOr":131,"org.easymock.tests.UsageRangeTest.combination":283,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":101,"org.easymock.tests.UsageTest.wrongArguments":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":84,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":21,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":201,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":209,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":33,"org.easymock.tests.UsageVarargTest.varargShortAccepted":244,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":165,"org.easymock.tests2.UsageConstraintsTest.cmpTo":387,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":401,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":324,"org.easymock.tests2.CaptureTest.testCaptureFromStub":359,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":172,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":63,"org.easymock.tests.UsageTest.unexpectedCallWithArray":120,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":117,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":163,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":210,"org.easymock.tests2.CaptureTest.testCapture":409,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":185,"org.easymock.tests2.UsageConstraintsTest.constraints":128,"org.easymock.samples.ExampleTest.addAndChangeDocument":303,"org.easymock.tests2.ConstraintsToStringTest.notToString":153,"org.easymock.tests.UsageStrictMockTest.testVerify":187,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":305,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":229,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":355,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":43,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":225,"org.easymock.tests.LimitationsTest.abstractClass":5,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":202,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":226,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":237,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":240,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":368}}]

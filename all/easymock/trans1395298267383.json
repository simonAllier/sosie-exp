[{"position":"org.easymock.internal.MockBuilder:223","failures":[0,1,2,3,4,5],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[6,7,8,9,10],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,0,34,35,36,37,38,39,40,41,1,42,2,43,44,45,46,47,3,48,49,50,51,52,53,54,55,4,56,57,58,59,60,61,62,63,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,84,85,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[89,93],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,84,85,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[162,163],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[123,4,56,57,164,165,166,167,168,169,170,171,172,173,174,175,176,177],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[4,56,57,164,166,167,168,169,170,171,172,173,174,175,176,177],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:80","failures":[19,0,2,43,44,45,47,3,48,49,51,52,54,55,86,98,119,120],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[178,179],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplantationPoint":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"failures":[180,181],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:327","failures":[182,183,167,168],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[185,8,32],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[89,93],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[186,187,188,189,190,191,192,193,194,195,122,196,197,198,178,199,11,200,201,202,19,203,20,204,123,22,23,25,26,205,206,207,208,209,210,180,211,181,212,213,214,215,216,185,217,218,219,220,221,125,126,222,223,127,128,129,130,224,225,226,227,131,228,132,133,8,134,135,229,230,231,232,136,137,138,233,234,235,236,29,237,31,32,33,34,37,39,2,47,3,4,56,57,164,238,239,240,241,242,243,244,140,141,142,143,144,96,97,101,245,145,246,247,248,249,250,251,252,253,254,151,152,153,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,110,115,116,117,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,154,297,298,299,300,301,155,156,157,158,159,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,160,161,327,121,172,173,174,175,176,177],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[40],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[38,1,44,52],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"failures":[328,329],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"qualifier","key":"qualifier"}},{"position":"org.easymock.internal.Range:36","failures":[330],"status":-1,"binaryOperator":"(int <= int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[6,7,331,332,9,333],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"position":"org.easymock.ConstructorArgs:54","failures":[11,12,19,334,335,23,26,336,337,338,339,50,340,341,58,59,60,61,62,63,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[190,342,122,343,196,344,11,21,22,23,24,345,25,26,220,29,30,237,31,32,33,34,38,39,40,44,47,48,49,52,61,5,73,79,238,240,241,243,346,86,140,141,142,143,145,347,246,151,110,115,116,117,277,278,279,280,281,282,285,286,288,289,290,292,293,294,295,296,155,156,157,158,159,312,313,314,315,160,161],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[123,348,182,183,349,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,350,351,352,353,354,355,317,356,176],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[340],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[238,240,241,243,346,157],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[223],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[205,207,212,222,223,128,130,224,357,229,136],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[205,207,212,222,223,128,130,224,357,229,136],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1039","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[122,343,196,215,358,145,347,246,359,360,361,362,316,317,318,321],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:105","failures":[186,187,188,189,190,342,191,363,162,192,193,194,364,195,122,365,343,196,197,366,367,368,328,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,198,178,179,344,199,200,201,390,202,203,204,123,345,391,392,205,206,207,208,393,209,210,180,211,181,212,124,394,213,395,214,215,396,216,185,397,398,217,399,400,218,401,402,219,220,403,404,221,405,125,126,222,223,406,127,128,129,130,224,225,357,226,227,131,228,132,133,8,134,135,229,230,231,407,232,136,137,138,408,233,234,235,236,237,409,410,411,329,412,413,414,415,416,417,418,419,4,56,57,164,420,238,239,240,241,242,243,421,244,422,346,423,424,425,426,427,428,87,358,139,429,430,431,432,433,434,435,436,437,165,438,348,182,183,140,141,142,143,144,166,167,168,439,245,331,145,440,347,246,247,248,441,442,443,249,250,251,252,253,254,444,445,446,146,447,448,449,147,148,450,169,451,452,453,454,455,163,149,456,457,458,459,150,460,461,462,463,151,152,170,349,153,464,465,466,467,330,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,468,469,470,471,350,275,276,351,352,353,354,355,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,154,171,472,473,474,297,298,299,300,301,155,156,157,158,159,302,303,304,475,305,306,476,307,308,309,310,311,312,313,314,315,316,317,318,477,478,319,320,479,321,333,480,481,482,483,484,485,322,323,324,325,486,487,326,488,489,490,491,160,161,492,493,494,356,495,327,496,172,173,174,175,176,177],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[186,187,188,189,497,498,190,342,191,363,162,192,193,194,364,195,122,365,343,196,197,366,367,368,328,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,198,178,179,344,199,11,12,499,200,201,390,202,19,203,20,204,123,21,22,23,24,500,345,25,26,336,27,501,502,503,28,391,392,205,206,207,208,393,209,210,180,211,181,212,124,394,213,395,214,215,396,216,185,397,398,217,399,400,218,401,402,219,220,403,404,221,405,125,126,222,223,406,127,128,129,130,224,225,357,226,227,131,228,132,133,8,134,135,229,230,231,407,232,136,137,138,408,233,234,235,236,29,30,237,31,32,33,0,504,34,35,36,37,38,39,40,41,1,2,337,44,45,338,46,47,3,48,339,49,505,50,51,52,341,55,409,410,411,329,412,413,414,415,416,417,418,419,4,56,57,164,58,59,60,61,62,63,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,420,82,83,238,239,240,241,242,243,421,244,84,85,422,346,423,86,424,425,426,427,428,87,506,88,89,90,91,92,93,507,94,358,139,429,430,431,432,433,434,435,436,437,165,438,348,182,183,140,141,142,143,144,166,167,168,95,96,97,98,99,100,101,102,103,104,105,106,107,439,245,331,145,440,347,246,247,248,441,442,443,249,250,251,252,253,254,444,445,446,146,447,448,449,147,148,450,169,451,452,453,454,455,163,149,456,457,458,459,150,460,461,462,463,151,152,170,349,153,464,465,466,467,330,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,108,109,110,111,508,468,112,113,114,115,116,469,117,470,471,118,350,275,276,351,352,353,354,355,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,154,171,472,473,474,297,298,299,300,301,155,156,157,158,159,302,303,304,475,305,306,476,307,308,309,310,311,312,313,314,315,316,317,318,477,478,319,320,479,321,333,480,481,482,483,484,485,322,323,324,325,486,487,326,119,509,510,488,489,120,490,491,160,161,492,493,494,356,495,327,496,121,172,173,174,175,176,177],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":223,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":479,"org.easymock.tests2.UsageTest.argumentsOrdered":400,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":387,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":453,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":185,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":423,"org.easymock.tests2.DelegateToTest.testReturnException":219,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":173,"org.easymock.tests.MockingTest.testPartialClassMocking":115,"org.easymock.tests.MockClassControlTest.testToString":102,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":408,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":150,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":67,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":5,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":255,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":359,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":342,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":225,"org.easymock.tests2.UsageTest.wrongArguments":396,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":151,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":324,"org.easymock.samples.ExampleTest.answerVsDelegate":239,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":120,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":471,"org.easymock.tests2.UsageConstraintsTest.testNull":128,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":31,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":386,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":107,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":13,"org.easymock.tests2.CaptureTest.testPrimitive":208,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":153,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":274,"org.easymock.tests.UsageTest.moreThanOneArgument":321,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":237,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":142,"org.easymock.tests.UsageTest.argumentsOrdered":484,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":464,"org.easymock.tests.UsageVarargTest.varargIntAccepted":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":456,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":155,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":2,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":502,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":418,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":3,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":448,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":159,"org.easymock.tests.ReplayStateInvalidUsageTest.times":436,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":370,"org.easymock.tests2.DependencyTest.testClassMocking":497,"org.easymock.tests2.AnswerTest.answer":191,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":458,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":189,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":510,"org.easymock.tests2.CaptureTest.testAnd":205,"org.easymock.tests2.UsageTest.strictResetToDefault":214,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":37,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":338,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":141,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":314,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":381,"org.easymock.tests2.DelegateToTest.testDelegate":221,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":330,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":270,"org.easymock.tests.LimitationsTest.mockFinalMethod":111,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":176,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":301,"org.easymock.tests2.DependencyTest.testClassMockingSupport":498,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":486,"org.easymock.tests2.CaptureTest.testCapture1_2446744":393,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":504,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":268,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":187,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":430,"org.easymock.tests.UsageThrowableTest.throwError":350,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":489,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":508,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":419,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":144,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":81,"org.easymock.samples.PartialClassMockTest.testGetArea":86,"org.easymock.tests.MockingTest.testInterfaceMocking":469,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":431,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":156,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":442,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":68,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":87,"org.easymock.tests2.UsageTest.niceToStrict":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":146,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":47,"org.easymock.tests2.MockBuilderTest.testCreateMock":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":76,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":373,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":6,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":264,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":382,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":509,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":183,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":249,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":322,"org.easymock.tests.UsageOverloadedMethodTest.overloading":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":78,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":132,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":356,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":478,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":288,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":228,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":181,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":475,"org.easymock.tests.MockClassControlTest.testEquals":106,"org.easymock.tests2.EasyMockSupportClassTest.testAll":61,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":97,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":272,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":14,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":188,"org.easymock.tests2.CaptureTest.testCaptureAll":206,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":299,"org.easymock.tests.MockNameTest.defaultName":468,"org.easymock.tests2.UsageConstraintsTest.testMatches":133,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":143,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":139,"org.easymock.samples.ExampleTest.voteForRemovals":243,"org.easymock.tests.UsageVarargTest.allKinds":311,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":316,"org.easymock.samples.BasicClassMockTest.testPrintContent":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":300,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":354,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":364,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":415,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":404,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":177,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":507,"org.easymock.tests2.UsageConstraintsTest.greaterThan":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":62,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":313,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":40,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":94,"org.easymock.samples.ExampleTest.voteForRemoval":240,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":178,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":41,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":53,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":490,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":503,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":0,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":395,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":121,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":169,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":379,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":59,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":172,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":402,"org.easymock.tests2.CaptureTest.testCaptureFirst":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":450,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":380,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":401,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":496,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":284,"org.easymock.tests2.CaptureTest.testCapture2_2446744":394,"org.easymock.tests2.UsageTest.moreThanOneArgument":215,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":459,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":52,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":310,"org.easymock.tests.GenericTest.testBridgedEquals":99,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":445,"org.easymock.tests.UsageExpectAndReturnTest.longType":280,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":297,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":377,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":54,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":273,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":477,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":407,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":271,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":167,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":140,"org.easymock.tests.UsageCallCountTest.tooManyCalls":446,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":77,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":285,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":375,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":260,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":353,"org.easymock.tests.MockingTest.testNiceClassMocking":118,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":22,"org.easymock.tests.MockingTest.testClassMocking":113,"org.easymock.tests2.UsageConstraintsTest.testContains":131,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":43,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":250,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":57,"org.easymock.tests2.UsageConstraintsTest.testFind":127,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":320,"org.easymock.tests.MockTypeTest.fromEasyMockClass":488,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":439,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":202,"org.easymock.tests.UsageExpectAndReturnTest.object":287,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":374,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":385,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":306,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":427,"org.easymock.tests.UsageTest.exactCallCountByLastCall":485,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":148,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":472,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":465,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":12,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":293,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":302,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":494,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":410,"org.easymock.tests.MockClassControlTest.testHashCode":105,"org.easymock.tests2.EasyMockSupportTest.testVerify":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":70,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":466,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":492,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":182,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":186,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":405,"org.easymock.tests.UsageVarargTest.varargCharAccepted":305,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":506,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":463,"org.easymock.tests2.UsageTest.openCallCountByLastCall":397,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":388,"org.easymock.tests.DefaultClassInstantiatorTest.object":88,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":348,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":425,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":71,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":262,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":18,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":351,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":328,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":409,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":104,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":38,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":261,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":294,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":166,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":79,"org.easymock.tests2.UsageTest.resumeIfFailure":218,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":119,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":501,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":175,"org.easymock.tests2.StubTest.stubWithReturnValue":123,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":339,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":232,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":286,"org.easymock.tests2.SerializationTest.testAllMockedMethod":20,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":457,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":7,"org.easymock.samples.SupportTest.voteForRemovals":346,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":95,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":329,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":267,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":462,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":363,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":474,"org.easymock.tests.UsageExpectAndThrowTest.object":265,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":230,"org.easymock.tests2.DelegateToTest.testWrongClass":403,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":160,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":161,"org.easymock.samples.ConstructorCalledMockTest.testTax":84,"org.easymock.tests.UsageStrictMockTest.range":347,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":391,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":384,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":21,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":266,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":48,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":483,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":58,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":323,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":332,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":443,"org.easymock.tests2.CaptureTest.testCaptureNone":211,"org.easymock.tests.UsageUnorderedTest.message":358,"org.easymock.tests.UsageVerifyTest.twoReturns":318,"org.easymock.tests.UsageVarargTest.varargByteAccepted":309,"org.easymock.tests2.ThreadingTest.testThreadSafe":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":74,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":254,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":428,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":82,"org.easymock.tests2.CaptureTest.testCapture_2617107":207,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":460,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":349,"org.easymock.tests2.UsageConstraintsTest.any":226,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":435,"org.easymock.tests2.StubTest.stub":204,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":461,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":174,"org.easymock.tests.UsageExpectAndThrowTest.longType":258,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":92,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":434,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":365,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":413,"org.easymock.tests2.SerializationTest.testClass":19,"org.easymock.tests.LimitationsTest.mockNativeMethod":110,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":98,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":296,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":17,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":368,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":197,"org.easymock.tests2.NameTest.nameForMocksControl":236,"org.easymock.tests2.MockedExceptionTest.testMockedException":56,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":63,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":482,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":390,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":117,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":259,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":29,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":49,"org.easymock.tests.MockingTest.testNicePartialClassMocking":116,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":33,"org.easymock.tests2.CaptureTest.testCaptureLast":180,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":366,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":487,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":26,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":224,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":231,"org.easymock.tests.MockingTest.testTwoMocks":114,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":336,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":277,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":263,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":399,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":137,"org.easymock.samples.ExampleTest.removeNonExistingDocument":421,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":432,"org.easymock.tests.UsageStrictMockTest.differentMethods":246,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":372,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":411,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":90,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":179,"org.easymock.tests2.MockBuilderTest.testCreateMockString":55,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":64,"org.easymock.tests.UsageExpectAndThrowTest.floatType":257,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":60,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":192,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":499,"org.easymock.tests.UsageVerifyTest.twoThrows":317,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":493,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":73,"org.easymock.samples.ExampleTest.voteAgainstRemoval":241,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":454,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":441,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":39,"org.easymock.tests.LimitationsTest.privateConstructor":109,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":335,"org.easymock.tests2.UsageConstraintsTest.testNotNull":136,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":4,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":355,"org.easymock.tests2.UsageTest.defaultResetToNice":217,"org.easymock.samples.ExampleTest.voteAgainstRemovals":238,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":455,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":292,"org.easymock.tests.UsageVarargTest.differentLength":476,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":367,"org.easymock.tests2.CallbackTest.callback":200,"org.easymock.tests2.UsageConstraintsTest.equals":406,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":35,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":10,"org.easymock.tests.UsageTest.openCallCountByLastCall":481,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":125,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":170,"org.easymock.tests.UsageCallCountTest.tooFewCalls":252,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":24,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":325,"org.easymock.tests.UsageThrowableTest.throwCheckedException":352,"org.easymock.tests.MockingTest.testStrictClassMocking":112,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":9,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":171,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":25,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":23,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":371,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":437,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":345,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":194,"org.easymock.tests.ObjectMethodsTest.testHashCode":426,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":199,"org.easymock.tests2.NameTest.nameForNiceMock":235,"org.easymock.tests2.DependencyTest.testInterfaceMocking":190,"org.easymock.samples.ExampleTest.addDocument":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":80,"org.easymock.tests2.DelegateToTest.testStubDelegate":220,"org.easymock.tests2.AnswerTest.stubAnswer":193,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":145,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":505,"org.easymock.tests.UsageVarargTest.varargLongAccepted":308,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":247,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":452,"org.easymock.tests.UsageExpectAndReturnTest.floatType":279,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":295,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":11,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":85,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":495,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":417,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":135,"org.easymock.tests.UsageThrowableTest.noUpperLimit":275,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":126,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":27,"org.easymock.tests2.SerializationTest.test":203,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":209,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":89,"org.easymock.tests2.UsageConstraintsTest.testSame":129,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":278,"org.easymock.samples.SupportTest.addDocument":422,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":500,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":433,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":65,"org.easymock.tests.GenericTest.testPackageScope":96,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":147,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":416,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":470,"org.easymock.tests2.NameTest.nameForMock":233,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":289,"org.easymock.tests2.UsageStrictMockTest.differentMethods":196,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":341,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":36,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":281,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":269,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":424,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":315,"org.easymock.tests2.MockedExceptionTest.testRealException":164,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":491,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":163,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":122,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":438,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":152,"org.easymock.tests2.NameTest.nameForStrictMock":234,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":46,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":201,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":32,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":28,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":91,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":229,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":360,"org.easymock.tests.ErrorMessageTest.testGetters":361,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":44,"org.easymock.tests2.UsageStrictMockTest.range":343,"org.easymock.tests2.UsageConstraintsTest.lessThan":138,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":15,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":412,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":451,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":69,"org.easymock.tests2.CaptureTest.testCaptureRightOne":212,"org.easymock.tests2.UsageConstraintsTest.testOr":130,"org.easymock.tests.UsageRangeTest.combination":312,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":30,"org.easymock.tests.UsageTest.wrongArguments":480,"org.easymock.tests2.MockBuilderTest.testWithConstructor":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":66,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":447,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":290,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":93,"org.easymock.tests.UsageVarargTest.varargShortAccepted":307,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":444,"org.easymock.tests2.UsageConstraintsTest.cmpTo":227,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":449,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":398,"org.easymock.tests2.CaptureTest.testCaptureFromStub":124,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":429,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":45,"org.easymock.tests.UsageTest.unexpectedCallWithArray":333,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":331,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":253,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":340,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":291,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":440,"org.easymock.tests2.UsageConstraintsTest.constraints":222,"org.easymock.samples.ExampleTest.addAndChangeDocument":244,"org.easymock.tests.UsageStrictMockTest.testVerify":248,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":420,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":245,"org.easymock.tests2.CompareToTest.testGreateThan":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":298,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":210,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":157,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":16,"org.easymock.tests.LimitationsTest.abstractClass":108,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":283,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":158,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":327,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":303,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":383}}]

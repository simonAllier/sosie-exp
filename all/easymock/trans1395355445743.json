[{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((this.org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[27,27,28,28,29,30,31,32,33],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:49","sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[6,34],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[35,36,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[27,27,28,28,38,39,40,29,30,31,41,42,43,44,45,46,47,48,49,50,51,52,53,54,32,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,33,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"toMock"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[133,134,135,136,137,138,139,140,141,39,40,142,143,144,0,145,1,2,146,41,147,148,149,150,151,152,153,48,154,155,156,157,158,159,160,161,162,163,164,165,166,167,66,69,74,11,168,12,13,169,170,171,172,173,19,174,20,21,175,176,177,178,179,180,181,182,183,116,22,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,132,24,25,26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[200,7,201,202,173,203],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[105,109],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return org.easymock.internal.AndroidSupport.boolean","type":"CtReturnImpl"},"failures":[27,27,28,28,38,39,40,204,205,29,30,31,41,42,43,44,45,46,47,48,49,50,51,52,53,54,32,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,33,73,74,75,76,206,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,207,120,121,208,209,122,123,124,125,210,126,127,128,129,130,211,212,131,132],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[56,61,166],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:116","sourceCode":"try {\n    java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[31],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:772","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[213],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[200,7,201,202,173,203],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[214,215,216,217,218,219,220],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:229","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:40","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[221],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[30,44,47,222,223,224,225,226,227,228,229],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[230,148,231,34,232,233,234,160,235],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:958","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[236],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[237,238],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"toStringMethod","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[200,173],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1149","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[234],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[239],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:163","failures":[237,238],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[1,11,12,13,15,16,240,173,20,241,22,203,24,25,26],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[135,214,136,137,138,139,140,242,243,244,245,29,144,0,2,146,31,246,41,247,43,44,46,47,230,147,148,248,149,150,151,152,249,231,153,48,250,50,51,52,54,56,58,251,252,62,63,64,253,254,255,256,257,215,258,218,159,259,260,261,34,232,262,263,264,233,234,213,161,265,266,267,268,269,270,271,272,235,236,273,163,274,275,276,164,165,166,167,277,278,237,238,65,69,70,279,10,280,168,281,282,283,284,285,286,14,15,16,287,288,289,290,291,170,292,172,19,21,175,176,293,294,295,296,297,298,177,299,178,179,180,181,115,116,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,120,341,342,343,344,345,346,347,348,349,350,351,188,189,190,191,192,194,195,196,197,198,199,352,353,354,355,356,357,123,124,125,127,132,358,359,360,361,23],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":232,"org.easymock.tests2.UsageTest.argumentsOrdered":13,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":156,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":296,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":168,"org.easymock.tests2.StubTest.stubWithReturnValue":259,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":227,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":309,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":141,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":163,"org.easymock.tests2.SerializationTest.testAllMockedMethod":41,"org.easymock.tests2.DelegateToTest.testReturnException":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":294,"org.easymock.tests.MockingTest.testPartialClassMocking":123,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":7,"org.easymock.samples.SupportTest.voteForRemovals":134,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":114,"org.easymock.tests.MockClassControlTest.testToString":128,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":333,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":88,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":321,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":84,"org.easymock.tests.UsageExpectAndThrowTest.object":331,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":236,"org.easymock.tests2.DelegateToTest.testWrongClass":216,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":199,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":352,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":213,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":347,"org.easymock.tests2.UsageTest.wrongArguments":11,"org.easymock.tests.UsageStrictMockTest.range":20,"org.easymock.samples.ConstructorCalledMockTest.testTax":27,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":285,"org.easymock.samples.ExampleTest.answerVsDelegate":214,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":42,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":113,"org.easymock.tests2.UsageConstraintsTest.testNull":263,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":332,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":50,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":71,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":131,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":155,"org.easymock.tests2.CaptureTest.testPrimitive":248,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":349,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":78,"org.easymock.tests.UsageTest.moreThanOneArgument":23,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":25,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":284,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":250,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":355,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":201,"org.easymock.tests2.CaptureTest.testCaptureNone":152,"org.easymock.tests.UsageUnorderedTest.message":22,"org.easymock.tests.UsageVerifyTest.twoReturns":16,"org.easymock.tests.UsageVarargTest.varargByteAccepted":196,"org.easymock.tests2.ThreadingTest.testThreadSafe":242,"org.easymock.tests.UsageTest.argumentsOrdered":26,"org.easymock.tests.UsageVarargTest.varargIntAccepted":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":95,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":181,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":39,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":8,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":287,"org.easymock.tests2.CaptureTest.testCapture_2617107":148,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":9,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":65,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":37,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":187,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":70,"org.easymock.tests2.UsageConstraintsTest.any":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":220,"org.easymock.tests2.StubTest.stub":159,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":291,"org.easymock.tests.UsageExpectAndThrowTest.longType":324,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":295,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":5,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":108,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":145,"org.easymock.tests2.SerializationTest.testClass":31,"org.easymock.tests.LimitationsTest.mockNativeMethod":120,"org.easymock.tests2.DependencyTest.testClassMocking":204,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":319,"org.easymock.tests2.AnswerTest.answer":277,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":117,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":160,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":257,"org.easymock.tests2.CaptureTest.testAnd":230,"org.easymock.tests2.UsageTest.strictResetToDefault":279,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":226,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":56,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":146,"org.easymock.tests2.NameTest.nameForMocksControl":167,"org.easymock.tests2.MockedExceptionTest.testMockedException":63,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":354,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":83,"org.easymock.tests2.DelegateToTest.testDelegate":218,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":325,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":125,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":48,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":72,"org.easymock.tests.MockingTest.testNicePartialClassMocking":124,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":336,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":52,"org.easymock.tests.LimitationsTest.mockFinalMethod":121,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":35,"org.easymock.tests2.CaptureTest.testCaptureLast":151,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":297,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":18,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":234,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":47,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":346,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":273,"org.easymock.tests2.DependencyTest.testClassMockingSupport":205,"org.easymock.tests.MockingTest.testTwoMocks":122,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":17,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":222,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":300,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":334,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":329,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":255,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":12,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":275,"org.easymock.tests.UsageStrictMockTest.differentMethods":21,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":106,"org.easymock.tests2.ConstraintsToStringTest.andToString":6,"org.easymock.tests2.MockBuilderTest.testCreateMockString":75,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":126,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":357,"org.easymock.tests.UsageExpectAndThrowTest.floatType":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":85,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":80,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":278,"org.easymock.tests.UsageVerifyTest.twoThrows":15,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":94,"org.easymock.samples.PartialClassMockTest.testGetArea":38,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":288,"org.easymock.samples.ExampleTest.voteAgainstRemoval":137,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":169,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":58,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":322,"org.easymock.tests2.UsageTest.niceToStrict":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":89,"org.easymock.tests.LimitationsTest.privateConstructor":207,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":224,"org.easymock.tests2.UsageConstraintsTest.testNotNull":274,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":62,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":69,"org.easymock.tests2.UsageTest.defaultResetToNice":281,"org.easymock.tests2.MockBuilderTest.testCreateMock":73,"org.easymock.samples.ExampleTest.voteAgainstRemovals":135,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":315,"org.easymock.tests.UsageVarargTest.differentLength":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":97,"org.easymock.tests2.CallbackTest.callback":247,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":32,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":330,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":200,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":260,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":177,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":283,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":186,"org.easymock.tests.UsageCallCountTest.tooFewCalls":179,"org.easymock.tests.UsageOverloadedMethodTest.overloading":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":99,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":268,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":311,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":45,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":267,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":249,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":286,"org.easymock.tests.MockClassControlTest.testEquals":212,"org.easymock.tests2.EasyMockSupportClassTest.testAll":81,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":116,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":338,"org.easymock.tests.MockingTest.testStrictClassMocking":208,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":202,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":344,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":256,"org.easymock.tests2.CaptureTest.testCaptureAll":147,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":46,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":44,"org.easymock.tests2.UsageConstraintsTest.testMatches":269,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":238,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":356,"org.easymock.samples.ExampleTest.voteForRemovals":139,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":36,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":244,"org.easymock.tests2.NameTest.nameForNiceMock":166,"org.easymock.tests.UsageVarargTest.allKinds":198,"org.easymock.tests2.DependencyTest.testInterfaceMocking":245,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":14,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":345,"org.easymock.samples.BasicClassMockTest.testPrintContent":40,"org.easymock.samples.ExampleTest.addDocument":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":96,"org.easymock.tests2.DelegateToTest.testStubDelegate":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":101,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":143,"org.easymock.tests2.AnswerTest.stubAnswer":237,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":298,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":217,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":19,"org.easymock.tests2.UsageConstraintsTest.greaterThan":271,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":221,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":82,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":359,"org.easymock.tests.UsageVarargTest.varargLongAccepted":195,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":59,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":175,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":111,"org.easymock.samples.ExampleTest.voteForRemoval":136,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":243,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":60,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":318,"org.easymock.tests.UsageExpectAndReturnTest.floatType":302,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":53,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":29,"org.easymock.tests2.ConstraintsToStringTest.orToString":3,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":28,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":272,"org.easymock.tests.UsageThrowableTest.noUpperLimit":170,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":261,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":132,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":76,"org.easymock.tests2.SerializationTest.test":246,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":149,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":33,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":105,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":292,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":301,"org.easymock.tests2.UsageConstraintsTest.testSame":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":79,"org.easymock.samples.SupportTest.addDocument":133,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":293,"org.easymock.tests2.CaptureTest.testCaptureFirst":153,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":154,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":241,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":86,"org.easymock.tests.GenericTest.testPackageScope":115,"org.easymock.tests2.UsageTest.moreThanOneArgument":10,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":74,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":197,"org.easymock.tests.GenericTest.testBridgedEquals":118,"org.easymock.tests2.NameTest.nameForMock":164,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":182,"org.easymock.tests.UsageExpectAndReturnTest.longType":303,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":342,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":339,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":312,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":162,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":337,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":229,"org.easymock.tests2.UsageStrictMockTest.differentMethods":2,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":353,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":55,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":304,"org.easymock.tests.UsageCallCountTest.tooManyCalls":183,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":335,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":361,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":178,"org.easymock.tests2.MockedExceptionTest.testRealException":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":98,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":308,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":326,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":348,"org.easymock.tests.MockingTest.testNiceClassMocking":210,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":43,"org.easymock.tests.MockingTest.testClassMocking":209,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":299,"org.easymock.tests2.UsageConstraintsTest.testContains":266,"org.easymock.tests2.NameTest.nameForStrictMock":165,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":64,"org.easymock.tests2.UsageConstraintsTest.testFind":262,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":351,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":68,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":251,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":51,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":252,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":171,"org.easymock.tests.UsageExpectAndReturnTest.object":310,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":77,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":235,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":107,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":54,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":66,"org.easymock.tests2.UsageStrictMockTest.range":1,"org.easymock.tests2.UsageConstraintsTest.lessThan":276,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":192,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":341,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":239,"org.easymock.tests2.CaptureTest.testCaptureRightOne":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":90,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":184,"org.easymock.tests2.UsageConstraintsTest.testOr":233,"org.easymock.tests.UsageRangeTest.combination":358,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":30,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":316,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":49,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":188,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":219,"org.easymock.tests.UsageTest.wrongArguments":24,"org.easymock.tests2.MockBuilderTest.testWithConstructor":225,"org.easymock.tests.MockClassControlTest.testHashCode":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":87,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":127,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":305,"org.easymock.tests2.EasyMockSupportTest.testVerify":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":91,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":185,"org.easymock.tests.UsageVarargTest.varargShortAccepted":194,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":109,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":254,"org.easymock.tests2.UsageConstraintsTest.cmpTo":265,"org.easymock.tests.UsageVarargTest.varargCharAccepted":191,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":103,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":144,"org.easymock.tests.DefaultClassInstantiatorTest.object":104,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":157,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":67,"org.easymock.tests.UsageTest.unexpectedCallWithArray":203,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":240,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":92,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":173,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":180,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":228,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":314,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":57,"org.easymock.tests2.UsageConstraintsTest.constraints":34,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":130,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":174,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":327,"org.easymock.samples.ExampleTest.addAndChangeDocument":140,"org.easymock.tests2.ConstraintsToStringTest.notToString":4,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":317,"org.easymock.tests.UsageStrictMockTest.testVerify":176,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":100,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":129,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":172,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":343,"org.easymock.tests2.UsageTest.resumeIfFailure":282,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":150,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":289,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":306,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":112,"org.easymock.tests.LimitationsTest.abstractClass":119,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":320,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":290,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":189,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":206}}]

[{"position":"org.easymock.internal.ReflectionUtils:106","failures":[0,1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:229","failures":[25,58,29,47,54],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[33,59,60,61,62,63,64,65,66,67,68,69,57,70],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.RecordState:85","failures":[0,71,72,73,74,75,76,77,78,79,80,81,1,1,2,2,3,4,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,5,6,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,8,130,131,132,133,134,135,136,137,138,139,140,9,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,13,14,15,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,16,17,18,242,19,20,21,22,23,24,25,26,27,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,28,29,30,31,262,263,264,32,265,266,267,268,269,33,270,34,271,272,273,274,275,276,277,278,279,280,281,282,283,284,39,40,41,42,285,43,44,286,287,288,289,290,291,292,293,45,47,49,50,51,52,53,54,56,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,57],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1847","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","type":"CtInvocationImpl"},"failures":[341],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:36","failures":[103,353,354,355,356,357,160,161,162,164,165,185,186,188,189,358,359,360,361,362,363,364,365,366,367,368,296,309,311,312],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.String","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[60,61,62,63,64,66,70],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[0,1,1,2,2,3,4,5,6,7,369,8,140,9,141,142,143,144,145,146,10,11,12,13,14,15,370,16,17,18,19,20,21,22,23,24,25,26,27,58,28,29,30,31,32,33,34,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,56,57],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[371,103,141,142,143,160,161,162,10,372,373,11,374,375,164,165,166,169,170,185,186,188,189,209,376,370,358,359,18,24,27,58,274,277,279,284,377,40,41,43,44,286,287,288,289,45,48,51,52,54,56,296,297,303,304,309,311,312,322,378],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:126","failures":[72,179,290,292,293],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[326,327],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"failures":[71,72,73,74,75,76,78,79,80,81,3,4,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,379,380,381,6,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,129,382,8,383,384,385,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,386,179,180,387,181,183,184,185,186,187,188,189,190,191,388,389,201,202,203,204,205,206,207,208,224,225,226,227,228,390,391,392,229,230,231,232,233,234,235,236,237,238,239,240,241,16,358,359,18,20,23,24,25,26,27,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,28,262,266,393,394,267,268,33,270,271,272,273,274,275,276,277,278,279,280,281,282,284,395,290,291,292,396,293,49,51,52,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,397,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,351,352,57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[398],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[384,391],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[72,179,399,290,292,396,293],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[72,178,400,262,266,394,267,269,351,352],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:34","failures":[103,353,354,355,401,356,402,357,160,161,162,164,165,166,169,170,386,387,181,182,185,186,188,189,358,359,360,361,362,363,364,365,403,366,367,368,404,296,297,303,304,309,311,312,339],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[405],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:355","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[406,407],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[71,72,73,74,75,76,78,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,5,6,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,8,131,132,133,134,135,136,137,138,139,9,148,149,155,156,159,160,161,162,164,172,173,174,175,176,177,181,184,186,189,190,191,13,14,15,192,193,194,195,196,197,202,203,204,205,206,207,208,224,225,226,227,228,229,230,231,232,233,235,236,237,238,239,240,241,16,408,17,242,19,20,21,23,24,26,243,244,245,246,248,249,250,251,252,253,256,257,258,261,262,263,264,32,265,266,267,268,269,33,270,34,40,41,43,44,286,287,288,289,290,291,293,45,49,50,295,296,298,299,302,305,308,309,312,313,314,315,316,317,318,320,321,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,346,347,348,349,351,352,57],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"ret":"ret"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[157,409],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[71,72,73,74,75,76,78,79,80,81,3,4,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,5,6,369,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,410,406,8,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,167,168,169,171,172,173,174,175,176,177,178,179,180,184,186,187,188,189,190,194,195,196,197,199,200,201,202,203,204,205,206,207,208,411,211,224,225,226,227,228,229,230,231,232,233,235,236,237,238,239,240,241,16,17,18,242,19,20,21,23,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,28,262,263,264,32,265,266,267,268,269,270,34,271,272,273,274,275,276,277,279,280,281,282,283,284,39,42,285,290,291,292,293,294,295,296,298,299,300,301,303,305,306,308,309,310,311,312,313,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,351,352],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:50","failures":[1,2,412,413,414,28,415,416,29,417,418,419,420,421,422,423,424,425,30,426,427,428,429,430,31,431,432,33,41,44,433,434,435,436,437,66,67,438,439,57,70],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[440,323,340,346],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[441,369],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:163","failures":[268,269],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:230","failures":[],"status":0,"binaryOperator":"(((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:358","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"failures":[442],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[382,443,444,445,446,447,212],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[448],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[449,33,270,34],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:235","failures":[1,2,450,33,436,437,66,67,438,439,405,68,69,57,70],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":326,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":163,"org.easymock.tests2.UsageTest.argumentsOrdered":304,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":281,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":448,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":299,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":82,"org.easymock.tests2.DelegateToTest.testReturnException":290,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":173,"org.easymock.tests.MockingTest.testPartialClassMocking":13,"org.easymock.tests.MockClassControlTest.testToString":141,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":447,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":420,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":29,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":83,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":319,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":60,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":332,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":155,"org.easymock.tests2.UsageTest.wrongArguments":297,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":133,"org.easymock.samples.ExampleTest.answerVsDelegate":72,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":11,"org.easymock.tests2.UsageConstraintsTest.testNull":328,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":19,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":146,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":280,"org.easymock.tests2.CaptureTest.testPrimitive":246,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":159,"org.easymock.tests.UsageTest.moreThanOneArgument":164,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":102,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":242,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":206,"org.easymock.tests.UsageTest.argumentsOrdered":170,"org.easymock.tests.UsageVarargTest.varargIntAccepted":231,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":368,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":224,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":45,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":64,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":399,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":228,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":364,"org.easymock.tests.ReplayStateInvalidUsageTest.times":220,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":284,"org.easymock.tests2.AnswerTest.answer":266,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":397,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":317,"org.easymock.tests2.CaptureTest.testAnd":243,"org.easymock.tests2.UsageTest.strictResetToDefault":295,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":437,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":24,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":205,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":126,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":275,"org.easymock.tests2.DelegateToTest.testDelegate":293,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":176,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":139,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":358,"org.easymock.tests2.CaptureTest.testCapture1_2446744":247,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":96,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":315,"org.easymock.tests.UsageThrowableTest.throwError":147,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":214,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":373,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":208,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":405,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":432,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":215,"org.easymock.tests2.CompareToTest.testLessOrEqual":440,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":225,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":421,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":84,"org.easymock.tests2.UsageTest.niceToStrict":298,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":443,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":49,"org.easymock.tests2.MockBuilderTest.testCreateMock":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":428,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":92,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":361,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":276,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":392,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":192,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":131,"org.easymock.tests.UsageOverloadedMethodTest.overloading":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":430,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":425,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":180,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":337,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":115,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":201,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":336,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":252,"org.easymock.tests.MockClassControlTest.testEquals":145,"org.easymock.tests2.EasyMockSupportClassTest.testAll":28,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":6,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":403,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":100,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":35,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":137,"org.easymock.tests2.CaptureTest.testCaptureAll":244,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":316,"org.easymock.tests.MockNameTest.defaultName":371,"org.easymock.tests2.UsageConstraintsTest.testMatches":338,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":207,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":212,"org.easymock.samples.ExampleTest.voteForRemovals":76,"org.easymock.tests.UsageVarargTest.allKinds":239,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":160,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":138,"org.easymock.samples.BasicClassMockTest.testPrintContent":4,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":153,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":307,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":396,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":65,"org.easymock.tests2.UsageConstraintsTest.greaterThan":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":415,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":125,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":27,"org.easymock.samples.ExampleTest.voteForRemoval":73,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":258,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":374,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":22,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":8,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":294,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":409,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":273,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":413,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":172,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":395,"org.easymock.tests2.CaptureTest.testCaptureFirst":256,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":274,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":306,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":182,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":111,"org.easymock.tests2.CaptureTest.testCapture2_2446744":255,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":260,"org.easymock.tests2.UsageTest.moreThanOneArgument":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":407,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":54,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":238,"org.easymock.tests.GenericTest.testBridgedEquals":369,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":199,"org.easymock.tests.UsageExpectAndReturnTest.longType":107,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":135,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":271,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":101,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":55,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":345,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":382,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":99,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":384,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":204,"org.easymock.tests.UsageCallCountTest.tooManyCalls":200,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":354,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":429,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":88,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":152,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":40,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":46,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":193,"org.easymock.tests2.UsageConstraintsTest.testContains":335,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":32,"org.easymock.tests2.UsageConstraintsTest.testFind":327,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":203,"org.easymock.tests.MockTypeTest.fromEasyMockClass":372,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":183,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":352,"org.easymock.tests.UsageExpectAndReturnTest.object":114,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":23,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":279,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":61,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":233,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":211,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":398,"org.easymock.tests.UsageTest.exactCallCountByLastCall":171,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":445,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":410,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":402,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":70,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":120,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":229,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":179,"org.easymock.tests.MockClassControlTest.testHashCode":144,"org.easymock.tests2.EasyMockSupportTest.testVerify":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":423,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":363,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":406,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":391,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":178,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":314,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":350,"org.easymock.tests.UsageVarargTest.varargCharAccepted":232,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":308,"org.easymock.tests2.UsageTest.openCallCountByLastCall":300,"org.easymock.tests.DefaultClassInstantiatorTest.object":130,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":282,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":390,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":209,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":424,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":90,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":150,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":38,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":143,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":25,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":89,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":121,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":383,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":31,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":365,"org.easymock.tests2.UsageTest.resumeIfFailure":305,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":10,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":175,"org.easymock.tests2.StubTest.stubWithReturnValue":321,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":66,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":113,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":346,"org.easymock.tests2.SerializationTest.testAllMockedMethod":34,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":388,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":69,"org.easymock.samples.SupportTest.voteForRemovals":80,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":367,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":441,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":95,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":449,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":389,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":393,"org.easymock.tests.UsageExpectAndThrowTest.object":93,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":343,"org.easymock.tests2.DelegateToTest.testWrongClass":292,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":240,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":241,"org.easymock.tests.UsageStrictMockTest.range":188,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":278,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":39,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":94,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":412,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":169,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":222,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":132,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":353,"org.easymock.tests2.CaptureTest.testCaptureNone":251,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":380,"org.easymock.tests.UsageUnorderedTest.message":103,"org.easymock.tests.UsageVerifyTest.twoReturns":162,"org.easymock.tests.UsageVarargTest.varargByteAccepted":237,"org.easymock.tests2.ThreadingTest.testThreadSafe":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":426,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":197,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":3,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":376,"org.easymock.tests2.CaptureTest.testCapture_2617107":245,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":404,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":408,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":158,"org.easymock.tests2.UsageConstraintsTest.any":333,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":219,"org.easymock.tests2.StubTest.stub":320,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":385,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":174,"org.easymock.tests.UsageExpectAndThrowTest.longType":86,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":218,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":310,"org.easymock.tests2.SerializationTest.testClass":33,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":322,"org.easymock.tests.LimitationsTest.mockNativeMethod":16,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":123,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":7,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":37,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":313,"org.easymock.tests2.NameTest.nameForMocksControl":289,"org.easymock.tests2.MockedExceptionTest.testMockedException":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":416,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":168,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":15,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":87,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":17,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":52,"org.easymock.tests.MockingTest.testNicePartialClassMocking":14,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":59,"org.easymock.tests2.CaptureTest.testCaptureLast":250,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":359,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":44,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":331,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":344,"org.easymock.tests.MockingTest.testTwoMocks":12,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":433,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":91,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":303,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":348,"org.easymock.samples.ExampleTest.removeNonExistingDocument":77,"org.easymock.tests.UsageStrictMockTest.differentMethods":189,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":216,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":259,"org.easymock.tests2.ConstraintsToStringTest.andToString":366,"org.easymock.tests2.MockBuilderTest.testCreateMockString":56,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":417,"org.easymock.tests.UsageExpectAndThrowTest.floatType":85,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":414,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":267,"org.easymock.tests.UsageVerifyTest.twoThrows":161,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":30,"org.easymock.samples.ExampleTest.voteAgainstRemoval":74,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":26,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":435,"org.easymock.tests2.UsageConstraintsTest.testNotNull":347,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":154,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":263,"org.easymock.tests2.UsageTest.defaultResetToNice":302,"org.easymock.samples.ExampleTest.voteAgainstRemovals":71,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":119,"org.easymock.tests.UsageVarargTest.differentLength":234,"org.easymock.tests2.CallbackTest.callback":262,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":450,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":401,"org.easymock.tests.UsageTest.openCallCountByLastCall":167,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":323,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":157,"org.easymock.tests.UsageCallCountTest.tooFewCalls":195,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":42,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":134,"org.easymock.tests.UsageThrowableTest.throwCheckedException":151,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":355,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":129,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":43,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":41,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":377,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":221,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":285,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":269,"org.easymock.tests.ObjectMethodsTest.testHashCode":210,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":63,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":261,"org.easymock.tests2.NameTest.nameForNiceMock":288,"org.easymock.tests2.DependencyTest.testInterfaceMocking":318,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":62,"org.easymock.samples.ExampleTest.addDocument":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":431,"org.easymock.tests2.DelegateToTest.testStubDelegate":291,"org.easymock.tests2.AnswerTest.stubAnswer":268,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":186,"org.easymock.tests.UsageVarargTest.varargLongAccepted":236,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":190,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":122,"org.easymock.tests.UsageExpectAndReturnTest.floatType":106,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":57,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests2.ConstraintsToStringTest.orToString":360,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":387,"org.easymock.tests.UsageThrowableTest.noUpperLimit":148,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":341,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":324,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":248,"org.easymock.tests2.SerializationTest.test":270,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":105,"org.easymock.tests2.UsageConstraintsTest.testSame":329,"org.easymock.samples.SupportTest.addDocument":79,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":418,"org.easymock.tests.GenericTest.testPackageScope":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":444,"org.easymock.tests2.NameTest.nameForMock":286,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":116,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":439,"org.easymock.tests2.UsageStrictMockTest.differentMethods":312,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":108,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":97,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":411,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":127,"org.easymock.tests2.MockedExceptionTest.testRealException":265,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":446,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":356,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":68,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":400,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":309,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":156,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":223,"org.easymock.tests2.NameTest.nameForStrictMock":287,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":351,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":20,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":342,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":47,"org.easymock.tests2.UsageStrictMockTest.range":311,"org.easymock.tests2.UsageConstraintsTest.lessThan":349,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":272,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":422,"org.easymock.tests2.CaptureTest.testCaptureRightOne":253,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":442,"org.easymock.tests2.UsageConstraintsTest.testOr":330,"org.easymock.tests.UsageRangeTest.combination":124,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":18,"org.easymock.tests.UsageTest.wrongArguments":166,"org.easymock.tests2.MockBuilderTest.testWithConstructor":436,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":419,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":9,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":109,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":117,"org.easymock.tests.UsageVarargTest.varargShortAccepted":235,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":198,"org.easymock.tests2.UsageConstraintsTest.cmpTo":334,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":394,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":301,"org.easymock.tests2.CaptureTest.testCaptureFromStub":254,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":213,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":48,"org.easymock.tests.UsageTest.unexpectedCallWithArray":165,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":185,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":196,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":438,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":118,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":187,"org.easymock.tests2.UsageConstraintsTest.constraints":325,"org.easymock.samples.ExampleTest.addAndChangeDocument":78,"org.easymock.tests2.ConstraintsToStringTest.notToString":362,"org.easymock.tests.UsageStrictMockTest.testVerify":191,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":81,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":136,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":249,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":36,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":226,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":110,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":181,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":227,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":230,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":277}}]

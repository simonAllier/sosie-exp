[{"failures":[],"binaryOperator":"((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \")","name":"math","position":"org.easymock.internal.MocksBehavior:200","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtInvocationImpl"},"status":0},{"failures":[0,1,2,3],"variableMapping":{"support":"support"},"name":"add","transplant":{"sourceCode":"this.org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType())","position":"org.easymock.internal.RecordState:80","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1582","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:82","type":"CtIfImpl"},"status":-2},{"failures":[4],"variableMapping":{"this":"this","mocks":"mocks"},"name":"replace","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","position":"org.easymock.EasyMock:2024","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ObjectMethodsFilter:76","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.ObjectMethodsFilter:92","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.io.ObjectInputStream.readObject()","position":"org.easymock.internal.DefaultClassInstantiator:203","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"method call on the mock needed before setting \" + java.lang.String)","name":"math","position":"org.easymock.internal.RecordState:235","type":"mutation","status":-2},{"failures":[],"binaryOperator":"(org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\")","name":"math","position":"org.easymock.internal.matchers.CompareTo:49","type":"mutation","status":-2},{"failures":[5,6,7,8,9,10,11,12,13,14],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:181","type":"CtReturnImpl"},"status":-1},{"failures":[15],"variableMapping":{"toMock":"toMock","name":"name","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"status":-1},{"failures":[16,17,18,19],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","position":"org.easymock.internal.LastControl:51","type":"CtInvocationImpl"},"status":-1},{"failures":[20,21,22,23,24],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.internal.JavaProxyFactory()","position":"org.easymock.internal.MocksControl:35","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","position":"org.easymock.internal.matchers.CompareTo:49","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:196","type":"CtAssignmentImpl"},"status":-2},{"failures":[25],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"))","position":"org.easymock.internal.BridgeMethodResolver:94","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","position":"org.easymock.internal.ClassProxyFactory:273","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","position":"org.easymock.internal.EasyMockProperties:135","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n        continue;\n    } \n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n        continue;\n    } \n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n    org.easymock.internal.Invocation.validateCaptures();\n    return org.easymock.internal.Result;\n} finally {\n    org.easymock.internal.Invocation.clearCaptures();\n}","position":"org.easymock.internal.UnorderedBehavior:51","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.Injector:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:181","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","position":"org.easymock.EasyMock:1802","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:181","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","position":"org.easymock.internal.Invocation:118","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"equalsMethod","method":"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.internal.BridgeMethodResolver:191","type":"mutation","return":"return false","status":0},{"failures":[26,27,28,29,30,31],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.util.List<java.lang.reflect.Field>) {\n    final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field);\n    if (org.easymock.internal.InjectionTarget == null) {\n        continue;\n    } \n    final org.easymock.internal.Injection org.easymock.internal.Injection = org.easymock.internal.Injector.org.easymock.internal.Injector.findUniqueAssignable(java.util.List<org.easymock.internal.Injection>, org.easymock.internal.InjectionTarget);\n    if (org.easymock.internal.Injection == null) {\n        continue;\n    } \n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n}","position":"org.easymock.internal.Injector:181","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Captures:53","type":"CtReturnImpl"},"status":-2},{"failures":[32],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1248","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.MocksBehavior:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","position":"org.easymock.internal.ReflectionUtils:108","type":"CtThrowImpl"},"status":-2},{"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:48","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"status":0},{"failures":[51,51,52,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,12,70,71,72,73,74,75,76,77,78,0,79,80,81,82,83,48,1,84,49,85,50,86,87,88,89,90,15,2,91,92,93,94,95,96,97],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"bridgeMethod":"candidateMethod"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:115","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.util.List<T>.toString()","position":"org.easymock.Capture:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","position":"org.easymock.Capture:131","type":"CtIfImpl"},"status":-2},{"failures":[98],"variableMapping":{"actual":"actual"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"status":-1},{"failures":[99],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.MocksBehavior:124","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = java.lang.Object[].int","position":"org.easymock.internal.Invocation:61","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"variableMapping":{"state":"state","behavior":"behavior"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:213","type":"CtAssignmentImpl"},"status":0},{"failures":[],"binaryOperator":"(\"Failed to read \" + java.lang.String)","name":"math","position":"org.easymock.internal.EasyMockProperties:67","type":"mutation","status":-2},{"failures":[],"variableMapping":{"result":"method"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:113","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.MockBuilder:129","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","position":"org.easymock.internal.InjectionPlan:36","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","position":"org.easymock.EasyMock:1594","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:191","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:131","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","position":"org.easymock.internal.RecordState:256","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:642","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"primitiveType"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?>[][int] = java.lang.Class<?>","position":"org.easymock.internal.MethodSerializationWrapper:70","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:827","type":"mutation","return":"return 0","status":0},{"failures":[100],"variableMapping":{"answer":"answer"},"name":"add","transplant":{"sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:274","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:309","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.EasyMockSupport:508","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:172","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:182","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(long[]))","position":"org.easymock.EasyMock:1659","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","position":"org.easymock.internal.ObjectMethodsFilter:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object","position":"org.easymock.internal.BridgeMethodResolver:223","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","position":"org.easymock.Capture:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n    return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:88","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject)","position":"org.easymock.internal.Injector:107","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.InjectionTarget:58","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","position":"org.easymock.internal.EasyMockProperties:44","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:853","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"status":-2},{"failures":[12,101,70],"variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"},"name":"replace","transplant":{"sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:109","type":"CtAssignmentImpl"},"status":-1},{"failures":[26,27,102,103,104,105,106,107,108,109,110,53,54,55,111,112,113,114,56,115,116,117,118,119,120,121,122,33,123,124,125,126,127,128,35,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,99,161,162,163,61,62,63,164,165,166,167,168,36,169,170,171,172,173,174,175,176,177,178,179,37,38,180,181,182,183,184,40,41,42,185,186,187,188,189,190,191,192,64,65,66,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,43,232,233,234,4,235,236,237,238,239,240,44,45,241,69,242,243,244,245,246,247,248,249,250,46,251,252,253,12,101,70,47,254,255,256,257,258,259,260,261,262,263,264,19,265,266,267,268,269,71,72,73,74,270,75,76,271,272,0,80,82,83,1,85,50,273,86,87,88,90,2,91,92,93,94,95,96,274,275,97,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1384","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} ","position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","position":"org.easymock.internal.MethodSerializationWrapper:35","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[293,294],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","position":"org.easymock.internal.EasyMockProperties:127","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","position":"org.easymock.internal.LastControl:133","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:623","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:708","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class })","position":"org.easymock.internal.DefaultClassInstantiator:181","type":"CtAssignmentImpl"},"status":-2},{"failures":[51,51,52,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,12,70,71,72,73,74,75,76,77,78,0,79,80,81,82,83,48,1,84,49,85,50,86,87,88,89,90,15,2,91,92,93,94,95,96,97],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.concurrent.locks.ReentrantLock()","position":"org.easymock.internal.ReplayState:32","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:893","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.setPotentialValue(null);\n}","position":"org.easymock.internal.Invocation:173","type":"CtForEachImpl"},"status":-2},{"failures":[295,296,297],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","position":"org.easymock.internal.DefaultClassInstantiator:136","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:681","type":"CtInvocationImpl"},"status":-2},{"failures":[169,170,175,251,252],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.MocksBehavior:124","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"status":-1},{"failures":[217],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","position":"org.easymock.EasyMock:1862","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType())","position":"org.easymock.internal.BridgeMethodResolver:329","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.LastControl:98","type":"CtReturnImpl"},"status":-2},{"failures":[215,298,255,256,260],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","position":"org.easymock.internal.LastControl:95","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:80","type":"CtInvocationImpl"},"status":-1},{"failures":[34,124,125,126,127,128,35,299,167,168,300,301,302,303,304,248],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","position":"org.easymock.EasyMock:1542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl"},"status":-2},{"failures":[295,296,297],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:90","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:509","type":"CtReturnImpl"},"status":-2},{"failures":[26,51,52,27,102,103,104,105,106,107,108,109,110,53,54,55,111,112,113,305,56,115,116,117,118,119,120,306,307,308,121,122,33,123,34,124,125,126,127,128,35,309,310,311,312,313,314,315,316,317,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,99,161,162,163,61,62,63,318,319,320,321,322,164,323,324,325,326,165,166,167,168,36,169,170,171,175,177,178,179,37,38,181,182,183,184,39,40,41,42,302,327,185,186,187,188,189,190,191,192,64,328,328,65,66,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,32,216,329,217,218,298,219,220,221,222,330,223,224,331,225,226,332,227,333,228,334,229,230,231,43,232,233,234,4,235,236,237,238,239,240,44,45,241,335,336,69,337,338,339,340,341,242,243,244,245,246,247,248,249,250,46,251,252,253,12,101,70,47,254,255,342,256,343,257,344,258,345,259,346,260,98,261,347,262,263,264,19,265,266,267,268,269,71,72,73,74,270,75,76,271,272,77,0,80,81,82,83,48,1,49,85,50,273,86,87,88,89,90,15,2,91,92,93,94,95,96,274,275,97,276,277,278,279,280,281,282,283,284,285,286,287,288],"variableMapping":{"stack":"stack"},"name":"replace","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","position":"org.easymock.internal.LastControl:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","position":"org.easymock.internal.LastControl:128","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:380","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:78","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:126","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n    return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:88","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\", \")","position":"org.easymock.internal.ArgumentToString:91","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","position":"org.easymock.internal.RecordState:321","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","position":"org.easymock.internal.ClassProxyFactory:171","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.internal.UnorderedBehavior>.get(((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - 1))","position":"org.easymock.internal.MocksBehavior:80","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"status":-2},{"failures":[348],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","position":"org.easymock.internal.ReflectionUtils:108","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","position":"org.easymock.internal.ObjectMethodsFilter:45","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>.getName(), java.lang.Boolean.java.lang.Class<java.lang.Boolean>)","position":"org.easymock.internal.MethodSerializationWrapper:33","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:420","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"org.easymock.internal.LastControl.NO_MATCHERS_FOUND","key":"org.easymock.internal.LastControl.NO_MATCHERS_FOUND"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(this.org.easymock.internal.LastControl.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (this.org.easymock.internal.LastControl.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:85","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.ClassCastException java.lang.ClassCastException","position":"org.easymock.internal.MocksControl:159","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)) {\n    return (java.lang.String + \".\") + java.lang.String;\n} ","position":"org.easymock.internal.Invocation:153","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","position":"org.easymock.internal.LastControl:95","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object)","position":"org.easymock.internal.MocksControl:156","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} ","position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl"},"status":-2},{"failures":[349],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"status":-1},{"failures":[350,351,352],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.ArgumentToString:48","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":188,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":293,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":36,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":90,"org.easymock.tests2.MockedExceptionTest.testRealException":337,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":166,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":146,"org.easymock.tests.UsageVarargTest.varargIntAccepted":153,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":121,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":10,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":213,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":26,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":97,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":16,"org.easymock.tests2.UsageConstraintsTest.testContains":222,"org.easymock.tests.UsageCallCountTest.tooManyCalls":41,"org.easymock.tests2.UsageConstraintsTest.testFind":216,"org.easymock.tests2.CompareToTest.testGreateThan":21,"org.easymock.tests.UsageVarargTest.allKinds":99,"org.easymock.tests2.StubTest.stubWithReturnValue":275,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":344,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":308,"org.easymock.tests2.CaptureTest.testCaptureAll":342,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":302,"org.easymock.samples.ExampleTest.addAndChangeDocument":110,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":77,"org.easymock.tests.UsageVarargTest.varargCharAccepted":154,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":8,"org.easymock.tests2.CaptureTest.testCaptureFromStub":98,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":7,"org.easymock.tests.UsageVerifyTest.twoThrows":37,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":116,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":155,"org.easymock.tests2.DelegateToTest.testReturnException":244,"org.easymock.tests2.CompareToTest.testLessOrEqual":24,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":14,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":235,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":331,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":287,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":352,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":249,"org.easymock.tests2.CaptureTest.testAnd":255,"org.easymock.tests.UsageStrictMockTest.testVerify":172,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":139,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":112,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":346,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":57,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":143,"org.easymock.tests2.UsageConstraintsTest.testMatches":224,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":310,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":71,"org.easymock.tests2.UsageConstraintsTest.testNull":329,"org.easymock.tests2.EasyMockSupportClassTest.testAll":93,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":281,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":147,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":206,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":254,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":11,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":56,"org.easymock.tests.UsageThrowableTest.throwError":185,"org.easymock.tests2.UsageConstraintsTest.greaterThan":225,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":151,"org.easymock.samples.SupportTest.addDocument":102,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":119,"org.easymock.tests2.StubTest.stub":274,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":173,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":30,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":321,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":115,"org.easymock.tests.UsageExpectAndReturnTest.object":203,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":284,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":332,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":3,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":160,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":253,"org.easymock.tests.UsageExpectAndThrowTest.object":141,"org.easymock.tests2.DelegateToTest.testWrongClass":246,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":264,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":300,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":316,"org.easymock.tests2.UsageTest.moreThanOneArgument":233,"org.easymock.tests.UsageVarargTest.varargByteAccepted":159,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":138,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":68,"org.easymock.samples.ExampleTest.voteAgainstRemoval":107,"org.easymock.tests.UsageTest.wrongArguments":124,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":312,"org.easymock.tests.CapturesMatcherTest.test":328,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":191,"org.easymock.tests.UsageVarargTest.varargShortAccepted":157,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":142,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":349,"org.easymock.tests2.UsageTest.defaultResetToNice":238,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":301,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":303,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":69,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":320,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":19,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":27,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":83,"org.easymock.tests2.MockBuilderTest.testCreateMock":48,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":299,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":78,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":265,"org.easymock.tests2.SerializationTest.testAllMockedMethod":70,"org.easymock.tests2.NameTest.nameForMocksControl":292,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":18,"org.easymock.samples.ExampleTest.voteAgainstRemovals":104,"org.easymock.tests2.CompareToTest.testCompareEqual":22,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":248,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":177,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":118,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":161,"org.easymock.tests2.CaptureTest.testCapture1_2446744":257,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":45,"org.easymock.tests.LimitationsTest.mockNativeMethod":64,"org.easymock.tests2.DelegateToTest.testStubDelegate":245,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":350,"org.easymock.tests.UsageUnorderedTest.message":42,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":17,"org.easymock.samples.ExampleTest.answerVsDelegate":105,"org.easymock.samples.ExampleTest.voteForRemoval":106,"org.easymock.tests.UsageCallCountTest.tooFewCalls":182,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":202,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":184,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":267,"org.easymock.tests.UsageVerifyTest.twoReturns":38,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":140,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":197,"org.easymock.tests2.DependencyTest.testInterfaceMocking":271,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":114,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":276,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":315,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":279,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":13,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":341,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":298,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":120,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":171,"org.easymock.tests.MockingTest.testTwoMocks":60,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":199,"org.easymock.tests2.CaptureTest.testCaptureRightOne":260,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":181,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":306,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":335,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":88,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":176,"org.easymock.tests2.UsageConstraintsTest.cmpTo":221,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":180,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":294,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":204,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":295,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":73,"org.easymock.tests2.MockedExceptionTest.testMockedException":336,"org.easymock.tests.UsageThrowableTest.throwCheckedException":189,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":150,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":324,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":334,"org.easymock.samples.PartialClassMockTest.testGetArea":53,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":179,"org.easymock.samples.ExampleTest.voteForRemovals":109,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":187,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":163,"org.easymock.samples.ConstructorCalledMockTest.testTax":51,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":223,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":113,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":317,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":87,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":100,"org.easymock.tests2.UsageTest.argumentsOrdered":240,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":33,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":269,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":198,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":309,"org.easymock.tests2.AnswerTest.answer":266,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":25,"org.easymock.tests.MockingTest.testNicePartialClassMocking":62,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":168,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":194,"org.easymock.tests2.UsageConstraintsTest.any":220,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":201,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":6,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":322,"org.easymock.tests2.CompareToTest.testLessThan":20,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":174,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":326,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":286,"org.easymock.tests.UsageExpectAndThrowTest.longType":134,"org.easymock.tests2.CallbackTest.callback":47,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":148,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":95,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":283,"org.easymock.tests2.NameTest.nameForMock":289,"org.easymock.tests.UsageTest.argumentsOrdered":128,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":32,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":82,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":330,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":211,"org.easymock.tests2.MockBuilderTest.testCreateMockString":49,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":117,"org.easymock.tests2.NameTest.nameForStrictMock":290,"org.easymock.tests2.CaptureTest.testCaptureNone":259,"org.easymock.tests2.SerializationTest.test":101,"org.easymock.tests.UsageExpectAndReturnTest.longType":196,"org.easymock.tests2.SerializationTest.testClass":12,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":258,"org.easymock.tests2.CaptureTest.testCaptureFirst":347,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":227,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":54,"org.easymock.tests2.UsageTest.niceToStrict":4,"org.easymock.tests2.EasyMockSupportTest.testVerify":288,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":314,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":313,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":81,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":165,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":136,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":228,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":43,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":144,"org.easymock.tests2.UsageTest.strictResetToDefault":232,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":1,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":91,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":210,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":122,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":131,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":219,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":200,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":270,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":338,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":89,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":86,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":152,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":226,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":85,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":130,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":63,"org.easymock.tests2.UsageConstraintsTest.testOr":218,"org.easymock.tests2.DelegateToTest.testDelegate":247,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":263,"org.easymock.tests2.UsageConstraintsTest.testNotNull":229,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":46,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":241,"org.easymock.tests2.CaptureTest.testCapture_2617107":256,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":348,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":58,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":192,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":205,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":327,"org.easymock.tests2.ThreadingTest.testThreadSafe":262,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":5,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":237,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":296,"org.easymock.tests.UsageThrowableTest.noUpperLimit":186,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":323,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":72,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":74,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":285,"org.easymock.tests.UsageExpectAndReturnTest.floatType":195,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":277,"org.easymock.tests2.UsageTest.wrongArguments":234,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":340,"org.easymock.tests2.UsageTest.resumeIfFailure":44,"org.easymock.tests2.UsageConstraintsTest.testSame":217,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":75,"org.easymock.tests.UsageOverloadedMethodTest.overloading":162,"org.easymock.samples.SupportTest.voteForRemovals":103,"org.easymock.tests.UsageRangeTest.combination":175,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":190,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":29,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":52,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":230,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":66,"org.easymock.tests.UsageTest.openCallCountByLastCall":125,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":137,"org.easymock.tests2.NameTest.nameForNiceMock":291,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":31,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":178,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":333,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":164,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":250,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":273,"org.easymock.tests2.CaptureTest.testPrimitive":343,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":207,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":145,"org.easymock.samples.BasicClassMockTest.testPrintContent":55,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":307,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":318,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":15,"org.easymock.tests.UsageExpectAndThrowTest.floatType":133,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":40,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":50,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":208,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":242,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":28,"org.easymock.tests2.UsageStrictMockTest.differentMethods":252,"org.easymock.tests.UsageTest.exactCallCountByLastCall":35,"org.easymock.tests2.AnswerTest.stubAnswer":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":278,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":67,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":282,"org.easymock.tests2.CaptureTest.testCaptureLast":345,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":84,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":39,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":132,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":183,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":94,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":272,"org.easymock.tests.UsageStrictMockTest.range":169,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":126,"org.easymock.tests.UsageTest.unexpectedCallWithArray":34,"org.easymock.tests.MockingTest.testPartialClassMocking":61,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":209,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":239,"org.easymock.tests2.UsageConstraintsTest.constraints":215,"org.easymock.samples.ExampleTest.addDocument":108,"org.easymock.tests2.CompareToTest.testGreateOrEqual":23,"org.easymock.tests2.UsageConstraintsTest.lessThan":231,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":305,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":339,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":127,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":111,"org.easymock.tests.UsageVarargTest.varargLongAccepted":158,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":325,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":297,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":2,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":92,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":167,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":149,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":96,"org.easymock.tests2.UsageStrictMockTest.range":251,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":76,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":79,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":311,"org.easymock.tests.UsageTest.moreThanOneArgument":123,"org.easymock.tests2.UsageTest.openCallCountByLastCall":236,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":319,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":351,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":0,"org.easymock.tests.UsageStrictMockTest.differentMethods":170,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":9,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":280,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":59,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":214,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":80,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":135,"org.easymock.tests.UsageVarargTest.differentLength":156,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":193,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":129,"org.easymock.tests2.CaptureTest.testCapture2_2446744":261,"org.easymock.tests.GenericTest.testPackageScope":65}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"failures":[43,44],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[45,46],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[79],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[81,82,83,84,85,86],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[87],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.EasyMock:1519","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:52","sourceCode":"return int == int","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[88],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"result","maximum":"result"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:95","sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[89],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[90,91],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests.UsageTest.openCallCountByLastThrowable":19,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":78,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":7,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":24,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":3,"org.easymock.tests2.UsageTest.argumentsOrdered":61,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":18,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":13,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":35,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":8,"org.easymock.tests2.StubTest.stubWithReturnValue":0,"org.easymock.tests2.CompareToTest.testCompareEqual":88,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":14,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":77,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":11,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":84,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":68,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":47,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":52,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":89,"org.easymock.tests2.UsageStrictMockTest.range":56,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":76,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":32,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":41,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":15,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":65,"org.easymock.tests.UsageExpectAndThrowTest.object":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":33,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":28,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":60,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":91,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":86,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":79,"org.easymock.tests.UsageThrowableTest.throwError":43,"org.easymock.tests.UsageStrictMockTest.differentMethods":67,"org.easymock.tests2.UsageTest.wrongArguments":59,"org.easymock.tests.UsageStrictMockTest.range":66,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":83,"org.easymock.tests.UsageTest.wrongArguments":72,"org.easymock.tests2.ConstraintsToStringTest.andToString":51,"org.easymock.tests2.ConstraintsToStringTest.orToString":48,"org.easymock.tests.UsageExpectAndThrowTest.floatType":22,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":63,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":5,"org.easymock.tests.UsageVerifyTest.twoThrows":69,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":85,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":31,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":62,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":82,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":73,"org.easymock.tests.UsageTest.moreThanOneArgument":71,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":39,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":40,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":10,"org.easymock.tests.UsageUnorderedTest.message":75,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":21,"org.easymock.tests2.ThreadingTest.testChangeDefault":90,"org.easymock.tests2.UsageConstraintsTest.testNotNull":80,"org.easymock.tests2.UsageTest.moreThanOneArgument":58,"org.easymock.tests.UsageVerifyTest.twoReturns":70,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":1,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":6,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":42,"org.easymock.tests.DefaultClassInstantiatorTest.object":81,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":45,"org.easymock.tests.UsageTest.argumentsOrdered":74,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":53,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":54,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":27,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":44,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":17,"org.easymock.tests2.UsageStrictMockTest.differentMethods":57,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":16,"org.easymock.tests.UsageExpectAndThrowTest.longType":23,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":12,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":50,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":34,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":26,"org.easymock.tests2.ConstraintsToStringTest.notToString":49,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":9,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":87,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":46,"org.easymock.tests2.MockedExceptionTest.testRealException":4,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":55,"org.easymock.tests2.MockedExceptionTest.testMockedException":2,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":25,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":64,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":37}}]

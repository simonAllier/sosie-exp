[{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:33","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>.getName(), java.lang.Boolean.java.lang.Class<java.lang.Boolean>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:52","failures":[0],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[47,48],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[49],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[50,51,52,53,54,55,56,57,58,59],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[60,61,62,63,64,65,66,67,68,69,70],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:70","failures":[71,1,72,73,74,75,76,77,78,79,80,81,82,83,84,85,16,86,87,88,89,90,91,92,93,94,60,95,61,96,97,98,99,100,101,102,62,103,104,105,106,107,108,63,64,109,65,110,66,67,111,68,112,113,114,115,116,117,0,118,119,69,120,121,122,123,70,124,125],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[78,126],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[71,1,127,128,129,130,131,132,133,134,135,136,137,72,73,74,75,76,77,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,78,79,153,154,155,156,157,2,158,3,4,5,6,7,8,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,9,180,181,182,183,10,184,185,186,187,80,81,82,83,84,188,189,190,191,192,193,194,195,11,196,197,198,199,200,201,202,203,204,205,206,207,85,208,209,210,211,212,213,12,13,14,15,16,17,86,87,214,215,216,217,218,219,220,221,222,223,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,224,225,226,227,228,39,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,248,249,249,250,251,252,253,254,255,256,257,88,89,258,259,90,260,261,262,263,264,40,265,266,267,268,269,270,271,41,272,273,274,275,276,277,42,278,279,280,281,282,43,44,45,46,283,284,285,286,91,55,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,92,311,312,313,314,315,316,317,318,93,94,319,320,321,322,60,95,61,96,97,98,99,100,101,102,62,103,104,105,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,107,108,63,64,109,65,110,66,67,111,112,113,114,115,116,117,0,118,119,69,120,121,122,123,70,124,125,59,341,342,343],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.Range:40","failures":[71,1,344,345,346,127,128,129,130,131,132,133,134,135,347,136,137,348,349,350,72,73,74,75,76,77,138,139,140,141,142,143,144,145,146,147,148,149,351,352,150,353,151,152,78,79,153,154,155,156,157,2,158,3,4,5,6,7,8,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,354,179,355,356,357,358,9,180,181,182,183,10,184,185,186,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,187,80,81,82,83,84,188,189,190,191,192,193,194,195,11,386,196,197,198,199,200,387,201,202,203,204,205,206,207,85,388,389,390,391,208,209,210,392,393,394,395,396,397,211,212,398,213,399,400,401,12,13,14,15,16,17,402,403,404,405,406,407,408,409,410,411,412,413,414,86,87,415,214,215,216,217,218,219,220,221,222,223,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,224,225,226,227,228,39,229,230,231,232,233,416,234,47,417,418,419,48,420,421,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,422,423,424,425,426,257,427,428,429,430,431,432,433,434,88,89,258,259,90,260,261,262,263,264,40,435,436,437,438,439,440,441,265,266,267,268,442,269,270,271,443,41,272,273,274,275,276,277,42,278,279,280,281,282,43,44,45,46,283,284,285,286,91,55,56,444,445,287,288,289,290,291,446,292,447,448,449,293,294,295,57,296,450,58,297,298,451,299,452,453,454,300,455,456,301,457,458,459,460,461,462,463,464,465,302,466,467,468,469,470,303,471,472,304,305,306,307,308,309,310,473,92,474,475,311,312,313,314,476,477,315,478,479,316,317,318,93,480,94,481,319,320,321,482,322,60,95,61,96,97,98,99,100,101,102,62,103,104,105,323,324,325,326,327,328,329,330,331,332,333,334,335,106,483,484,485,486,487,336,488,489,490,491,492,493,337,338,339,340,107,108,63,64,494,109,65,110,66,67,111,68,112,113,114,115,116,117,0,118,119,69,120,121,122,123,70,124,125,59,341,342,343],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[77,78,154,495,181,182,184,185,197,39,229,261,274,279,280],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[496,118],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:233","failures":[71,1,344,345,346,127,129,130,131,132,134,135,136,137,348,72,73,74,75,76,77,150,151,152,78,79,153,154,155,156,157,2,158,3,4,5,6,7,8,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,357,9,180,182,183,10,184,185,186,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,187,80,81,82,83,84,193,195,11,196,198,199,200,201,202,203,204,205,206,207,85,388,389,390,394,211,212,213,12,13,14,15,16,17,403,404,86,87,222,223,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,224,225,226,227,228,39,229,235,236,237,238,239,240,241,242,243,244,245,247,248,248,249,249,250,251,252,253,254,255,256,257,88,89,258,259,90,260,261,262,263,264,40,265,266,267,268,269,270,271,41,272,273,274,275,276,277,42,278,279,280,281,282,43,44,45,46,283,284,285,286,91,55,287,288,289,290,292,293,295,296,298,300,301,302,303,304,305,306,307,308,309,92,312,313,314,315,478,479,316,317,318,93,94,481,319,320,321,482,322,60,95,61,96,97,98,99,100,101,102,62,103,104,105,323,324,325,326,327,328,329,330,331,332,333,334,335,336,107,108,63,64,109,65,110,66,67,111,68,112,113,114,115,116,117,0,118,119,69,120,121,122,123,70,124,125,59,341,342,343],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[347,136,137,348,349],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[365,478,317,318],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[93,94,122,70],"status":-1,"binaryOperator":"java.lang.Object != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"failures":[497],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[347],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:632","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[71,112],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[498],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[499],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[1,74,75,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:174","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[295],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"this.org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[147],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"shouldBeUsedInOneThread"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[63,67],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[71,127,128,129,130,131,132,136,137,72,73,76,150,152,79,155,156,157,158,3,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,187,80,81,82,83,84,188,189,190,191,192,196,198,199,200,201,202,204,205,206,207,85,211,212,213,12,13,14,15,16,17,86,87,215,223,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,224,225,226,227,228,39,229,230,231,232,233,235,236,237,238,239,240,241,242,243,244,245,247,248,249,250,251,252,253,254,255,256,257,88,89,259,90,262,263,264,40,265,266,267,268,269,270,271,272,273,275,276,278,281,43,44,45,46,283,284,91,55,287,288,289,290,291,293,294,295,296,300,301,302,303,304,306,307,308,309,92,311,313,315,316,317,318,93,94,319,320,322,60,95,61,96,98,99,100,101,102,62,105,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,107,108,63,64,109,65,110,66,67,111,112,113,114,115,116,117,0,118,119,69,120,121,123,70,124,125,59,341,342,343],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[71,1,344,345,346,127,128,129,130,131,132,133,134,135,347,136,137,348,349,350,72,73,74,75,76,77,138,139,140,141,142,143,144,145,146,147,148,149,351,352,150,353,151,152,78,79,153,154,155,156,157,2,158,3,4,5,6,7,8,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,354,179,355,356,357,358,9,180,181,182,183,10,184,185,186,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,187,80,81,82,83,84,188,189,190,191,192,193,194,195,11,386,196,197,198,199,200,387,201,202,203,204,205,206,207,85,388,389,390,391,208,209,210,392,393,394,395,396,397,211,212,398,213,399,400,401,12,13,14,15,16,17,402,403,404,405,406,407,408,409,410,411,412,413,414,86,87,415,214,215,216,217,218,219,220,221,222,223,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,224,225,226,227,228,39,229,230,231,232,233,416,234,47,417,418,419,48,420,421,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,422,423,424,425,426,257,427,428,429,430,431,432,433,434,88,89,258,259,90,260,261,262,263,264,40,435,436,437,438,439,440,441,265,266,267,268,442,269,270,271,443,41,272,273,274,275,276,277,42,278,279,280,281,282,43,44,45,46,283,284,285,286,91,55,56,444,445,287,288,289,290,291,446,292,447,448,449,293,294,295,57,296,450,58,297,298,451,299,452,453,454,300,455,456,301,457,458,459,460,461,462,463,464,465,302,466,467,468,469,470,303,471,472,304,305,306,307,308,309,310,473,92,474,475,311,312,313,314,476,477,315,478,479,316,317,318,93,480,94,481,319,320,321,482,322,60,95,61,96,97,98,99,100,101,102,62,103,104,105,323,324,325,326,327,328,329,330,331,332,333,334,335,106,483,484,485,486,487,336,488,489,490,491,492,493,337,338,339,340,107,108,63,64,494,109,65,110,66,67,111,68,112,113,114,115,116,117,0,118,119,69,120,121,122,123,70,124,125,59,341,342,343],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[500,501,502],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[117],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:41","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[193,241,315,316,318,93,94,343],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[503,504],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":64,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":9,"org.easymock.tests2.UsageTest.argumentsOrdered":280,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":333,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":369,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":276,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":251,"org.easymock.tests2.DelegateToTest.testReturnException":319,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":13,"org.easymock.tests.MockingTest.testPartialClassMocking":211,"org.easymock.tests.MockClassControlTest.testToString":216,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":445,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":357,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":460,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":19,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":301,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":89,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":50,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":111,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":72,"org.easymock.tests2.UsageTest.wrongArguments":274,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":493,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":232,"org.easymock.samples.ExampleTest.answerVsDelegate":241,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":412,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":400,"org.easymock.tests2.UsageConstraintsTest.testNull":65,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":307,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":221,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":332,"org.easymock.tests2.CaptureTest.testPrimitive":96,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":76,"org.easymock.tests.UsageTest.moreThanOneArgument":180,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":38,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":306,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":237,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":402,"org.easymock.tests.UsageTest.argumentsOrdered":185,"org.easymock.tests.UsageVarargTest.varargIntAccepted":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":374,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":80,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":502,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":291,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":437,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":431,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":361,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":84,"org.easymock.tests.ReplayStateInvalidUsageTest.times":146,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":336,"org.easymock.tests2.DependencyTest.testClassMocking":433,"org.easymock.tests2.AnswerTest.answer":315,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":68,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":376,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":340,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":409,"org.easymock.tests2.CaptureTest.testAnd":60,"org.easymock.tests2.UsageTest.strictResetToDefault":272,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":448,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":311,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":236,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":226,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":327,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":406,"org.easymock.tests2.DelegateToTest.testDelegate":322,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":34,"org.easymock.tests.LimitationsTest.mockFinalMethod":353,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":16,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":192,"org.easymock.tests2.DependencyTest.testClassMockingSupport":434,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":354,"org.easymock.tests2.CaptureTest.testCapture1_2446744":97,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":473,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":32,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":338,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":140,"org.easymock.tests.UsageThrowableTest.throwError":2,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":411,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":432,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":350,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":472,"org.easymock.samples.PartialClassMockTest.testGetArea":250,"org.easymock.tests.MockingTest.testInterfaceMocking":398,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":141,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":81,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":461,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":393,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":20,"org.easymock.tests2.UsageTest.niceToStrict":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":359,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":293,"org.easymock.tests2.MockBuilderTest.testCreateMock":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":468,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":490,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":126,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":28,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":328,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":408,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":346,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":127,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":230,"org.easymock.tests.UsageOverloadedMethodTest.overloading":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":470,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":465,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":116,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":11,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":170,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":222,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":115,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":102,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":387,"org.easymock.tests.MockClassControlTest.testEquals":220,"org.easymock.tests2.EasyMockSupportClassTest.testAll":300,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":137,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":36,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":190,"org.easymock.tests2.CaptureTest.testCaptureAll":95,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":339,"org.easymock.tests.MockNameTest.defaultName":415,"org.easymock.tests2.UsageConstraintsTest.testMatches":117,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":138,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":238,"org.easymock.samples.ExampleTest.voteForRemovals":245,"org.easymock.tests2.ConstraintsToStringTest.notNullToString":497,"org.easymock.tests.UsageVarargTest.allKinds":85,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":228,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":191,"org.easymock.samples.BasicClassMockTest.testPrintContent":254,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":7,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":258,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":482,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":428,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":17,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":420,"org.easymock.tests2.UsageConstraintsTest.greaterThan":118,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":455,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":225,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":314,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":421,"org.easymock.samples.ExampleTest.voteForRemoval":242,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":476,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":284,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":413,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":438,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":310,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":187,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":41,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":366,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":325,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":453,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":12,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":481,"org.easymock.tests2.CaptureTest.testCaptureFirst":105,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":365,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":326,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":282,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":197,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":166,"org.easymock.tests2.CaptureTest.testCapture2_2446744":104,"org.easymock.tests2.UsageTest.moreThanOneArgument":273,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":286,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":377,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":207,"org.easymock.tests.GenericTest.testBridgedEquals":349,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":134,"org.easymock.tests.UsageExpectAndReturnTest.longType":162,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":188,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":323,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":37,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":394,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":122,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":35,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":384,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":235,"org.easymock.tests.UsageCallCountTest.tooManyCalls":135,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":469,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":167,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":492,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":24,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":6,"org.easymock.tests.MockingTest.testNiceClassMocking":401,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":266,"org.easymock.tests.MockingTest.testClassMocking":396,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":128,"org.easymock.tests2.UsageConstraintsTest.testContains":114,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":45,"org.easymock.tests2.UsageConstraintsTest.testFind":109,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":18,"org.easymock.tests.MockTypeTest.fromEasyMockClass":410,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":151,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":94,"org.easymock.tests.UsageExpectAndReturnTest.object":169,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":92,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":491,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":331,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":51,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":202,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":210,"org.easymock.tests.UsageTest.exactCallCountByLastCall":186,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":364,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":403,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":356,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":56,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":175,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":198,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":195,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":423,"org.easymock.tests.MockClassControlTest.testHashCode":219,"org.easymock.tests2.EasyMockSupportTest.testVerify":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":463,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":404,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":193,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":345,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":337,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":106,"org.easymock.tests.UsageVarargTest.varargCharAccepted":201,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":416,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":382,"org.easymock.tests2.UsageTest.openCallCountByLastCall":277,"org.easymock.tests.DefaultClassInstantiatorTest.object":234,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":334,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":344,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":208,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":495,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":464,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":26,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":4,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":486,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":422,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":218,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":312,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":25,"org.easymock.tests.CapturesMatcherTest.test":503,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":176,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":383,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":303,"org.easymock.tests2.UsageTest.resumeIfFailure":281,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":407,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":436,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":15,"org.easymock.tests2.StubTest.stubWithReturnValue":40,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":57,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":168,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":123,"org.easymock.tests2.SerializationTest.testAllMockedMethod":342,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":375,"org.easymock.samples.SupportTest.voteForRemovals":256,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":347,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":425,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":31,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":381,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":478,"org.easymock.tests.UsageExpectAndThrowTest.object":29,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":358,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":120,"org.easymock.tests2.DelegateToTest.testWrongClass":321,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":86,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":87,"org.easymock.tests.UsageStrictMockTest.range":154,"org.easymock.samples.ConstructorCalledMockTest.testTax":248,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":440,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":330,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":265,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":30,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":452,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":184,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":148,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":231,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":390,"org.easymock.tests2.CaptureTest.testCaptureNone":101,"org.easymock.tests.UsageUnorderedTest.message":77,"org.easymock.tests.UsageVerifyTest.twoReturns":229,"org.easymock.tests.UsageVarargTest.varargByteAccepted":206,"org.easymock.tests2.ThreadingTest.testThreadSafe":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":466,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":132,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":392,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":253,"org.easymock.tests2.CaptureTest.testCapture_2617107":61,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":355,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":379,"org.easymock.tests2.UsageConstraintsTest.any":112,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":145,"org.easymock.tests2.StubTest.stub":264,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":385,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":14,"org.easymock.tests.UsageExpectAndThrowTest.longType":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":380,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":419,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":144,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":260,"org.easymock.tests2.SerializationTest.testClass":59,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":257,"org.easymock.tests.LimitationsTest.mockNativeMethod":150,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":178,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":348,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":485,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":263,"org.easymock.tests2.NameTest.nameForMocksControl":290,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":487,"org.easymock.tests2.MockedExceptionTest.testMockedException":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":456,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":10,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":480,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":23,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":213,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":304,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":296,"org.easymock.tests.MockingTest.testNicePartialClassMocking":212,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":309,"org.easymock.tests2.CompareToTest.testNotComparable":49,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":500,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":483,"org.easymock.tests2.CaptureTest.testCaptureLast":100,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":179,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":67,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":271,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":121,"org.easymock.tests.MockingTest.testTwoMocks":397,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":443,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":159,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":27,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":279,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":124,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":499,"org.easymock.samples.ExampleTest.removeNonExistingDocument":246,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":489,"org.easymock.tests.UsageStrictMockTest.differentMethods":155,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":142,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":424,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":417,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":285,"org.easymock.tests2.MockBuilderTest.testCreateMockString":299,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":457,"org.easymock.tests.UsageExpectAndThrowTest.floatType":21,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":454,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":316,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":444,"org.easymock.tests.UsageVerifyTest.twoThrows":39,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":302,"org.easymock.samples.ExampleTest.voteAgainstRemoval":243,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":370,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":313,"org.easymock.tests.LimitationsTest.privateConstructor":352,"org.easymock.tests2.UsageConstraintsTest.testNotNull":70,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":43,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":8,"org.easymock.tests2.UsageTest.defaultResetToNice":278,"org.easymock.samples.ExampleTest.voteAgainstRemovals":240,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":371,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":484,"org.easymock.tests.UsageVarargTest.differentLength":203,"org.easymock.tests2.CallbackTest.callback":343,"org.easymock.tests2.UsageConstraintsTest.equals":494,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":474,"org.easymock.tests.UsageTest.openCallCountByLastCall":183,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":107,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":74,"org.easymock.tests.UsageCallCountTest.tooFewCalls":130,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":268,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":233,"org.easymock.tests.UsageThrowableTest.throwCheckedException":5,"org.easymock.tests.MockingTest.testStrictClassMocking":395,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":1,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":270,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":488,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":267,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":147,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":269,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":318,"org.easymock.tests.ObjectMethodsTest.testHashCode":209,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":501,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":91,"org.easymock.tests2.NameTest.nameForNiceMock":289,"org.easymock.tests2.DependencyTest.testInterfaceMocking":88,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":52,"org.easymock.samples.ExampleTest.addDocument":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":467,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":471,"org.easymock.tests2.DelegateToTest.testStubDelegate":320,"org.easymock.tests2.AnswerTest.stubAnswer":317,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":79,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":450,"org.easymock.tests.UsageVarargTest.varargLongAccepted":205,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":368,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":177,"org.easymock.tests.UsageExpectAndReturnTest.floatType":161,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":55,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":249,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":430,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":386,"org.easymock.tests.UsageThrowableTest.noUpperLimit":158,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":119,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":108,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":435,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":98,"org.easymock.tests2.SerializationTest.test":341,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":47,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":160,"org.easymock.tests2.UsageConstraintsTest.testSame":110,"org.easymock.samples.SupportTest.addDocument":255,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":442,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":458,"org.easymock.tests.GenericTest.testPackageScope":136,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":363,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":429,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":399,"org.easymock.tests2.NameTest.nameForMock":287,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":171,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":451,"org.easymock.tests2.UsageStrictMockTest.differentMethods":262,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":475,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":163,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":33,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":391,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":227,"org.easymock.tests2.MockedExceptionTest.testRealException":46,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":414,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":373,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":372,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":149,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":73,"org.easymock.tests2.NameTest.nameForStrictMock":288,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":449,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":93,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":308,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":439,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":418,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":69,"org.easymock.tests.ErrorMessageTest.testGetters":498,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":292,"org.easymock.tests2.UsageStrictMockTest.range":261,"org.easymock.tests2.UsageConstraintsTest.lessThan":125,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":426,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":53,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":462,"org.easymock.tests2.CaptureTest.testCaptureRightOne":62,"org.easymock.tests2.UsageConstraintsTest.testOr":66,"org.easymock.tests.UsageRangeTest.combination":224,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":305,"org.easymock.tests.UsageTest.wrongArguments":182,"org.easymock.tests2.MockBuilderTest.testWithConstructor":446,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":459,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":215,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":164,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":172,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":360,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":48,"org.easymock.tests.UsageVarargTest.varargShortAccepted":204,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":133,"org.easymock.tests2.UsageConstraintsTest.cmpTo":113,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":362,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":42,"org.easymock.tests2.CaptureTest.testCaptureFromStub":103,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":139,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":447,"org.easymock.tests.UsageTest.unexpectedCallWithArray":181,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":78,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":131,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":173,"org.easymock.tests2.CaptureTest.testCapture":504,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":153,"org.easymock.tests2.UsageConstraintsTest.constraints":63,"org.easymock.samples.ExampleTest.addAndChangeDocument":247,"org.easymock.tests.UsageStrictMockTest.testVerify":157,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":252,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":152,"org.easymock.tests2.CompareToTest.testGreateThan":496,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":189,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":99,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":82,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":165,"org.easymock.tests.LimitationsTest.abstractClass":351,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":83,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":196,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":329}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,1],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:49","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:371","sourceCode":"return this","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[3,4,5,6,7,8,9],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:113","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:58","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","type":"CtInvocationImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[36,37,38,39,40,41,42,43,44,45,46,47,48],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,14,76,77,78,79,80,81,82,83,84,85,86,87,10,88,89,90,91,92,93,94,95,96,97,98,99,100,38,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,15,120,121,16,122,17,19,21,22,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,32,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[192,6,7],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[193,194,195,196,197,198,199,200,201,202],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[203,139],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:41","sourceCode":"new java.util.Properties()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:49","sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[49,50,204,205,51,11,13,53,54,55,56,206,207,59,208,209,210,211,212,213,214,198,215,199,64,216,217,218,219,65,66,67,68,220,69,200,221,70,201,222,71,72,73,75,223,224,202,225,14,226,78,79,80,81,82,83,84,85,86,87,10,36,37,38,39,101,227,228,229,230,231,232,104,233,106,107,234,235,111,113,114,117,118,236,40,119,120,121,16,122,17,237,19,21,128,129,130,131,132,133,238,239,240,241,242,243,41,42,43,44,45,46,137,244,138,23,25,141,245,246,247,248,249,142,26,27,28,29,143,147,30,250,251,252,149,150,253,254,31,255,256,257,258,259,260,261,151,152,153,154,155,156,157,158,159,160,161,162,262,263,163,164,264,32,265,266,267,268,165,33,34,35,269,166,270,271,272,273,274,275,167,168,276,169,277,278,279,280,170,281,282,283,284,171,285,286,287,288,289,290,291,178,179,292,185,186,187,293,294,295,296,188,189,297],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1951","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","type":"CtInvocationImpl"},"failures":[81],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[298,78,79,80,81,299,82,83,84,85,86,300,87,301,302,10,303],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:59","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:35","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[304],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"failures":[305,306],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[199,64,216,217,218,219,65,66,307,67,71,72,223,224,78,79,80,81,87,301],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:82","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[308,309,310,311,312,313,314,315,316,317,318,319],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[320,11,52,12,13,53,57,321,210,211,212,213,214,199,70,225,322,323,76,77,324,325,326,88,327,90,92,94,95,96,97,103,233,105,106,107,108,109,235,110,113,114,117,118,15,237,20,328,329,139,23,140,24,25,141,330,26,331,332,147,333,334,335,336,337,338,339,252,149,150,340,341,342,343,344,345,289,346,172,173,174,175,347,176,293,295,296,348,190,191,349,350,351],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:987","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:351","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[352,353],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:42","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:79","sourceCode":"return ((int) <= int) && (int <= (int))","type":"CtReturnImpl"},"failures":[49,50,204,205,51,52,12,13,54,55,56,57,206,207,59,60,61,62,63,208,209,210,198,215,199,64,216,217,218,219,65,66,67,68,220,69,200,221,70,201,222,71,72,73,75,223,224,202,14,76,77,78,79,80,81,82,83,84,85,86,87,10,88,89,90,91,92,93,94,95,96,97,98,99,100,38,101,227,228,104,106,107,235,111,112,113,114,115,116,117,118,236,40,119,120,121,16,122,17,19,21,22,123,124,125,126,127,128,129,130,131,132,133,238,134,135,239,240,241,242,243,45,137,244,138,140,24,25,142,26,27,28,29,143,30,250,251,252,149,150,151,152,153,154,155,156,157,158,159,160,161,162,262,263,163,164,264,32,265,266,267,268,165,33,34,35,269,166,270,271,272,273,274,275,167,168,276,169,277,278,279,280,170,281,282,283,284,171,285,286,287,288,290,291,178,179,292,185,186,187,295,188,189],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[354,355,356,357,358],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[359],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"failures":[192,3,4,5,6,7,304,111],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[195,68,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[199,64,216,217,218,219,65,66,307,67,71,72,223,224,78,79,80,81,87,301],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[360,361],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:67","sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","type":"CtForImpl"},"failures":[54,55,56,362],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:839","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[75],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:852","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[198,199,201,75],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[49,363,50,205,208,209,210,129,364,144],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:269","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":64,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":345,"org.easymock.tests2.UsageTest.argumentsOrdered":109,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":98,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":327,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":44,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":107,"org.easymock.tests2.StubTest.stubWithReturnValue":40,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":8,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":268,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":75,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":124,"org.easymock.tests2.SerializationTest.testAllMockedMethod":56,"org.easymock.tests2.DelegateToTest.testReturnException":101,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":42,"org.easymock.tests.MockingTest.testPartialClassMocking":185,"org.easymock.samples.SupportTest.voteForRemovals":126,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests.MockClassControlTest.testToString":349,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":282,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":362,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":274,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":61,"org.easymock.tests.UsageExpectAndThrowTest.object":170,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":72,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":22,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":3,"org.easymock.tests2.DelegateToTest.testWrongClass":102,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":290,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":291,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":66,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":30,"org.easymock.tests2.UsageTest.wrongArguments":105,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":313,"org.easymock.tests.UsageStrictMockTest.range":24,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":248,"org.easymock.samples.ExampleTest.answerVsDelegate":129,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":337,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":112,"org.easymock.tests2.UsageConstraintsTest.testNull":217,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":281,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":121,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":76,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":97,"org.easymock.tests2.CaptureTest.testPrimitive":81,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":251,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":355,"org.easymock.tests.UsageTest.moreThanOneArgument":289,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":288,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":173,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":247,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":120,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":31,"org.easymock.tests2.CaptureTest.testCaptureNone":85,"org.easymock.tests.UsageUnorderedTest.message":344,"org.easymock.tests.UsageVerifyTest.twoReturns":150,"org.easymock.tests.UsageVarargTest.varargByteAccepted":160,"org.easymock.tests2.ThreadingTest.testThreadSafe":206,"org.easymock.tests.UsageTest.argumentsOrdered":174,"org.easymock.tests.UsageVarargTest.varargIntAccepted":155,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":189,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":342,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":134,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":239,"org.easymock.tests2.CaptureTest.testCapture_2617107":80,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":225,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":7,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":148,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":226,"org.easymock.tests2.UsageConstraintsTest.any":67,"org.easymock.tests2.StubTest.stub":236,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":358,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":43,"org.easymock.tests.UsageExpectAndThrowTest.longType":168,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":305,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":52,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":88,"org.easymock.tests2.SerializationTest.testClass":54,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":57,"org.easymock.tests.LimitationsTest.mockNativeMethod":143,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":273,"org.easymock.tests2.AnswerTest.answer":49,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":307,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":232,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":309,"org.easymock.tests2.CaptureTest.testAnd":78,"org.easymock.tests2.UsageTest.strictResetToDefault":104,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":237,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":53,"org.easymock.tests2.NameTest.nameForMocksControl":214,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":2,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":310,"org.easymock.tests2.MockedExceptionTest.testMockedException":37,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":93,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":28,"org.easymock.tests2.DelegateToTest.testDelegate":228,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":276,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":187,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":119,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":77,"org.easymock.tests.MockingTest.testNicePartialClassMocking":186,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":171,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":122,"org.easymock.tests2.CompareToTest.testCompareEqual":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":192,"org.easymock.tests2.CaptureTest.testCaptureLast":84,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":45,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":176,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":65,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":118,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":261,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":73,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":347,"org.easymock.tests2.CaptureTest.testCapture1_2446744":299,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":262,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":283,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":279,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":230,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":108,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":224,"org.easymock.tests.UsageThrowableTest.throwError":177,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":311,"org.easymock.tests.UsageStrictMockTest.differentMethods":25,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":336,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":315,"org.easymock.tests2.MockBuilderTest.testCreateMockString":326,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":319,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":256,"org.easymock.tests.UsageExpectAndThrowTest.floatType":167,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":70,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":50,"org.easymock.tests.UsageVerifyTest.twoThrows":149,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":359,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":62,"org.easymock.samples.PartialClassMockTest.testGetArea":123,"org.easymock.tests2.CompareToTest.testLessOrEqual":197,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":240,"org.easymock.samples.ExampleTest.voteAgainstRemoval":131,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":19,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":343,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":275,"org.easymock.tests2.UsageTest.niceToStrict":106,"org.easymock.tests2.UsageConstraintsTest.testNotNull":223,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":36,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":184,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":14,"org.easymock.tests2.MockBuilderTest.testCreateMock":324,"org.easymock.tests2.UsageTest.defaultResetToNice":234,"org.easymock.samples.ExampleTest.voteAgainstRemovals":128,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":166,"org.easymock.tests.UsageVarargTest.differentLength":340,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":308,"org.easymock.tests2.CallbackTest.callback":210,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":312,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":280,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":203,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":94,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":198,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":293,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":246,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":47,"org.easymock.tests.UsageCallCountTest.tooFewCalls":296,"org.easymock.tests.UsageOverloadedMethodTest.overloading":137,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":200,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":146,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":33,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":115,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":136,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":69,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":86,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":249,"org.easymock.tests.UsageThrowableTest.throwCheckedException":181,"org.easymock.tests2.EasyMockSupportClassTest.testAll":60,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":152,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":286,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":259,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":231,"org.easymock.tests2.CaptureTest.testCaptureAll":79,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":48,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":117,"org.easymock.tests.MockNameTest.defaultName":330,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":321,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":114,"org.easymock.tests2.UsageConstraintsTest.testMatches":221,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":116,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":205,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":255,"org.easymock.tests2.CompareToTest.testGreateOrEqual":196,"org.easymock.samples.ExampleTest.voteForRemovals":133,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":6,"org.easymock.tests2.NameTest.nameForNiceMock":213,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":59,"org.easymock.tests.UsageVarargTest.allKinds":162,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":252,"org.easymock.tests2.DependencyTest.testInterfaceMocking":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":5,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":260,"org.easymock.samples.BasicClassMockTest.testPrintContent":135,"org.easymock.samples.ExampleTest.addDocument":132,"org.easymock.tests2.DelegateToTest.testStubDelegate":227,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":183,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":320,"org.easymock.tests2.AnswerTest.stubAnswer":204,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":317,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":46,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":23,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":304,"org.easymock.tests2.UsageConstraintsTest.greaterThan":201,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":27,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":20,"org.easymock.tests.UsageVarargTest.varargLongAccepted":159,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":141,"org.easymock.samples.ExampleTest.voteForRemoval":130,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":207,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":272,"org.easymock.tests.UsageExpectAndReturnTest.floatType":163,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":338,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":111,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":332,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":222,"org.easymock.tests.UsageThrowableTest.noUpperLimit":178,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":215,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":103,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":142,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":82,"org.easymock.tests2.SerializationTest.test":55,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":354,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":306,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":91,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":179,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":263,"org.easymock.tests2.UsageConstraintsTest.testSame":218,"org.easymock.samples.SupportTest.addDocument":125,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":41,"org.easymock.tests2.CaptureTest.testCaptureFirst":10,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":92,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":110,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":333,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":266,"org.easymock.tests.GenericTest.testPackageScope":151,"org.easymock.tests2.CaptureTest.testCapture2_2446744":302,"org.easymock.tests2.UsageTest.moreThanOneArgument":233,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":352,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":325,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":318,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":161,"org.easymock.tests.GenericTest.testBridgedEquals":1,"org.easymock.tests2.NameTest.nameForMock":211,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":190,"org.easymock.tests.UsageExpectAndReturnTest.longType":164,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":257,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":89,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":287,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":34,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":74,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":285,"org.easymock.tests2.UsageStrictMockTest.differentMethods":13,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":357,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":253,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":264,"org.easymock.tests.UsageCallCountTest.tooManyCalls":191,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":284,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":29,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":295,"org.easymock.tests2.MockedExceptionTest.testRealException":39,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":339,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":267,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":364,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":11,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":169,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":361,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":250,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":182,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":113,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":294,"org.easymock.tests2.UsageConstraintsTest.testContains":220,"org.easymock.tests2.NameTest.nameForStrictMock":212,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":38,"org.easymock.tests2.UsageConstraintsTest.testFind":216,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":244,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":208,"org.easymock.tests.MockTypeTest.fromEasyMockClass":335,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":16,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":329,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":209,"org.easymock.tests.UsageExpectAndReturnTest.object":165,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":71,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":17,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":322,"org.easymock.tests2.UsageStrictMockTest.range":12,"org.easymock.tests2.UsageConstraintsTest.lessThan":202,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":96,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":4,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":157,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":316,"org.easymock.tests.UsageTest.exactCallCountByLastCall":175,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":292,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":90,"org.easymock.tests2.CaptureTest.testCaptureRightOne":87,"org.easymock.tests2.UsageConstraintsTest.testOr":219,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageRangeTest.combination":26,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":270,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":15,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":153,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":145,"org.easymock.tests.UsageTest.wrongArguments":172,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":314,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":297,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":32,"org.easymock.tests2.EasyMockSupportTest.testVerify":100,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":35,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":353,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":144,"org.easymock.tests.UsageVarargTest.varargShortAccepted":158,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":348,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":229,"org.easymock.tests2.UsageConstraintsTest.cmpTo":68,"org.easymock.tests.UsageVarargTest.varargCharAccepted":156,"org.easymock.tests2.CaptureTest.testCaptureMultiple":298,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":363,"org.easymock.tests2.CompareToTest.testLessThan":193,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":51,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":99,"org.easymock.tests2.CaptureTest.testCaptureFromStub":301,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":360,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":323,"org.easymock.tests.UsageTest.unexpectedCallWithArray":346,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":341,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":278,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":139,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":180,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":188,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":269,"org.easymock.tests2.CaptureTest.testCapture":300,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":351,"org.easymock.tests2.UsageConstraintsTest.constraints":199,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":18,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":140,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":277,"org.easymock.samples.ExampleTest.addAndChangeDocument":238,"org.easymock.tests.CapturesMatcherTest.test":303,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":271,"org.easymock.tests.UsageStrictMockTest.testVerify":245,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":356,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":127,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":63,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":138,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":258,"org.easymock.tests2.CompareToTest.testGreateThan":194,"org.easymock.tests2.UsageTest.resumeIfFailure":235,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":241,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":334,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":265,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":242,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":147,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":95,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":154}}]

[{"position":"org.easymock.internal.matchers.Any:36","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,0,1,2,3,4,44,45,46,47,48,49,50,51,5,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,6,7,8,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,9,10,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,11,133,134,135,136,137,138,139,140,141,142,143,144,145,12,13,14,15,16,146,147,148,149,150,151,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,17,252,253,254,255,256,257,258,259,260,261,262,18,263,264,19,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,20,286,287,288,289,290,21,22,291,292,293,294,23,295,296],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"leafClass"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[297,298,285,20,286,287,288,289,290,21,22,291,299,292,293,294,23],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[3,248],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:115","sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[300,301],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[302,24,26,28,31,32,303,304,54,87,88,89,6,11,134,135,167,168,174,175,305,306,307,308,309,310,311,17,253,254],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"this.java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"lock":"lock"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[27,312,313,132,314,309],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[170,196,270],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[219],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[27,315,53,316,317,318,319,320,321,322,55,56,57,58,59,323,324,325,81,326,327,100,328,101,102,329,103,330,331,104,332,105,106,107,108,109,137,333,334,173,178,180,335,184,336,199,201,206,207,208,209,210,216,222,223,226,233,238],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:338","sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","resolvedType":"actualTypeArgument","variable":"variable"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:152","sourceCode":"boolean boolean = true","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:35","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[337],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.JavaProxyFactory:34","sourceCode":"return java.lang.reflect.Proxy.java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:165","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory().getInvocationHandler(java.lang.Object)","type":"CtReturnImpl"},"failures":[338],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:133","sourceCode":"return this","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:80","sourceCode":"return org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType())","type":"CtReturnImpl"},"failures":[302,24,25,29,30,33,0,4,44,45,46,47,48,49,50,5,52,339,303,340,341,304,54,342,343,344,345,346,347,348,60,61,62,63,64,65,68,69,71,72,73,75,76,77,78,79,349,350,351,86,87,88,89,7,8,90,91,92,93,352,95,96,338,97,98,99,9,10,110,111,112,113,114,115,118,119,121,122,123,125,126,127,128,129,11,134,135,138,140,141,142,143,144,145,12,13,14,15,16,146,353,354,355,150,151,151,152,152,153,155,156,158,162,165,166,169,171,172,173,176,177,356,179,181,182,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,357,200,358,201,202,203,204,205,206,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,239,359,244,245,246,360,247,249,17,253,254,256,257,259,260,262,18,263,264,19,265,266,267,268,269,270,271,272,273,274,275,276,278,279,280,281,285,20,287,288,21,22,291,292,293,294,23],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[25,30,2,3,48,49,50,51,5,52,341,96,10,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,140,144,145,165,172,222,223,224,225,249],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[259,260],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[298],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1385","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[25,26,29,30,33,0,1,4,44,45,46,47,54,345,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,361,362,363,364,365,86,87,89,7,8,352,95,96,97,98,99,9,11,134,135,138,140,141,142,143,144,145,12,13,14,15,16,146,353,354,355,150,153,155,156,158,162,165,166,167,169,171,172,173,176,177,356,179,181,182,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,357,200,358,201,202,203,204,205,206,213,216,217,218,219,220,221,224,226,227,228,229,230,231,232,233,234,235,236,237,245,249,17,253,254,256,257,258,259,260,261,262,18,263,264,19,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,20,287,288,21,22,291,292,294,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[366,367,368,369],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":259,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":25,"org.easymock.tests2.UsageTest.argumentsOrdered":175,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":236,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":51,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":170,"org.easymock.tests2.StubTest.stubWithReturnValue":249,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":276,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":69,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":164,"org.easymock.tests2.SerializationTest.testAllMockedMethod":284,"org.easymock.tests2.DelegateToTest.testReturnException":244,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":349,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":49,"org.easymock.tests.MockingTest.testPartialClassMocking":97,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":309,"org.easymock.samples.SupportTest.voteForRemovals":150,"org.easymock.tests.MockClassControlTest.testToString":316,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":345,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":122,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":350,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":203,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":110,"org.easymock.tests.UsageExpectAndThrowTest.object":120,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":281,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":274,"org.easymock.tests2.DelegateToTest.testWrongClass":246,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":7,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":8,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":264,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":0,"org.easymock.tests2.UsageTest.wrongArguments":168,"org.easymock.tests.UsageStrictMockTest.range":134,"org.easymock.samples.ConstructorCalledMockTest.testTax":151,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":108,"org.easymock.samples.ExampleTest.answerVsDelegate":154,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":233,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":185,"org.easymock.tests2.UsageConstraintsTest.testNull":261,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":195,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":121,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":321,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":235,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":181,"org.easymock.tests2.CaptureTest.testPrimitive":287,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":4,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":332,"org.easymock.tests.UsageTest.moreThanOneArgument":26,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":31,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":129,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":194,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":107,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":312,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":92,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":355,"org.easymock.tests2.CaptureTest.testCaptureNone":22,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":367,"org.easymock.tests.UsageUnorderedTest.message":6,"org.easymock.tests.UsageVerifyTest.twoReturns":89,"org.easymock.tests.UsageVarargTest.varargByteAccepted":41,"org.easymock.tests2.ThreadingTest.testThreadSafe":217,"org.easymock.tests.UsageTest.argumentsOrdered":32,"org.easymock.tests.UsageVarargTest.varargIntAccepted":36,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":85,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":160,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":310,"org.easymock.tests2.CaptureTest.testCapture_2617107":286,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":12,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":311,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":363,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":3,"org.easymock.tests2.UsageConstraintsTest.any":19,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":180,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":330,"org.easymock.tests2.StubTest.stub":248,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":344,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":364,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":50,"org.easymock.tests.UsageExpectAndThrowTest.longType":113,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":307,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":103,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":252,"org.easymock.tests2.SerializationTest.testClass":282,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":206,"org.easymock.tests.ReplayStateInvalidUsageTest.times":331,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":201,"org.easymock.tests.LimitationsTest.mockNativeMethod":86,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":353,"org.easymock.tests2.AnswerTest.answer":211,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":79,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":210,"org.easymock.tests2.CaptureTest.testAnd":285,"org.easymock.tests2.UsageTest.strictResetToDefault":166,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":255,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":199,"org.easymock.tests2.NameTest.nameForMocksControl":243,"org.easymock.tests2.MockedExceptionTest.testMockedException":223,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":91,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":230,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":46,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":30,"org.easymock.tests2.DelegateToTest.testDelegate":247,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":99,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":114,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":192,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":182,"org.easymock.tests.MockingTest.testNicePartialClassMocking":98,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":125,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":197,"org.easymock.tests2.CaptureTest.testCaptureLast":21,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":5,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":24,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":263,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":191,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":275,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":59,"org.easymock.tests.MockingTest.testTwoMocks":338,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":302,"org.easymock.tests2.CaptureTest.testCapture1_2446744":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":60,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":123,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":208,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":118,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":174,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":278,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":369,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":328,"org.easymock.tests.UsageThrowableTest.throwError":138,"org.easymock.samples.ExampleTest.removeNonExistingDocument":334,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":102,"org.easymock.tests.UsageStrictMockTest.differentMethods":135,"org.easymock.tests2.ConstraintsToStringTest.andToString":308,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":219,"org.easymock.tests2.MockBuilderTest.testCreateMockString":184,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":315,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":94,"org.easymock.tests.UsageExpectAndThrowTest.floatType":112,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":270,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":212,"org.easymock.tests.UsageVerifyTest.twoThrows":88,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":204,"org.easymock.samples.PartialClassMockTest.testGetArea":162,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":101,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":13,"org.easymock.samples.ExampleTest.voteAgainstRemoval":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":362,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":354,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":200,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":111,"org.easymock.tests2.UsageTest.niceToStrict":169,"org.easymock.tests2.UsageConstraintsTest.testNotNull":277,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":222,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":145,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":179,"org.easymock.tests2.MockBuilderTest.testCreateMock":335,"org.easymock.tests2.UsageTest.defaultResetToNice":173,"org.easymock.samples.ExampleTest.voteAgainstRemovals":153,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":75,"org.easymock.tests2.CallbackTest.callback":239,"org.easymock.tests.UsageTest.openCallCountByLastCall":29,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":314,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":119,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":231,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":256,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":348,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":80,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":2,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":106,"org.easymock.tests.UsageCallCountTest.tooFewCalls":83,"org.easymock.tests.UsageOverloadedMethodTest.overloading":95,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":341,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":268,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":352,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":71,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":188,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":267,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":291,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":109,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":368,"org.easymock.tests.UsageThrowableTest.throwCheckedException":142,"org.easymock.tests.MockClassControlTest.testEquals":320,"org.easymock.tests2.EasyMockSupportClassTest.testAll":202,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":147,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":313,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":127,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":209,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":57,"org.easymock.tests2.CaptureTest.testCaptureAll":20,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":10,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":190,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":187,"org.easymock.tests2.UsageConstraintsTest.testMatches":269,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":104,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":189,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":214,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":327,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":93,"org.easymock.tests.ObjectMethodsTest.testHashCode":324,"org.easymock.samples.ExampleTest.voteForRemovals":158,"org.easymock.tests2.NameTest.nameForNiceMock":242,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":221,"org.easymock.tests.UsageVarargTest.allKinds":43,"org.easymock.tests2.DependencyTest.testInterfaceMocking":280,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":87,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":58,"org.easymock.samples.BasicClassMockTest.testPrintContent":161,"org.easymock.samples.ExampleTest.addDocument":157,"org.easymock.tests2.DelegateToTest.testStubDelegate":245,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":144,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":250,"org.easymock.tests2.AnswerTest.stubAnswer":213,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":360,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":52,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":11,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":337,"org.easymock.tests2.UsageConstraintsTest.greaterThan":271,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":45,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":358,"org.easymock.tests.UsageVarargTest.varargLongAccepted":40,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":361,"org.easymock.samples.ExampleTest.voteForRemoval":155,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":218,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":78,"org.easymock.tests.UsageExpectAndReturnTest.floatType":62,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":336,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":216,"org.easymock.tests2.ConstraintsToStringTest.orToString":305,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":152,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":304,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":272,"org.easymock.tests.UsageThrowableTest.noUpperLimit":139,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":257,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":148,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":165,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":289,"org.easymock.tests2.SerializationTest.test":283,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":300,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":228,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":140,"org.easymock.tests2.UsageConstraintsTest.testSame":262,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":61,"org.easymock.samples.SupportTest.addDocument":149,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":48,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":359,"org.easymock.tests2.CaptureTest.testCaptureFirst":23,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":229,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":177,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":329,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":322,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":67,"org.easymock.tests.GenericTest.testPackageScope":146,"org.easymock.tests2.CaptureTest.testCapture2_2446744":294,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":220,"org.easymock.tests2.UsageTest.moreThanOneArgument":167,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":183,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":42,"org.easymock.tests2.NameTest.nameForMock":240,"org.easymock.tests.UsageExpectAndReturnTest.longType":63,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":226,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":55,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":72,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":128,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":351,"org.easymock.tests2.UsageStrictMockTest.differentMethods":254,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":126,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":343,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":90,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":64,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":124,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":47,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":82,"org.easymock.tests2.MockedExceptionTest.testRealException":225,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":68,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":17,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":115,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":1,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":105,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":143,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":186,"org.easymock.tests2.UsageConstraintsTest.testContains":266,"org.easymock.tests2.NameTest.nameForStrictMock":241,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":81,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":224,"org.easymock.tests2.UsageConstraintsTest.testFind":260,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":96,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":295,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":196,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":296,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":130,"org.easymock.tests.UsageExpectAndReturnTest.object":70,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":273,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":198,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":356,"org.easymock.tests2.UsageStrictMockTest.range":253,"org.easymock.tests2.UsageConstraintsTest.lessThan":279,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":234,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":38,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":325,"org.easymock.tests.UsageTest.exactCallCountByLastCall":33,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":9,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":227,"org.easymock.tests2.CaptureTest.testCaptureRightOne":292,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":366,"org.easymock.tests2.UsageConstraintsTest.testOr":18,"org.easymock.tests.UsageRangeTest.combination":44,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":193,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":76,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":34,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":340,"org.easymock.tests.UsageTest.wrongArguments":28,"org.easymock.tests.MockClassControlTest.testHashCode":319,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":53,"org.easymock.tests2.EasyMockSupportTest.testVerify":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":65,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":73,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":347,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":339,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":301,"org.easymock.tests.UsageVarargTest.varargShortAccepted":39,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":326,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":207,"org.easymock.tests2.UsageConstraintsTest.cmpTo":265,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":215,"org.easymock.tests.UsageVarargTest.varargCharAccepted":37,"org.easymock.tests2.CaptureTest.testCaptureMultiple":298,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":365,"org.easymock.tests2.UsageTest.openCallCountByLastCall":171,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":172,"org.easymock.tests.DefaultClassInstantiatorTest.object":333,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":237,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":346,"org.easymock.tests2.CaptureTest.testCaptureFromStub":293,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":100,"org.easymock.tests.UsageTest.unexpectedCallWithArray":27,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":323,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":117,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":132,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":141,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":84,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":74,"org.easymock.tests2.CaptureTest.testCapture":299,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":357,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":318,"org.easymock.tests2.UsageConstraintsTest.constraints":258,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":133,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":116,"org.easymock.samples.ExampleTest.addAndChangeDocument":159,"org.easymock.tests2.ConstraintsToStringTest.notToString":306,"org.easymock.tests.CapturesMatcherTest.test":297,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":77,"org.easymock.tests.UsageStrictMockTest.testVerify":137,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":342,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":163,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":205,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":131,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":56,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":290,"org.easymock.tests2.UsageTest.resumeIfFailure":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":14,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":66,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":54,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":15,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":232,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":35}}]

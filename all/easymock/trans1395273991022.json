[{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[6,7,8,9,10,11,12],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,7,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,192,193,193,194,195,196,197,198],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"exception":"returnType","throwableClass":"returnType"}},{"position":"org.easymock.internal.BridgeMethodResolver:213","failures":[199,200],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[15,22,27,38,201],"status":-1,"binaryOperator":"int >= 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[13,14,15,16,202,17,18,19,20,21,22,203,23,24,25,26,27,28,29,30,31,32,33,34,204,35,36,37,38,205,206,39,207,208,209,6,40,41,210,42,43,211,212,44,45,46,47,48,49,50,51,52,53,54,213,55,56,57,214,7,215,8,216,58,9,217,218,219,220,59,60,221,222,223,224,225,226,61,227,228,229,230,231,232,62,63,64,65,66,67,68,69,70,71,72,73,233,234,235,74,75,236,237,76,238,77,78,239,79,80,81,240,82,241,83,84,85,242,243,86,87,88,89,90,91,92,93,244,245,94,246,247,248,95,96,97,249,250,251,252,253,254,255,98,256,257,258,259,260,261,262,99,263,264,265,266,267,268,100,269,270,101,271,272,273,274,275,276,277,278,279,102,280,281,282,283,284,103,285,286,104,0,287,105,106,107,108,109,288,289,110,290,291,292,293,294,295,296,297,298,299,300,111,301,302,303,112,304,113,1,114,305,306,307,115,308,309,310,311,312,313,314,315,316,317,199,116,318,117,200,319,118,119,120,121,320,122,123,124,125,126,127,128,129,130,131,132,133,134,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,135,136,356,357,137,358,359,360,361,362,138,363,139,364,365,366,140,141,367,142,368,369,370,143,371,372,373,374,375,376,377,378,379,380,381,382,144,383,145,146,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,147,408,148,149,409,410,150,151,411,412,152,153,154,155,156,157,413,414,415,416,417,418,158,159,160,161,10,419,420,421,422,162,423,424,163,164,425,426,427,428,429,165,166,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,167,455,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,456,188,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,11,476,477,189,478,479,480,481,482,190,483,484,191,192,193,194,12,195,196,485,197,486,487,488,489,490,198,491,492],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:603","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[76,77,78,81,319,138,363,139,144,145,146,149,493,494,495,496],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[340,497,498],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[59,60,221,499],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[59,60,221,499],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1726","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:114","sourceCode":"return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs)","type":"CtReturnImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,203,23,24,25,26,27,28,29,30,31,32,33,34,204,35,36,37,38,205,206,39,207,208,209,6,40,41,210,42,43,211,212,44,45,46,47,48,49,50,51,52,53,54,55,56,57,7,215,8,216,58,9,217,218,219,220,59,60,221,222,223,224,226,61,227,228,229,232,62,63,64,65,66,67,68,69,70,71,72,73,233,74,75,236,237,76,238,77,78,239,79,80,81,240,82,241,83,84,85,242,243,86,87,88,89,90,91,92,93,244,94,246,247,248,95,96,97,249,250,251,252,253,255,98,256,257,258,261,262,99,263,265,266,267,268,100,269,270,101,271,272,273,274,275,276,277,278,279,102,280,281,282,283,284,103,285,286,104,0,287,105,106,107,108,109,288,289,110,290,291,295,296,297,298,299,300,111,301,302,303,112,304,113,1,114,306,307,115,308,309,310,311,312,313,314,315,316,317,199,116,318,117,200,319,118,119,120,121,320,122,123,124,125,126,127,128,129,130,131,132,133,134,321,324,325,326,327,328,329,330,331,332,333,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,135,136,356,357,137,358,359,360,361,362,138,363,139,364,365,366,140,141,367,142,368,369,370,143,371,372,373,374,375,376,377,378,379,380,381,382,144,383,145,146,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,147,148,149,409,410,150,151,411,412,152,153,154,155,156,157,413,414,415,416,417,418,158,159,160,161,10,419,420,421,422,162,423,424,163,164,426,427,428,429,165,166,430,431,432,433,434,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,167,455,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,458,459,460,461,462,189,190,484,191,192,192,193,193,194,12,195,196,485,197,486,487,488,489,490,198,491,492],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:110","sourceCode":"return ((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","type":"CtReturnImpl"},"failures":[77,78,240,242,243,309,319,363,139,382,145,146,409,410,411,412,423,500,425],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,204,35,36,37,38,206,39,207,209,6,40,41,210,42,43,211,212,44,45,46,47,48,49,50,51,54,55,7,216,58,9,60,221,61,62,63,64,65,66,67,68,70,71,72,73,233,74,75,237,76,238,77,78,239,79,80,81,82,241,83,84,242,86,87,88,89,90,91,92,93,94,98,262,99,263,265,100,105,106,107,108,109,288,289,110,290,116,318,200,319,118,119,120,121,320,122,123,124,125,126,127,128,129,130,131,132,133,134,329,332,135,136,356,357,137,138,363,139,373,374,375,376,378,379,381,144,383,145,146,384,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,147,148,149,150,151,411,152,153,154,155,156,157,413,414,415,416,417,418,158,160,161,10,420,421,431,432,433,434,436,437,439,440,441,442,443,453,454,167,455,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,459,460,194,12,195,196,485,197,487,488,489,490,198,491,492],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[13,14,15,16,202,17,18,19,20,21,22,203,23,24,25,26,27,28,29,30,31,32,33,34,204,35,36,37,38,205,206,39,207,208,209,6,40,41,210,42,43,211,212,44,45,46,47,48,49,50,53,54,55,56,7,215,8,216,58,9,217,218,219,220,59,60,221,222,223,224,225,226,61,227,228,229,230,231,232,62,63,64,66,67,69,71,72,73,233,74,75,236,237,76,238,77,78,239,79,80,81,240,82,241,83,84,85,242,243,86,87,88,89,90,91,92,93,244,94,246,247,248,95,96,97,249,251,252,253,254,255,98,256,257,258,259,260,261,262,99,263,264,265,266,100,270,101,272,273,276,277,278,279,102,281,284,103,285,286,104,0,105,106,107,108,109,288,289,110,290,291,295,296,297,298,111,303,112,304,113,306,307,315,316,317,199,116,318,117,200,319,118,119,120,121,320,122,123,124,125,126,127,128,129,130,131,132,133,134,324,326,328,329,330,331,332,333,334,336,337,338,339,340,341,343,344,345,346,347,348,349,350,351,352,353,354,355,135,136,356,357,137,358,359,360,361,362,138,363,139,364,365,366,140,141,367,142,368,369,370,143,371,372,373,374,375,376,377,378,379,380,381,382,144,383,145,146,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,147,408,148,149,409,410,150,151,411,412,152,153,154,155,156,157,413,414,415,416,417,418,158,159,160,161,10,419,420,421,422,162,423,424,163,164,426,427,428,429,165,166,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,167,455,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,456,188,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,11,476,477,189,478,479,480,481,482,190,483,484,191,192,192,193,193,194,12,195,196,485,197,486,487,488,489,490,198,491,492],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"propertyFileName"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[501,245,502],"status":-1,"binaryOperator":"java.lang.String == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1177","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[76,77,78,81,319,138,363,139,144,145,146,149,493,494,495,496],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[503,40,41,210,42,43,211,212,44,46,504,47,48,49,50,505],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[21,40,210,47],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:205","failures":[59,244,246,95,96,250,101,102,103,104,0,287,288,299,300,111,301,302,303,112,304,113,1,114,305,306,307,115,308,309,199,117,321,326,191,192,193],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[506,507],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[59,60,221],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[59,60,221,499],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[508,509,510,511,512,513,514,515],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[15,29,6,63,67,68,71,236,238,77,78,79,240,82,241,242,243,86,87,89,95,97,111,307,115,309,319,363,139,377,378,379,380,382,383,145,146,148,409,410,411,412,152,158,500,425,438,516,517],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[59,306],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.internal.RecordState:280","failures":[206,39,207,209,420,12],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[353],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:85","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,204,35,36,37,38,206,39,207,209,6,40,41,210,42,43,211,212,44,45,46,47,48,49,50,51,52,53,54,55,56,57,7,216,58,9,217,218,219,220,59,60,221,61,62,63,64,65,66,67,68,69,70,71,72,73,233,74,75,236,237,76,238,77,78,239,79,80,81,240,82,241,83,84,85,242,243,86,87,88,89,90,91,92,93,244,94,248,95,96,97,98,262,99,263,265,100,101,102,103,104,105,106,107,108,109,288,289,110,290,299,111,112,304,113,114,307,115,309,311,312,313,314,116,318,319,118,119,120,121,320,122,123,124,125,126,127,128,129,130,131,132,133,134,330,331,332,336,344,345,346,347,348,349,350,351,352,353,354,355,135,136,356,357,137,358,359,360,361,362,138,363,139,140,141,142,371,372,373,374,375,376,377,378,379,380,381,382,144,383,145,146,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,147,148,149,409,410,150,151,411,412,152,153,154,155,156,157,413,414,415,416,417,418,158,159,160,161,10,420,421,162,423,426,427,428,429,431,432,433,434,436,437,438,439,440,441,442,443,447,448,449,450,451,452,453,454,167,455,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,191,192,192,193,193,194,12,195,196,485,197,486,487,488,489,490,198,491,492],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[337,341],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:201","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:435","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[117],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"methods":"methods","list":"candidateMethods"}},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[13,14,17,18,19,20,25,27,28,30,31,36,37,38,48,76,99,128,129,130,131,132,133,134,135,136,137,144,153,154,155,156,157,167,463,467,468,476,480,192,193],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"position":"org.easymock.Capture:134","failures":[505],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[29,204,41,210,43,211,212,44,45,50],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":16,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":148,"org.easymock.tests2.UsageTest.argumentsOrdered":243,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":72,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":473,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":241,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":489,"org.easymock.tests2.DelegateToTest.testReturnException":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":414,"org.easymock.tests.MockingTest.testPartialClassMocking":140,"org.easymock.tests.MockClassControlTest.testToString":449,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":310,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":480,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":274,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":386,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":101,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":493,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":75,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":2,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":22,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":135,"org.easymock.tests2.UsageTest.wrongArguments":240,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":261,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":428,"org.easymock.samples.ExampleTest.answerVsDelegate":12,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":326,"org.easymock.tests2.UsageConstraintsTest.testNull":18,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":369,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":91,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":454,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":71,"org.easymock.tests2.CaptureTest.testPrimitive":42,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":137,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":405,"org.easymock.tests.UsageTest.moreThanOneArgument":149,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":90,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":130,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":458,"org.easymock.tests.UsageTest.argumentsOrdered":412,"org.easymock.tests.UsageVarargTest.varargIntAccepted":434,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":477,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":153,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":299,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":231,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":293,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":465,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":157,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":98,"org.easymock.tests.ReplayStateInvalidUsageTest.times":352,"org.easymock.tests2.DependencyTest.testClassMocking":234,"org.easymock.tests2.AnswerTest.answer":7,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":478,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":220,"org.easymock.tests2.CaptureTest.testAnd":40,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":323,"org.easymock.tests2.UsageTest.strictResetToDefault":80,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":248,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":302,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":129,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":160,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":66,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":462,"org.easymock.tests2.DelegateToTest.testDelegate":209,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":401,"org.easymock.tests.LimitationsTest.mockFinalMethod":408,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":417,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":362,"org.easymock.tests2.DependencyTest.testClassMockingSupport":235,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":165,"org.easymock.tests2.CaptureTest.testCapture1_2446744":43,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":245,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":399,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":218,"org.easymock.tests.UsageThrowableTest.throwError":121,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":346,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":325,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":425,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":232,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":286,"org.easymock.samples.PartialClassMockTest.testGetArea":191,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":347,"org.easymock.tests.MockingTest.testInterfaceMocking":367,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":154,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":163,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":387,"org.easymock.tests2.UsageTest.niceToStrict":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":275,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":334,"org.easymock.tests2.ThreadingTest.testChangeDefault":502,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":112,"org.easymock.tests2.MockBuilderTest.testCreateMock":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":282,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":258,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":395,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":67,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":322,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":317,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":371,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":426,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":510,"org.easymock.tests.UsageOverloadedMethodTest.overloading":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":284,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":421,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":27,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":179,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":118,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":497,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":26,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":46,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":435,"org.easymock.tests.MockClassControlTest.testEquals":453,"org.easymock.tests2.EasyMockSupportClassTest.testAll":100,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":318,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":403,"org.easymock.tests2.CaptureTest.testCaptureAll":41,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":219,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":360,"org.easymock.tests.MockNameTest.defaultName":484,"org.easymock.tests2.UsageConstraintsTest.testMatches":28,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":131,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":344,"org.easymock.samples.ExampleTest.voteForRemovals":197,"org.easymock.tests.UsageVarargTest.allKinds":443,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":138,"org.easymock.samples.BasicClassMockTest.testPrintContent":492,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":361,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":126,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":236,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":418,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":208,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":228,"org.easymock.tests2.UsageConstraintsTest.greaterThan":30,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":5,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":269,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":159,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":97,"org.easymock.samples.ExampleTest.voteForRemoval":195,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":343,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":106,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":249,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":327,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":294,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":244,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":431,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":79,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":470,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":64,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":267,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":413,"org.easymock.tests2.CaptureTest.testCaptureFirst":50,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":469,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":65,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":87,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":423,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":175,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":108,"org.easymock.tests2.CaptureTest.testCapture2_2446744":49,"org.easymock.tests2.UsageTest.moreThanOneArgument":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":479,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":115,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":442,"org.easymock.tests.GenericTest.testBridgedEquals":200,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":511,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":508,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":378,"org.easymock.tests.UsageExpectAndReturnTest.longType":171,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":62,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":358,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":404,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":143,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":204,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":402,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":445,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":128,"org.easymock.tests.UsageCallCountTest.tooManyCalls":379,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":283,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":176,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":260,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":391,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":125,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":52,"org.easymock.tests.MockingTest.testNiceClassMocking":370,"org.easymock.tests.MockingTest.testClassMocking":365,"org.easymock.tests2.UsageConstraintsTest.testContains":25,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":372,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":110,"org.easymock.tests2.UsageConstraintsTest.testFind":17,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":120,"org.easymock.tests.MockTypeTest.fromEasyMockClass":324,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":265,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":380,"org.easymock.tests.UsageExpectAndReturnTest.object":178,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":94,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":259,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":70,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":437,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":3,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":332,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":512,"org.easymock.tests.UsageTest.exactCallCountByLastCall":152,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":468,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":459,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":456,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":0,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":432,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":184,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":420,"org.easymock.tests.MockClassControlTest.testHashCode":452,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":223,"org.easymock.tests2.EasyMockSupportTest.testVerify":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":277,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":460,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":10,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":316,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":516,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":217,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":298,"org.easymock.tests.UsageVarargTest.varargCharAccepted":436,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":335,"org.easymock.tests2.CaptureTest.testCaptureMultiple":503,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":483,"org.easymock.tests2.UsageTest.openCallCountByLastCall":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":514,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":73,"org.easymock.tests.DefaultClassInstantiatorTest.object":336,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":315,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":330,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":517,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":278,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":123,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":254,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":222,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":451,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":95,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":392,"org.easymock.tests.CapturesMatcherTest.test":505,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":185,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":444,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":103,"org.easymock.tests2.UsageTest.resumeIfFailure":86,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":321,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":292,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":416,"org.easymock.tests2.StubTest.stubWithReturnValue":99,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":1,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":177,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":35,"org.easymock.tests2.SerializationTest.testAllMockedMethod":221,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":189,"org.easymock.samples.SupportTest.voteForRemovals":198,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":199,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":225,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":398,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":499,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":190,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":215,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":457,"org.easymock.tests.UsageExpectAndThrowTest.object":396,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":33,"org.easymock.tests2.DelegateToTest.testWrongClass":207,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":133,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":134,"org.easymock.tests.UsageStrictMockTest.range":145,"org.easymock.samples.ConstructorCalledMockTest.testTax":192,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":296,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":69,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":51,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":509,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":397,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":113,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":266,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":427,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":164,"org.easymock.tests2.CaptureTest.testCaptureNone":45,"org.easymock.tests.UsageUnorderedTest.message":319,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":500,"org.easymock.tests.UsageVerifyTest.twoReturns":139,"org.easymock.tests.UsageVarargTest.varargByteAccepted":441,"org.easymock.tests2.ThreadingTest.testThreadSafe":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":280,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":376,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":491,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":333,"org.easymock.tests2.CaptureTest.testCapture_2617107":210,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":430,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":481,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":357,"org.easymock.tests2.UsageConstraintsTest.any":23,"org.easymock.tests2.StubTest.stub":262,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":351,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":482,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":415,"org.easymock.tests.UsageExpectAndThrowTest.longType":389,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":340,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":350,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":238,"org.easymock.tests2.SerializationTest.testClass":59,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":61,"org.easymock.tests.LimitationsTest.mockNativeMethod":147,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":187,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":117,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":253,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":239,"org.easymock.tests2.NameTest.nameForMocksControl":314,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":255,"org.easymock.tests2.MockedExceptionTest.testMockedException":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":270,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":151,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":390,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":142,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":264,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":88,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":114,"org.easymock.tests.MockingTest.testNicePartialClassMocking":141,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":93,"org.easymock.tests2.CaptureTest.testCaptureLast":44,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":251,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":166,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":21,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":57,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":34,"org.easymock.tests.MockingTest.testTwoMocks":366,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":214,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":168,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":394,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":242,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":37,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":501,"org.easymock.samples.ExampleTest.removeNonExistingDocument":486,"org.easymock.tests.UsageStrictMockTest.differentMethods":146,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":257,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":348,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":224,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":507,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":338,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":107,"org.easymock.tests2.MockBuilderTest.testCreateMockString":309,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":447,"org.easymock.tests.UsageExpectAndThrowTest.floatType":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":271,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":268,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":216,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":287,"org.easymock.tests.UsageVerifyTest.twoThrows":363,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":419,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":102,"org.easymock.samples.ExampleTest.voteAgainstRemoval":196,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":474,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":424,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":96,"org.easymock.tests.LimitationsTest.privateConstructor":407,"org.easymock.tests2.UsageConstraintsTest.testNotNull":36,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":127,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":288,"org.easymock.tests2.UsageTest.defaultResetToNice":85,"org.easymock.samples.ExampleTest.voteAgainstRemovals":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":475,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":183,"org.easymock.tests.UsageVarargTest.differentLength":438,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":252,"org.easymock.tests2.CallbackTest.callback":6,"org.easymock.tests2.UsageConstraintsTest.equals":202,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":246,"org.easymock.tests.UsageTest.openCallCountByLastCall":150,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":13,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":356,"org.easymock.tests.UsageCallCountTest.tooFewCalls":374,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":54,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":429,"org.easymock.tests.UsageThrowableTest.throwCheckedException":124,"org.easymock.tests.MockingTest.testStrictClassMocking":364,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":455,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":56,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":53,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":256,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":353,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":55,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":9,"org.easymock.tests2.CompareToTest.testGreateOrEqual":201,"org.easymock.tests.ObjectMethodsTest.testHashCode":331,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":109,"org.easymock.tests2.NameTest.nameForNiceMock":313,"org.easymock.tests2.DependencyTest.testInterfaceMocking":74,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":4,"org.easymock.samples.ExampleTest.addDocument":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":281,"org.easymock.tests2.DelegateToTest.testStubDelegate":39,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":285,"org.easymock.tests2.AnswerTest.stubAnswer":58,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":144,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":305,"org.easymock.tests.UsageVarargTest.varargLongAccepted":440,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":472,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":186,"org.easymock.tests.UsageExpectAndReturnTest.floatType":170,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":104,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":193,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":422,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":31,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":230,"org.easymock.tests.UsageThrowableTest.noUpperLimit":320,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":14,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":291,"org.easymock.tests2.SerializationTest.test":60,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":211,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":498,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":337,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":169,"org.easymock.tests2.UsageConstraintsTest.testSame":19,"org.easymock.samples.SupportTest.addDocument":490,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":213,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":272,"org.easymock.tests.GenericTest.testPackageScope":116,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":461,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":467,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":229,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":368,"org.easymock.tests2.NameTest.nameForMock":311,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":180,"org.easymock.tests2.UsageStrictMockTest.differentMethods":78,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":308,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":247,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":172,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":400,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":329,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":161,"org.easymock.tests2.MockedExceptionTest.testRealException":290,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":476,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":11,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":76,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":136,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":355,"org.easymock.tests2.NameTest.nameForStrictMock":312,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":303,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":515,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":263,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":92,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":295,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":494,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":32,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":339,"org.easymock.tests.ErrorMessageTest.testGetters":495,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":111,"org.easymock.tests2.UsageStrictMockTest.range":77,"org.easymock.tests2.UsageConstraintsTest.lessThan":38,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":471,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":63,"org.easymock.tests2.CaptureTest.testCaptureRightOne":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":276,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":506,"org.easymock.tests2.UsageConstraintsTest.testOr":20,"org.easymock.tests.UsageRangeTest.combination":158,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":89,"org.easymock.tests.UsageTest.wrongArguments":410,"org.easymock.tests2.MockBuilderTest.testWithConstructor":300,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":273,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":448,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":173,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":464,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":181,"org.easymock.tests.UsageVarargTest.varargShortAccepted":439,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":341,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":377,"org.easymock.tests2.UsageConstraintsTest.cmpTo":24,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":466,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":84,"org.easymock.tests2.CaptureTest.testCaptureFromStub":48,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":345,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":301,"org.easymock.tests.UsageTest.unexpectedCallWithArray":409,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":382,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":375,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":182,"org.easymock.tests2.CaptureTest.testCapture":504,"org.easymock.tests2.UsageConstraintsTest.constraints":15,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":383,"org.easymock.samples.ExampleTest.addAndChangeDocument":487,"org.easymock.tests.UsageStrictMockTest.testVerify":385,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":488,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":381,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":359,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":212,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":155,"org.easymock.tests.LimitationsTest.abstractClass":406,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":174,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":162,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":156,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":496,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":433,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":68}}]

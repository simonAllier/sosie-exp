[{"transplant":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","i":"i"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[6,7,8,9,10,11,12,13,14,15,16,17,17,18,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[56,57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[58,59,60,61,62,63,64],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:71","sourceCode":"java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field)","type":"CtInvocationImpl"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,6,100,101,102,103,104,0,105,106,107,108,109,110,111,112,113,114,7,8,115,116,117,118,119,120,121,122,123,10,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,12,13,14,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,65,15,16,19,66,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,20,221,222,21,22,223,23,24,25,27,29,30,31,224,225,226,227,228,229,230,231,232,32,33,34,35,233,36,37,234,235,236,237,238,239,240,38,241,39,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,41,43,45,46,48,288,50,51,52,53,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,54,307,308,309,310],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[311,312],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[261,268,274,286,313],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:80","failures":[314,315,9,19,26,38,40,316,41,42,43,44,45,46,47,48,317,49],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[277,318],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[319,320,321],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[322,323],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:160","sourceCode":"if (boolean) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[98,99,105,117,197,236,292,304,307],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:230","sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : java.util.List<org.easymock.internal.Injection>) {\n    if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n        if (org.easymock.internal.Injection != null) {\n            throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n        } \n        org.easymock.internal.Injection = org.easymock.internal.Injection;\n    } \n}","type":"CtForEachImpl"},"failures":[65,66,67,68,69,70,71,72,73,324,325,75,76,77,78,79,80,81,326,327],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:409","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:305","failures":[85,86,87,88,89,90,328,91,92,95,96,329,97,98,99,100,101,102,105,107,108,111,112,113,114,7,115,117,118,119,120,121,122,10,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,155,156,157,158,166,167,168,169,12,13,14,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,193,194,197,19,198,199,200,201,203,206,207,208,209,210,211,214,215,216,217,218,219,220,20,222,21,22,223,23,24,25,27,29,30,31,228,229,230,231,232,32,33,34,35,233,36,37,236,238,239,38,241,242,243,244,245,246,247,248,249,250,251,252,253,255,256,257,258,259,260,261,262,263,264,265,266,267,268,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,41,43,45,46,48,288,50,51,52,53,289,290,291,292,293,294,296,298,299,300,303,304,54,307,309,310],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[98,99,103,0,106,107,108,111,123,149,330,164,165,331,332,333,334,190,335,192,195,196,197,22,29,31,234,237,238,239,243,247,248,251,261,276,41,47,48,49,291,292,295,296,297,301,302,303,304],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl() : org.easymock.EasyMockSupport.createNiceControl()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[68,69,70,72,73,74,76,77,78,80,81,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matched"}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[265],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[98,99,0,107,123,336,332,335,192,195,196,238,295,301,302],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[319,320,321],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"clazz"}},{"position":"org.easymock.ConstructorArgs:54","failures":[17,18,337,338,34,37,339,38,340,341,58,342,343,344,345,346,347,50,348,349,51,350,351,352,353,354,355,356,357,358,52,359,360,361,362,363,53,364,365,54,59],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[366,367],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:35","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.EqualsWithDelta:40","failures":[278],"status":-1,"binaryOperator":"(((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[322,323],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[58,59,60,61,62,63,64],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[259,277,280,318],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[368,322,369,370,323,371],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:36","failures":[90,328,97,98,99,0,105,107,108,123,1,372,2,373,332,191,335,236,238,239,374,3,375,376,377,378,379,4,380,294],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.String","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[381,63,64],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[98,99,0,107,123,336,332,335,192,195,196,238,295,301,302],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.LastControl:48","failures":[],"status":0,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[98,99,0,107,123,336,332,335,192,195,196,238,295,301,302],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":262,"org.easymock.tests2.UsageTest.argumentsOrdered":302,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":190,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":252,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":71,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":297,"org.easymock.tests2.StubTest.stubWithReturnValue":222,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":58,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":283,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":66,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":179,"org.easymock.tests2.SerializationTest.testAllMockedMethod":39,"org.easymock.tests2.DelegateToTest.testReturnException":255,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":329,"org.easymock.tests.MockingTest.testPartialClassMocking":12,"org.easymock.samples.SupportTest.voteForRemovals":206,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":4,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":311,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":353,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":51,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":124,"org.easymock.tests.UsageExpectAndThrowTest.object":134,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":290,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":280,"org.easymock.tests2.DelegateToTest.testWrongClass":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":60,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":155,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":156,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":268,"org.easymock.tests2.UsageTest.wrongArguments":295,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":91,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":82,"org.easymock.samples.ConstructorCalledMockTest.testTax":17,"org.easymock.tests.UsageStrictMockTest.range":107,"org.easymock.samples.ExampleTest.answerVsDelegate":199,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":249,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":315,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":32,"org.easymock.tests2.UsageConstraintsTest.testNull":264,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":23,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":135,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":251,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":45,"org.easymock.tests2.CaptureTest.testPrimitive":210,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":345,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":195,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":143,"org.easymock.tests.UsageTest.moreThanOneArgument":191,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":223,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":1,"org.easymock.tests2.CaptureTest.testCaptureNone":215,"org.easymock.tests.UsageUnorderedTest.message":123,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":333,"org.easymock.tests.UsageVerifyTest.twoReturns":99,"org.easymock.tests.UsageVarargTest.varargByteAccepted":152,"org.easymock.tests2.ThreadingTest.testThreadSafe":228,"org.easymock.tests.UsageTest.argumentsOrdered":196,"org.easymock.tests.UsageVarargTest.varargIntAccepted":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":359,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":163,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":15,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":380,"org.easymock.tests2.CaptureTest.testCapture_2617107":209,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":85,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":64,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":40,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":325,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":94,"org.easymock.tests2.UsageConstraintsTest.any":270,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":44,"org.easymock.tests2.StubTest.stub":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":56,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":89,"org.easymock.tests.UsageExpectAndThrowTest.longType":127,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":377,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":319,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":237,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":287,"org.easymock.tests2.SerializationTest.testClass":38,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":288,"org.easymock.tests.LimitationsTest.mockNativeMethod":10,"org.easymock.tests2.DependencyTest.testClassMocking":366,"org.easymock.tests2.AnswerTest.answer":307,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":9,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":189,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":269,"org.easymock.tests2.CaptureTest.testAnd":207,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":77,"org.easymock.tests2.UsageTest.strictResetToDefault":293,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":341,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":240,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":28,"org.easymock.tests2.NameTest.nameForMocksControl":227,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":349,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":246,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":113,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":194,"org.easymock.tests2.DelegateToTest.testDelegate":258,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":14,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":128,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":21,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":46,"org.easymock.tests.MockingTest.testNicePartialClassMocking":13,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":139,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":25,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":381,"org.easymock.tests2.CaptureTest.testCaptureLast":214,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":75,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":96,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":328,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":267,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":37,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":281,"org.easymock.tests2.DependencyTest.testClassMockingSupport":367,"org.easymock.tests.MockingTest.testTwoMocks":11,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":90,"org.easymock.tests2.CaptureTest.testCapture1_2446744":211,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":339,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":170,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":137,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":132,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":301,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":285,"org.easymock.tests.UsageThrowableTest.throwError":115,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":80,"org.easymock.tests.UsageStrictMockTest.differentMethods":108,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":69,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":369,"org.easymock.tests2.ConstraintsToStringTest.andToString":379,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":230,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":334,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":74,"org.easymock.tests2.MockBuilderTest.testCreateMockString":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":350,"org.easymock.tests.UsageExpectAndThrowTest.floatType":126,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":347,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":308,"org.easymock.tests.UsageVerifyTest.twoThrows":98,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":52,"org.easymock.samples.PartialClassMockTest.testGetArea":19,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":86,"org.easymock.samples.ExampleTest.voteAgainstRemoval":201,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":354,"org.easymock.tests2.UsageTest.niceToStrict":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":125,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":338,"org.easymock.tests2.UsageConstraintsTest.testNotNull":284,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":220,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":122,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":43,"org.easymock.tests2.UsageTest.defaultResetToNice":300,"org.easymock.tests2.MockBuilderTest.testCreateMock":47,"org.easymock.samples.ExampleTest.voteAgainstRemovals":198,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":361,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":76,"org.easymock.tests.UsageVarargTest.differentLength":149,"org.easymock.tests2.CallbackTest.callback":291,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":81,"org.easymock.tests.UsageTest.openCallCountByLastCall":193,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":3,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":133,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":247,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":259,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":159,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":93,"org.easymock.tests.UsageCallCountTest.tooFewCalls":161,"org.easymock.tests.UsageOverloadedMethodTest.overloading":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":358,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":274,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":168,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":35,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":100,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":181,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":320,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":273,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":216,"org.easymock.tests.UsageThrowableTest.throwCheckedException":119,"org.easymock.tests2.EasyMockSupportClassTest.testAll":50,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":8,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":2,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":141,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":55,"org.easymock.tests2.CaptureTest.testCaptureAll":208,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":36,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":158,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":79,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":34,"org.easymock.tests2.UsageConstraintsTest.testMatches":275,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":233,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":310,"org.easymock.tests2.CompareToTest.testGreateOrEqual":313,"org.easymock.samples.ExampleTest.voteForRemovals":203,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":63,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":232,"org.easymock.tests2.NameTest.nameForNiceMock":226,"org.easymock.tests.UsageVarargTest.allKinds":154,"org.easymock.tests2.DependencyTest.testInterfaceMocking":289,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":97,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":62,"org.easymock.samples.BasicClassMockTest.testPrintContent":16,"org.easymock.samples.ExampleTest.addDocument":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":364,"org.easymock.tests2.DelegateToTest.testStubDelegate":256,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":121,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":234,"org.easymock.tests2.AnswerTest.stubAnswer":309,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":72,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":57,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":105,"org.easymock.tests2.UsageConstraintsTest.greaterThan":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":348,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":112,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":31,"org.easymock.tests.UsageVarargTest.varargLongAccepted":151,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":109,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":371,"org.easymock.samples.ExampleTest.voteForRemoval":200,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":229,"org.easymock.tests.UsageExpectAndReturnTest.floatType":172,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":188,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":54,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":26,"org.easymock.tests2.ConstraintsToStringTest.orToString":374,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":18,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":324,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":278,"org.easymock.tests.UsageThrowableTest.noUpperLimit":116,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":292,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":260,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":6,"org.easymock.tests2.SerializationTest.test":241,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":212,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":342,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":321,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":322,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":244,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":117,"org.easymock.tests2.UsageConstraintsTest.testSame":265,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":346,"org.easymock.samples.SupportTest.addDocument":205,"org.easymock.tests2.CaptureTest.testCaptureFirst":219,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":245,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":304,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":336,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":351,"org.easymock.tests.GenericTest.testPackageScope":7,"org.easymock.tests2.UsageTest.moreThanOneArgument":294,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":231,"org.easymock.tests2.CaptureTest.testCapture2_2446744":218,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":48,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":73,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":153,"org.easymock.tests.GenericTest.testBridgedEquals":312,"org.easymock.tests2.NameTest.nameForMock":224,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":164,"org.easymock.tests.UsageExpectAndReturnTest.longType":173,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":242,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":317,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":142,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":182,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":282,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":344,"org.easymock.tests2.UsageStrictMockTest.differentMethods":239,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":140,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":174,"org.easymock.tests.UsageCallCountTest.tooManyCalls":165,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":372,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":138,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":114,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":362,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":178,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":327,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":373,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":236,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":129,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":92,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":120,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":33,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":316,"org.easymock.tests2.UsageConstraintsTest.testContains":272,"org.easymock.tests2.NameTest.nameForStrictMock":225,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":20,"org.easymock.tests2.UsageConstraintsTest.testFind":263,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":102,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":305,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":24,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":306,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":103,"org.easymock.tests.UsageExpectAndReturnTest.object":180,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":370,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":279,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":27,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":41,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":326,"org.easymock.tests2.UsageStrictMockTest.range":238,"org.easymock.tests2.UsageConstraintsTest.lessThan":286,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":250,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":61,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":148,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":70,"org.easymock.tests.UsageTest.exactCallCountByLastCall":197,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":157,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":243,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":355,"org.easymock.tests2.CaptureTest.testCaptureRightOne":217,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":83,"org.easymock.tests2.UsageConstraintsTest.testOr":266,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":59,"org.easymock.tests.UsageRangeTest.combination":111,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":22,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":144,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":186,"org.easymock.tests.UsageTest.wrongArguments":192,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":167,"org.easymock.tests2.MockBuilderTest.testWithConstructor":340,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":352,"org.easymock.tests2.EasyMockSupportTest.testVerify":254,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":175,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":356,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":376,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":84,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":323,"org.easymock.tests.UsageVarargTest.varargShortAccepted":150,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":166,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":331,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":330,"org.easymock.tests2.UsageConstraintsTest.cmpTo":271,"org.easymock.tests.UsageVarargTest.varargCharAccepted":147,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":235,"org.easymock.tests2.UsageTest.openCallCountByLastCall":298,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":299,"org.easymock.tests.DefaultClassInstantiatorTest.object":368,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":253,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":42,"org.easymock.tests.UsageTest.unexpectedCallWithArray":335,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":357,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":131,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":0,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":118,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":162,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":343,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":67,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":184,"org.easymock.tests2.UsageConstraintsTest.constraints":261,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":29,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":106,"org.easymock.samples.ExampleTest.addAndChangeDocument":204,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":130,"org.easymock.tests2.ConstraintsToStringTest.notToString":375,"org.easymock.tests.UsageStrictMockTest.testVerify":110,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":187,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":65,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":53,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":104,"org.easymock.tests2.CompareToTest.testGreateThan":318,"org.easymock.tests2.UsageTest.resumeIfFailure":303,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":213,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":87,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":314,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":88,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":169,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":248,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":145}}]

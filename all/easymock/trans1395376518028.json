[{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:269","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1361","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[18,19,20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.EasyMock:1039","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[0,21,1,3,22,23,24,25,5,26,6,8,9,10,11,27],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[28,29,30,31,32,33],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[18,34,35,0,36,21,1,2,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,3,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,4,85,86,87,5,88,26,6,7,8,9,10,89,90,11,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,27,109,110],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[111,112,113,114,115,116,117,118],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[18,119,120,121],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[122,123,124,125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[120],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,124,125],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:60","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[142],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[143],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[65,144,68,69,70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"failures":[145],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:175","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Constructor<?>.getModifiers())) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[146],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1709","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:71","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[103],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1999","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Character>(org.easymock.Capture<java.lang.Character>))","type":"CtInvocationImpl"},"failures":[147],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[126,53,148,149,137,9,150,122,123,151,152,90,153,154,155,156,13,157,158,159,14,15,160,16,161,162,17,163,164,165,166,167,168,169,170,171,172,173,174],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksControl:105","failures":[175,176,18,119,177,178,179,180,181,120,121,182,183,184,185,186,187,188,34,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,35,209,0,36,21,1,2,210,126,211,212,213,214,215,37,38,216,217,218,219,220,127,128,129,130,221,39,222,40,223,41,42,224,43,44,225,226,227,228,229,230,231,232,53,233,3,54,55,56,234,235,236,57,58,59,60,237,238,143,239,240,241,242,243,244,19,147,245,246,247,248,249,250,20,251,252,253,61,254,255,256,257,258,62,63,259,260,261,262,263,264,265,144,266,267,268,269,270,271,272,273,274,72,73,74,75,275,76,276,277,77,78,278,279,280,281,282,283,284,285,286,287,131,288,82,289,132,290,291,148,292,83,293,149,84,4,85,133,134,135,136,137,138,86,294,87,5,88,26,6,7,295,8,9,10,296,297,298,150,122,123,299,300,301,302,303,304,305,306,139,151,307,89,308,309,310,311,312,313,152,314,315,316,140,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,90,11,91,92,338,339,93,94,95,340,341,342,343,344,345,346,347,348,96,349,97,98,350,351,99,100,101,352,103,104,106,107,353,354,355,356,357,358,108,359,360,361,362,363,142,364,365,366,367,27,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,109,110,12,141,124,125,390,391,392,393,394,153,154,155,156,13,157,158,159,14,15,160,16,161,162,17,163,164,165,166,167,168,395,169,170,171,172,173,174,396,397,398,399,400,401,402,403,404,405,406,407],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[408],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"failures":[175,176,18,119,178,179,180,181,120,121,183,184,185,186,187,188,34,189,190,191,192,193,194,195,196,197,198,201,202,409,410,411,412,203,206,207,208,35,209,0,36,21,1,2,210,126,37,127,128,129,130,221,39,222,40,223,41,42,224,43,44,225,226,227,228,229,230,231,232,45,46,413,414,48,49,50,51,52,53,233,3,54,55,56,234,235,236,57,58,59,60,238,143,239,241,415,242,416,417,243,244,19,147,245,246,247,248,249,250,20,251,252,253,61,62,418,64,65,419,265,66,67,266,267,268,269,270,272,420,68,273,421,422,423,424,425,69,426,427,70,428,429,429,289,132,290,291,148,292,293,149,85,133,134,135,136,137,138,430,86,294,87,5,88,26,6,7,8,9,10,431,432,433,305,306,139,151,307,89,309,310,333,334,335,336,337,90,11,91,92,338,339,93,94,95,340,341,342,343,344,345,346,347,348,97,98,350,351,99,100,101,353,354,355,357,358,108,359,360,361,362,363,142,364,365,366,367,27,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,153,154,155,156,13,157,158,159,14,15,160,16,161,162,17,163,164,165,166,167,168,395,169,170,171,172,173,174,434,435,396,397,398,399,400,401,402,404,405,406,436,437,407,32,33,438],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[312,391],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[434,439,440],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"leafClass"}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[21,54,57,58,441,85,87,26,9,10,91,92,93,94,27],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":119,"org.easymock.tests2.UsageTest.argumentsOrdered":58,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":90,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":225,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":319,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":56,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":407,"org.easymock.tests2.DelegateToTest.testReturnException":238,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":134,"org.easymock.tests.MockingTest.testPartialClassMocking":431,"org.easymock.tests.MockClassControlTest.testToString":79,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":274,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":303,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":328,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":410,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":153,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":22,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":202,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":121,"org.easymock.tests2.UsageTest.wrongArguments":54,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":305,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":263,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":342,"org.easymock.samples.ExampleTest.answerVsDelegate":398,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":105,"org.easymock.tests2.UsageConstraintsTest.testNull":179,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":301,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":421,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":44,"org.easymock.tests2.CaptureTest.testPrimitive":147,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":307,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":167,"org.easymock.tests.UsageTest.moreThanOneArgument":11,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":273,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":346,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":390,"org.easymock.tests.UsageTest.argumentsOrdered":94,"org.easymock.tests.UsageVarargTest.varargIntAccepted":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":324,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":142,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":146,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":45,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":219,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":313,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":367,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":62,"org.easymock.tests.ReplayStateInvalidUsageTest.times":286,"org.easymock.tests2.AnswerTest.answer":203,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":326,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":269,"org.easymock.tests2.CaptureTest.testAnd":243,"org.easymock.tests2.UsageTest.strictResetToDefault":233,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":69,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":345,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":223,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":309,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":394,"org.easymock.tests2.DelegateToTest.testDelegate":241,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":337,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":109,"org.easymock.tests2.CaptureTest.testCapture1_2446744":245,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":162,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":267,"org.easymock.tests.UsageThrowableTest.throwError":168,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":280,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":104,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":348,"org.easymock.samples.PartialClassMockTest.testGetArea":438,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":281,"org.easymock.tests.MockingTest.testInterfaceMocking":299,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":364,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":297,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":154,"org.easymock.tests2.UsageTest.niceToStrict":55,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":78,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":311,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":413,"org.easymock.tests2.MockBuilderTest.testCreateMock":50,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":260,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":15,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":41,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":123,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":96,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":340,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":115,"org.easymock.tests.UsageOverloadedMethodTest.overloading":291,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":187,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":149,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":290,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":379,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":186,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":250,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":356,"org.easymock.tests2.EasyMockSupportClassTest.testAll":409,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":435,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":165,"org.easymock.tests2.CaptureTest.testCaptureAll":244,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":268,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":335,"org.easymock.tests.MockNameTest.defaultName":82,"org.easymock.tests2.UsageConstraintsTest.testMatches":188,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":278,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":347,"org.easymock.samples.ExampleTest.voteForRemovals":402,"org.easymock.tests.UsageVarargTest.allKinds":363,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":8,"org.easymock.samples.BasicClassMockTest.testPrintContent":437,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":336,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":173,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":35,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":138,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":216,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":240,"org.easymock.tests2.UsageConstraintsTest.greaterThan":189,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":308,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":70,"org.easymock.samples.ExampleTest.voteForRemoval":399,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":229,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":106,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":424,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":430,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":140,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":222,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":169,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":133,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":237,"org.easymock.tests2.CaptureTest.testCaptureFirst":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":316,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":40,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":60,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":85,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":375,"org.easymock.tests2.UsageTest.moreThanOneArgument":3,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":231,"org.easymock.tests2.CaptureTest.testCapture2_2446744":252,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":327,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":362,"org.easymock.tests.GenericTest.testBridgedEquals":440,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":116,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":113,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":100,"org.easymock.tests.UsageExpectAndReturnTest.longType":371,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":221,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":333,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":166,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":194,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":352,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":164,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":124,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":344,"org.easymock.tests.UsageCallCountTest.tooManyCalls":101,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":97,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":376,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":262,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":157,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":172,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":64,"org.easymock.tests2.UsageConstraintsTest.testContains":185,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":349,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":129,"org.easymock.tests2.UsageConstraintsTest.testFind":178,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":148,"org.easymock.tests.MockTypeTest.fromEasyMockClass":103,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":86,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":272,"org.easymock.tests.UsageExpectAndReturnTest.object":378,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":425,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":261,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":43,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":358,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":277,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":117,"org.easymock.tests.UsageTest.exactCallCountByLastCall":95,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":315,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":391,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":302,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":384,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":353,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":293,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":212,"org.easymock.tests2.EasyMockSupportTest.testVerify":227,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":392,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":122,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":292,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":266,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":264,"org.easymock.tests.UsageVarargTest.varargCharAccepted":357,"org.easymock.tests2.CaptureTest.testCaptureMultiple":408,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":332,"org.easymock.tests2.UsageTest.openCallCountByLastCall":234,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":111,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":226,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":150,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":76,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":441,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":159,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":170,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":257,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":211,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":426,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":81,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":158,"org.easymock.tests.CapturesMatcherTest.test":429,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":385,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":412,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":80,"org.easymock.tests2.UsageTest.resumeIfFailure":59,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":102,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":136,"org.easymock.tests2.StubTest.stubWithReturnValue":126,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":195,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":377,"org.easymock.tests2.SerializationTest.testAllMockedMethod":416,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":325,"org.easymock.samples.SupportTest.voteForRemovals":406,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":214,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":161,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":331,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":204,"org.easymock.tests.UsageExpectAndThrowTest.object":160,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":304,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":192,"org.easymock.tests2.DelegateToTest.testWrongClass":239,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":388,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":389,"org.easymock.samples.ConstructorCalledMockTest.testTax":32,"org.easymock.tests.UsageStrictMockTest.range":26,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":199,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":224,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":418,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":114,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":16,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":48,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":131,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":93,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":341,"org.easymock.tests2.CaptureTest.testCaptureNone":249,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":298,"org.easymock.tests.UsageUnorderedTest.message":27,"org.easymock.tests.UsageVerifyTest.twoReturns":10,"org.easymock.tests.UsageVarargTest.varargByteAccepted":361,"org.easymock.tests2.ThreadingTest.testThreadSafe":228,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":351,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":436,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":77,"org.easymock.tests2.CaptureTest.testCapture_2617107":19,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":12,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":151,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":329,"org.easymock.tests2.UsageConstraintsTest.any":183,"org.easymock.tests2.StubTest.stub":210,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":285,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":125,"org.easymock.tests.UsageExpectAndThrowTest.longType":156,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":330,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":284,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":36,"org.easymock.tests2.SerializationTest.testClass":415,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":37,"org.easymock.tests.LimitationsTest.mockNativeMethod":428,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":439,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":387,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":256,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":2,"org.easymock.tests2.NameTest.nameForMocksControl":75,"org.easymock.tests2.MockedExceptionTest.testMockedException":128,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":258,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":339,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":433,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":13,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":271,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":420,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":49,"org.easymock.tests.MockingTest.testNicePartialClassMocking":432,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":423,"org.easymock.tests2.CaptureTest.testCaptureLast":248,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":254,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":110,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":120,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":67,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":193,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":144,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":368,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":14,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":57,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":197,"org.easymock.samples.ExampleTest.removeNonExistingDocument":403,"org.easymock.tests.UsageStrictMockTest.differentMethods":6,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":259,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":282,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":213,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":230,"org.easymock.tests2.MockBuilderTest.testCreateMockString":52,"org.easymock.tests.UsageExpectAndThrowTest.floatType":155,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":34,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":206,"org.easymock.tests.UsageVerifyTest.twoThrows":9,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":411,"org.easymock.samples.ExampleTest.voteAgainstRemoval":400,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":320,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":427,"org.easymock.tests2.UsageConstraintsTest.testNotNull":196,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":174,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":127,"org.easymock.tests2.UsageTest.defaultResetToNice":236,"org.easymock.samples.ExampleTest.voteAgainstRemovals":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":321,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":383,"org.easymock.tests.UsageVarargTest.differentLength":108,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":255,"org.easymock.tests2.CallbackTest.callback":61,"org.easymock.tests2.UsageConstraintsTest.equals":177,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":31,"org.easymock.tests.UsageTest.openCallCountByLastCall":338,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":175,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":139,"org.easymock.tests.UsageCallCountTest.tooFewCalls":98,"org.easymock.tests2.ConstraintsToStringTest.nullToString":145,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":419,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":343,"org.easymock.tests.UsageThrowableTest.throwCheckedException":171,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":132,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":66,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":63,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":65,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":287,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":265,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":208,"org.easymock.tests.ObjectMethodsTest.testHashCode":276,"org.easymock.tests2.NameTest.nameForNiceMock":74,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":232,"org.easymock.tests2.DependencyTest.testInterfaceMocking":201,"org.easymock.samples.ExampleTest.addDocument":401,"org.easymock.tests2.DelegateToTest.testStubDelegate":143,"org.easymock.tests2.AnswerTest.stubAnswer":207,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":5,"org.easymock.tests.UsageVarargTest.varargLongAccepted":360,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":318,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":386,"org.easymock.tests.UsageExpectAndReturnTest.floatType":370,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":417,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":33,"org.easymock.tests.UsageThrowableTest.noUpperLimit":395,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":190,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":84,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":218,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":176,"org.easymock.tests2.SerializationTest.test":242,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":246,"org.easymock.tests2.UsageConstraintsTest.testSame":180,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":369,"org.easymock.samples.SupportTest.addDocument":405,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":283,"org.easymock.tests.GenericTest.testPackageScope":434,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":393,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":314,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":217,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":300,"org.easymock.tests2.NameTest.nameForMock":72,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":380,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":30,"org.easymock.tests2.UsageStrictMockTest.differentMethods":1,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":372,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":17,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":275,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":310,"org.easymock.tests2.MockedExceptionTest.testRealException":130,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":107,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":323,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":322,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":288,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":306,"org.easymock.tests2.NameTest.nameForStrictMock":73,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":112,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":270,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":422,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":191,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":23,"org.easymock.tests.ErrorMessageTest.testGetters":24,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":46,"org.easymock.tests2.UsageStrictMockTest.range":21,"org.easymock.tests2.UsageConstraintsTest.lessThan":198,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":215,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":317,"org.easymock.tests2.CaptureTest.testCaptureRightOne":20,"org.easymock.tests2.UsageConstraintsTest.testOr":181,"org.easymock.tests.UsageRangeTest.combination":89,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":68,"org.easymock.tests.UsageTest.wrongArguments":92,"org.easymock.tests2.MockBuilderTest.testWithConstructor":28,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":312,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":381,"org.easymock.tests.UsageVarargTest.varargShortAccepted":359,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":99,"org.easymock.tests2.UsageConstraintsTest.cmpTo":184,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":152,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":235,"org.easymock.tests2.CaptureTest.testCaptureFromStub":251,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":279,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":47,"org.easymock.tests.UsageTest.unexpectedCallWithArray":91,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":87,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":350,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":29,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":382,"org.easymock.tests2.UsageConstraintsTest.constraints":18,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":88,"org.easymock.samples.ExampleTest.addAndChangeDocument":404,"org.easymock.tests.UsageStrictMockTest.testVerify":295,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":396,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":294,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":334,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":247,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":365,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":374,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":366,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":42,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":25,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":354}}]

[{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[0,1,2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[3,4,4,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[60,61,22,62],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[63,64,65],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1277","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[66,67,68,69,70,71],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[8,72,73,74,75,76,77,78,79,42],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[104],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,60,61,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,25,26,148,149,97,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,71,173],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"failures":[174,175],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.Range:36","failures":[3,4,5,176,177,178,179,180,181,182,183,184,6,7,185,186,187,8,72,188,189,190,191,192,193,105,194,106,107,108,109,110,195,111,112,113,114,115,116,117,118,119,120,121,122,123,60,61,124,125,126,127,128,129,130,131,132,133,196,197,198,9,199,10,11,200,201,12,13,14,73,15,202,74,16,17,203,18,134,135,136,137,138,139,140,141,142,143,144,145,146,147,19,20,204,21,22,23,24,205,25,206,207,26,27,28,29,208,30,209,210,211,148,212,213,214,31,215,80,81,82,83,84,85,86,87,88,89,90,91,216,217,218,219,220,62,221,222,223,224,225,226,227,228,229,230,231,232,149,92,93,94,95,96,97,98,99,100,101,102,103,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,32,33,34,35,248,249,36,37,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,38,267,268,39,269,270,271,272,273,274,275,276,277,40,278,279,280,281,282,41,283,284,285,286,287,288,289,290,291,292,150,151,293,294,295,42,296,43,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,44,45,46,343,47,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,48,364,365,366,367,49,368,369,370,371,372,373,374,375,376,63,64,377,378,379,380,381,382,383,384,70,385,386,387,388,389,390,50,391,392,393,394,395,396,397,398,399,400,0,401,402,403,404,405,406,1,407,152,153,408,409,154,155,410,156,411,412,413,414,415,416,417,418,51,52,53,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,65,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,157,158,54,55,56,57,457,458,459,460,461,58,462,159,160,161,162,163,463,464,465,466,164,165,166,167,168,467,468,469,470,471,472,473,474,59,475,476,477,478,169,170,479,480,481,482,483,484,485,486,487,488,489,490,171,172,491,492,71,173,493,494,495,496,497,498,499,500],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[72,73,75,76,77,501,502],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[216,222,247,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,373,383,387,153,408,409,156,412,413,414,415,416,417,422,426,169,480],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[66,67,68,69,70,71],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[219,224,225,293,376,503,70,385,388,389,152,480,481,71,494],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[147],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[4,4,5,5,107,108,111,112,113,114,120,122,123,61,124,130,131,132,145,150,359,360,361,362,363,378,154,159,160,163,164,165,166,167,168,171,172,173],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[72,504,505,199,200,73,506,203,34,37,250],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1555","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[121],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[8,72,73,74,75,76,77,78,79,42],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"failures":[174],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[405,507,508],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[42,296,43,509],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[177,234,236,238,372],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.RecordState:280","failures":[177,234,235,236,238,372],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[405,507,508],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[3,4,5,176,177,178,179,180,181,182,183,184,6,7,185,186,187,8,72,189,190,191,192,193,105,194,106,107,108,109,110,195,111,112,113,114,115,116,117,118,119,120,121,122,123,60,61,124,125,126,127,128,129,130,131,132,133,196,197,198,9,10,11,201,12,13,14,15,202,74,16,17,18,134,135,136,137,138,139,140,141,142,143,144,145,146,147,510,511,512,513,514,515,19,20,204,21,22,23,24,205,25,206,207,26,27,28,29,208,30,209,516,210,211,148,212,213,214,31,215,80,81,82,83,84,85,86,87,88,89,90,91,216,217,218,219,220,62,221,222,223,224,225,226,227,228,229,230,231,232,149,92,93,94,95,96,97,98,99,100,101,102,103,233,234,235,236,237,238,239,240,241,243,244,245,246,247,32,33,34,35,248,249,36,37,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,38,267,268,39,269,270,271,272,273,274,275,276,277,40,278,279,280,281,282,41,283,284,285,286,287,288,289,290,291,292,150,151,293,294,295,42,296,43,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,44,45,46,343,47,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,48,364,365,366,367,49,368,369,370,371,372,373,374,375,376,63,64,377,378,379,380,381,382,383,384,70,385,386,387,388,389,390,50,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,152,153,408,409,154,155,410,156,411,412,413,414,415,416,417,418,51,52,53,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,65,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,157,158,54,55,56,57,457,458,459,460,461,58,462,159,160,161,162,163,463,464,465,466,164,165,166,167,168,467,468,469,470,471,472,473,474,59,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,475,476,477,478,169,170,479,480,481,482,483,484,485,486,487,488,489,490,171,172,491,492,71,173,493,494,495,496,497,498,499,500],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"position":"org.easymock.internal.LastControl:48","failures":[],"status":0,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[402,406],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[195,224,388],"status":-1,"binaryOperator":"(java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[213,214,31,215,216,222,247,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,373,383,387,155,412,416,417,422,161,162,475,476,477,478,169,170],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[418],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"actualTypeArgument","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"methodArgs","args":"methodArgs"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"failures":[134,135,136,137,138,139,140,141,143,144,145,146,147,175],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:234","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[353],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[3,4,4,5,5,176,177,178,179,180,181,182,183,184,6,7,185,186,187,8,72,188,189,190,191,192,193,105,194,106,107,108,109,110,195,111,112,113,114,115,116,117,118,119,120,121,122,123,60,61,124,125,126,127,128,129,130,131,132,133,196,197,198,9,199,10,11,200,201,12,13,14,73,15,74,16,17,203,18,134,135,136,137,138,139,140,141,142,143,144,145,146,147,19,20,204,21,22,23,24,205,25,206,207,26,27,28,29,208,30,209,210,211,148,212,213,214,31,215,80,81,82,83,84,85,86,87,88,89,90,91,216,217,218,219,220,62,221,222,223,224,225,226,227,228,229,230,231,232,149,92,93,94,95,96,97,98,99,100,101,102,103,233,234,235,236,237,238,239,243,244,245,246,247,32,33,34,35,249,36,37,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,38,267,268,39,269,270,271,272,273,274,275,276,277,40,278,279,280,281,282,41,283,284,285,286,287,288,289,290,291,292,150,151,293,294,295,42,296,43,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,44,45,46,343,47,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,48,366,367,49,368,369,370,371,372,373,374,375,376,63,64,377,378,379,380,381,382,383,384,70,385,386,387,388,389,390,50,391,392,393,394,395,396,397,398,399,400,0,401,402,403,404,405,406,1,407,152,153,408,409,154,155,410,156,411,412,413,414,415,416,417,418,51,52,53,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,65,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,157,158,54,55,56,57,457,458,459,460,461,58,462,159,160,161,162,163,463,464,465,466,164,165,166,167,168,467,468,469,470,471,472,473,474,59,475,476,477,478,169,170,479,480,481,482,483,484,485,486,487,488,489,490,171,172,491,492,71,173,493,494,495,496,497,498,499,500],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":110,"org.easymock.tests2.UsageTest.argumentsOrdered":225,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":383,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":261,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":433,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":62,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":184,"org.easymock.tests2.DelegateToTest.testReturnException":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":476,"org.easymock.tests.MockingTest.testPartialClassMocking":45,"org.easymock.tests.MockClassControlTest.testToString":55,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":189,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":468,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":441,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":272,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":39,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":297,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":231,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":538,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":75,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":116,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":159,"org.easymock.tests2.UsageTest.wrongArguments":219,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":103,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":465,"org.easymock.samples.ExampleTest.answerVsDelegate":177,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":49,"org.easymock.tests2.UsageConstraintsTest.testNull":112,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":345,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":21,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":459,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":260,"org.easymock.tests2.CaptureTest.testPrimitive":137,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":163,"org.easymock.tests.UsageTest.moreThanOneArgument":384,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":316,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":204,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":361,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":391,"org.easymock.tests.UsageTest.argumentsOrdered":389,"org.easymock.tests.UsageVarargTest.varargIntAccepted":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":438,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":164,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":502,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":9,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":90,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":241,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":13,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":425,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":168,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":522,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":97,"org.easymock.tests.ReplayStateInvalidUsageTest.times":355,"org.easymock.tests2.DependencyTest.testClassMocking":228,"org.easymock.tests2.AnswerTest.answer":285,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":439,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":198,"org.easymock.tests2.CaptureTest.testAnd":134,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":365,"org.easymock.tests2.UsageTest.strictResetToDefault":217,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":26,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":200,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":360,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":255,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":381,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":395,"org.easymock.tests2.DelegateToTest.testDelegate":238,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":521,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":312,"org.easymock.tests.LimitationsTest.mockFinalMethod":462,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":169,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":400,"org.easymock.tests2.DependencyTest.testClassMockingSupport":229,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":63,"org.easymock.tests2.CaptureTest.testCapture1_2446744":138,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":205,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":310,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":196,"org.easymock.tests.UsageThrowableTest.throwError":156,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":349,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":367,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":91,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":320,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":363,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":504,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":284,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":525,"org.easymock.samples.PartialClassMockTest.testGetArea":3,"org.easymock.tests.MockingTest.testInterfaceMocking":343,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":165,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":499,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":59,"org.easymock.tests2.UsageTest.niceToStrict":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":273,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":298,"org.easymock.tests2.ThreadingTest.testChangeDefault":516,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":423,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":104,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":12,"org.easymock.tests2.MockBuilderTest.testCreateMock":16,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":280,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":100,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":66,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":306,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":256,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":364,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":409,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":482,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":463,"org.easymock.tests.UsageOverloadedMethodTest.overloading":421,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":282,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":122,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":373,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":420,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":332,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":507,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":121,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":143,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":449,"org.easymock.tests.MockClassControlTest.testEquals":458,"org.easymock.tests2.EasyMockSupportClassTest.testAll":38,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":52,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":314,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":398,"org.easymock.tests2.CaptureTest.testCaptureAll":135,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":197,"org.easymock.tests.MockNameTest.defaultName":410,"org.easymock.tests2.UsageConstraintsTest.testMatches":123,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":347,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":362,"org.easymock.samples.ExampleTest.voteForRemovals":181,"org.easymock.tests.UsageVarargTest.allKinds":157,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":479,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":399,"org.easymock.samples.BasicClassMockTest.testPrintContent":7,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":416,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":170,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":87,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":237,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":1,"org.easymock.tests2.UsageConstraintsTest.greaterThan":61,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":267,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":380,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":29,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":526,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":407,"org.easymock.samples.ExampleTest.voteForRemoval":178,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":208,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":210,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":368,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":242,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":24,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":518,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":50,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":216,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":430,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":253,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":265,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":475,"org.easymock.tests2.CaptureTest.testCaptureFirst":147,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":233,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":429,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":254,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":227,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":376,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":328,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":148,"org.easymock.tests2.CaptureTest.testCapture2_2446744":146,"org.easymock.tests2.UsageTest.moreThanOneArgument":218,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":440,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":17,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":456,"org.easymock.tests.GenericTest.testBridgedEquals":419,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":489,"org.easymock.tests.UsageExpectAndReturnTest.longType":324,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":396,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":251,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":315,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":128,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":378,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":313,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":318,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":359,"org.easymock.tests.UsageCallCountTest.tooManyCalls":490,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":281,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":329,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":102,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":302,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":415,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":33,"org.easymock.tests.MockingTest.testNiceClassMocking":346,"org.easymock.tests.MockingTest.testClassMocking":342,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":483,"org.easymock.tests2.UsageConstraintsTest.testContains":120,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":31,"org.easymock.tests2.UsageConstraintsTest.testFind":111,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":422,"org.easymock.tests.MockTypeTest.fromEasyMockClass":366,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":491,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":106,"org.easymock.tests.UsageExpectAndReturnTest.object":331,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":25,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":101,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":259,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":451,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":76,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":473,"org.easymock.tests.UsageTest.exactCallCountByLastCall":390,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":428,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":467,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":392,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":72,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":446,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":337,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":372,"org.easymock.tests.MockClassControlTest.testHashCode":457,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":81,"org.easymock.tests2.EasyMockSupportTest.testVerify":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":275,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":393,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":408,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":370,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":133,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":149,"org.easymock.tests.UsageVarargTest.varargCharAccepted":450,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":0,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":292,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":445,"org.easymock.tests2.UsageTest.openCallCountByLastCall":221,"org.easymock.tests.DefaultClassInstantiatorTest.object":401,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":262,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":153,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":471,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":503,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":276,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":304,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":413,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":95,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":80,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":524,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":27,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":57,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":303,"org.easymock.tests.CapturesMatcherTest.test":175,"org.easymock.tests.ReplayStateInvalidCallsTest.times":530,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":338,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":317,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":531,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":41,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":56,"org.easymock.tests2.UsageTest.resumeIfFailure":226,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":48,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":240,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":478,"org.easymock.tests2.StubTest.stubWithReturnValue":247,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":73,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":129,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":330,"org.easymock.tests2.SerializationTest.testAllMockedMethod":43,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":65,"org.easymock.samples.SupportTest.voteForRemovals":187,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":67,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":418,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":83,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":309,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":509,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":444,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":286,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":469,"org.easymock.tests.UsageExpectAndThrowTest.object":307,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":126,"org.easymock.tests2.DelegateToTest.testWrongClass":236,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":528,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":171,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":172,"org.easymock.tests.UsageStrictMockTest.range":494,"org.easymock.samples.ConstructorCalledMockTest.testTax":4,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":244,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":258,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":32,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":308,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":14,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":264,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":357,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":464,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":68,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":520,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":500,"org.easymock.tests2.CaptureTest.testCaptureNone":142,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":511,"org.easymock.tests.UsageUnorderedTest.message":152,"org.easymock.tests.UsageVerifyTest.twoReturns":481,"org.easymock.tests.UsageVarargTest.varargByteAccepted":455,"org.easymock.tests2.ThreadingTest.testThreadSafe":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":278,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":487,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":474,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":6,"org.easymock.tests2.CaptureTest.testCapture_2617107":136,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":442,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":162,"org.easymock.tests2.UsageConstraintsTest.any":118,"org.easymock.tests2.StubTest.stub":246,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":354,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":319,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":443,"org.easymock.tests.UsageExpectAndThrowTest.longType":300,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":405,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":353,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":151,"org.easymock.tests2.SerializationTest.testClass":42,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":85,"org.easymock.tests.LimitationsTest.mockNativeMethod":58,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":53,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":340,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":94,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":536,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":295,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":512,"org.easymock.tests2.NameTest.nameForMocksControl":193,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":96,"org.easymock.tests2.MockedExceptionTest.testMockedException":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":268,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":387,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":47,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":194,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":301,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":19,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":15,"org.easymock.tests.MockingTest.testNicePartialClassMocking":46,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":23,"org.easymock.tests2.CaptureTest.testCaptureLast":141,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":92,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":64,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":535,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":115,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":37,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":127,"org.easymock.tests.MockingTest.testTwoMocks":44,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":532,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":250,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":321,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":305,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":224,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":131,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":515,"org.easymock.samples.ExampleTest.removeNonExistingDocument":182,"org.easymock.tests.UsageStrictMockTest.differentMethods":495,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":99,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":351,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":82,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":514,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":403,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":211,"org.easymock.tests2.MockBuilderTest.testCreateMockString":18,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":269,"org.easymock.tests.UsageExpectAndThrowTest.floatType":299,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":266,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":288,"org.easymock.tests.UsageVerifyTest.twoThrows":480,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":188,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":40,"org.easymock.samples.ExampleTest.voteAgainstRemoval":179,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":434,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":28,"org.easymock.tests.LimitationsTest.privateConstructor":461,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":505,"org.easymock.tests2.UsageConstraintsTest.testNotNull":130,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":417,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":213,"org.easymock.tests2.UsageTest.defaultResetToNice":223,"org.easymock.samples.ExampleTest.voteAgainstRemovals":176,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":435,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":336,"org.easymock.tests.UsageVarargTest.differentLength":452,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":93,"org.easymock.tests2.CallbackTest.callback":232,"org.easymock.tests2.UsageConstraintsTest.equals":195,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":206,"org.easymock.tests.UsageTest.openCallCountByLastCall":386,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":107,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":161,"org.easymock.tests.UsageCallCountTest.tooFewCalls":485,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":35,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":466,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":513,"org.easymock.tests.UsageThrowableTest.throwCheckedException":414,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":69,"org.easymock.tests.MockingTest.testStrictClassMocking":341,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":155,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":36,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":98,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":34,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":356,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":249,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":290,"org.easymock.tests.ObjectMethodsTest.testHashCode":472,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":501,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":534,"org.easymock.tests2.NameTest.nameForNiceMock":192,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":212,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":529,"org.easymock.tests2.DependencyTest.testInterfaceMocking":230,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":77,"org.easymock.samples.ExampleTest.addDocument":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":279,"org.easymock.tests2.DelegateToTest.testStubDelegate":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":283,"org.easymock.tests2.AnswerTest.stubAnswer":289,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":173,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":202,"org.easymock.tests.UsageVarargTest.varargLongAccepted":454,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":432,"org.easymock.tests.UsageExpectAndReturnTest.floatType":323,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":339,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":8,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":5,"org.easymock.tests.UsageThrowableTest.noUpperLimit":411,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":124,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":89,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":374,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":108,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":239,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":139,"org.easymock.tests2.SerializationTest.test":296,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":508,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":402,"org.easymock.tests2.UsageConstraintsTest.testSame":113,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":322,"org.easymock.samples.SupportTest.addDocument":186,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":2,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":248,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":519,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":270,"org.easymock.tests.GenericTest.testPackageScope":51,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":394,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":427,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":88,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":344,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":517,"org.easymock.tests2.NameTest.nameForMock":190,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":333,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":203,"org.easymock.tests2.UsageStrictMockTest.differentMethods":294,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":207,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":325,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":311,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":470,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":382,"org.easymock.tests2.MockedExceptionTest.testRealException":215,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":437,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":436,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":150,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":160,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":358,"org.easymock.tests2.NameTest.nameForStrictMock":191,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":201,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":105,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":22,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":243,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":404,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":125,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":10,"org.easymock.tests2.UsageStrictMockTest.range":293,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":523,"org.easymock.tests2.UsageConstraintsTest.lessThan":132,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":431,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":78,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":252,"org.easymock.tests2.CaptureTest.testCaptureRightOne":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":274,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":510,"org.easymock.tests2.UsageConstraintsTest.testOr":114,"org.easymock.tests.UsageRangeTest.combination":379,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":20,"org.easymock.tests.UsageTest.wrongArguments":385,"org.easymock.tests2.MockBuilderTest.testWithConstructor":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":271,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":54,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":424,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":334,"org.easymock.tests.UsageVarargTest.varargShortAccepted":453,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":406,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":488,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":537,"org.easymock.tests2.UsageConstraintsTest.cmpTo":119,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":287,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":527,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":426,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":222,"org.easymock.tests2.CaptureTest.testCaptureFromStub":145,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":348,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":11,"org.easymock.tests.UsageTest.unexpectedCallWithArray":70,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":533,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":71,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":486,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":506,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":335,"org.easymock.tests2.CaptureTest.testCapture":174,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":493,"org.easymock.tests2.UsageConstraintsTest.constraints":109,"org.easymock.samples.ExampleTest.addAndChangeDocument":183,"org.easymock.tests.UsageStrictMockTest.testVerify":497,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":185,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":492,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":397,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":140,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":166,"org.easymock.tests.LimitationsTest.abstractClass":460,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":327,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":167,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":375,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":447,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":257}}]

[{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.Invocation:209","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:206","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"private static class MockHandler implements java.lang.reflect.InvocationHandler {\n    private final java.lang.reflect.InvocationHandler delegate;\n\n    private final java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockHandler(java.lang.reflect.InvocationHandler delegate ,java.lang.reflect.Method... mockedMethods) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n        this.java.util.Set<java.lang.reflect.Method> = java.lang.reflect.Method[] != null ? new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[])) : null;\n    }\n\n    public java.lang.Object invoke(java.lang.Object obj, java.lang.reflect.Method method, java.lang.Object[] args) throws java.lang.Throwable {\n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()));\n        if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n            return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    private boolean isMocked(java.lang.reflect.Method method) {\n        return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:67","type":"CtClassImpl"},"status":-2},{"failures":[0,1],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.DefaultClassInstantiator:192","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:318","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.matchers.CompareTo:42","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:161","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","position":"org.easymock.internal.EasyMockProperties:44","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:643","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{"org.easymock.internal.MocksControl.classProxyFactory":"org.easymock.internal.MocksControl.interfaceProxyFactory"},"name":"replace","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = this.org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:135","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n    java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n} catch (java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n}","position":"org.easymock.internal.AndroidClassProxyFactory:46","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"methodArgs":"args"},"name":"add","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:249","type":"CtInvocationImpl"},"status":-2},{"failures":[2],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.DefaultClassInstantiator:190","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.MocksBehavior:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-4434322855124959723L","position":"org.easymock.internal.ThrowableWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:80","type":"CtIfImpl"},"status":-2},{"failures":[3,4,5],"binaryOperator":"int <= 0","name":"removeConditional","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","position":"org.easymock.internal.BridgeMethodResolver:338","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ClassProxyFactory:194","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>))","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","position":"org.easymock.internal.RecordState:181","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:117","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder))","position":"org.easymock.internal.MocksBehavior:148","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-2},{"failures":[6,7],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"variableMapping":{"method":"method","finalizeMethod":"method"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:97","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"status":-2},{"failures":[12,57,58],"variableMapping":{"result":"toStringMethod","bridgeMethod":"toStringMethod"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:122","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MocksControl:225","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Field[] java.lang.reflect.Field[] = java.lang.Class<?>.getDeclaredFields()","position":"org.easymock.internal.Injector:105","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"controls":"controls"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Constructor<?>.getModifiers())) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:175","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.ConstructorArgs:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:734","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.easymock.internal.Range(int , int)","position":"org.easymock.internal.Results:101","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual","expected":"expected","this":"this"},"name":"add","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:58","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockInvocationHandler","position":"org.easymock.internal.ObjectMethodsFilter:102","type":"CtReturnImpl"},"status":-2},{"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"variableMapping":{"type":"hostClass"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:67","type":"CtAssignmentImpl"},"status":-1},{"failures":[3,4,85,86],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"status":-1},{"failures":[87,88,89,90,91,92,93,94,95,96,97,98,99],"variableMapping":{"errorMessage":"errorMessage"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuilder.append(\":\")","position":"org.easymock.internal.MocksBehavior:140","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0)","position":"org.easymock.internal.MocksBehavior:169","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.BridgeMethodResolver:80","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:971","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:281","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","position":"org.easymock.internal.DefaultClassInstantiator:196","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"status":-2},{"failures":[100,88,101,95],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"\" + (int)","position":"org.easymock.internal.Range:66","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","position":"org.easymock.internal.Range:70","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:322","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:202","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"initialPosition":"matches","position":"matches"},"name":"add","transplant":{"sourceCode":"int = int","position":"org.easymock.internal.MocksBehavior:105","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:58","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"array"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int);\n}","position":"org.easymock.internal.Invocation:73","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:1051","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-2},{"failures":[102],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue()))","name":"conditionalBoundary","position":"org.easymock.internal.matchers.EqualsWithDelta:40","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","position":"org.easymock.internal.RecordState:336","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:37","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:369","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:27","type":"CtNewClassImpl"},"status":-2},{"failures":[103,104,105,106,107,108,6,7,109,110,111,112,113,114,115,116,117,57,4,118,5,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,85,135,136,137,138,139,86,140,141,142,143,144,87,145,100,88,146,147,148,149,150,151,152,24,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,59,60,61,62,63,64,65,66,67,68,69,70,181,182,183,184,185,186,187,188,189,190,71,72,73,74,75,76,77,78,79,80,81,82,191,192,193,194,195,89,90,91,92,196,197,93,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,83,84,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,0,293,294,1,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,2,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,94,342,101,95,343,344,345,346,347,348,349,350,351,96,97,98,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,99,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417],"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","position":"org.easymock.internal.MocksControl:105","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:356","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":-2},{"failures":[127],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","position":"org.easymock.internal.LastControl:104","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:97","type":"CtInvocationImpl"},"status":-2},{"failures":[120,417],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Equals:53","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","position":"org.easymock.internal.ReflectionUtils:189","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1928","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class })","position":"org.easymock.internal.DefaultClassInstantiator:181","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtReturnImpl"},"status":-2},{"failures":[418,419,420],"variableMapping":{"data":"data"},"name":"add","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","position":"org.easymock.internal.MockBuilder:79","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior = new org.easymock.internal.MocksBehavior(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:189","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","position":"org.easymock.internal.matchers.InstanceOf:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:344","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:190","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:231","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:44","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:67","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","position":"org.easymock.internal.ClassProxyFactory:183","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"endPosition":"initialPosition"},"name":"add","transplant":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = int","position":"org.easymock.internal.MocksBehavior:105","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"add","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:440","type":"CtReturnImpl"},"status":-2},{"failures":[110,196,202,262,0,294,1,295,296,297,298,301,319,324,97,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,394,398],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.AndroidClassProxyFactory:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = !(boolean)","position":"org.easymock.internal.UnorderedBehavior:85","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","position":"org.easymock.internal.LastControl:92","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:175","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.DefaultClassInstantiator:46","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:34","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:231","type":"CtReturnImpl"},"status":-2},{"failures":[260,263,390,391],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","position":"org.easymock.internal.RecordState:221","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = java.lang.Object.toString()","position":"org.easymock.internal.Invocation:150","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:360","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:181","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:46","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","position":"org.easymock.internal.ReplayState:45","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"bridgeMethod","bridgeMethod":"result","this":"this","candidateMethods":"candidateMethods"},"name":"add","transplant":{"sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:87","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:90","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Double>(org.easymock.Capture<java.lang.Double>))","position":"org.easymock.EasyMock:1975","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.LastControl:98","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-4859402739599754147L","position":"org.easymock.internal.matchers.Compare:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.ReflectionUtils:157","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.validateCapture()","position":"org.easymock.internal.Invocation:168","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:109","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.callLongMethod(java.lang.Class<?>, (org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.is1_3Specifications() ? \"computeSerialVersionUID\" : \"computeDefaultSUID\"))","position":"org.easymock.internal.DefaultClassInstantiator:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","position":"org.easymock.internal.LastControl:125","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","position":"org.easymock.internal.EasyMockProperties:69","type":"CtTryImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":1,"org.easymock.tests2.MockedExceptionTest.testRealException":153,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":340,"org.easymock.tests.UsageVarargTest.varargIntAccepted":408,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":4,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":50,"org.easymock.tests.UsageCallCountTest.tooManyCalls":229,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":330,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":194,"org.easymock.tests2.StubTest.stubWithReturnValue":110,"org.easymock.tests.UsageVarargTest.allKinds":417,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":364,"org.easymock.tests2.CaptureTest.testCaptureAll":168,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":305,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":134,"org.easymock.tests2.CaptureTest.testAnd":167,"org.easymock.tests.UsageStrictMockTest.testVerify":344,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":378,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":261,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":42,"org.easymock.tests.MockClassControlTest.testToString":49,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":33,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":337,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":159,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":248,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":386,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":76,"org.easymock.tests.UsageThrowableTest.throwError":0,"org.easymock.samples.SupportTest.addDocument":216,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":325,"org.easymock.tests2.StubTest.stub":109,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":366,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":331,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":71,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":313,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":321,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":290,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":254,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":292,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":416,"org.easymock.tests.UsageExpectAndThrowTest.object":380,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":317,"org.easymock.tests2.UsageTest.moreThanOneArgument":93,"org.easymock.tests.UsageVarargTest.varargByteAccepted":415,"org.easymock.tests.MockClassControlTest.testEquals":52,"org.easymock.tests.UsageTest.wrongArguments":396,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":233,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":355,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":75,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":381,"org.easymock.tests2.UsageTest.defaultResetToNice":203,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":24,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":184,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":30,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":185,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":327,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":332,"org.easymock.samples.ExampleTest.voteAgainstRemovals":208,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":143,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":74,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":260,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":404,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":299,"org.easymock.tests2.CaptureTest.testCapture1_2446744":171,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":115,"org.easymock.samples.ExampleTest.voteForRemoval":210,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":103,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":226,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":264,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":309,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":343,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":361,"org.easymock.tests2.CaptureTest.testCaptureRightOne":177,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":241,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":328,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":107,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":17,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":403,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":329,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":368,"org.easymock.tests2.UsageConstraintsTest.cmpTo":129,"org.easymock.tests.MockTypeTest.fromEasyMockClass":255,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":418,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":80,"org.easymock.tests2.MockedExceptionTest.testMockedException":152,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":86,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":347,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":389,"org.easymock.samples.PartialClassMockTest.testGetArea":41,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":96,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":276,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":301,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":106,"org.easymock.tests2.UsageTest.argumentsOrdered":205,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":104,"org.easymock.samples.ExampleTest.removeNonExistingDocument":214,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":7,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":2,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":240,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":230,"org.easymock.tests2.AnswerTest.answer":105,"org.easymock.tests.MockingTest.testNicePartialClassMocking":46,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":81,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":94,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":314,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":349,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":367,"org.easymock.tests.UsageExpectAndThrowTest.longType":373,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":258,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":10,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":161,"org.easymock.tests.UsageTest.argumentsOrdered":400,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":29,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":119,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":253,"org.easymock.tests2.MockBuilderTest.testCreateMockString":32,"org.easymock.tests2.NameTest.nameForStrictMock":90,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":323,"org.easymock.tests2.CaptureTest.testCaptureNone":175,"org.easymock.tests2.SerializationTest.testClass":12,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":289,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":357,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":39,"org.easymock.tests.MockingTest.testInterfaceMocking":302,"org.easymock.tests2.EasyMockSupportTest.testVerify":166,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":353,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":78,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":375,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":304,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":139,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":196,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":31,"org.easymock.tests.GenericTest.testBridgedEquals":56,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":252,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":126,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":193,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":13,"org.easymock.tests2.UsageConstraintsTest.testOr":124,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":182,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":60,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":195,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":43,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":247,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":298,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":306,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":419,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":346,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":34,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":36,"org.easymock.tests2.UsageConstraintsTest.testSame":123,"org.easymock.tests2.UsageTest.resumeIfFailure":206,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":219,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":37,"org.easymock.tests.UsageOverloadedMethodTest.overloading":300,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":257,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":63,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":65,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":268,"org.easymock.tests.UsageTest.openCallCountByLastCall":397,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":376,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":267,"org.easymock.tests2.NameTest.nameForNiceMock":91,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":334,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":77,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":405,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":345,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":147,"org.easymock.tests2.CaptureTest.testPrimitive":170,"org.easymock.samples.BasicClassMockTest.testPrintContent":40,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":218,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":310,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":19,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":148,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":228,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":222,"org.easymock.tests2.UsageStrictMockTest.differentMethods":88,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":156,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":55,"org.easymock.tests2.CaptureTest.testCaptureLast":174,"org.easymock.tests2.UsageConstraintsTest.equals":120,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":227,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":371,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":225,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":192,"org.easymock.tests.UsageStrictMockTest.range":101,"org.easymock.tests.InvocationTest.testEquals":102,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":398,"org.easymock.tests.UsageTest.unexpectedCallWithArray":395,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":272,"org.easymock.samples.ExampleTest.addDocument":212,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":303,"org.easymock.tests2.UsageConstraintsTest.lessThan":142,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":265,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":399,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":259,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":365,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":420,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":281,"org.easymock.tests2.UsageStrictMockTest.range":100,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":38,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":232,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":390,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":274,"org.easymock.tests.UsageTest.moreThanOneArgument":99,"org.easymock.tests2.UsageTest.openCallCountByLastCall":201,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":26,"org.easymock.tests.UsageStrictMockTest.differentMethods":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":278,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":374,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":307,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":235,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":319,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":18,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":73,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":342,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":385,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":350,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":62,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":84,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":358,"org.easymock.tests2.UsageConstraintsTest.testContains":130,"org.easymock.tests2.UsageConstraintsTest.testFind":121,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":172,"org.easymock.samples.ExampleTest.addAndChangeDocument":215,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":25,"org.easymock.tests.UsageVarargTest.varargCharAccepted":410,"org.easymock.tests2.CaptureTest.testCaptureFromStub":178,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":82,"org.easymock.tests.UsageVerifyTest.twoThrows":97,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":322,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":411,"org.easymock.tests2.DelegateToTest.testReturnException":112,"org.easymock.tests2.CompareToTest.testLessOrEqual":3,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":200,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":165,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":144,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":149,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":220,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":338,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":176,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":382,"org.easymock.tests2.UsageConstraintsTest.testMatches":133,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":280,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":291,"org.easymock.tests2.UsageConstraintsTest.testNull":122,"org.easymock.tests2.EasyMockSupportClassTest.testAll":8,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":44,"org.easymock.tests2.UsageConstraintsTest.greaterThan":85,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":406,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":333,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":136,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":162,"org.easymock.tests.UsageExpectAndReturnTest.object":245,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":146,"org.easymock.tests2.DelegateToTest.testWrongClass":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":271,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":377,"org.easymock.samples.ExampleTest.voteAgainstRemoval":211,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":297,"org.easymock.tests.UsageVarargTest.varargShortAccepted":413,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":369,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":356,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":69,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":312,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":83,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":72,"org.easymock.tests2.SerializationTest.testAllMockedMethod":58,"org.easymock.tests2.NameTest.nameForMocksControl":92,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":324,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":207,"org.easymock.tests.LimitationsTest.mockNativeMethod":48,"org.easymock.tests2.DelegateToTest.testStubDelegate":113,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":308,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":283,"org.easymock.tests.UsageUnorderedTest.message":393,"org.easymock.samples.ExampleTest.answerVsDelegate":209,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":360,"org.easymock.tests.UsageCallCountTest.tooFewCalls":224,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":244,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":108,"org.easymock.tests.UsageVerifyTest.twoReturns":98,"org.easymock.tests2.DependencyTest.testInterfaceMocking":191,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":282,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":379,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":284,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":316,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":157,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":190,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":125,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":223,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":362,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":151,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":221,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":246,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":35,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":288,"org.easymock.tests.UsageThrowableTest.throwCheckedException":295,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":256,"org.easymock.samples.ExampleTest.voteForRemovals":213,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":294,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":132,"org.easymock.tests.ReplayStateInvalidUsageTest.times":335,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":262,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":318,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":16,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":394,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":269,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":236,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":61,"org.easymock.tests2.UsageConstraintsTest.any":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":270,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":273,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":164,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":150,"org.easymock.tests2.CallbackTest.callback":186,"org.easymock.tests2.NameTest.nameForMock":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":277,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":131,"org.easymock.tests.MockNameTest.defaultName":326,"org.easymock.tests2.SerializationTest.test":57,"org.easymock.tests.UsageExpectAndReturnTest.longType":238,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":173,"org.easymock.tests2.CaptureTest.testCaptureFirst":180,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":137,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":392,"org.easymock.tests2.UsageTest.niceToStrict":199,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":315,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":234,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":359,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":339,"org.easymock.tests2.UsageTest.strictResetToDefault":197,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":383,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":21,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":351,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":370,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":242,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":187,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":15,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":135,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":407,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":320,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":47,"org.easymock.tests2.DelegateToTest.testDelegate":116,"org.easymock.tests2.UsageConstraintsTest.testNotNull":140,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":145,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":64,"org.easymock.tests2.CaptureTest.testCapture_2617107":169,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":286,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":336,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":66,"org.easymock.tests2.ThreadingTest.testThreadSafe":181,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":287,"org.easymock.tests.UsageThrowableTest.noUpperLimit":293,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":409,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":163,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":155,"org.easymock.tests.UsageExpectAndReturnTest.floatType":237,"org.easymock.tests2.UsageTest.wrongArguments":198,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":127,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":189,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":51,"org.easymock.samples.SupportTest.voteForRemovals":217,"org.easymock.tests.UsageRangeTest.combination":402,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":296,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":141,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":138,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":70,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":87,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":249,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":384,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":363,"org.easymock.tests.UsageExpectAndThrowTest.floatType":372,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":14,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":250,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":59,"org.easymock.tests.UsageTest.exactCallCountByLastCall":401,"org.easymock.tests2.AnswerTest.stubAnswer":6,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":160,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":9,"org.easymock.tests.MockingTest.testPartialClassMocking":45,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":251,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":204,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":188,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":117,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":348,"org.easymock.tests.UsageVarargTest.varargLongAccepted":414,"org.easymock.tests.ObjectMethodsTest.testHashCode":354,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":20,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":22,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":341,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":11,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":266,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":27,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":391,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":53,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":311,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":352,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":68,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":158,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":118,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":28,"org.easymock.tests.UsageVarargTest.differentLength":412,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":285,"org.easymock.tests2.CaptureTest.testCapture2_2446744":179,"org.easymock.tests.GenericTest.testPackageScope":54}}]

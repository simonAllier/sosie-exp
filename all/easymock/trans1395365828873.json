[{"transplantationPoint":{"position":"org.easymock.internal.matchers.Find:41","sourceCode":"java.lang.StringBuffer.append(((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1,2,3,4],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[5],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:319","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[6],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"this.org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[7,8,5,9],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"capture"}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[28,29,30],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[31,32],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,87,88,88,89],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[90],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"expected","myArgument":"actual"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[91,92,93,94,95],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:216","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[96,97,98,99,100,101],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:105","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[41,102],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:70","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","type":"CtForEachImpl"},"failures":[103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[129,11,130,16,131,132,133,134,135,136,137,138,139,23,24,25,26,27],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[140],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"failures":[141,142,143],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[144],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:71","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:160","sourceCode":"return java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:158","sourceCode":"if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n    java.lang.reflect.Field.setAccessible(true);\n    return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n} ","type":"CtIfImpl"},"failures":[145,146],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"f":"f","this":"this"}},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[92,93,147,95,148],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[48,149,49,150],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":55,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":121,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":53,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":140,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":3,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":109,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":134,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":128,"org.easymock.tests2.SerializationTest.testAllMockedMethod":49,"org.easymock.tests2.DelegateToTest.testReturnException":92,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":18,"org.easymock.tests.MockingTest.testPartialClassMocking":77,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":97,"org.easymock.samples.BasicClassMockTest.testPrintContent":86,"org.easymock.tests.MockClassControlTest.testToString":71,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":106,"org.easymock.tests2.DelegateToTest.testStubDelegate":144,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":68,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":150,"org.easymock.tests2.AnswerTest.stubAnswer":2,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":110,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":34,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":1,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":15,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":67,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":17,"org.easymock.tests2.DelegateToTest.testWrongClass":93,"org.easymock.tests.UsageStrictMockTest.range":130,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":126,"org.easymock.samples.ConstructorCalledMockTest.testTax":87,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":30,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":50,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":62,"org.easymock.samples.ExampleTest.answerVsDelegate":148,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":88,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":112,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":51,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":81,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":75,"org.easymock.tests2.SerializationTest.test":149,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":26,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":59,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":43,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":146,"org.easymock.tests.UsageTest.moreThanOneArgument":21,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":98,"org.easymock.tests2.CaptureTest.testCaptureFirst":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":4,"org.easymock.tests.GenericTest.testPackageScope":82,"org.easymock.tests2.CaptureTest.testCapture2_2446744":8,"org.easymock.tests2.UsageTest.moreThanOneArgument":13,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":138,"org.easymock.tests.UsageVerifyTest.twoReturns":20,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":46,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":111,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":137,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":85,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":38,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":102,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":22,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":113,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":29,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":42,"org.easymock.tests2.UsageStrictMockTest.differentMethods":11,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":132,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":142,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":143,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":27,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":108,"org.easymock.tests2.SerializationTest.testClass":48,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":120,"org.easymock.tests.LimitationsTest.mockNativeMethod":74,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":84,"org.easymock.tests2.AnswerTest.answer":91,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":133,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":117,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":125,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":12,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":64,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":119,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":10,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":52,"org.easymock.tests2.DelegateToTest.testDelegate":147,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":139,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":23,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":79,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":37,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":57,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":44,"org.easymock.tests.MockingTest.testNicePartialClassMocking":78,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":61,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":60,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":115,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":56,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":63,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":39,"org.easymock.tests2.UsageStrictMockTest.range":129,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":124,"org.easymock.tests.MockingTest.testTwoMocks":76,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":107,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":24,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":131,"org.easymock.tests.UsageThrowableTest.throwError":31,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":122,"org.easymock.tests.UsageStrictMockTest.differentMethods":16,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":105,"org.easymock.tests2.ConstraintsToStringTest.findToString":0,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":58,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":95,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":114,"org.easymock.tests2.MockBuilderTest.testCreateMockString":47,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":104,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":70,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":141,"org.easymock.tests.UsageVerifyTest.twoThrows":19,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":35,"org.easymock.samples.PartialClassMockTest.testGetArea":89,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":66,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":69,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":41,"org.easymock.tests2.MockBuilderTest.testCreateMock":45,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":116,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":40,"org.easymock.tests.UsageTest.unexpectedCallWithArray":101,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":123,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":96,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":25,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":100,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":32,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":118,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":103,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":136,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":65,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":73,"org.easymock.tests.CapturesMatcherTest.test":9,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":135,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":54,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":145,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":90,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":36,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":72,"org.easymock.tests2.EasyMockSupportClassTest.testAll":33,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":80,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":83,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":99,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":14,"org.easymock.tests2.CaptureTest.testCaptureAll":7,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":6,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":28}}]

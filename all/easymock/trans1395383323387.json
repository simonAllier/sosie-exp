[{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:44","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:75","sourceCode":"return org.easymock.internal.IMocksControlState","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[79,80,81,82,83,84],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[85,86,87,88,89,90,91,92,93,94,95,128,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,129,118,130,131,132,119,120,121,122,123,124,125,126,127],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1901","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","type":"CtInvocationImpl"},"failures":[133],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:105","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[134,135,136,44,137,138,45,139,46,140,47,48,141,49,142,143,144,64,65,145,68,69,70,146],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[147],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[148,149,150],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[151,152,153,154,155,156,157,158,159],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[156,160],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:41","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2128","sourceCode":"return org.easymock.internal.Invocation.getArguments()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1235","sourceCode":"return false","type":"CtReturnImpl"},"failures":[152],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:41","sourceCode":"new java.util.Properties()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:509","sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","type":"CtInvocationImpl"},"failures":[39,161,162,44,47,48,163,68,69,70,164,165,166,167,78],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[168,61,133],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:189","sourceCode":"java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[169,85,170,79,171,172,86,173,174,175,176,177,178,179,180,181,182,183,184,185,0,186,87,88,187,1,2,3,4,89,90,91,92,93,94,188,189,190,191,192,193,194,5,6,7,8,9,10,195,196,11,12,197,13,14,15,198,16,17,18,19,20,199,200,201,202,203,204,21,205,128,206,207,22,23,24,25,26,27,208,209,96,28,29,30,210,211,97,212,213,214,215,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,216,217,82,31,218,32,33,219,220,129,221,118,130,131,132,119,120,34,35,36,37,38,222,223,224,40,225,41,42,226,43,227,121,228,229,230,231,168,232,122,233,234,235,236,237,137,46,140,49,143,51,52,55,56,57,58,59,60,61,62,63,238,65,239,240,241,242,243,244,245,246,247,71,248,249,250,72,251,123,124,125,126,252,253,254,255,256,257,73,258,259,260,127,261,262,74,263,75,76,264,265,266,151,152,267,268,269,153,154,270,271,272,273,274,275,276,133,277,278,156,160,279,280,281,282,283,77,146,284,285,157,286,158,287,288,289,290,291,292,293,159,294,295,296,297,298],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:107","sourceCode":"java.io.ObjectInputStream.defaultReadObject()","type":"CtInvocationImpl"},"failures":[146,284,285],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[231],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.InjectionPlan:51","failures":[299,300,301,302,303,304,305,163,306,307,308,309,310,311,312,313,314,315,316,164,317,318,319,320,321,322],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[299,300,304,305,163,306,307,309,310,315,316,164,317,318,320,321],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[169,85,170,79,171,172,86,173,174,175,176,177,178,179,180,181,182,183,184,185,0,186,87,88,187,1,2,3,4,89,90,91,92,93,94,188,189,190,191,192,193,194,5,6,7,8,9,10,195,196,11,12,197,13,14,15,198,16,17,18,19,20,199,200,201,202,203,204,21,205,128,206,207,22,23,24,25,26,27,208,209,96,28,29,30,210,211,97,212,213,214,215,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,216,217,82,31,218,32,33,219,220,129,221,118,130,131,132,119,120,34,35,36,37,38,222,223,224,40,225,41,42,226,43,227,121,228,229,230,231,168,232,122,233,234,235,236,237,137,46,140,49,143,51,52,55,56,57,58,59,60,61,62,63,238,65,239,240,241,242,243,244,245,246,247,71,248,249,250,72,251,123,124,125,126,252,253,254,255,256,257,73,258,259,260,127,261,262,74,263,75,76,264,265,266,151,152,267,268,269,153,154,270,271,272,273,274,275,276,133,277,278,156,160,279,280,281,282,283,77,146,284,285,157,286,158,287,288,289,290,291,292,293,159,294,295,296,297,298],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[134,135,323,188,324,325,326,327,328,329,330,331,332,21,333,334,335,336,28,29,30,337,338,339,340,341,342,343,344,345,222,223,136,346,224,161,161,162,162,347,348,44,349,350,137,138,45,139,351,46,140,47,48,352,141,49,142,143,50,51,52,53,55,56,57,58,60,61,62,144,63,353,354,238,64,65,66,355,145,356,357,358,359,360,67,361,362,68,363,364,365,366,367,368,369,370,371,69,372,373,374,375,376,70,377,378,71,379,123,124,125,146,285],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[152],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:434","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[165],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":152,"org.easymock.tests2.UsageTest.argumentsOrdered":235,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":85,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":166,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":317,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":92,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":168,"org.easymock.tests2.StubTest.stubWithReturnValue":127,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":300,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":280,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":12,"org.easymock.tests2.SerializationTest.testAllMockedMethod":285,"org.easymock.tests2.DelegateToTest.testReturnException":257,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":90,"org.easymock.tests.MockingTest.testPartialClassMocking":28,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":147,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":84,"org.easymock.samples.SupportTest.voteForRemovals":39,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":345,"org.easymock.tests.MockClassControlTest.testToString":324,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":315,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":110,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":366,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":68,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":98,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":149,"org.easymock.tests.UsageExpectAndThrowTest.object":108,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":78,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":160,"org.easymock.tests2.DelegateToTest.testWrongClass":258,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":22,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":23,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":270,"org.easymock.tests2.UsageTest.wrongArguments":230,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":0,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":311,"org.easymock.tests.UsageStrictMockTest.range":32,"org.easymock.samples.ConstructorCalledMockTest.testTax":161,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":214,"org.easymock.samples.ExampleTest.answerVsDelegate":225,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":50,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":135,"org.easymock.tests2.UsageConstraintsTest.testNull":268,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":60,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":109,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":329,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":47,"org.easymock.tests2.CaptureTest.testPrimitive":287,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":358,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":117,"org.easymock.tests.UsageTest.moreThanOneArgument":170,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":173,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":213,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":59,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":80,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":26,"org.easymock.tests2.CaptureTest.testCaptureNone":292,"org.easymock.tests.UsageUnorderedTest.message":207,"org.easymock.tests.UsageVerifyTest.twoReturns":206,"org.easymock.tests.UsageVarargTest.varargByteAccepted":183,"org.easymock.tests2.ThreadingTest.testThreadSafe":248,"org.easymock.tests.UsageTest.argumentsOrdered":174,"org.easymock.tests.UsageVarargTest.varargIntAccepted":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":372,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":204,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":148,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":34,"org.easymock.tests2.CaptureTest.testCapture_2617107":158,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":137,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":321,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":88,"org.easymock.tests2.UsageConstraintsTest.any":271,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":140,"org.easymock.tests2.StubTest.stub":260,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":38,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":91,"org.easymock.tests.UsageExpectAndThrowTest.longType":101,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":342,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":263,"org.easymock.tests2.SerializationTest.testClass":146,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":164,"org.easymock.tests.LimitationsTest.mockNativeMethod":21,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":163,"org.easymock.tests2.AnswerTest.answer":243,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":20,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":136,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":155,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":242,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":303,"org.easymock.tests2.CaptureTest.testAnd":157,"org.easymock.tests2.UsageTest.strictResetToDefault":228,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":264,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":238,"org.easymock.tests2.NameTest.nameForMocksControl":256,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":305,"org.easymock.tests2.MockedExceptionTest.testMockedException":124,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":362,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":3,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":86,"org.easymock.tests2.DelegateToTest.testDelegate":259,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":30,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":102,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":57,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":48,"org.easymock.tests.MockingTest.testNicePartialClassMocking":29,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":113,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":62,"org.easymock.tests.LimitationsTest.mockFinalMethod":333,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":301,"org.easymock.tests2.CaptureTest.testCaptureLast":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":93,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":169,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":56,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":154,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":279,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":194,"org.easymock.tests.MockingTest.testTwoMocks":336,"org.easymock.tests2.CaptureTest.testCapture1_2446744":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":5,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":111,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":240,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":106,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":234,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":282,"org.easymock.tests.UsageThrowableTest.throwError":129,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":150,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":307,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":210,"org.easymock.tests.UsageStrictMockTest.differentMethods":33,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":314,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":340,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":250,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":322,"org.easymock.tests2.MockBuilderTest.testCreateMockString":143,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":363,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":208,"org.easymock.tests.UsageExpectAndThrowTest.floatType":100,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":360,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":244,"org.easymock.tests.UsageVerifyTest.twoThrows":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":69,"org.easymock.samples.PartialClassMockTest.testGetArea":44,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":35,"org.easymock.samples.ExampleTest.voteAgainstRemoval":42,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":367,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":330,"org.easymock.tests2.UsageTest.niceToStrict":231,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":99,"org.easymock.tests.LimitationsTest.privateConstructor":332,"org.easymock.tests2.UsageConstraintsTest.testNotNull":281,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":120,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":123,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":46,"org.easymock.tests2.UsageTest.defaultResetToNice":233,"org.easymock.tests2.MockBuilderTest.testCreateMock":141,"org.easymock.samples.ExampleTest.voteAgainstRemovals":40,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":16,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":374,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":302,"org.easymock.tests2.CallbackTest.callback":252,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":353,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":308,"org.easymock.tests.UsageTest.openCallCountByLastCall":172,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":83,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":107,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":265,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":199,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":212,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":87,"org.easymock.tests.UsageCallCountTest.tooFewCalls":202,"org.easymock.tests.UsageOverloadedMethodTest.overloading":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":376,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":371,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":275,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":95,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":53,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":13,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":274,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":293,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":215,"org.easymock.tests.UsageThrowableTest.throwCheckedException":131,"org.easymock.tests.MockClassControlTest.testEquals":328,"org.easymock.tests2.EasyMockSupportClassTest.testAll":67,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":223,"org.easymock.tests.MockingTest.testStrictClassMocking":334,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":81,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":115,"org.easymock.tests2.CaptureTest.testCaptureAll":286,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":241,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":192,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":55,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":97,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":306,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":52,"org.easymock.tests2.UsageConstraintsTest.testMatches":276,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":54,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":246,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":27,"org.easymock.samples.ExampleTest.voteForRemovals":43,"org.easymock.tests2.NameTest.nameForNiceMock":255,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":251,"org.easymock.tests.UsageVarargTest.allKinds":185,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":205,"org.easymock.tests2.DependencyTest.testInterfaceMocking":77,"org.easymock.samples.BasicClassMockTest.testPrintContent":348,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":193,"org.easymock.samples.ExampleTest.addDocument":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":377,"org.easymock.tests2.DelegateToTest.testStubDelegate":73,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":119,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":261,"org.easymock.tests2.AnswerTest.stubAnswer":245,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":318,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":94,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":31,"org.easymock.tests2.UsageConstraintsTest.greaterThan":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":361,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":2,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":66,"org.easymock.tests.UsageVarargTest.varargLongAccepted":182,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":219,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":344,"org.easymock.samples.ExampleTest.voteForRemoval":41,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":355,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":249,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":19,"org.easymock.tests.UsageExpectAndReturnTest.floatType":7,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":71,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":144,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":162,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":320,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":278,"org.easymock.tests.UsageThrowableTest.noUpperLimit":221,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":266,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":224,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":121,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":349,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":289,"org.easymock.tests2.SerializationTest.test":284,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":352,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":339,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":118,"org.easymock.tests2.UsageConstraintsTest.testSame":269,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":359,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":89,"org.easymock.tests2.CaptureTest.testCaptureFirst":296,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":165,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":237,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":364,"org.easymock.tests.GenericTest.testPackageScope":222,"org.easymock.tests2.CaptureTest.testCapture2_2446744":295,"org.easymock.tests2.UsageTest.moreThanOneArgument":229,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":72,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":49,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":319,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":184,"org.easymock.tests.GenericTest.testBridgedEquals":346,"org.easymock.tests2.NameTest.nameForMock":253,"org.easymock.tests.UsageExpectAndReturnTest.longType":8,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":190,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":14,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":116,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":142,"org.easymock.tests2.UsageStrictMockTest.differentMethods":76,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":24,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":354,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":9,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":112,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":4,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":201,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":375,"org.easymock.tests2.MockedExceptionTest.testRealException":126,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":11,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":310,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":74,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":103,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":132,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":186,"org.easymock.tests.MockingTest.testNiceClassMocking":337,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":51,"org.easymock.tests.MockingTest.testClassMocking":335,"org.easymock.tests2.UsageConstraintsTest.testContains":273,"org.easymock.tests2.NameTest.nameForStrictMock":254,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":200,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":138,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":125,"org.easymock.tests2.UsageConstraintsTest.testFind":267,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":96,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":351,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":297,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":61,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":298,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":216,"org.easymock.tests.UsageExpectAndReturnTest.object":197,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":350,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":341,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":156,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":63,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":45,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":309,"org.easymock.tests2.UsageStrictMockTest.range":75,"org.easymock.tests2.UsageConstraintsTest.lessThan":283,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":356,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":180,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":316,"org.easymock.tests.UsageTest.exactCallCountByLastCall":175,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":368,"org.easymock.tests2.CaptureTest.testCaptureRightOne":159,"org.easymock.tests2.UsageConstraintsTest.testOr":153,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":379,"org.easymock.tests.UsageRangeTest.combination":1,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":58,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":17,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":176,"org.easymock.tests.UsageTest.wrongArguments":171,"org.easymock.tests.MockClassControlTest.testHashCode":327,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":365,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":188,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":10,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":369,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":343,"org.easymock.tests.UsageVarargTest.varargShortAccepted":181,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":239,"org.easymock.tests2.UsageConstraintsTest.cmpTo":272,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":247,"org.easymock.tests.UsageVarargTest.varargCharAccepted":179,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":262,"org.easymock.tests2.UsageTest.openCallCountByLastCall":232,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":122,"org.easymock.tests.DefaultClassInstantiatorTest.object":338,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":167,"org.easymock.tests2.CaptureTest.testCaptureFromStub":294,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":139,"org.easymock.tests.UsageTest.unexpectedCallWithArray":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":370,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":105,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":82,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":130,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":203,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":304,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":312,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":198,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":326,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":218,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":64,"org.easymock.tests2.UsageConstraintsTest.constraints":151,"org.easymock.samples.ExampleTest.addAndChangeDocument":227,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":104,"org.easymock.tests.UsageStrictMockTest.testVerify":220,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":18,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":299,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":325,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":70,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":191,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":290,"org.easymock.tests2.UsageTest.resumeIfFailure":236,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":357,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":36,"org.easymock.tests.LimitationsTest.abstractClass":331,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":195,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":134,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":37,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":189,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":177}}]

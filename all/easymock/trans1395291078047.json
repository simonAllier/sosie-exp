[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"failures":[0,1],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[2,3,4,5,6,7],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:102","sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"message","key":"message"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[19,20,21,22,23,24,25,26,27],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:288","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[8,28,29,30,31,32,13],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1952","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[33,34,35,8,9,10,11,12,13,36,14,15,37,16,17,18,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:53","failures":[63],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.LastControl:94","failures":[19,20,64,65,66,21,22,67,23,68,24,69,70,71,25,72,26,73,27,74],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.RecordState:126","failures":[75,76,77,78,79],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1709","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:191","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n    try {\n        java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n    }\n    T T;\n    try {\n        java.lang.reflect.Constructor<?>.setAccessible(true);\n        T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n    } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n    }\n    return T;\n} else {\n    net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n    try {\n        net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n    }\n    net.sf.cglib.proxy.Factory.getCallback(0);\n    return ((T)(net.sf.cglib.proxy.Factory));\n}","type":"CtIfImpl"},"failures":[80,81,82,33,33,34,34,83,84,85,35,8,86,87,11,88,89,12,90,91,92,93,13,94,36,95,96,15,97,37,98,99,100,16,101,102,17,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,2,3,4,5,146,6,147,7,148],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:85","failures":[149,75,150,151,152,153,154,155,156,157,80,81,82,158,159,33,33,34,34,160,161,162,163,164,165,166,167,168,83,84,85,169,170,171,172,173,19,20,64,65,66,21,22,67,68,174,175,176,177,178,63,179,180,24,69,181,182,183,70,71,184,185,186,35,187,188,189,190,191,192,193,194,87,88,91,92,93,94,95,96,97,76,195,77,78,25,72,26,73,196,197,198,199,200,201,27,74,202,203,37,204,98,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,99,100,16,101,235,102,17,236,237,238,239,240,241,242,103,104,243,105,106,107,108,109,112,113,114,115,118,41,44,54,60,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,124,125,126,129,130,272,273,274,275,276,134,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,135,136,137,138,139,140,141,142,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,2,148,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,79,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[394],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[37,204,98,395],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:110","sourceCode":"break","type":"CtBreakImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:173","failures":[195],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[149,75,150,151,153,82,159,160,161,162,163,164,85,172,173,19,20,64,65,66,21,22,67,68,174,175,176,177,178,63,179,180,24,69,181,182,183,70,71,184,185,186,35,191,193,194,88,91,93,94,96,76,195,77,78,25,72,26,73,196,199,200,201,27,202,203,37,204,206,207,208,209,210,211,212,213,214,215,216,217,218,220,221,222,223,224,226,228,229,230,233,234,99,100,16,101,235,102,17,238,240,241,103,104,243,105,106,107,109,113,114,115,118,41,44,54,60,248,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,124,125,126,129,272,273,274,275,276,134,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,325,327,328,329,330,331,332,342,343,346,347,350,363,364,367,396,369,370,371,372,373,79,374,375,380,382,383,386,387,388,389,390,391,392,393],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[8,28,29,30,31,32,13],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[37,204,98,395],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[37,204,98,395],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","failures":[33,34,35,8,9,10,11,12,13,36,14,15,37,16,17,18,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[3,6],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[397,398,399],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[400,401],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"failures":[128,132],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[172,19,179,183,402],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[19,20,65,21,22,23,24,70,25,26,27],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[35,8,28,29,30,403,404,13,36,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[37,204,98,395],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:28","sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[206,222,229,248,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,325,327,328,329,330,331,332,342,347,366,374,387,393],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:224","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:220","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"failures":[128],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[225,231,232,240,405,344,345,348,349,368,379,382,387,388],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:83","sourceCode":"return (int) == (java.lang.Integer.int)","type":"CtReturnImpl"},"failures":[228,229,240,241,346,347,382,383,386,393],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"maximum"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":20,"org.easymock.tests2.UsageTest.argumentsOrdered":232,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":342,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":217,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":227,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":156,"org.easymock.tests2.DelegateToTest.testReturnException":76,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":245,"org.easymock.tests.MockingTest.testPartialClassMocking":124,"org.easymock.tests.MockClassControlTest.testToString":137,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":48,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":44,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":252,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":186,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":28,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":67,"org.easymock.tests2.UsageTest.wrongArguments":225,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":363,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":340,"org.easymock.samples.ExampleTest.answerVsDelegate":75,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":144,"org.easymock.tests2.UsageConstraintsTest.testNull":65,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":105,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":142,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":216,"org.easymock.tests2.CaptureTest.testPrimitive":73,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":367,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":271,"org.easymock.tests.UsageTest.moreThanOneArgument":343,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":243,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":299,"org.easymock.tests.UsageTest.argumentsOrdered":349,"org.easymock.tests.UsageVarargTest.varargIntAccepted":316,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":272,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":32,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":87,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":92,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":276,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":118,"org.easymock.tests.ReplayStateInvalidUsageTest.times":310,"org.easymock.tests2.AnswerTest.answer":191,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":23,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":190,"org.easymock.tests2.CaptureTest.testAnd":25,"org.easymock.tests2.UsageTest.strictResetToDefault":223,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":112,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":12,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":298,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":211,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":371,"org.easymock.tests2.DelegateToTest.testDelegate":78,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":267,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":248,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":337,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":396,"org.easymock.tests2.CaptureTest.testCapture1_2446744":196,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":265,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":188,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":304,"org.easymock.tests.UsageThrowableTest.throwError":325,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":301,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":62,"org.easymock.samples.PartialClassMockTest.testGetArea":82,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":305,"org.easymock.tests2.CompareToTest.testLessOrEqual":402,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":49,"org.easymock.tests2.UsageTest.niceToStrict":226,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":253,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":399,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":91,"org.easymock.tests2.MockBuilderTest.testCreateMock":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":57,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":261,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":212,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":338,"org.easymock.tests.UsageOverloadedMethodTest.overloading":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":59,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":177,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":374,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":391,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":288,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":176,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":201,"org.easymock.tests.MockClassControlTest.testEquals":141,"org.easymock.tests2.EasyMockSupportClassTest.testAll":41,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":130,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":269,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":189,"org.easymock.tests2.CaptureTest.testCaptureAll":72,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":335,"org.easymock.tests2.UsageConstraintsTest.testMatches":178,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":300,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":302,"org.easymock.samples.ExampleTest.voteForRemovals":153,"org.easymock.tests.UsageVarargTest.allKinds":324,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":386,"org.easymock.samples.BasicClassMockTest.testPrintContent":81,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":336,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":331,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":236,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":249,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":404,"org.easymock.tests2.UsageConstraintsTest.greaterThan":179,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":42,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":370,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":115,"org.easymock.samples.ExampleTest.voteForRemoval":150,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":7,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":161,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":116,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":108,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":148,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":222,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":36,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":209,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":39,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":244,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":0,"org.easymock.tests2.CaptureTest.testCaptureFirst":203,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":210,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":234,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":376,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":284,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":163,"org.easymock.tests2.CaptureTest.testCapture2_2446744":202,"org.easymock.tests2.UsageTest.moreThanOneArgument":224,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":96,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":323,"org.easymock.tests.GenericTest.testBridgedEquals":132,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":361,"org.easymock.tests.UsageExpectAndReturnTest.longType":280,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":207,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":333,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":270,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":182,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":268,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":297,"org.easymock.tests.UsageCallCountTest.tooManyCalls":362,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":356,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":58,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":285,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":257,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":330,"org.easymock.tests.MockingTest.testNiceClassMocking":127,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":100,"org.easymock.tests.MockingTest.testClassMocking":122,"org.easymock.tests2.UsageConstraintsTest.testContains":175,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":355,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":85,"org.easymock.tests2.UsageConstraintsTest.testFind":64,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":393,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":171,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":377,"org.easymock.tests.UsageExpectAndReturnTest.object":287,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":109,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":215,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":29,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":318,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":353,"org.easymock.tests.UsageTest.exactCallCountByLastCall":350,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":250,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":8,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":293,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":314,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":79,"org.easymock.tests.MockClassControlTest.testHashCode":140,"org.easymock.tests2.EasyMockSupportTest.testVerify":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":51,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":373,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":187,"org.easymock.tests.UsageVarargTest.varargCharAccepted":317,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":145,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":237,"org.easymock.tests2.UsageTest.openCallCountByLastCall":228,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":397,"org.easymock.tests.DefaultClassInstantiatorTest.object":2,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":218,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":351,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":52,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":259,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":328,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":139,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":113,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":258,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":294,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":60,"org.easymock.tests2.UsageTest.resumeIfFailure":233,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":247,"org.easymock.tests2.StubTest.stubWithReturnValue":206,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":13,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":183,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":286,"org.easymock.tests2.SerializationTest.testAllMockedMethod":98,"org.easymock.samples.SupportTest.voteForRemovals":159,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":128,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":264,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":395,"org.easymock.tests.UsageExpectAndThrowTest.object":262,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":69,"org.easymock.tests2.DelegateToTest.testWrongClass":77,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":389,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":390,"org.easymock.samples.ConstructorCalledMockTest.testTax":33,"org.easymock.tests.UsageStrictMockTest.range":382,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":214,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":99,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":394,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":263,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":38,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":312,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":348,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":339,"org.easymock.tests2.CaptureTest.testCaptureNone":200,"org.easymock.tests.UsageUnorderedTest.message":368,"org.easymock.tests.UsageVerifyTest.twoReturns":388,"org.easymock.tests.UsageVarargTest.varargByteAccepted":322,"org.easymock.tests2.ThreadingTest.testThreadSafe":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":55,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":359,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":80,"org.easymock.tests2.CaptureTest.testCapture_2617107":26,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":366,"org.easymock.tests2.UsageConstraintsTest.any":68,"org.easymock.tests2.StubTest.stub":205,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":309,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":246,"org.easymock.tests.UsageExpectAndThrowTest.longType":255,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":146,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":308,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":239,"org.easymock.tests2.SerializationTest.testClass":37,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":221,"org.easymock.tests.LimitationsTest.mockNativeMethod":134,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":131,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":296,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":242,"org.easymock.tests2.NameTest.nameForMocksControl":168,"org.easymock.tests2.MockedExceptionTest.testMockedException":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":43,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":347,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":126,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":256,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":103,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":94,"org.easymock.tests.MockingTest.testNicePartialClassMocking":125,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":107,"org.easymock.tests2.CaptureTest.testCaptureLast":199,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":17,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":22,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":181,"org.easymock.tests.MockingTest.testTwoMocks":123,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":18,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":277,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":260,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":231,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":71,"org.easymock.samples.ExampleTest.removeNonExistingDocument":154,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":306,"org.easymock.tests.UsageStrictMockTest.differentMethods":383,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":4,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":162,"org.easymock.tests2.MockBuilderTest.testCreateMockString":97,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":45,"org.easymock.tests.UsageExpectAndThrowTest.floatType":254,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":40,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":192,"org.easymock.tests.UsageVerifyTest.twoThrows":387,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":54,"org.easymock.samples.ExampleTest.voteAgainstRemoval":151,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":114,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":10,"org.easymock.tests2.UsageConstraintsTest.testNotNull":70,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":83,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":332,"org.easymock.tests2.UsageTest.defaultResetToNice":230,"org.easymock.samples.ExampleTest.voteAgainstRemovals":149,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":292,"org.easymock.tests.UsageVarargTest.differentLength":319,"org.easymock.tests2.CallbackTest.callback":220,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":110,"org.easymock.tests.UsageTest.openCallCountByLastCall":346,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":172,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":365,"org.easymock.tests.UsageCallCountTest.tooFewCalls":357,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":101,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":341,"org.easymock.tests.UsageThrowableTest.throwCheckedException":329,"org.easymock.tests.MockingTest.testStrictClassMocking":121,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":102,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":251,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":16,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":311,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":235,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":194,"org.easymock.tests.ObjectMethodsTest.testHashCode":352,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":31,"org.easymock.tests2.NameTest.nameForNiceMock":167,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":164,"org.easymock.tests2.DependencyTest.testInterfaceMocking":185,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":30,"org.easymock.samples.ExampleTest.addDocument":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":61,"org.easymock.tests2.DelegateToTest.testStubDelegate":195,"org.easymock.tests2.AnswerTest.stubAnswer":193,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":380,"org.easymock.tests.UsageVarargTest.varargLongAccepted":321,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":384,"org.easymock.tests.UsageExpectAndReturnTest.floatType":279,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":295,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":35,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":34,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":180,"org.easymock.tests.UsageThrowableTest.noUpperLimit":326,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":173,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":119,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":197,"org.easymock.tests2.SerializationTest.test":204,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":3,"org.easymock.tests2.UsageConstraintsTest.testSame":66,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":278,"org.easymock.samples.SupportTest.addDocument":158,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":46,"org.easymock.tests.GenericTest.testPackageScope":129,"org.easymock.tests2.NameTest.nameForMock":165,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":289,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":15,"org.easymock.tests2.UsageStrictMockTest.differentMethods":241,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":111,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":281,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":266,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":372,"org.easymock.tests2.MockedExceptionTest.testRealException":169,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":401,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":238,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":313,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":364,"org.easymock.tests2.NameTest.nameForStrictMock":166,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":90,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":398,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":170,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":106,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":120,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":24,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":5,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":88,"org.easymock.tests2.UsageStrictMockTest.range":240,"org.easymock.tests2.UsageConstraintsTest.lessThan":184,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":403,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":208,"org.easymock.tests2.CaptureTest.testCaptureRightOne":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":50,"org.easymock.tests2.UsageConstraintsTest.testOr":21,"org.easymock.tests.UsageRangeTest.combination":369,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":104,"org.easymock.tests.UsageTest.wrongArguments":345,"org.easymock.tests2.MockBuilderTest.testWithConstructor":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":47,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":136,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":282,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":290,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":6,"org.easymock.tests.UsageVarargTest.varargShortAccepted":320,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":360,"org.easymock.tests2.UsageConstraintsTest.cmpTo":174,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":400,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":229,"org.easymock.tests2.CaptureTest.testCaptureFromStub":74,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":303,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":89,"org.easymock.tests.UsageTest.unexpectedCallWithArray":344,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":379,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":358,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":14,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":291,"org.easymock.tests2.UsageConstraintsTest.constraints":19,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":381,"org.easymock.samples.ExampleTest.addAndChangeDocument":155,"org.easymock.tests.UsageStrictMockTest.testVerify":385,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":157,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":378,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":334,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":198,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":274,"org.easymock.tests.LimitationsTest.abstractClass":133,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":283,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":275,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":375,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":213,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":315}}]

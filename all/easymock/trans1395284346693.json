[{"transplant":{"position":"org.easymock.internal.MocksBehavior:189","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"isThreadSafe":"matching"}},{"position":"org.easymock.internal.InjectionPlan:51","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:172","failures":[26,27],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[43,44,45,46,47,48,49,5,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,29,88,89,30,31,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,26,114,17,115,116,117,118,119,24,120,121,122,123,124,125,126,127,128,129,25,130,131,132,133,134,33,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,36,37,174,175,39,40,41,176,177,178,179,180,181,182],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[183],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:958","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[101],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:48","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[184,33],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[184,185,33,186,187,38],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[188,189,190,191,43,44,45,46,192,193,194,47,195,48,28,196,49,5,50,51,52,53,54,55,56,197,57,58,59,60,61,198,199,200,62,63,64,201,202,203,65,66,67,204,205,68,69,70,71,72,73,74,75,76,77,78,206,79,80,81,82,83,84,207,208,85,86,87,209,29,88,89,210,211,212,30,31,213,90,91,214,92,215,216,217,218,93,219,220,221,222,94,95,96,97,223,98,224,225,99,226,227,100,101,102,103,104,228,229,230,231,232,233,234,105,106,107,108,109,110,235,111,236,237,112,238,239,240,113,241,26,114,242,243,244,17,245,246,115,247,116,117,118,119,24,120,121,122,123,124,125,126,127,248,249,250,250,251,251,128,129,25,130,252,253,254,255,32,256,257,258,259,131,260,261,262,263,264,265,266,267,268,269,270,271,132,133,272,273,274,275,276,277,278,279,280,134,33,281,135,34,282,136,283,284,285,286,287,137,138,288,139,140,289,290,291,141,292,293,294,142,143,295,144,296,297,298,299,145,300,301,302,303,146,304,305,306,307,147,148,149,150,151,152,153,154,155,156,157,158,308,309,159,160,310,161,311,312,313,314,162,315,316,317,318,163,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,164,165,166,167,168,335,169,170,171,172,173,336,337,338,339,340,36,37,174,175,341,342,343,38,39,344,345,40,41,176,346,347,348,349,350,351,178,179,180,181,42,182,352,353,354,355,356,357],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[245,246,115,247,358,359,360,361,291,324,352,353,354,355,356,357],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[67,68,71,362,363,105,106,108,109,110,111,364,236,238,365,366,246,115,367,116,368,369,370,371,372,373,374,375,120,121,255,376,377,378,379,380,381,132,133,382,272,273,274,275,276,277,278,279,383,384,147,385,386,387,388,389,182],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"position":"org.easymock.EasyMock:1039","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[390],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[46,201,202,203],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[70,391,106,236,238],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[392],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[188,189,190,191,43,45,46,192,193,194,47,195,48,28,196,49,198,199,200,62,63,64,201,202,203,65,66,67,204,205,69,70,73,74,75,76,77,78,206,79,80,81,82,83,84,207,208,85,86,87,209,29,88,89,210,211,212,30,31,213,90,91,214,92,215,393,216,217,218,93,219,220,221,222,94,95,96,97,223,98,224,225,99,226,227,100,101,102,104,228,229,230,231,232,233,234,105,106,107,108,109,110,111,236,112,239,113,241,243,244,245,246,115,247,122,123,124,125,126,127,249,32,131,267,268,269,270,271,132,133,273,280,134,33,281,135,34,282,136,283,284,285,286,287,137,138,289,290,291,141,292,293,294,142,143,295,144,296,297,298,299,145,300,301,302,303,146,304,305,306,307,147,148,149,150,151,152,153,154,155,156,157,158,308,309,159,160,310,161,311,312,313,314,162,315,316,317,318,163,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,164,165,166,167,168,169,170,171,172,173,336,337,338,339,340,36,37,175,341,342,343,38,39,344,345,40,41,176,346,347,348,349,177,350,351,181,182,352,353,354,355,356,357],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[394,192,193,395],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[183],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1361","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[79,80,81,83,396,85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[28,34,397,36,37],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:353","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:322","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bounds":"actualTypeArguments"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:61","failures":[195,62,202,203,75,76,77,78,206,79,80,81,82,83,84,207,208,85,393,216,217,218,93,219,220,221,222,94,95,398,96,97,223,98,224,225,99,226,227,100,101,102,103,104,228,229,230,111,32,33,281,289,290,291,141,292,323,324,330,331,332,333,334,173,350,351,356],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[65,66,67,399],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[188,189,190,191,43,44,45,394,400,46,192,193,194,47,195,48,28,196,49,0,1,2,3,4,5,6,7,8,9,10,11,50,51,52,54,55,197,58,59,60,61,198,199,200,62,63,64,401,201,202,402,203,65,66,67,204,205,70,71,72,73,362,363,403,404,75,76,77,78,206,79,80,81,82,83,84,207,208,85,86,87,209,29,88,89,210,211,212,30,31,213,90,405,91,214,92,406,215,393,216,217,218,93,392,219,220,221,222,94,95,398,96,97,223,98,224,225,99,226,227,100,101,102,103,104,228,229,230,407,105,106,107,108,109,110,235,111,408,364,236,237,112,238,365,240,409,113,241,26,410,242,12,13,14,15,16,17,18,19,20,21,22,23,245,246,115,247,367,116,368,117,370,411,412,413,372,414,118,374,375,119,415,416,24,120,121,122,123,124,125,126,127,248,249,250,250,251,251,128,129,25,130,417,252,253,254,418,419,255,376,377,378,379,380,381,32,256,257,258,259,131,260,261,262,263,264,265,266,420,421,422,267,268,269,270,271,358,359,360,423,132,133,424,382,272,273,274,275,276,277,278,279,280,134,33,281,135,34,282,136,283,425,426,427,284,285,286,287,137,138,288,139,140,428,429,430,431,432,433,395,361,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,289,290,291,141,292,450,451,452,453,454,293,294,142,143,295,144,296,297,298,299,145,300,301,302,303,146,304,305,306,307,383,384,147,385,455,386,387,388,148,149,456,150,457,458,389,151,152,153,154,155,156,157,158,308,309,159,160,310,161,311,312,313,314,162,315,316,317,318,163,319,320,321,322,323,324,459,460,461,325,326,327,328,329,330,331,332,333,334,164,165,166,462,167,168,335,169,170,171,172,173,336,337,338,339,340,36,37,463,174,175,341,342,343,38,39,344,345,40,41,176,346,347,348,349,464,177,183,465,27,466,350,351,178,467,179,180,468,181,42,182,352,353,354,355,356,357],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[379,469,470],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:124","failures":[188,189,190,191,43,44,45,46,192,193,194,47,195,48,28,196,49,5,50,51,52,53,54,55,56,197,57,58,59,60,61,198,199,200,62,63,64,201,202,203,65,66,67,204,205,68,69,70,71,72,73,74,75,76,77,78,206,79,80,81,82,83,84,207,208,85,86,87,209,29,88,89,210,211,212,30,31,213,90,91,214,92,215,216,217,218,93,219,220,221,222,94,95,96,97,223,98,224,225,99,226,227,100,101,102,103,104,228,229,230,105,106,107,108,109,110,235,111,236,237,112,238,239,240,113,241,26,114,242,243,244,17,245,246,115,247,116,117,118,119,24,120,121,122,123,124,125,126,127,249,250,251,128,129,25,130,32,267,268,269,270,271,132,133,280,134,33,281,135,34,282,136,286,287,137,138,288,139,140,289,290,291,141,292,471,471,293,294,142,143,295,144,296,297,298,299,145,300,301,302,303,146,304,305,306,307,147,148,149,150,151,152,153,154,155,156,157,158,308,309,159,160,310,161,311,312,313,314,162,315,316,317,318,163,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,164,165,166,167,168,335,169,170,171,172,173,336,338,339,340,36,37,174,175,341,342,343,38,39,344,345,40,41,176,346,347,348,349,350,351,178,179,180,42,182,352,353,354,355,356,357],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[255,376,377,378,380,381],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:34","failures":[472,184,473,474,475,476,477,478,185,479,480,195,28,196,209,29,30,31,99,32,33,281,34,282,186,481,187,482,483,484,35,340,36,37,343,38,39,40,41,464,177,467,468,181,42],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cstr":"cstr"}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[469],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.LastControl:70","failures":[195,202,203,75,76,77,78,206,79,80,81,82,83,84,207,208,85,393,216,217,218,93,219,220,221,222,94,95,398,96,97,223,98,224,225,99,226,227,100,101,102,103,104,228,229,230,111,32,33,281,289,290,291,141,292,323,324,330,331,332,333,334,173,350,351,356],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[485,216,226,104],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":93,"org.easymock.tests2.UsageTest.argumentsOrdered":31,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":342,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":59,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":18,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":436,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":89,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":25,"org.easymock.tests2.DelegateToTest.testReturnException":91,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":353,"org.easymock.tests.MockingTest.testPartialClassMocking":148,"org.easymock.tests.MockClassControlTest.testToString":274,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":407,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":460,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":445,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":366,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":117,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":293,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":44,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":95,"org.easymock.tests2.UsageTest.wrongArguments":29,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":289,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":11,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":348,"org.easymock.samples.ExampleTest.answerVsDelegate":123,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":27,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":458,"org.easymock.tests2.UsageConstraintsTest.testNull":220,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":108,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":58,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":279,"org.easymock.tests2.CaptureTest.testPrimitive":78,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":292,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":307,"org.easymock.tests.UsageTest.moreThanOneArgument":343,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":107,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":269,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":450,"org.easymock.tests.UsageTest.argumentsOrdered":41,"org.easymock.tests.UsageVarargTest.varargIntAccepted":166,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":441,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":330,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":239,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":22,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":241,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":430,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":334,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":475,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":5,"org.easymock.tests.ReplayStateInvalidUsageTest.times":263,"org.easymock.tests2.AnswerTest.answer":45,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":398,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":443,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":191,"org.easymock.tests2.CaptureTest.testAnd":75,"org.easymock.tests2.UsageTest.strictResetToDefault":87,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":236,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":54,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":338,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":454,"org.easymock.tests2.DelegateToTest.testDelegate":215,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":146,"org.easymock.tests.LimitationsTest.mockFinalMethod":385,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":356,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":329,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":464,"org.easymock.tests2.CaptureTest.testCapture1_2446744":206,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":302,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":189,"org.easymock.tests.UsageThrowableTest.throwError":151,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":258,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":23,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":416,"org.easymock.samples.PartialClassMockTest.testGetArea":130,"org.easymock.tests.MockingTest.testInterfaceMocking":456,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":259,"org.easymock.tests2.CompareToTest.testLessOrEqual":485,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":331,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":426,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":419,"org.easymock.tests2.UsageTest.niceToStrict":88,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":428,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":113,"org.easymock.tests2.MockBuilderTest.testCreateMock":242,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":8,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":184,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":299,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":55,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":422,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":284,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":346,"org.easymock.tests.UsageOverloadedMethodTest.overloading":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":375,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":180,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":224,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":174,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":315,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":469,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":98,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":83,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":462,"org.easymock.tests2.EasyMockSupportClassTest.testAll":116,"org.easymock.tests.MockClassControlTest.testEquals":278,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":133,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":477,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":305,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":190,"org.easymock.tests2.CaptureTest.testCaptureAll":76,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":327,"org.easymock.tests.MockNameTest.defaultName":455,"org.easymock.tests2.UsageConstraintsTest.testMatches":225,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":256,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":270,"org.easymock.samples.ExampleTest.voteForRemovals":127,"org.easymock.tests.UsageVarargTest.allKinds":173,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":340,"org.easymock.samples.BasicClassMockTest.testPrintContent":121,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":328,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":157,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":194,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":406,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":19,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":357,"org.easymock.tests2.UsageConstraintsTest.greaterThan":226,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":337,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":238,"org.easymock.samples.ExampleTest.voteForRemoval":124,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":381,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":199,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":365,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":235,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":182,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":86,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":361,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":52,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":153,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":352,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":405,"org.easymock.tests2.CaptureTest.testCaptureFirst":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":395,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":53,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":90,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":42,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":312,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":62,"org.easymock.tests2.CaptureTest.testCapture2_2446744":208,"org.easymock.tests2.UsageTest.moreThanOneArgument":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":444,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":243,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":172,"org.easymock.tests.GenericTest.testBridgedEquals":382,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":139,"org.easymock.tests.UsageExpectAndReturnTest.longType":160,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":50,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":325,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":306,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":463,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":103,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":304,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":267,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":359,"org.easymock.tests.UsageCallCountTest.tooManyCalls":140,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":481,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":286,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":313,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":10,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":144,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":156,"org.easymock.tests.MockingTest.testNiceClassMocking":389,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":69,"org.easymock.tests.MockingTest.testClassMocking":387,"org.easymock.tests2.UsageConstraintsTest.testContains":223,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":285,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":115,"org.easymock.tests2.UsageConstraintsTest.testFind":219,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":341,"org.easymock.tests.MockTypeTest.fromEasyMockClass":465,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":203,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":280,"org.easymock.tests.UsageExpectAndReturnTest.object":162,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":111,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":9,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":57,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":168,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":254,"org.easymock.tests.UsageTest.exactCallCountByLastCall":176,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":433,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":459,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":451,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":484,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":401,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":164,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":319,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":179,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":13,"org.easymock.tests.MockClassControlTest.testHashCode":277,"org.easymock.tests2.EasyMockSupportTest.testVerify":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":413,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":474,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":452,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":421,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":178,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":188,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":393,"org.easymock.tests.UsageVarargTest.varargCharAccepted":167,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":449,"org.easymock.tests2.UsageTest.openCallCountByLastCall":210,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":60,"org.easymock.tests.DefaultClassInstantiatorTest.object":255,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":420,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":252,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":35,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":372,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":154,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":3,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":12,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":237,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":276,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":296,"org.easymock.tests.CapturesMatcherTest.test":471,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":320,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":358,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":476,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":119,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":275,"org.easymock.tests2.UsageTest.resumeIfFailure":213,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":355,"org.easymock.tests2.StubTest.stubWithReturnValue":205,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":104,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":314,"org.easymock.tests2.SerializationTest.testAllMockedMethod":67,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":442,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":185,"org.easymock.samples.SupportTest.voteForRemovals":129,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":423,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":15,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":301,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":399,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":448,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":394,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":461,"org.easymock.tests.UsageExpectAndThrowTest.object":145,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":101,"org.easymock.tests2.DelegateToTest.testWrongClass":92,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":350,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":351,"org.easymock.tests.UsageStrictMockTest.range":34,"org.easymock.samples.ConstructorCalledMockTest.testTax":250,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":403,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":197,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":68,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":300,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":26,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":40,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":367,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":347,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":186,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":427,"org.easymock.tests2.CaptureTest.testCaptureNone":82,"org.easymock.tests.UsageUnorderedTest.message":32,"org.easymock.tests.UsageVerifyTest.twoReturns":37,"org.easymock.tests.UsageVarargTest.varargByteAccepted":171,"org.easymock.tests2.ThreadingTest.testThreadSafe":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":373,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":138,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":418,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":120,"org.easymock.tests2.CaptureTest.testCapture_2617107":77,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":480,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":446,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":141,"org.easymock.tests2.UsageConstraintsTest.any":96,"org.easymock.tests2.StubTest.stub":204,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":262,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":447,"org.easymock.tests.UsageExpectAndThrowTest.longType":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":354,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":379,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":261,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":48,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":17,"org.easymock.tests2.SerializationTest.testClass":65,"org.easymock.tests.LimitationsTest.mockNativeMethod":147,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":424,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":322,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":2,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":49,"org.easymock.tests2.NameTest.nameForMocksControl":234,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":4,"org.easymock.tests2.MockedExceptionTest.testMockedException":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":368,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":345,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":402,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":150,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":295,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":105,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":114,"org.easymock.tests.MockingTest.testNicePartialClassMocking":149,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":110,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":0,"org.easymock.tests2.CaptureTest.testCaptureLast":81,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":177,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":74,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":94,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":102,"org.easymock.tests.MockingTest.testTwoMocks":388,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":391,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":308,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":298,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":30,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":229,"org.easymock.samples.ExampleTest.removeNonExistingDocument":248,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":131,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":7,"org.easymock.tests.UsageStrictMockTest.differentMethods":282,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":14,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":377,"org.easymock.tests2.ConstraintsToStringTest.andToString":478,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":200,"org.easymock.tests2.MockBuilderTest.testCreateMockString":244,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":272,"org.easymock.tests.UsageExpectAndThrowTest.floatType":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":369,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":99,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":46,"org.easymock.tests.UsageVerifyTest.twoThrows":36,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":467,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":118,"org.easymock.samples.ExampleTest.voteAgainstRemoval":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":437,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":425,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":112,"org.easymock.tests.LimitationsTest.privateConstructor":384,"org.easymock.tests2.UsageConstraintsTest.testNotNull":228,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":158,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":245,"org.easymock.tests2.UsageTest.defaultResetToNice":212,"org.easymock.samples.ExampleTest.voteAgainstRemovals":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":438,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":163,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":1,"org.easymock.tests.UsageVarargTest.differentLength":335,"org.easymock.tests2.CallbackTest.callback":201,"org.easymock.tests2.UsageConstraintsTest.equals":392,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":482,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":408,"org.easymock.tests.UsageTest.openCallCountByLastCall":344,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":216,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":291,"org.easymock.tests.UsageCallCountTest.tooFewCalls":287,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":71,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":349,"org.easymock.tests.UsageThrowableTest.throwCheckedException":155,"org.easymock.tests.MockingTest.testStrictClassMocking":386,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":187,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":73,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":324,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":6,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":70,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":264,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":72,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":193,"org.easymock.tests.ObjectMethodsTest.testHashCode":253,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":63,"org.easymock.tests2.NameTest.nameForNiceMock":233,"org.easymock.tests2.DependencyTest.testInterfaceMocking":43,"org.easymock.samples.ExampleTest.addDocument":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":415,"org.easymock.tests2.DelegateToTest.testStubDelegate":214,"org.easymock.tests2.AnswerTest.stubAnswer":192,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":281,"org.easymock.tests.UsageVarargTest.varargLongAccepted":170,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":435,"org.easymock.tests.UsageExpectAndReturnTest.floatType":159,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":321,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":64,"org.easymock.tests2.ConstraintsToStringTest.orToString":472,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":251,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":468,"org.easymock.tests.UsageThrowableTest.noUpperLimit":152,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":21,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":227,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":217,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":362,"org.easymock.tests2.SerializationTest.test":66,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":79,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":470,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":376,"org.easymock.tests2.UsageConstraintsTest.testSame":221,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":309,"org.easymock.samples.SupportTest.addDocument":128,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":370,"org.easymock.tests.GenericTest.testPackageScope":132,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":453,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":432,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":20,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":457,"org.easymock.tests2.NameTest.nameForMock":231,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":316,"org.easymock.tests2.UsageStrictMockTest.differentMethods":196,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":364,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":310,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":303,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":417,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":339,"org.easymock.tests2.MockedExceptionTest.testRealException":247,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":466,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":440,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":404,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":439,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":195,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":266,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":290,"org.easymock.tests2.NameTest.nameForStrictMock":232,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":409,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":202,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":109,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":363,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":100,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":378,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":240,"org.easymock.tests2.UsageStrictMockTest.range":28,"org.easymock.tests2.UsageConstraintsTest.lessThan":230,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":434,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":390,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":412,"org.easymock.tests2.CaptureTest.testCaptureRightOne":84,"org.easymock.tests2.UsageConstraintsTest.testOr":222,"org.easymock.tests.UsageRangeTest.combination":336,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":106,"org.easymock.tests.UsageTest.wrongArguments":39,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":411,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":273,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":429,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":317,"org.easymock.tests.UsageVarargTest.varargShortAccepted":169,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":380,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":288,"org.easymock.tests2.UsageConstraintsTest.cmpTo":97,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":431,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":211,"org.easymock.tests2.CaptureTest.testCaptureFromStub":207,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":257,"org.easymock.tests.UsageTest.unexpectedCallWithArray":38,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":33,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":137,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":318,"org.easymock.tests2.CaptureTest.testCapture":396,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":135,"org.easymock.tests2.UsageConstraintsTest.constraints":218,"org.easymock.samples.ExampleTest.addAndChangeDocument":249,"org.easymock.tests2.ConstraintsToStringTest.notToString":473,"org.easymock.tests.UsageStrictMockTest.testVerify":283,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":24,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":134,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":326,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":80,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":332,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":311,"org.easymock.tests.LimitationsTest.abstractClass":383,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":181,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":333,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":397,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":165,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":56}}]

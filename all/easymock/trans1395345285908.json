[{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[0,1],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[2,3,4],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[25,26,27,28,29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"leafClass"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"shouldBeUsedInOneThread"}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[30,10,11,31,32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,10,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[80,81,82],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:48","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character.valueOf(((char)(0))))","type":"CtInvocationImpl"},"failures":[83,84],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[85,86],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[87,88],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"failures":[89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[104],"status":-1,"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[105,106],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[107],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,84,141,142,143,144,145,146,147,148,13,31,14,149,150,151,152,153,154,155,156,157,158,159,160,161,162,4,163,164,165,166,167,168,169,170,171,172,173,174,23,32,24,175,176,177,178],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[143,145,179,180],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[181],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[181],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1708","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[153,154,156,182,183,158,184,159,185,170,174,186,19],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:708","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,84,141,142,143,144,145,146,147,148,13,31,14,149,150,151,152,153,154,155,156,157,158,159,160,161,162,4,163,164,165,166,167,168,169,170,171,172,173,174,23,32,24,175,176,177,178],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:75","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:278","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","type":"CtLocalVariableImpl"},"failures":[108,187,188,166,176,177],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":173,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":42,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":170,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":172,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":40,"org.easymock.tests2.UsageTest.argumentsOrdered":18,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":118,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":36,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":3,"org.easymock.samples.ExampleTest.voteForRemovals":113,"org.easymock.tests2.StubTest.stubWithReturnValue":79,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":129,"org.easymock.tests2.NameTest.nameForNiceMock":21,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":34,"org.easymock.tests2.DependencyTest.testInterfaceMocking":150,"org.easymock.tests.MockingTest.testPartialClassMocking":119,"org.easymock.samples.SupportTest.voteForRemovals":109,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":25,"org.easymock.tests2.DelegateToTest.testStubDelegate":152,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":48,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":64,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":176,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":38,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":52,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":13,"org.easymock.tests.UsageExpectAndThrowTest.object":62,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":151,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":143,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":167,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":147,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":148,"org.easymock.samples.ExampleTest.voteForRemoval":111,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":136,"org.easymock.tests.UsageExpectAndReturnTest.floatType":124,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":146,"org.easymock.tests2.UsageTest.wrongArguments":16,"org.easymock.samples.ConstructorCalledMockTest.testTax":187,"org.easymock.tests.UsageStrictMockTest.range":31,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":158,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":188,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":168,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":77,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":88,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":162,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":63,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":95,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":155,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":106,"org.easymock.tests2.CaptureTest.testPrimitive":93,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":82,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":0,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":44,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":8,"org.easymock.tests.UsageTest.moreThanOneArgument":6,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":71,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":161,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":33,"org.easymock.tests2.CaptureTest.testCaptureFirst":103,"org.easymock.tests2.CaptureTest.testCaptureNone":98,"org.easymock.tests.UsageUnorderedTest.message":5,"org.easymock.tests.GenericTest.testPackageScope":26,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":149,"org.easymock.tests2.CaptureTest.testCapture2_2446744":102,"org.easymock.tests2.UsageTest.moreThanOneArgument":15,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":104,"org.easymock.tests.UsageVerifyTest.twoReturns":11,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":157,"org.easymock.tests.UsageTest.argumentsOrdered":9,"org.easymock.tests.GenericTest.testBridgedEquals":29,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":138,"org.easymock.tests2.NameTest.nameForMock":19,"org.easymock.tests2.CaptureTest.testCapture_2617107":92,"org.easymock.tests.UsageExpectAndReturnTest.longType":125,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":131,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":70,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":51,"org.easymock.tests2.UsageStrictMockTest.differentMethods":24,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":68,"org.easymock.tests2.StubTest.stub":186,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":141,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":35,"org.easymock.tests.UsageExpectAndThrowTest.longType":55,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":126,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":80,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":66,"org.easymock.tests2.SerializationTest.testClass":105,"org.easymock.tests.LimitationsTest.mockNativeMethod":114,"org.easymock.tests2.AnswerTest.answer":184,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":137,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":28,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":145,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":179,"org.easymock.tests2.MockedExceptionTest.testRealException":76,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":128,"org.easymock.tests2.CaptureTest.testAnd":90,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":185,"org.easymock.tests2.NameTest.nameForMocksControl":22,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":23,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":57,"org.easymock.tests2.MockedExceptionTest.testMockedException":74,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":47,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":169,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":116,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":144,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":41,"org.easymock.tests2.NameTest.nameForStrictMock":20,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":121,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":56,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":159,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":75,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":156,"org.easymock.tests.MockingTest.testNicePartialClassMocking":120,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":67,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":163,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":39,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":4,"org.easymock.tests2.CaptureTest.testCaptureLast":97,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":37,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":174,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":164,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":153,"org.easymock.tests2.UsageStrictMockTest.range":32,"org.easymock.tests2.CaptureTest.testCapture1_2446744":94,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":122,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":107,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":60,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests.UsageThrowableTest.throwError":43,"org.easymock.tests2.CaptureTest.testCaptureRightOne":100,"org.easymock.tests.UsageStrictMockTest.differentMethods":14,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":85,"org.easymock.tests.UsageRangeTest.combination":142,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":160,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":134,"org.easymock.tests.UsageTest.wrongArguments":7,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":86,"org.easymock.tests2.MockBuilderTest.testCreateMockString":183,"org.easymock.tests.UsageExpectAndThrowTest.floatType":54,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":127,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":2,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":132,"org.easymock.tests.UsageVerifyTest.twoThrows":10,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":177,"org.easymock.samples.PartialClassMockTest.testGetArea":108,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":181,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":139,"org.easymock.samples.ExampleTest.voteAgainstRemoval":112,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":166,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":53,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":49,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":73,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":78,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":87,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":154,"org.easymock.tests2.CaptureTest.testCaptureFromStub":101,"org.easymock.tests2.MockBuilderTest.testCreateMock":182,"org.easymock.samples.ExampleTest.voteAgainstRemovals":110,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":133,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":59,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":61,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":45,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":12,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":50,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":165,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":58,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":72,"org.easymock.tests.CapturesMatcherTest.test":89,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":171,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":130,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":135,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":81,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":178,"org.easymock.tests.UsageThrowableTest.throwCheckedException":46,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":83,"org.easymock.tests2.UsageTest.resumeIfFailure":180,"org.easymock.tests2.EasyMockSupportClassTest.testAll":175,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":96,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":140,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":27,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":69,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":84,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":30,"org.easymock.tests2.CaptureTest.testCaptureAll":91}}]

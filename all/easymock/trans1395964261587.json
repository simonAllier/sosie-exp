[{"failures":[0,1,2,3],"variableMapping":{"thisListMessages":"messages","messages":"messages"},"name":"add","transplant":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)","position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage)","position":"org.easymock.internal.UnorderedBehavior:95","type":"CtInvocationImpl"},"status":-1},{"failures":[4],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1372","type":"CtInvocationImpl"},"status":-1},{"failures":[5],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:184","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:133","type":"CtInvocationImpl"},"status":-2},{"failures":[6,7],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:97","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread()","position":"org.easymock.internal.MocksBehavior:197","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ObjectMethodsFilter:55","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidClassProxyFactory.MockHandler org.easymock.internal.AndroidClassProxyFactory.MockHandler = com.google.dexmaker.stock.ProxyBuilder.((org.easymock.internal.AndroidClassProxyFactory.MockHandler)(com.google.dexmaker.stock.ProxyBuilder.getInvocationHandler(java.lang.Object)))","position":"org.easymock.internal.AndroidClassProxyFactory:63","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:47","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int)","position":"org.easymock.internal.Results:51","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"targetField":"targetField","obj":"obj","injection":"injection"},"name":"add","transplant":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.InjectionTarget:58","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","position":"org.easymock.internal.InjectionTarget:59","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"lastInvocation":"lastInvocation"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:47","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","position":"org.easymock.internal.MocksControl:240","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String).matcher(((java.lang.String)(java.lang.Object))).find())","position":"org.easymock.internal.matchers.Find:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Type instanceof java.lang.Class<?> ? ((java.lang.Class<?>)(java.lang.reflect.Type)) : null","position":"org.easymock.internal.BridgeMethodResolver:362","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:708","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"failMessage":"fieldName"},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()))","position":"org.easymock.internal.Injector:90","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(java.lang.Object))","position":"org.easymock.internal.ClassProxyFactory:282","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(long[]))","position":"org.easymock.EasyMock:1659","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getMockedType(java.lang.Object)","position":"org.easymock.internal.Invocation:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[8,9,10,0,11,12,13,14,15,16,17,1,18,2,19,20,21,3,22,23,24,25,26,27,28],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ExpectedInvocation:113","type":"CtReturnImpl"},"status":-1},{"failures":[29,30,31,32,33,4,34,35,36],"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","position":"org.easymock.internal.DefaultClassInstantiator:188","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Result:63","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper","position":"org.easymock.internal.MockInvocationHandler:45","type":"CtLocalVariableImpl"},"status":-2},{"failures":[37,38,39,40,41],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"status":-2},{"failures":[],"variableMapping":{"paramType":"clazz","argType":"clazz"},"name":"add","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:409","type":"CtAssertImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()))","position":"org.easymock.internal.ClassProxyFactory:108","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","position":"org.easymock.internal.ClassProxyFactory:214","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","position":"org.easymock.internal.ReplayState:57","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.IMocksBehavior.isThreadSafe()) {\n    java.util.concurrent.locks.ReentrantLock.lock();\n    try {\n        return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n    } finally {\n        java.util.concurrent.locks.ReentrantLock.unlock();\n    }\n} ","position":"org.easymock.internal.ReplayState:42","type":"CtIfImpl"},"status":-2},{"failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,37,38,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,8,73,9,74,75,10,0,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,13,14,137,15,16,138,139,140,141,17,1,18,142,143,144,145,146,147,148,2,149,150,151,152,153,154,155,156,157,158,159,160,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,29,30,185,186,187,31,32,188,189,190,191,192,193,194,195,196,197,4,198,199,200,201,202,203,204,205,206,19,20,207,208,209,210,211,21,3,212,213,214,215,216,217,218,219,220,221,222,223,224,39,225,40,226,227,228,22,229,23,24,230,231,232,233,234,235,34,236,35,237,238,239,240,241,242,243,36,244,245,246,247,248,249,250,251,41,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304],"variableMapping":{"stack":"stack"},"name":"add","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","position":"org.easymock.internal.LastControl:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","position":"org.easymock.internal.LastControl:124","type":"CtIfImpl"},"status":-1},{"failures":[118,13,192],"binaryOperator":"(java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))","name":"removeConditional","position":"org.easymock.internal.matchers.ArrayEquals:38","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","position":"org.easymock.Capture:83","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1291","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Field[] java.lang.reflect.Field[] = java.lang.Class<?>.getDeclaredFields()","position":"org.easymock.internal.Injector:105","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:363","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters()","position":"org.easymock.internal.BridgeMethodResolver:320","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:592","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:281","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:58","type":"CtAssignmentImpl"},"status":-2},{"failures":[43,43,44,44,253],"variableMapping":{"number":"number"},"name":"replace","transplant":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ExpectedInvocation:113","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":-2},{"failures":[305,268],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:174","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n    try {\n        java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:115","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:191","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.junit.runners.model.Statement.evaluate()","position":"org.easymock.internal.EasyMockStatement:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","position":"org.easymock.internal.Injector:116","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"lastResult":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"same(\")","position":"org.easymock.internal.matchers.Same:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:299","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int);\n}","position":"org.easymock.internal.Invocation:73","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","position":"org.easymock.internal.EasyMockProperties:126","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","position":"org.easymock.internal.MethodSerializationWrapper:68","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float)","position":"org.easymock.internal.RecordState:64","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","position":"org.easymock.internal.RecordState:310","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1120","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","position":"org.easymock.internal.DefaultClassInstantiator:188","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.ClassProxyFactory.MockMethodInterceptor org.easymock.internal.ClassProxyFactory.MockMethodInterceptor = new org.easymock.internal.ClassProxyFactory.MockMethodInterceptor(java.lang.reflect.InvocationHandler)","position":"org.easymock.internal.ClassProxyFactory:167","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.add(new org.easymock.internal.ExpectedInvocationAndResults(org.easymock.internal.ExpectedInvocation , org.easymock.internal.Results))","position":"org.easymock.internal.UnorderedBehavior:46","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"\"at least \" + (int)","name":"math","position":"org.easymock.internal.Range:68","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Float>(org.easymock.Capture<java.lang.Float>))","position":"org.easymock.EasyMock:1963","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:42","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:2000","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","position":"org.easymock.internal.RecordState:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","control":"control"},"name":"add","transplant":{"sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","position":"org.easymock.internal.MockInvocationHandler:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","position":"org.easymock.internal.MockInvocationHandler:38","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.DefaultClassInstantiator:53","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.LogicalOperator:62","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1291","type":"mutation","return":"return 0","status":0},{"failures":[306,307,289],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"status":-1},{"failures":[],"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:58","type":"mutation","status":-2},{"failures":[42,45,46,47,48,49,50,51,52,53,54,37,308,38,58,309,310,59,61,62,63,64,65,311,312,313,314,66,67,68,69,70,71,72,8,73,9,74,75,10,0,76,77,78,79,80,81,315,316,317,318,319,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,11,12,108,109,110,111,112,113,114,115,116,117,118,119,120,121,320,125,126,127,128,129,130,131,132,133,134,135,136,13,14,137,15,16,138,321,322,323,324,325,306,326,327,328,329,330,331,332,333,139,334,140,141,17,1,18,335,336,337,338,142,143,144,145,146,147,148,2,149,150,151,152,153,154,155,156,157,158,159,339,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,29,30,185,186,187,31,32,188,33,189,190,191,192,193,194,195,196,197,4,198,199,200,201,202,203,204,205,206,19,20,207,208,209,210,211,21,3,212,213,214,340,215,216,217,218,219,220,221,222,223,224,341,39,225,40,342,226,227,228,22,229,23,24,230,232,234,235,343,34,236,35,237,238,239,240,241,242,243,36,244,245,246,247,248,249,250,251,41,344,345,252,253,254,255,259,262,263,275,289,290,292,293,294,295,296,297,298,299,300,301,302,303,304,25,26,27,28],"variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:51","type":"CtAssignmentImpl"},"status":-1},{"failures":[47,48,50,51,53,54,55,61,62,63,65,70,72,76,86,108,109,110,111,112,114,115,116,117,118,120,346,125,126,127,128,129,136,137,15,16,139,1,18,147,148,2,149,150,155,156,30,186,32,188,189,192,195,4,198,199,200,201,202,205,206,207,208,213,225,226,228,229,23,24,234,236,35,237,238,239,240,241,242,243,245,246,253,254,266,268,269,274,290,292,293,294,297,298,301,303],"binaryOperator":"int < (java.util.LinkedList<org.easymock.internal.Range>.size())","name":"conditionalBoundary","position":"org.easymock.internal.Results:50","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.isArray()) {\n    final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n            return false;\n        } \n        break;\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:196","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"status":-2},{"failures":[59,73,9,10,0,13,15,1,18,2,347,20,21,3,23],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ArgumentToString:89","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-5701204283180444317L","position":"org.easymock.internal.matchers.Or:29","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","position":"org.easymock.EasyMock:2096","type":"CtInvocationImpl"},"status":-2},{"failures":[348],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:130","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","position":"org.easymock.internal.ArgumentToString:83","type":"CtIfImpl"},"status":-2},{"failures":[349],"variableMapping":{"genericType":"genericType"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl"},"status":-2},{"failures":[61,64,9,10,0,120,135,13,14,1,151,152,154,155,156,157,158,183,184,29,185,187,31,191,193,194,195,196,197,203,204,20,207,208,21,3,227,22,234,36,253,290,293,294,296,297,298,300,301],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:95","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1708","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","position":"org.easymock.internal.ArgumentToString:67","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","position":"org.easymock.internal.BridgeMethodResolver:351","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","position":"org.easymock.internal.BridgeMethodResolver:353","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","position":"org.easymock.internal.DefaultClassInstantiator:136","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments()","position":"org.easymock.internal.BridgeMethodResolver:319","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.floatValue()","position":"org.easymock.internal.RecordState:203","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","position":"org.easymock.internal.BridgeMethodResolver:88","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:44","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:1038","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Failed to mock \" + java.lang.Class<T>)","name":"math","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.easymock.internal.ErrorMessage:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.InjectionTarget == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:165","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:290","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"otherArgument":"actual","myArgument":"actual"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:122","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(org.easymock.IArgumentMatcher.matches(java.lang.Object))","position":"org.easymock.internal.matchers.Not:36","type":"CtReturnImpl"},"status":-2},{"failures":[161,350,351],"variableMapping":{"type":"leafClass"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:438","type":"CtAssignmentImpl"},"status":-1},{"failures":[352,345,253,254],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:572","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","position":"org.easymock.internal.RecordState:213","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.ReflectionUtils:122","type":"CtReturnImpl"},"status":-2},{"failures":[58,72,75,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,121,1,151,153,154,155,156,157,158,205,210,290],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:108","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"throwable":"throwable"},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","position":"org.easymock.internal.RecordState:269","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.Result:46","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","position":"org.easymock.EasyMock:1482","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"number":"number"},"name":"replace","transplant":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"result"},"name":"replace","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-7799769066534714634L","position":"org.easymock.internal.MockInvocationHandler:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Byte>(org.easymock.Capture<java.lang.Byte>))","position":"org.easymock.EasyMock:1987","type":"CtInvocationImpl"},"status":-2},{"failures":[353,341,225],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":154,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":137,"org.easymock.tests2.MockedExceptionTest.testRealException":218,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":280,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":136,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":103,"org.easymock.tests.UsageVarargTest.varargIntAccepted":110,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":70,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":183,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":42,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":291,"org.easymock.tests2.UsageConstraintsTest.testContains":191,"org.easymock.tests.UsageCallCountTest.tooManyCalls":148,"org.easymock.tests2.UsageConstraintsTest.testFind":185,"org.easymock.tests.UsageVarargTest.allKinds":118,"org.easymock.tests2.StubTest.stubWithReturnValue":290,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":239,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":69,"org.easymock.tests2.CaptureTest.testCaptureAll":236,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":149,"org.easymock.samples.ExampleTest.addAndChangeDocument":54,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":264,"org.easymock.tests.UsageVarargTest.varargCharAccepted":111,"org.easymock.tests2.CaptureTest.testCaptureFromStub":244,"org.easymock.tests.UsageVerifyTest.twoThrows":1,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":62,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":112,"org.easymock.tests2.DelegateToTest.testReturnException":39,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":208,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":195,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":303,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":228,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":349,"org.easymock.tests2.CaptureTest.testAnd":34,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":337,"org.easymock.tests.UsageStrictMockTest.testVerify":321,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":96,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":38,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":243,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":100,"org.easymock.tests2.UsageConstraintsTest.testMatches":194,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":353,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":306,"org.easymock.tests2.UsageConstraintsTest.testNull":186,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":255,"org.easymock.tests2.EasyMockSupportClassTest.testAll":285,"org.easymock.tests.ResultTest.emptyResults":346,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":297,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":104,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":176,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":235,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":60,"org.easymock.tests.UsageThrowableTest.throwError":151,"org.easymock.tests2.UsageConstraintsTest.greaterThan":196,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":108,"org.easymock.samples.SupportTest.addDocument":46,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":65,"org.easymock.tests2.StubTest.stub":289,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":327,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":128,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":61,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":4,"org.easymock.tests.UsageExpectAndReturnTest.object":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":182,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":300,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":117,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":230,"org.easymock.tests.UsageExpectAndThrowTest.object":98,"org.easymock.tests2.DelegateToTest.testWrongClass":40,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":249,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":7,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":84,"org.easymock.tests2.UsageTest.moreThanOneArgument":19,"org.easymock.tests.UsageVarargTest.varargByteAccepted":116,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":95,"org.easymock.tests.UsageTest.wrongArguments":9,"org.easymock.samples.ExampleTest.voteAgainstRemoval":51,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":80,"org.easymock.tests.CapturesMatcherTest.test":160,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":157,"org.easymock.tests.UsageVarargTest.varargShortAccepted":114,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":330,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":99,"org.easymock.tests2.UsageTest.defaultResetToNice":211,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":324,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":217,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":127,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":45,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":250,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":269,"org.easymock.tests2.MockBuilderTest.testCreateMock":270,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":251,"org.easymock.tests2.NameTest.nameForMocksControl":28,"org.easymock.tests2.SerializationTest.testAllMockedMethod":233,"org.easymock.samples.ExampleTest.voteAgainstRemovals":48,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":6,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":227,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":308,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":140,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":64,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":119,"org.easymock.tests2.CaptureTest.testCapture1_2446744":238,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":213,"org.easymock.tests.LimitationsTest.mockNativeMethod":159,"org.easymock.tests2.DelegateToTest.testStubDelegate":225,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":316,"org.easymock.tests.UsageUnorderedTest.message":2,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":309,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":342,"org.easymock.samples.ExampleTest.answerVsDelegate":49,"org.easymock.samples.ExampleTest.voteForRemoval":50,"org.easymock.tests.UsageCallCountTest.tooFewCalls":143,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":172,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":145,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":252,"org.easymock.tests.UsageVerifyTest.twoReturns":18,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":97,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":167,"org.easymock.tests2.DependencyTest.testInterfaceMocking":262,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":292,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":310,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":83,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":295,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":317,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":222,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":32,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":66,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":138,"org.easymock.tests.MockingTest.testTwoMocks":320,"org.easymock.tests2.CaptureTest.testCaptureRightOne":36,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":169,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":142,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":67,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":215,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":345,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":278,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":334,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":307,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":329,"org.easymock.tests2.UsageConstraintsTest.cmpTo":190,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":338,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":174,"org.easymock.tests.MockTypeTest.fromEasyMockClass":311,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":257,"org.easymock.tests2.MockedExceptionTest.testMockedException":216,"org.easymock.tests.UsageThrowableTest.throwCheckedException":155,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":107,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":132,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":201,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":312,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":17,"org.easymock.samples.PartialClassMockTest.testGetArea":55,"org.easymock.samples.ExampleTest.voteForRemovals":53,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":153,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":121,"org.easymock.samples.ConstructorCalledMockTest.testTax":43,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":193,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":58,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":85,"org.easymock.tests2.UsageTest.argumentsOrdered":3,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":277,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":344,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":72,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":254,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":319,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":77,"org.easymock.tests2.AnswerTest.answer":41,"org.easymock.tests.MockingTest.testNicePartialClassMocking":123,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":14,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":164,"org.easymock.tests2.UsageConstraintsTest.any":189,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":171,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":129,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":134,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":328,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":302,"org.easymock.tests.UsageExpectAndThrowTest.longType":91,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":314,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":105,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":224,"org.easymock.tests2.CallbackTest.callback":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":287,"org.easymock.tests2.NameTest.nameForMock":25,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":299,"org.easymock.tests.UsageTest.argumentsOrdered":0,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":30,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":268,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":192,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":181,"org.easymock.tests2.NameTest.nameForStrictMock":26,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":63,"org.easymock.tests2.MockBuilderTest.testCreateMockString":272,"org.easymock.tests.MockNameTest.defaultName":339,"org.easymock.tests2.CaptureTest.testCaptureNone":242,"org.easymock.tests2.SerializationTest.test":232,"org.easymock.tests.UsageExpectAndReturnTest.longType":166,"org.easymock.tests2.SerializationTest.testClass":231,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":352,"org.easymock.tests2.CaptureTest.testCaptureFirst":246,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":198,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":56,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":82,"org.easymock.tests2.UsageTest.niceToStrict":207,"org.easymock.tests2.EasyMockSupportTest.testVerify":304,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":322,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":81,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":267,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":318,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":135,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":93,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":200,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":205,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":101,"org.easymock.tests2.UsageTest.strictResetToDefault":206,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":180,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":271,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":283,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":347,"org.easymock.tests.GenericTest.testBridgedEquals":351,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":71,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":88,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":188,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":170,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":259,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":219,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":5,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":279,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":109,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":197,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":276,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":87,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":124,"org.easymock.tests2.UsageConstraintsTest.testOr":31,"org.easymock.tests2.DelegateToTest.testDelegate":226,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":248,"org.easymock.tests2.UsageConstraintsTest.testNotNull":202,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":229,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":214,"org.easymock.tests2.CaptureTest.testCapture_2617107":35,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":150,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":175,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":305,"org.easymock.tests2.ThreadingTest.testThreadSafe":247,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":210,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":131,"org.easymock.tests.UsageThrowableTest.noUpperLimit":152,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":256,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":258,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":301,"org.easymock.tests.UsageExpectAndReturnTest.floatType":165,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":293,"org.easymock.tests2.UsageTest.wrongArguments":20,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":33,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":221,"org.easymock.tests2.UsageConstraintsTest.testSame":187,"org.easymock.tests2.UsageTest.resumeIfFailure":212,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":336,"org.easymock.tests.UsageOverloadedMethodTest.overloading":120,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":260,"org.easymock.samples.SupportTest.voteForRemovals":47,"org.easymock.tests.UsageRangeTest.combination":139,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":313,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":156,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":340,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":333,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":44,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":203,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":162,"org.easymock.tests.UsageTest.openCallCountByLastCall":74,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":94,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":332,"org.easymock.tests2.NameTest.nameForNiceMock":27,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":343,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":141,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":199,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":130,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":348,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":22,"org.easymock.tests2.CaptureTest.testPrimitive":237,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":275,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":177,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":102,"org.easymock.samples.BasicClassMockTest.testPrintContent":57,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":335,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":68,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":125,"org.easymock.tests.UsageExpectAndThrowTest.floatType":90,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":281,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":147,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":178,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":223,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":274,"org.easymock.tests2.UsageStrictMockTest.differentMethods":24,"org.easymock.tests.UsageTest.exactCallCountByLastCall":76,"org.easymock.tests2.AnswerTest.stubAnswer":253,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":294,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":298,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":350,"org.easymock.tests2.CaptureTest.testCaptureLast":241,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":89,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":146,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":144,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":263,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":286,"org.easymock.tests.UsageStrictMockTest.range":15,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":75,"org.easymock.tests.UsageTest.unexpectedCallWithArray":73,"org.easymock.tests.MockingTest.testPartialClassMocking":122,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":179,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":21,"org.easymock.tests2.UsageConstraintsTest.constraints":29,"org.easymock.samples.ExampleTest.addDocument":52,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":59,"org.easymock.tests2.UsageConstraintsTest.lessThan":204,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":220,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":10,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":37,"org.easymock.tests.UsageVarargTest.varargLongAccepted":115,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":133,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":326,"org.easymock.tests.ObjectMethodsTest.testHashCode":323,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":282,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":284,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":341,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":13,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":288,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":331,"org.easymock.tests2.UsageStrictMockTest.range":23,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":261,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":11,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":12,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":79,"org.easymock.tests.UsageTest.moreThanOneArgument":8,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":126,"org.easymock.tests2.UsageTest.openCallCountByLastCall":209,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":265,"org.easymock.tests.UsageStrictMockTest.differentMethods":16,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":296,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":184,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":266,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":92,"org.easymock.tests.UsageVarargTest.differentLength":113,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":325,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":315,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":86,"org.easymock.tests2.CaptureTest.testCapture2_2446744":245,"org.easymock.tests.GenericTest.testPackageScope":161}}]

[{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:91","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:213","failures":[0,1],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.Invocation:195","failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"binaryOperator":"(((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[58,59,60,61],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[80,81,82,83],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:181","sourceCode":"java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class })","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[84,85],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[86],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"regex"}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Or:47","sourceCode":"java.lang.StringBuffer.append(\"or(\")","type":"CtInvocationImpl"},"failures":[87],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[88],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[80,81,82,83],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1863","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[40,89],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[90,91,92,93],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,84,113,114,80,81,82,115,116,117,90,118,119,120,86,121,122,123,124,58,125,126,127,88,59,128,129,91,130,131,132,133,92,134,135,60,136,137,66,138,14,15,16,17,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,31,159,160,32,33,161,162,163,164,165,166,167,168,169,39,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,89,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,76,253,254,255,256,77,78,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[283,284,67,285,286,74],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"m"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[37,170,41],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[287],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[143,145,288,147,148,151,152,289,290],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:205","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[291,292,293,294,110,33,295,34,296,161,162,297,35,298,36,37,299,300,170,41,0,301,54,302],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[94,95,96,97,98,99,303,100,304,305,306,307,308,291,309,309,310,310,311,101,312,313,314,102,103,62,104,105,315,316,106,63,64,107,317,318,108,109,319,2,3,320,4,321,292,5,322,323,6,7,324,325,326,327,293,8,328,9,10,329,294,330,331,110,111,112,84,113,332,114,80,81,82,333,334,335,11,336,337,12,338,13,339,340,341,342,343,115,116,344,345,117,90,118,119,120,346,86,121,122,123,124,58,347,125,126,127,88,59,128,129,91,130,131,132,133,348,92,134,135,60,349,136,137,350,65,66,138,351,14,15,16,17,139,352,353,140,141,142,143,144,145,146,288,147,148,149,150,151,152,289,290,153,154,155,156,157,158,18,19,20,21,22,23,24,25,26,27,28,29,30,31,159,354,355,160,32,33,356,295,34,357,296,161,162,297,358,35,359,298,36,360,37,361,362,163,363,364,365,366,367,164,38,165,166,167,168,299,368,169,369,370,39,300,170,40,371,41,42,43,44,45,46,47,48,49,50,51,52,53,171,172,287,372,173,174,373,374,175,375,176,177,178,179,376,377,378,180,181,182,183,184,379,185,186,380,187,67,68,381,382,69,70,383,188,189,384,385,190,71,386,387,388,191,192,389,89,390,391,392,193,194,0,195,196,301,1,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,420,421,422,423,424,425,426,427,428,429,430,431,432,217,218,433,434,435,436,437,219,220,221,222,223,224,438,439,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,54,440,55,302,56,441,442,443,444,245,246,247,248,249,250,445,446,447,448,251,74,252,449,75,76,253,254,450,451,452,85,453,255,454,256,77,78,455,456,457,458,459,460,461,462,463,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,464,465,466,467,468,469,470,471,472,473,474,475,272,273,274,476,275,276,477,277,278,279,280,281,478,479,480,481,482,483,484,282,485,486,487,488,489,490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:328","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.internal.RecordState:222","failures":[393,394,451,453],"status":-1,"binaryOperator":"(\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[283,284,67,285,286,74],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[315,316,118,119,86,122,123,127,128,130,135,65,66,186,381,382,397,217,247,75,76,256,268,472,473],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,1],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[62,63,64,65,67,68,69,70,71,73,74,75,454,77,78],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:51","failures":[65,75,77,78,491],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[110,33,162,299,41],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":120,"org.easymock.tests2.UsageTest.argumentsOrdered":64,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":380,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":340,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":24,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":406,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":105,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":306,"org.easymock.tests2.DelegateToTest.testReturnException":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":258,"org.easymock.tests.MockingTest.testPartialClassMocking":191,"org.easymock.tests.MockClassControlTest.testToString":485,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":351,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":415,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":6,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":225,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":292,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":363,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":58,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":188,"org.easymock.tests2.UsageTest.wrongArguments":62,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":53,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":178,"org.easymock.samples.ExampleTest.answerVsDelegate":95,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":302,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":391,"org.easymock.tests2.UsageConstraintsTest.testNull":121,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":166,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":490,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":339,"org.easymock.tests2.CaptureTest.testPrimitive":146,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":190,"org.easymock.tests.UsageTest.moreThanOneArgument":187,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":244,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":165,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":221,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":471,"org.easymock.tests.UsageTest.argumentsOrdered":70,"org.easymock.tests.UsageVarargTest.varargIntAccepted":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":411,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":263,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":33,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":28,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":398,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":267,"org.easymock.tests.ReplayStateInvalidUsageTest.times":428,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":47,"org.easymock.tests2.DependencyTest.testClassMocking":361,"org.easymock.tests2.AnswerTest.answer":139,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":413,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":157,"org.easymock.tests2.CaptureTest.testAnd":143,"org.easymock.tests2.UsageTest.strictResetToDefault":102,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":39,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":357,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":220,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":270,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":336,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":475,"org.easymock.tests2.DelegateToTest.testDelegate":117,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":240,"org.easymock.tests.LimitationsTest.mockFinalMethod":375,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":261,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":184,"org.easymock.tests2.DependencyTest.testClassMockingSupport":362,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":393,"org.easymock.tests2.CaptureTest.testCapture1_2446744":288,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":368,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":238,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":155,"org.easymock.tests.UsageThrowableTest.throwError":432,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":422,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":55,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":29,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":57,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":331,"org.easymock.samples.PartialClassMockTest.testGetArea":291,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":423,"org.easymock.tests.MockingTest.testInterfaceMocking":389,"org.easymock.tests2.CompareToTest.testLessOrEqual":93,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":264,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":468,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":483,"org.easymock.tests2.UsageTest.niceToStrict":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":7,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":396,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":161,"org.easymock.tests2.MockBuilderTest.testCreateMock":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":9,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":50,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":234,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":283,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":337,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":444,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":245,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":176,"org.easymock.tests.UsageOverloadedMethodTest.overloading":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":329,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":59,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":85,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":208,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":379,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":88,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":151,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":476,"org.easymock.tests.MockClassControlTest.testEquals":489,"org.easymock.tests2.EasyMockSupportClassTest.testAll":320,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":196,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":242,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":182,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":156,"org.easymock.tests2.CaptureTest.testCaptureAll":144,"org.easymock.tests.MockNameTest.defaultName":439,"org.easymock.tests2.UsageConstraintsTest.testMatches":128,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":420,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":222,"org.easymock.samples.ExampleTest.voteForRemovals":99,"org.easymock.tests.UsageVarargTest.allKinds":281,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":256,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":183,"org.easymock.samples.BasicClassMockTest.testPrintContent":308,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":436,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":349,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":25,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":262,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":345,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":462,"org.easymock.tests2.UsageConstraintsTest.greaterThan":91,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":4,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":269,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":40,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":463,"org.easymock.samples.ExampleTest.voteForRemoval":96,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":172,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":371,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":56,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":299,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":174,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":314,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":403,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":335,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":2,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":257,"org.easymock.tests2.CaptureTest.testCaptureFirst":153,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":11,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":317,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":454,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":204,"org.easymock.tests2.UsageTest.moreThanOneArgument":103,"org.easymock.tests2.CaptureTest.testCapture2_2446744":290,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":414,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":36,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":280,"org.easymock.tests.GenericTest.testBridgedEquals":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":446,"org.easymock.tests.UsageExpectAndReturnTest.longType":200,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":180,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":333,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":243,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":470,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":348,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":241,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":465,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":219,"org.easymock.tests.UsageCallCountTest.tooManyCalls":447,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":10,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":205,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":52,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":230,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":435,"org.easymock.tests.MockingTest.testNiceClassMocking":392,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":31,"org.easymock.tests.MockingTest.testClassMocking":387,"org.easymock.tests2.UsageConstraintsTest.testContains":127,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":246,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":112,"org.easymock.tests2.UsageConstraintsTest.testFind":86,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":186,"org.easymock.tests.MockTypeTest.fromEasyMockClass":440,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":448,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":114,"org.easymock.tests.UsageExpectAndReturnTest.object":207,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":169,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":51,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":13,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":276,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":481,"org.easymock.tests.UsageTest.exactCallCountByLastCall":383,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":401,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":472,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":376,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":312,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":213,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":272,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":452,"org.easymock.tests.MockClassControlTest.testHashCode":488,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":19,"org.easymock.tests2.EasyMockSupportTest.testVerify":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":325,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":473,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":450,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":443,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":154,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":72,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":318,"org.easymock.tests.UsageVarargTest.varargCharAccepted":275,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":455,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":419,"org.easymock.tests2.UsageTest.openCallCountByLastCall":315,"org.easymock.tests.DefaultClassInstantiatorTest.object":456,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":341,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":442,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":479,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":73,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":326,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":433,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":45,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":18,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":487,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":300,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":231,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":214,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":464,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":294,"org.easymock.tests2.UsageTest.resumeIfFailure":107,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":54,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":260,"org.easymock.tests2.StubTest.stubWithReturnValue":109,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":358,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":92,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":206,"org.easymock.tests2.SerializationTest.testAllMockedMethod":82,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":412,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":284,"org.easymock.samples.SupportTest.voteForRemovals":305,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":21,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":237,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":83,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":418,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":352,"org.easymock.tests.UsageExpectAndThrowTest.object":235,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":378,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":132,"org.easymock.tests2.DelegateToTest.testWrongClass":344,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":193,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":194,"org.easymock.tests.UsageStrictMockTest.range":75,"org.easymock.samples.ConstructorCalledMockTest.testTax":309,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":366,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":338,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":236,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":297,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":430,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":319,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":177,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":285,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":469,"org.easymock.tests2.CaptureTest.testCaptureNone":150,"org.easymock.tests.UsageUnorderedTest.message":71,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":79,"org.easymock.tests.UsageVerifyTest.twoReturns":78,"org.easymock.tests.UsageVarargTest.varargByteAccepted":279,"org.easymock.tests2.ThreadingTest.testThreadSafe":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":8,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":250,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":482,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":307,"org.easymock.tests2.CaptureTest.testCapture_2617107":145,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":395,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":416,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":385,"org.easymock.tests2.UsageConstraintsTest.any":125,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":427,"org.easymock.tests2.StubTest.stub":108,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":466,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":417,"org.easymock.tests.UsageExpectAndThrowTest.longType":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":259,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":460,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":426,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":350,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":23,"org.easymock.tests2.SerializationTest.testClass":80,"org.easymock.tests.LimitationsTest.mockNativeMethod":175,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":216,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":301,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":44,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":138,"org.easymock.tests2.NameTest.nameForMocksControl":17,"org.easymock.tests2.MockedExceptionTest.testMockedException":111,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":321,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":382,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":89,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":229,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":332,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":164,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":35,"org.easymock.tests.MockingTest.testNicePartialClassMocking":192,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":168,"org.easymock.tests2.CaptureTest.testCaptureLast":149,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":42,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":394,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":124,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":32,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":133,"org.easymock.tests.MockingTest.testTwoMocks":388,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":197,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":233,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":63,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":135,"org.easymock.samples.ExampleTest.removeNonExistingDocument":303,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":424,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":49,"org.easymock.tests.UsageStrictMockTest.differentMethods":76,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":20,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":458,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":287,"org.easymock.tests2.MockBuilderTest.testCreateMockString":37,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":5,"org.easymock.tests.UsageExpectAndThrowTest.floatType":227,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":3,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":140,"org.easymock.tests.UsageVerifyTest.twoThrows":77,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":313,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":293,"org.easymock.samples.ExampleTest.voteAgainstRemoval":97,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":407,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":170,"org.easymock.tests.LimitationsTest.privateConstructor":374,"org.easymock.tests2.UsageConstraintsTest.testNotNull":134,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":437,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":110,"org.easymock.tests2.UsageTest.defaultResetToNice":106,"org.easymock.samples.ExampleTest.voteAgainstRemovals":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":408,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":212,"org.easymock.tests.UsageVarargTest.differentLength":477,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":43,"org.easymock.tests2.CallbackTest.callback":158,"org.easymock.tests2.UsageConstraintsTest.equals":346,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":369,"org.easymock.tests.UsageTest.openCallCountByLastCall":381,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":90,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":384,"org.easymock.tests.UsageCallCountTest.tooFewCalls":248,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":179,"org.easymock.tests.UsageThrowableTest.throwCheckedException":434,"org.easymock.tests.MockingTest.testStrictClassMocking":386,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":286,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":438,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":160,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":159,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":48,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":429,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":355,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":142,"org.easymock.tests.ObjectMethodsTest.testHashCode":480,"org.easymock.tests2.CompareToTest.testGreateOrEqual":61,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":173,"org.easymock.tests2.NameTest.nameForNiceMock":16,"org.easymock.tests2.DependencyTest.testInterfaceMocking":163,"org.easymock.samples.ExampleTest.addDocument":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":328,"org.easymock.tests2.DelegateToTest.testStubDelegate":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":330,"org.easymock.tests2.AnswerTest.stubAnswer":141,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":252,"org.easymock.tests.UsageVarargTest.varargLongAccepted":278,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":405,"org.easymock.tests.UsageExpectAndReturnTest.floatType":199,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":215,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":101,"org.easymock.tests2.ConstraintsToStringTest.orToString":87,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":310,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":453,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":130,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":27,"org.easymock.tests.UsageThrowableTest.noUpperLimit":217,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":118,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":364,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":147,"org.easymock.tests2.SerializationTest.test":81,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":457,"org.easymock.tests2.UsageConstraintsTest.testSame":122,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":198,"org.easymock.samples.SupportTest.addDocument":304,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":425,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":322,"org.easymock.tests.GenericTest.testPackageScope":195,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":400,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":26,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":390,"org.easymock.tests2.NameTest.nameForMock":14,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":209,"org.easymock.tests2.UsageStrictMockTest.differentMethods":66,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":360,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":370,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":201,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":239,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":478,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":271,"org.easymock.tests2.MockedExceptionTest.testRealException":84,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":410,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":409,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":137,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":431,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":189,"org.easymock.tests2.NameTest.nameForStrictMock":15,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":296,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":113,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":167,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":365,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":459,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":131,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":295,"org.easymock.tests2.UsageStrictMockTest.range":65,"org.easymock.tests2.UsageConstraintsTest.lessThan":60,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":404,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":334,"org.easymock.tests2.CaptureTest.testCaptureRightOne":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":324,"org.easymock.tests2.UsageConstraintsTest.testOr":123,"org.easymock.tests.UsageRangeTest.combination":268,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":38,"org.easymock.tests.UsageTest.wrongArguments":68,"org.easymock.tests2.MockBuilderTest.testWithConstructor":356,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":323,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":282,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":397,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":210,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":461,"org.easymock.tests.UsageVarargTest.varargShortAccepted":277,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":445,"org.easymock.tests2.UsageConstraintsTest.cmpTo":126,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":353,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":399,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":316,"org.easymock.tests2.CaptureTest.testCaptureFromStub":289,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":421,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":34,"org.easymock.tests.UsageTest.unexpectedCallWithArray":67,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":74,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":249,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":211,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":449,"org.easymock.tests2.UsageConstraintsTest.constraints":119,"org.easymock.samples.ExampleTest.addAndChangeDocument":100,"org.easymock.tests.UsageStrictMockTest.testVerify":254,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":311,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":251,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":181,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":148,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":265,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":203,"org.easymock.tests.LimitationsTest.abstractClass":373,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":255,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":266,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":491,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":12,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":273}}]

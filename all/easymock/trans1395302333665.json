[{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"propertyFileName":"propertyFileName","properties":"properties","in":"in"}},{"position":"org.easymock.EasyMock:557","failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,132,133,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[262,263,264],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[265,266,14,267,15,16,268,18,19,20,21,23,24,27,28,29,36,51,269,52,270,271,54,55,56,57,60,62,64,272,273,274,75,79,81,84,85,86,89,92,95,96,97,275,98,99,103,106,110,113,116,126,128,129,130,131,134,135,136,276,277,151,278,152,153,279,280,281,282,160,161,162,194,197,198,199,200,201,283,284,285,286,287,288,289,290,291,292,232,237,241,293,294,295],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:120","sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \").append(org.easymock.internal.Invocation.toString())","type":"CtInvocationImpl"},"failures":[15,16,296,273,274,297,136,298,152,153,237,238,299,300,293,294,301],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[302,248],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[14,15,16,103,105,107,303,111,298,151,152,153,304,299],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[305,306,307,308,6,7,8,11,12,13,265,266,14,267,15,16,268,17,18,19,20,21,22,23,24,25,26,27,28,29,309,30,31,32,33,34,35,36,37,38,39,40,310,41,42,43,44,45,46,47,48,49,50,51,269,52,53,270,271,54,55,56,57,58,59,60,61,62,63,296,64,272,65,66,67,273,274,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,275,98,99,100,101,102,103,104,105,106,107,311,108,303,109,110,111,312,112,113,313,114,115,314,116,297,117,118,119,120,121,122,123,124,125,315,316,317,126,127,128,129,318,130,131,132,133,319,134,320,135,136,141,142,143,144,145,149,321,276,277,298,151,278,152,153,279,157,280,322,281,323,324,282,160,161,162,163,164,325,325,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,326,327,328,329,330,227,228,229,230,231,283,284,285,286,287,331,288,289,290,291,292,232,234,235,236,237,238,240,241,242,243,244,299,300,245,246,293,294,247,332,333,334,335,249,250,251,252,253,301,255,256,257,258,259,260,261],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.ConstructorArgs:54","failures":[35,336,39,337,338,45,49,339,340,341,342,343,344,345,346,347,348,122,349,350,123,351,352,353,354,355,356,357,358,359,124,360,361,362,363,364,125,365,366,132,133],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[305,306,307,308,6,7,8,11,12,13,265,266,14,267,15,16,268,17,18,19,20,21,22,23,24,25,26,27,28,29,309,30,31,32,33,34,35,36,37,38,39,40,310,41,42,43,44,45,46,47,48,49,50,51,269,52,53,270,271,54,55,56,57,58,59,60,61,62,63,296,64,272,65,66,67,273,274,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,275,98,99,100,101,102,103,104,105,106,107,311,108,303,109,110,111,312,112,113,313,114,115,314,116,297,117,118,119,120,121,122,123,124,125,315,316,317,126,127,128,129,318,130,131,132,133,319,134,320,135,136,141,142,143,144,145,149,321,276,277,298,151,278,152,153,279,157,280,322,281,323,324,282,160,161,162,163,164,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,326,327,328,329,330,227,228,229,230,231,283,284,285,286,287,331,288,289,290,291,292,232,234,235,236,237,238,240,241,242,243,244,299,300,245,246,293,294,247,332,333,334,335,249,250,251,252,253,301,255,256,257,258,259,260,261],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[305,306,307,308,6,8,11,12,13,265,266,14,267,15,16,268,30,31,32,33,34,35,36,37,38,39,40,310,41,42,44,45,48,49,50,51,269,52,53,270,271,54,55,56,57,58,59,60,61,62,63,296,64,272,65,66,67,273,274,68,69,71,72,73,75,367,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,368,369,370,371,102,103,104,105,106,107,108,303,110,312,113,313,116,297,118,119,120,121,126,127,128,129,318,130,131,136,302,141,142,143,144,145,149,321,372,276,277,298,151,278,152,153,279,304,373,374,157,280,322,281,160,161,162,163,164,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,326,327,328,329,330,227,228,229,230,231,283,284,285,286,287,288,289,290,291,292,232,233,234,235,236,237,238,241,242,243,244,299,300,245,246,293,294,247,332,333,334,335,248,249,250,254,255,256,257,258,259,260,261],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:945","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[262,136],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,132,133,133,134,135,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,225,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[39,311,312,375,112,376,113,313,114,115,314,116,377,378,297,135,150,379,380],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","name":"methodName"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[99],"status":-1,"binaryOperator":"java.lang.Object != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[89],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"invocation":"invocation","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[35,336,381,382,383,384,385,39,342,343],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:70","failures":[305,306,307,308,6,7,8,9,10,11,12,13,265,266,14,267,15,16,268,17,18,19,20,21,22,23,24,25,26,27,28,29,309,30,31,32,34,37,38,50,51,269,52,53,270,271,54,55,56,57,58,59,60,367,76,77,78,79,80,81,82,83,84,85,386,86,87,88,89,90,91,92,93,94,95,96,97,275,98,99,100,101,108,136,298,151,160,161,162,163,164,222,223,227,228,229,230,231,292,249,250,260],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:105","failures":[305,306,307,308,6,7,8,9,10,11,12,13,265,266,14,267,15,16,268,387,388,389,390,391,17,392,393,394,395,396,397,18,19,20,21,22,23,24,25,26,27,28,29,309,30,31,32,33,34,36,37,398,38,40,41,42,47,339,399,400,50,51,269,52,53,270,271,54,55,56,57,58,59,60,61,62,63,296,64,272,65,66,67,273,274,68,69,70,71,72,73,74,75,367,76,77,78,79,401,80,81,82,83,84,85,386,86,87,88,89,90,91,92,93,94,95,96,97,275,98,99,100,101,402,368,369,370,371,104,403,404,405,406,407,117,408,409,410,411,412,413,118,119,120,121,315,126,127,128,129,318,130,414,131,319,134,320,415,416,417,418,419,420,136,421,422,423,424,302,137,425,426,427,428,429,430,138,139,140,141,142,143,144,145,146,147,148,276,277,298,151,278,152,153,279,304,154,155,156,373,374,157,280,322,281,323,324,282,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,158,447,448,449,450,451,159,452,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,453,454,455,456,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,326,327,328,329,330,227,228,229,230,231,283,284,285,457,286,287,331,288,289,290,291,292,232,233,234,235,236,237,238,239,240,241,242,243,244,299,300,245,246,293,294,247,332,333,334,335,295,248,458,459,460,461,462,249,250,251,463,252,253,464,254,301,256,257,258,259,260,261],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[64,465],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:220","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"failures":[466],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[92],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[50,51,269,52,57,58,78,79,80,81,82,83,84,85,386,86,95,96,99,100],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:800","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[98],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:173","sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder.toString()))","type":"CtThrowImpl"},"failures":[14,16,268,63,368,369,370,371,151,153,279,373,157,280,236,237,238,244],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1263","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[50,269,57,78,79,81,83,84,386,95,99],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:174","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[467,468,298,469,470,299],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[42,61,66,138,139,140,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,194,196,197,198,199,200,201,237,242,243,246,253,260],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[15,296,273,274,136,298,152,472,237,238,299,300,293,294,301],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[155,225,239],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[37,38,275,99],"status":-1,"binaryOperator":"java.lang.Object != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[432,439,443,447,448],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":79,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":243,"org.easymock.tests2.UsageTest.argumentsOrdered":274,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":28,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":408,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":441,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":272,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":320,"org.easymock.tests2.DelegateToTest.testReturnException":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":257,"org.easymock.tests.MockingTest.testPartialClassMocking":191,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":402,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":449,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":354,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":170,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":123,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":7,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":381,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":85,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":160,"org.easymock.tests2.UsageTest.wrongArguments":296,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":397,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":334,"org.easymock.samples.ExampleTest.answerVsDelegate":127,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":380,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":456,"org.easymock.tests2.UsageConstraintsTest.testNull":81,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":105,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":27,"org.easymock.tests2.CaptureTest.testPrimitive":52,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":164,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":189,"org.easymock.tests.UsageTest.moreThanOneArgument":244,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":104,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":143,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":165,"org.easymock.tests.UsageTest.argumentsOrdered":294,"org.easymock.tests.UsageVarargTest.varargIntAccepted":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":446,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":227,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":312,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":412,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":433,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":231,"org.easymock.tests.ReplayStateInvalidUsageTest.times":427,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":17,"org.easymock.tests2.AnswerTest.answer":8,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":386,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":447,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":308,"org.easymock.tests2.CaptureTest.testAnd":50,"org.easymock.tests2.UsageTest.strictResetToDefault":62,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":303,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":341,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":142,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":22,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":234,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":169,"org.easymock.tests2.DelegateToTest.testDelegate":75,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":185,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":260,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":330,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":295,"org.easymock.tests2.CaptureTest.testCapture1_2446744":53,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":183,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":306,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":423,"org.easymock.tests.UsageThrowableTest.throwError":194,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":460,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":413,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":145,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":366,"org.easymock.samples.PartialClassMockTest.testGetArea":135,"org.easymock.tests.MockingTest.testInterfaceMocking":454,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":424,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":228,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":155,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":420,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":171,"org.easymock.tests2.UsageTest.niceToStrict":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":431,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":113,"org.easymock.tests2.MockBuilderTest.testCreateMock":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":362,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":394,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":467,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":179,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":23,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":140,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":373,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":332,"org.easymock.tests.UsageOverloadedMethodTest.overloading":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":364,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":90,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":253,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":213,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":240,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":89,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":56,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":457,"org.easymock.tests2.EasyMockSupportClassTest.testAll":122,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":321,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":187,"org.easymock.tests2.CaptureTest.testCaptureAll":51,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":307,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":328,"org.easymock.tests.MockNameTest.defaultName":453,"org.easymock.tests2.UsageConstraintsTest.testMatches":91,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":421,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":144,"org.easymock.samples.ExampleTest.voteForRemovals":130,"org.easymock.tests.UsageVarargTest.allKinds":292,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":236,"org.easymock.samples.BasicClassMockTest.testPrintContent":317,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":329,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":200,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":265,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":409,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":74,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":261,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":385,"org.easymock.tests2.UsageConstraintsTest.greaterThan":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":349,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":233,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":111,"org.easymock.samples.ExampleTest.voteForRemoval":128,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":31,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":377,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":461,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":311,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":61,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":255,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":438,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":20,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":347,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":256,"org.easymock.tests2.CaptureTest.testCaptureFirst":60,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":437,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":21,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":69,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":301,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":209,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":33,"org.easymock.tests2.CaptureTest.testCapture2_2446744":59,"org.easymock.tests2.UsageTest.moreThanOneArgument":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":448,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":116,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":291,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":324,"org.easymock.tests.UsageExpectAndReturnTest.longType":205,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":18,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":326,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":188,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":378,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":239,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":275,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":186,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":147,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":141,"org.easymock.tests.UsageCallCountTest.tooManyCalls":282,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":363,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":210,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":396,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":175,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":199,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":44,"org.easymock.tests2.UsageConstraintsTest.testContains":88,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":374,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":375,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":120,"org.easymock.tests2.UsageConstraintsTest.testFind":80,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":242,"org.easymock.tests.MockTypeTest.fromEasyMockClass":459,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":38,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":276,"org.easymock.tests.UsageExpectAndReturnTest.object":212,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":108,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":395,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":26,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":287,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":382,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":418,"org.easymock.tests.UsageTest.exactCallCountByLastCall":247,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":436,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":166,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":224,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":336,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":218,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":283,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":252,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":404,"org.easymock.tests2.EasyMockSupportTest.testVerify":309,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":357,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":167,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":139,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":251,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":305,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":367,"org.easymock.tests.UsageVarargTest.varargCharAccepted":286,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":266,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":452,"org.easymock.tests2.UsageTest.openCallCountByLastCall":65,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":29,"org.easymock.tests.DefaultClassInstantiatorTest.object":262,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":138,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":416,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":472,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":358,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":197,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":390,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":403,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":109,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":176,"org.easymock.tests.CapturesMatcherTest.test":325,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":219,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":125,"org.easymock.tests2.UsageTest.resumeIfFailure":68,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":379,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":259,"org.easymock.tests2.StubTest.stubWithReturnValue":42,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":342,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":98,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":211,"org.easymock.tests2.SerializationTest.testAllMockedMethod":310,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":158,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":468,"org.easymock.samples.SupportTest.voteForRemovals":134,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":466,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":406,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":182,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":159,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":9,"org.easymock.tests.UsageExpectAndThrowTest.object":180,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":226,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":96,"org.easymock.tests2.DelegateToTest.testWrongClass":73,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":249,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":250,"org.easymock.tests.UsageStrictMockTest.range":152,"org.easymock.samples.ConstructorCalledMockTest.testTax":132,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":399,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":25,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":43,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":181,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":114,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":429,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":346,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":333,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":469,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":156,"org.easymock.tests2.CaptureTest.testCaptureNone":55,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":1,"org.easymock.tests.UsageUnorderedTest.message":136,"org.easymock.tests.UsageVerifyTest.twoReturns":238,"org.easymock.tests.UsageVarargTest.varargByteAccepted":290,"org.easymock.tests2.ThreadingTest.testThreadSafe":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":360,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":281,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":419,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":316,"org.easymock.tests2.CaptureTest.testCapture_2617107":269,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":458,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":450,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":163,"org.easymock.tests2.UsageConstraintsTest.any":86,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":426,"org.easymock.tests2.StubTest.stub":41,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":451,"org.easymock.tests.UsageExpectAndThrowTest.longType":173,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":258,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":425,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":267,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":117,"org.easymock.tests2.SerializationTest.testClass":39,"org.easymock.tests.LimitationsTest.mockNativeMethod":190,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":150,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":221,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":389,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":268,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":2,"org.easymock.tests2.NameTest.nameForMocksControl":371,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":391,"org.easymock.tests2.MockedExceptionTest.testMockedException":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":350,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":246,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":398,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":174,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":193,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":102,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":115,"org.easymock.tests.MockingTest.testNicePartialClassMocking":192,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":107,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":387,"org.easymock.tests2.CaptureTest.testCaptureLast":54,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":248,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":49,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":84,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":97,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":339,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":202,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":178,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":273,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":100,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":5,"org.easymock.samples.ExampleTest.removeNonExistingDocument":414,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":393,"org.easymock.tests.UsageStrictMockTest.differentMethods":153,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":302,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":405,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":4,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":32,"org.easymock.tests2.MockBuilderTest.testCreateMockString":297,"org.easymock.tests.UsageExpectAndThrowTest.floatType":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":351,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":348,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":11,"org.easymock.tests.UsageVerifyTest.twoThrows":237,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":124,"org.easymock.tests.ResultTest.createDelegateResultToString":471,"org.easymock.samples.ExampleTest.voteAgainstRemoval":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":442,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":154,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":110,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":338,"org.easymock.tests2.UsageConstraintsTest.testNotNull":99,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":118,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":201,"org.easymock.tests2.UsageTest.defaultResetToNice":67,"org.easymock.samples.ExampleTest.voteAgainstRemovals":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":443,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":217,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":388,"org.easymock.tests.UsageVarargTest.differentLength":331,"org.easymock.tests2.CallbackTest.callback":36,"org.easymock.tests2.UsageConstraintsTest.equals":401,"org.easymock.tests.UsageTest.openCallCountByLastCall":245,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":76,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":162,"org.easymock.tests.UsageCallCountTest.tooFewCalls":280,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":46,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":335,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":3,"org.easymock.tests.UsageThrowableTest.throwCheckedException":198,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":470,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":48,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":223,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":392,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":45,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":428,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":47,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":13,"org.easymock.tests.ObjectMethodsTest.testHashCode":417,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":34,"org.easymock.tests2.NameTest.nameForNiceMock":370,"org.easymock.tests2.DependencyTest.testInterfaceMocking":6,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":383,"org.easymock.samples.ExampleTest.addDocument":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":361,"org.easymock.tests2.DelegateToTest.testStubDelegate":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":365,"org.easymock.tests2.AnswerTest.stubAnswer":12,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":151,"org.easymock.tests.UsageVarargTest.varargLongAccepted":289,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":440,"org.easymock.tests.UsageExpectAndReturnTest.floatType":204,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":220,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":35,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":133,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":464,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":411,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":94,"org.easymock.tests.UsageThrowableTest.noUpperLimit":195,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":77,"org.easymock.tests2.SerializationTest.test":40,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":270,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":263,"org.easymock.tests2.UsageConstraintsTest.testSame":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":203,"org.easymock.samples.SupportTest.addDocument":319,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":352,"org.easymock.tests.GenericTest.testPackageScope":149,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":435,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":410,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":455,"org.easymock.tests2.NameTest.nameForMock":368,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":214,"org.easymock.tests2.UsageStrictMockTest.differentMethods":16,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":345,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":465,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":206,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":184,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":415,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":235,"org.easymock.tests2.MockedExceptionTest.testRealException":121,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":462,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":445,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":444,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":14,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":430,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":161,"org.easymock.tests2.NameTest.nameForStrictMock":369,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":37,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":106,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":95,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":112,"org.easymock.tests2.UsageStrictMockTest.range":15,"org.easymock.tests2.UsageConstraintsTest.lessThan":101,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":407,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":439,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":384,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":19,"org.easymock.tests2.CaptureTest.testCaptureRightOne":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":356,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":0,"org.easymock.tests2.UsageConstraintsTest.testOr":83,"org.easymock.tests.UsageRangeTest.combination":232,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":103,"org.easymock.tests.UsageTest.wrongArguments":300,"org.easymock.tests2.MockBuilderTest.testWithConstructor":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":353,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":372,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":432,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":215,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":264,"org.easymock.tests.UsageVarargTest.varargShortAccepted":288,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":323,"org.easymock.tests2.UsageConstraintsTest.cmpTo":87,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":434,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":66,"org.easymock.tests2.CaptureTest.testCaptureFromStub":58,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":422,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":376,"org.easymock.tests.UsageTest.unexpectedCallWithArray":299,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":298,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":322,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":344,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":216,"org.easymock.tests2.UsageConstraintsTest.constraints":78,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":278,"org.easymock.samples.ExampleTest.addAndChangeDocument":131,"org.easymock.tests.UsageStrictMockTest.testVerify":304,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":315,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":277,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":327,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":271,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":229,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":208,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":230,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":24,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":284}}]

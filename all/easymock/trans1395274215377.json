[{"position":"org.easymock.internal.matchers.Same:37","failures":[0],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[1,2,3,4],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:37","failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[185,186,187],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"failMessage"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[210,211,212],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[213],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[214],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[19],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:332","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","value":"shouldBeUsedInOneThread"}},{"position":"org.easymock.internal.LastControl:92","failures":[215,16,18,19,216,217,37,218,41],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[1,2,219,220],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:205","failures":[221,222,223,224,225,226,21,227,22,228,23,229,230,231,232,233,234,24,235,236,237,28,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"failures":[5,6,7,10,11,13,15,1,253,215,16,254,17,0,18,19,255,256,257,258,259,260,261,2,262,217,3,263,219,20,264,265,21,27,28,29,30,34,36,38,266,267,39,40,268,41,42,46,48,50,51,55,56,57,59,60,61,65,269,270,271,67,248,75,81,84,85,86,87,88,89,90,91,92,93,95,96,272,273,274,275,108,109,110,113,114,115,118,120,121,122,123,125,126,127,128,130,131,132,133,134,135,138,140,141,143,144,145,146,152,154,155,158,160,161,162,163,165,166,167,168,170,171,172,173,174,175],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:99","failures":[5,6,7,8,9,10,11,276,12,13,14,15,1,253,215,16,254,17,0,18,19,255,256,277,257,258,259,260,261,2,262,217,3,263,219,20,264,265,223,21,22,23,232,24,25,278,26,279,280,27,281,282,237,28,283,29,30,31,284,32,34,37,38,266,267,39,40,268,41,285,42,43,44,46,286,240,48,50,51,287,243,244,245,53,54,55,56,57,59,60,288,61,62,63,65,66,289,290,291,292,293,294,295,248,73,74,76,77,79,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,296,250,272,273,274,275,108,109,110,113,134,135,297,138,140,141,143,144,145,146,147,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,298,299,300,301],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[215,16,17,18,19,216,217,20,37,218,41],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[215,16,17,18,19,216,217,20,37,218,41],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[302,236,246,246,247,247],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[6,7,8,9,10,11,12,13,14,15,1,253,215,16,254,0,18,19,255,256,257,258,259,260,261,2,262,217,3,263,219,264,265,232,37,38,218,266,267,303,304,39,268,41,305,285,42,46,306,48,50,51,307,57,58,308,309,65,67,81,82,84,85,86,87,88,95,272,108,109,112,310,311,138,140,141,312,313,314,175],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:190","failures":[8,14,15,16,19,255,256,258,217,3,263,219,26,28,41,58,309,81,82,84,85,86,87,88,95,136,314,175],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"cls"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[315,316,317,318,311,319],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[221,320,223,224,21,227,22,23,231,232,321,234,24,322,278,26,280,27,281,235,282,323,237,28,283,324,325,326,286,240,287,243,244,245,289,290,291,292,294,295,68,69,246,246,247,247,248,296,107,250,327,251,252,297,328,329,298,299,300],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[250],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:174","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[252],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[330],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[21,229,230,231,234,24,236,28,238,240,241,249,250],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.internal.matchers.CompareTo:41","failures":[330],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Comparable)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[258],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[331,332,333,334,1,253,215,16,254,17,0,18,19,255,256,277,257,258,259,260,261,2,262,217,3,263,219,20,264,265,221,21,227,232,234,24,25,322,278,26,279,280,27,281,282,323,28,335,336,337,338,29,30,31,284,32,33,34,35,36,37,38,218,266,267,303,304,39,40,268,41,305,285,42,339,43,45,46,239,340,286,341,240,306,47,48,49,50,51,52,54,55,56,307,57,58,59,60,288,308,309,61,62,63,64,65,269,270,271,67,290,291,294,295,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,105,106,296,107,272,273,274,275,108,342,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,327,343,344,345,346,347,348,134,135,349,297,136,350,351,352,353,354,310,137,311,138,139,140,141,142,355,328,143,144,319,312,145,146,313,314,147,148,149,150,151,152,153,356,357,358,359,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,360,174,175,176,177,178,179,180,181,298,299,300,301],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[361,221,223,224,226,21,227,22,23,231,232,362,234,24,322,278,280,27,281,235,282,363,237,28,364,238,365,366,367,324,368,340,286,241,369,370,371,287,372,373,243,374,375,376,377,378,379,380,381,382,244,383,384,385,386,387,245,388,389,289,292,68,69,246,246,247,247,248,250,390,251,252,391,392,393],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"searchType"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[331,332,333,334,6,8,10,11,12,13,215,261,221,223,224,22,23,231,232,234,26,323,283,238,306,48,49,50,51,52,53,394,54,56,307,57,58,308,309,61,62,66,395,67,290,291,294,295,396,272,397,398,399,400,401,402,343,345,346,403,404,405,251,406,407,252,408,409,136,310,311,138,139,140,141,142,143,144,319,312,313,314,147,410,360,174,175,176,411,412,413,301,414],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:41","sourceCode":"new java.util.Properties()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"failures":[16,19,217],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":16,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":143,"org.easymock.tests2.UsageTest.argumentsOrdered":309,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":14,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":395,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":198,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":58,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":70,"org.easymock.tests2.DelegateToTest.testReturnException":33,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":149,"org.easymock.tests.MockingTest.testPartialClassMocking":298,"org.easymock.tests.MockClassControlTest.testToString":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":206,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":238,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":377,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":114,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":243,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":44,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":255,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":109,"org.easymock.tests2.UsageTest.wrongArguments":307,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":358,"org.easymock.samples.ExampleTest.answerVsDelegate":75,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":252,"org.easymock.tests2.UsageConstraintsTest.testNull":17,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":280,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":13,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":367,"org.easymock.tests2.CaptureTest.testPrimitive":266,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":113,"org.easymock.tests.UsageTest.moreThanOneArgument":144,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":133,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":279,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":179,"org.easymock.tests.UsageTest.argumentsOrdered":314,"org.easymock.tests.UsageVarargTest.varargIntAccepted":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":203,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":89,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":221,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":190,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":93,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":53,"org.easymock.tests2.AnswerTest.answer":63,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":204,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":338,"org.easymock.tests2.CaptureTest.testAnd":37,"org.easymock.tests2.UsageTest.strictResetToDefault":55,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":225,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":323,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":178,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":9,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":274,"org.easymock.tests2.DelegateToTest.testDelegate":36,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":152,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":354,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":410,"org.easymock.tests2.CaptureTest.testCapture1_2446744":267,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":127,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":336,"org.easymock.tests.UsageThrowableTest.throwError":81,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":407,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":389,"org.easymock.samples.PartialClassMockTest.testGetArea":248,"org.easymock.tests2.CompareToTest.testLessOrEqual":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":90,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":399,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":115,"org.easymock.tests2.UsageTest.niceToStrict":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":188,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":185,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":21,"org.easymock.tests2.MockBuilderTest.testCreateMock":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":385,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":123,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":315,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":10,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":343,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":356,"org.easymock.tests.UsageOverloadedMethodTest.overloading":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":382,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":184,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":259,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":165,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":94,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":258,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":268,"org.easymock.tests2.EasyMockSupportClassTest.testAll":287,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":107,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":131,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":212,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":324,"org.easymock.tests2.CaptureTest.testCaptureAll":38,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":337,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":352,"org.easymock.tests.MockNameTest.defaultName":411,"org.easymock.tests2.UsageConstraintsTest.testMatches":260,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":180,"org.easymock.samples.ExampleTest.voteForRemovals":79,"org.easymock.tests.UsageVarargTest.allKinds":106,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":174,"org.easymock.samples.BasicClassMockTest.testPrintContent":69,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":353,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":87,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":306,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":153,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":213,"org.easymock.tests2.UsageConstraintsTest.greaterThan":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":372,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":273,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":283,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":393,"org.easymock.samples.ExampleTest.voteForRemoval":76,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":30,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":364,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":362,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":408,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":235,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":54,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":328,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":195,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":7,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":370,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":148,"org.easymock.tests2.CaptureTest.testCaptureFirst":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":194,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":8,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":62,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":414,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":161,"org.easymock.tests2.UsageTest.moreThanOneArgument":56,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":284,"org.easymock.tests2.CaptureTest.testCapture2_2446744":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":205,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":232,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":105,"org.easymock.tests.GenericTest.testBridgedEquals":390,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":404,"org.easymock.tests.UsageExpectAndReturnTest.longType":157,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":5,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":350,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":132,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":321,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":130,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":177,"org.easymock.tests.UsageCallCountTest.tooManyCalls":405,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":345,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":386,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":162,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":119,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":86,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":290,"org.easymock.tests2.UsageConstraintsTest.testContains":257,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":320,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":344,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":286,"org.easymock.tests2.UsageConstraintsTest.testFind":254,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":96,"org.easymock.tests.MockTypeTest.fromEasyMockClass":406,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":271,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":310,"org.easymock.tests.UsageExpectAndReturnTest.object":164,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":282,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":12,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":101,"org.easymock.tests.UsageTest.exactCallCountByLastCall":147,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":193,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":241,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":170,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":97,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":380,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":210,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":182,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":335,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":339,"org.easymock.tests.UsageVarargTest.varargCharAccepted":100,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":209,"org.easymock.tests2.UsageTest.openCallCountByLastCall":59,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":186,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":15,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":397,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":381,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":84,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":368,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":402,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":237,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":120,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":171,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":401,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":245,"org.easymock.tests2.UsageTest.resumeIfFailure":61,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":251,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":151,"org.easymock.tests2.StubTest.stubWithReturnValue":46,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":228,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":163,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":219,"org.easymock.tests2.SerializationTest.testAllMockedMethod":322,"org.easymock.samples.SupportTest.voteForRemovals":73,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":316,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":249,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":126,"org.easymock.tests.UsageExpectAndThrowTest.object":124,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":3,"org.easymock.tests2.DelegateToTest.testWrongClass":35,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":134,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":135,"org.easymock.tests.UsageStrictMockTest.range":140,"org.easymock.samples.ConstructorCalledMockTest.testTax":246,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":276,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":289,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":125,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":22,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":369,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":357,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":317,"org.easymock.tests2.CaptureTest.testCaptureNone":40,"org.easymock.tests.UsageUnorderedTest.message":136,"org.easymock.tests.UsageVerifyTest.twoReturns":176,"org.easymock.tests.UsageVarargTest.varargByteAccepted":104,"org.easymock.tests2.ThreadingTest.testThreadSafe":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":383,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":348,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":398,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":68,"org.easymock.tests2.CaptureTest.testCapture_2617107":218,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":207,"org.easymock.tests2.UsageConstraintsTest.any":256,"org.easymock.tests2.StubTest.stub":45,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":150,"org.easymock.tests.UsageExpectAndThrowTest.longType":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":208,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":49,"org.easymock.tests2.SerializationTest.testClass":24,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":66,"org.easymock.tests.LimitationsTest.mockNativeMethod":297,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":173,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":250,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":326,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":52,"org.easymock.tests2.NameTest.nameForMocksControl":334,"org.easymock.tests2.MockedExceptionTest.testMockedException":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":373,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":146,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":118,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":300,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":278,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":23,"org.easymock.tests.MockingTest.testNicePartialClassMocking":299,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":281,"org.easymock.tests2.CompareToTest.testNotComparable":330,"org.easymock.tests2.CaptureTest.testCaptureLast":39,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":360,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":19,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":295,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":263,"org.easymock.tests.MockingTest.testTwoMocks":329,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":154,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":122,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":308,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":264,"org.easymock.tests.UsageStrictMockTest.differentMethods":141,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":349,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":392,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":31,"org.easymock.tests2.MockBuilderTest.testCreateMockString":234,"org.easymock.tests.UsageExpectAndThrowTest.floatType":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":374,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":371,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":64,"org.easymock.tests.UsageVerifyTest.twoThrows":175,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":242,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":244,"org.easymock.samples.ExampleTest.voteAgainstRemoval":77,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":199,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":214,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":28,"org.easymock.tests2.UsageConstraintsTest.testNotNull":20,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":88,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":239,"org.easymock.tests2.UsageTest.defaultResetToNice":288,"org.easymock.samples.ExampleTest.voteAgainstRemovals":74,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":169,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":200,"org.easymock.tests.UsageVarargTest.differentLength":396,"org.easymock.tests2.CallbackTest.callback":67,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":236,"org.easymock.tests.UsageTest.openCallCountByLastCall":145,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":1,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":111,"org.easymock.tests.UsageCallCountTest.tooFewCalls":346,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":292,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":359,"org.easymock.tests.UsageThrowableTest.throwCheckedException":85,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":318,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":294,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":342,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":394,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":291,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":293,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":269,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":32,"org.easymock.tests2.NameTest.nameForNiceMock":333,"org.easymock.tests2.DependencyTest.testInterfaceMocking":43,"org.easymock.samples.ExampleTest.addDocument":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":388,"org.easymock.tests2.DelegateToTest.testStubDelegate":34,"org.easymock.tests2.AnswerTest.stubAnswer":65,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":138,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":229,"org.easymock.tests.UsageVarargTest.varargLongAccepted":103,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":197,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":172,"org.easymock.tests.UsageExpectAndReturnTest.floatType":156,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":240,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":247,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":413,"org.easymock.tests.UsageThrowableTest.noUpperLimit":82,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":262,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":253,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":365,"org.easymock.tests2.SerializationTest.test":25,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":303,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":155,"org.easymock.tests2.UsageConstraintsTest.testSame":0,"org.easymock.samples.SupportTest.addDocument":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":375,"org.easymock.tests.GenericTest.testPackageScope":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":192,"org.easymock.tests2.NameTest.nameForMock":331,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":166,"org.easymock.tests2.UsageStrictMockTest.differentMethods":51,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":233,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":363,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":158,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":128,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":275,"org.easymock.tests2.MockedExceptionTest.testRealException":341,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":202,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":201,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":110,"org.easymock.tests2.NameTest.nameForStrictMock":332,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":226,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":187,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":270,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":27,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":366,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":217,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":223,"org.easymock.tests2.UsageStrictMockTest.range":50,"org.easymock.tests2.UsageConstraintsTest.lessThan":265,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":361,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":196,"org.easymock.tests2.CaptureTest.testCaptureRightOne":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":379,"org.easymock.tests2.UsageConstraintsTest.testOr":18,"org.easymock.tests.UsageRangeTest.combination":272,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":26,"org.easymock.tests.UsageTest.wrongArguments":312,"org.easymock.tests2.MockBuilderTest.testWithConstructor":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":376,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":327,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":189,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":167,"org.easymock.tests.UsageVarargTest.varargShortAccepted":102,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":403,"org.easymock.tests2.UsageConstraintsTest.cmpTo":277,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":191,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":60,"org.easymock.tests2.CaptureTest.testCaptureFromStub":305,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":224,"org.easymock.tests.UsageTest.unexpectedCallWithArray":319,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":311,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":347,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":302,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":168,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":139,"org.easymock.tests2.UsageConstraintsTest.constraints":215,"org.easymock.samples.ExampleTest.addAndChangeDocument":80,"org.easymock.tests.UsageStrictMockTest.testVerify":355,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":71,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":137,"org.easymock.tests2.CompareToTest.testGreateThan":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":351,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":304,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":91,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":325,"org.easymock.tests.LimitationsTest.abstractClass":391,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":92,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":301,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":98,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":11}}]

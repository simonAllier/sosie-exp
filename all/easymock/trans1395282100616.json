[{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,0,171,172,173,174,175,176,177,178,179,1,180,181,2,182,183,184,185,3,186,187,188,189,190,4,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"in":"in"}},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[78,84,100,101,103,104,105,106,107,112],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[88,507],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Find:41","failures":[508],"status":-1,"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[112],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ClassProxyFactory:157","failures":[],"status":0,"binaryOperator":"(((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[75],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"this.org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[158,168,180,183],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.internal.LastControl:92","failures":[62,63,68,69,71,81,99,101,109],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[90,91],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"type"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[126],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"failures":[78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:269","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockRunner:38","sourceCode":"return new org.easymock.internal.EasyMockStatement(org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object) , java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[229,431],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[23,24,25,509],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[440,444,445,454,459],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[125,132,226,227,228,229,238,245,364,365,367,372,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,398,418,422,423,431,482,483,484,485,486,487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((this.java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + (org.easymock.Capture<T>.getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"position":"org.easymock.Capture:82","failures":[99,101,102,103,104,105,106,108,510,109,110,112],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[246,247,248,249,251,252],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:785","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[70],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:134","sourceCode":"final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:87","sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[81],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[511,512,513,514,369,475],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[23,24,25,509],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[125,132,238,365,367,372,376,377,380,382,383,384,385,387,388,389,390,392,393,394,395,398,400,443,486],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,515,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,516,158,159,517,160,161,162,163,518,164,165,166,167,168,519,169,170,0,171,172,173,174,175,176,177,178,179,1,180,181,2,182,183,184,185,3,186,187,188,189,190,4,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,520,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,521,246,247,248,249,250,251,522,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,523,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[125,132,226,227,228,229,238,245,364,365,367,372,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,398,400,416,418,419,420,421,422,423,431,482,483,484,485,486,487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[5,5,6,6,60,61,65,66,67,68,74,76,77,79,80,86,87,88,110,232,238,244,324,325,348,350,362,363,366,435,436,437,438,439,440,444,445,454,459,476,493,494,495,496,497],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[23,24,25],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[7,9,10,12,21,437],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[23,518,166,524,525,526,527,212,213],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[237,365],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[5,5,6,6,15,16,19,23,25,35,38,48,54,157,158,159,161,162,163,164,167,168,169,170,0,172,173,174,175,177,1,180,181,2,183,184,185,3,186,189,190,212,228,255,256,257,259,291,296,297,298,299,300,301,302,303,305,306,307,308,349,405,410,426],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[133],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[528],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:78","sourceCode":"continue","type":"CtContinueImpl"},"failures":[529],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[247,251],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[23,24,25],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","bridgeMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","bridgeMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[234,400,401,478,530],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":63,"org.easymock.tests2.UsageTest.argumentsOrdered":135,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":367,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":148,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":220,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":450,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":130,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":18,"org.easymock.tests2.DelegateToTest.testReturnException":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":483,"org.easymock.tests.MockingTest.testPartialClassMocking":256,"org.easymock.tests.MockClassControlTest.testToString":298,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":207,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":310,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":459,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":42,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":38,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":376,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":194,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":347,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":524,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":70,"org.easymock.tests2.UsageTest.wrongArguments":128,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":362,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":206,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":241,"org.easymock.samples.ExampleTest.answerVsDelegate":8,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":410,"org.easymock.tests2.UsageConstraintsTest.testNull":66,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":261,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":172,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":147,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":303,"org.easymock.tests2.CaptureTest.testPrimitive":102,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":366,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":395,"org.easymock.tests.UsageTest.moreThanOneArgument":368,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":171,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":495,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":488,"org.easymock.tests.UsageTest.argumentsOrdered":374,"org.easymock.tests.UsageVarargTest.varargIntAccepted":314,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":455,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":435,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":157,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":28,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":224,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":442,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":439,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":331,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":200,"org.easymock.tests.ReplayStateInvalidUsageTest.times":358,"org.easymock.tests2.DependencyTest.testClassMocking":191,"org.easymock.tests2.AnswerTest.answer":89,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":457,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":98,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":407,"org.easymock.tests2.CaptureTest.testAnd":99,"org.easymock.tests2.UsageTest.strictResetToDefault":126,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":517,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":1,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":494,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":142,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":294,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":492,"org.easymock.tests2.DelegateToTest.testDelegate":124,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":330,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":391,"org.easymock.tests.LimitationsTest.mockFinalMethod":427,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":486,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":468,"org.easymock.tests2.DependencyTest.testClassMockingSupport":192,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":283,"org.easymock.tests2.CaptureTest.testCapture1_2446744":103,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":176,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":389,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":96,"org.easymock.tests.UsageThrowableTest.throwError":416,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":352,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":409,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":523,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":225,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":497,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":56,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":334,"org.easymock.samples.PartialClassMockTest.testGetArea":19,"org.easymock.tests.MockingTest.testInterfaceMocking":258,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":353,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":436,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":403,"org.easymock.tests2.UsageTest.niceToStrict":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":43,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":291,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":377,"org.easymock.tests2.ThreadingTest.testChangeDefault":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":440,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":161,"org.easymock.tests2.MockBuilderTest.testCreateMock":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":51,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":203,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":511,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":385,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":143,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":406,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":471,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":498,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":239,"org.easymock.tests.UsageOverloadedMethodTest.overloading":397,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":53,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":431,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":76,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":396,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":274,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":75,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":108,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":315,"org.easymock.tests2.EasyMockSupportClassTest.testAll":35,"org.easymock.tests.MockClassControlTest.testEquals":302,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":306,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":393,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":466,"org.easymock.tests2.CaptureTest.testCaptureAll":100,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":97,"org.easymock.tests.MockNameTest.defaultName":243,"org.easymock.tests2.UsageConstraintsTest.testMatches":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":496,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":350,"org.easymock.samples.ExampleTest.voteForRemovals":12,"org.easymock.tests.UsageVarargTest.allKinds":323,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":399,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":467,"org.easymock.samples.BasicClassMockTest.testPrintContent":16,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":422,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":230,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":487,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":123,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":221,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":527,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":522,"org.easymock.tests2.UsageConstraintsTest.greaterThan":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":36,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":293,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":2,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":335,"org.easymock.samples.ExampleTest.voteForRemoval":9,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":252,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":182,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":115,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":411,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":515,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":175,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":327,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":125,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":349,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":166,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":447,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":140,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":33,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":482,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":119,"org.easymock.tests2.CaptureTest.testCaptureFirst":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":446,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":141,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":137,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":434,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":270,"org.easymock.tests2.UsageTest.moreThanOneArgument":127,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":117,"org.easymock.tests2.CaptureTest.testCapture2_2446744":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":458,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":168,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":322,"org.easymock.tests.GenericTest.testBridgedEquals":308,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":505,"org.easymock.tests.UsageExpectAndReturnTest.longType":266,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":464,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":138,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":394,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":84,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":348,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":392,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":493,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":414,"org.easymock.tests.UsageCallCountTest.tooManyCalls":506,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":500,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":52,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":271,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":205,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":381,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":421,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":185,"org.easymock.tests.MockingTest.testNiceClassMocking":262,"org.easymock.tests.MockingTest.testClassMocking":254,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":499,"org.easymock.tests2.UsageConstraintsTest.testContains":74,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":228,"org.easymock.tests2.UsageConstraintsTest.testFind":65,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":398,"org.easymock.tests.MockTypeTest.fromEasyMockClass":408,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":473,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":59,"org.easymock.tests.UsageExpectAndReturnTest.object":273,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":177,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":204,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":146,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":525,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":317,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":289,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":528,"org.easymock.tests.UsageTest.exactCallCountByLastCall":375,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":445,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":489,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":309,"org.easymock.tests2.ConstraintsToStringTest.findToString":508,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":213,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":279,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":312,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":430,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":215,"org.easymock.tests.MockClassControlTest.testHashCode":301,"org.easymock.tests2.EasyMockSupportTest.testVerify":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":45,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":490,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":470,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":428,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":95,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":151,"org.easymock.tests.UsageVarargTest.varargCharAccepted":316,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":521,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":463,"org.easymock.tests2.UsageTest.openCallCountByLastCall":131,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":149,"org.easymock.tests.DefaultClassInstantiatorTest.object":246,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":469,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":46,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":383,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":419,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":198,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":214,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":180,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":300,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":333,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":382,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":280,"org.easymock.tests.ReplayStateInvalidCallsTest.times":339,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":413,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":54,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":299,"org.easymock.tests2.UsageTest.resumeIfFailure":136,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":405,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":27,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":485,"org.easymock.tests2.StubTest.stubWithReturnValue":238,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":518,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":85,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":272,"org.easymock.tests2.SerializationTest.testAllMockedMethod":25,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":456,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":512,"org.easymock.samples.SupportTest.voteForRemovals":21,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":304,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":217,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":388,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":509,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":462,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":90,"org.easymock.tests.UsageExpectAndThrowTest.object":386,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":311,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":82,"org.easymock.tests2.DelegateToTest.testWrongClass":122,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":324,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":337,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":325,"org.easymock.tests.UsageStrictMockTest.range":478,"org.easymock.samples.ConstructorCalledMockTest.testTax":5,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":30,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":145,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":184,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":387,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":32,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":360,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":373,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":240,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":513,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":329,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":404,"org.easymock.tests2.CaptureTest.testCaptureNone":107,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":153,"org.easymock.tests.UsageUnorderedTest.message":472,"org.easymock.tests.UsageVerifyTest.twoReturns":401,"org.easymock.tests.UsageVarargTest.varargByteAccepted":321,"org.easymock.tests2.ThreadingTest.testThreadSafe":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":49,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":503,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":15,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":290,"org.easymock.tests2.CaptureTest.testCapture_2617107":101,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":460,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":365,"org.easymock.tests2.UsageConstraintsTest.any":72,"org.easymock.tests2.StubTest.stub":237,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":357,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":415,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":461,"org.easymock.tests.UsageExpectAndThrowTest.longType":379,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":250,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":356,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":233,"org.easymock.tests2.SerializationTest.testClass":23,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":219,"org.easymock.tests.LimitationsTest.mockNativeMethod":426,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":282,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":307,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":197,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":345,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":236,"org.easymock.tests2.NameTest.nameForMocksControl":211,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":199,"org.easymock.tests2.MockedExceptionTest.testMockedException":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":37,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":372,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":58,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":259,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":380,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":170,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":164,"org.easymock.tests.MockingTest.testNicePartialClassMocking":257,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":174,"org.easymock.tests2.CaptureTest.testCaptureLast":106,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":195,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":284,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":190,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":69,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":344,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":83,"org.easymock.tests.MockingTest.testTwoMocks":255,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":341,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":263,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":384,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":134,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":87,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":156,"org.easymock.samples.ExampleTest.removeNonExistingDocument":13,"org.easymock.tests.UsageStrictMockTest.differentMethods":479,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":202,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":354,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":216,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":155,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":248,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":116,"org.easymock.tests2.MockBuilderTest.testCreateMockString":169,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":39,"org.easymock.tests.UsageExpectAndThrowTest.floatType":378,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":34,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":92,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":520,"org.easymock.tests.UsageVerifyTest.twoThrows":400,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":429,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":48,"org.easymock.samples.ExampleTest.voteAgainstRemoval":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":451,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":402,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":181,"org.easymock.tests.LimitationsTest.privateConstructor":425,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":529,"org.easymock.tests2.UsageConstraintsTest.testNotNull":86,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":423,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":226,"org.easymock.tests2.UsageTest.defaultResetToNice":133,"org.easymock.samples.ExampleTest.voteAgainstRemovals":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":452,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":278,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":196,"org.easymock.tests.UsageVarargTest.differentLength":318,"org.easymock.tests2.CallbackTest.callback":22,"org.easymock.tests2.UsageConstraintsTest.equals":64,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":178,"org.easymock.tests.UsageTest.openCallCountByLastCall":371,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":60,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":364,"org.easymock.tests.UsageCallCountTest.tooFewCalls":501,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":186,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":242,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":154,"org.easymock.tests.UsageThrowableTest.throwCheckedException":420,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":514,"org.easymock.tests.MockingTest.testStrictClassMocking":253,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":189,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":245,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":3,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":201,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":359,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":188,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":94,"org.easymock.tests.ObjectMethodsTest.testHashCode":288,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":118,"org.easymock.tests2.NameTest.nameForNiceMock":210,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":343,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":338,"org.easymock.tests2.DependencyTest.testInterfaceMocking":193,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":526,"org.easymock.samples.ExampleTest.addDocument":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":50,"org.easymock.tests2.DelegateToTest.testStubDelegate":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":55,"org.easymock.tests2.AnswerTest.stubAnswer":93,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":476,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":165,"org.easymock.tests.UsageVarargTest.varargLongAccepted":320,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":449,"org.easymock.tests.UsageExpectAndReturnTest.floatType":265,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":281,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":212,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":6,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":432,"org.easymock.tests.UsageThrowableTest.noUpperLimit":417,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":80,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":223,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":61,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":26,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":104,"org.easymock.tests2.SerializationTest.test":24,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":247,"org.easymock.tests2.UsageConstraintsTest.testSame":67,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":264,"org.easymock.samples.SupportTest.addDocument":20,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":187,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":328,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":40,"org.easymock.tests.GenericTest.testPackageScope":305,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":444,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":222,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":260,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":326,"org.easymock.tests2.NameTest.nameForMock":208,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":275,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":519,"org.easymock.tests2.UsageStrictMockTest.differentMethods":235,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":179,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":267,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":390,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":286,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":295,"org.easymock.tests2.MockedExceptionTest.testRealException":229,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":412,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":454,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":31,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":453,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":232,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":361,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":363,"org.easymock.tests2.NameTest.nameForStrictMock":209,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":160,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":57,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":173,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":29,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":81,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":249,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":158,"org.easymock.tests2.UsageStrictMockTest.range":234,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":332,"org.easymock.tests2.UsageConstraintsTest.lessThan":88,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":218,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":448,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":139,"org.easymock.tests2.CaptureTest.testCaptureRightOne":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":44,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":152,"org.easymock.tests2.UsageConstraintsTest.testOr":68,"org.easymock.tests.UsageRangeTest.combination":292,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":0,"org.easymock.tests.UsageTest.wrongArguments":370,"org.easymock.tests2.MockBuilderTest.testWithConstructor":516,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":41,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":297,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":441,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":276,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":251,"org.easymock.tests.UsageVarargTest.varargShortAccepted":319,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":504,"org.easymock.tests2.UsageConstraintsTest.cmpTo":73,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":346,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":91,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":336,"org.easymock.tests2.CompareToTest.testLessThan":507,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":443,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":132,"org.easymock.tests2.CaptureTest.testCaptureFromStub":110,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":351,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":159,"org.easymock.tests.UsageTest.unexpectedCallWithArray":369,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":342,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":475,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":502,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":277,"org.easymock.tests2.CaptureTest.testCapture":510,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":477,"org.easymock.tests2.UsageConstraintsTest.constraints":62,"org.easymock.samples.ExampleTest.addAndChangeDocument":14,"org.easymock.tests.UsageStrictMockTest.testVerify":481,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":17,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":474,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":465,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":105,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":437,"org.easymock.tests.LimitationsTest.abstractClass":424,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":269,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":438,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":433,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":530,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":144,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":313}}]

[{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[19,20,21,22,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,5,51,52,53,54,55,56,57,58,59,60,61,62],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,80,81,82,83,84,85,86,87,88,89,90,91,0,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,2,134,135,136,137,138,139,140,141,142,19,20,21,143,144,145,146,147,148,149,150,44,151,45,46,47,48,49,50,152,153,154,155,156,157,5,6,158,159,160,161,162,163,164,165,51,166,7,8,167,52,9,10,168,169,170,171,172,53,173,174,175,176,54,177,178,179,180,181,11,182,183,12,13,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,55,199,200,201,22,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,56,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,23,250,251,252,253,254,255,57,58,59,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,60,421,422,14,423,424,425,61,426,15,16,427,428,429,430,431,432,17,18,433,434,435,436,437,438,439,440,441,442,62,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[63,75,75,76,76,77,78,87,88,89,124,144,158,163,188,189,190,192,272,277,278,280,281,282,283,285,288,289,290,291,316,319,329,335,341,349,351,491,492,493,494,377,378,379,380,383,384,397,495,399,400,403,404,405,407,410,411,496,413,488],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[75,76,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,349,379,384,385,497,498,398,401,406,409,499,412,488,489],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:353","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bounds":"genericParameters"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[344,345],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[118,196,199,200,208,213],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1709","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[192,291],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,80,81,82,83,84,85,86,87,88,89,90,91,0,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,2,134,135,136,137,138,139,140,141,142,19,20,21,143,144,145,146,147,148,149,150,44,151,45,46,47,48,49,50,152,153,154,155,156,157,5,6,158,159,160,161,162,163,164,165,51,166,7,8,167,52,9,10,168,169,170,171,172,53,173,174,175,176,54,177,178,179,180,181,11,182,183,12,13,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,55,199,200,201,22,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,56,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,23,250,251,252,253,254,255,57,58,59,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,60,421,422,14,423,424,425,61,426,15,16,427,428,429,430,431,432,17,18,433,434,435,436,437,438,439,440,441,442,62,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[75,76,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,349,379,384,385,497,498,398,401,406,409,499,412,488,489],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[349,500,501,502,503,406,409,488,489],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[423],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[395],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[24,25,28,30,31,32,33,35,36,37,38,40,41,42,43,155,5,51,52,53,55,56,60,61,62],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:280","failures":[65,176,391,392,393,394,395,396],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","type":"CtReturnImpl"},"failures":[0,157,5,6,166,8,9,10,178,11,182,12,13,387,388,389,390,422,14,15,16,431,17,18],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[189,190,192,383,385],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,80,81,82,83,84,85,86,87,88,89,90,91,0,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,2,134,135,136,137,138,139,140,141,142,19,20,21,143,144,145,146,147,148,149,150,44,151,45,46,47,48,49,50,152,153,154,155,156,157,5,6,158,159,160,161,162,163,164,165,51,166,7,8,167,52,9,10,168,169,170,171,172,53,173,174,175,176,54,177,178,179,180,181,11,182,183,12,13,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,55,199,200,201,22,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,56,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,23,250,251,252,253,254,255,57,58,59,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,60,421,422,14,423,424,425,61,426,15,16,427,428,429,430,431,432,17,18,433,434,435,436,437,438,439,440,441,442,62,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[249,309,310],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[63,75,75,76,76,77,78,87,88,89,124,144,188,189,190,192,272,277,278,280,281,282,283,285,288,289,290,291,316,319,329,335,341,349,351,377,378,379,380,383,384,397,399,403,404,405,407,410,411,413,488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[216],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[74,79,365,366,367,368,369,370,371,372,373,374,375,376,443,444,445,446,447,448,449,450,451,452,453,454],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[63,75,75,76,76,77,78,86,87,88,89,90,124,126,127,128,129,130,131,133,143,145,146,147,148,149,150,158,163,186,187,188,189,190,192,195,239,270,271,272,273,277,278,280,281,282,283,285,286,287,288,289,290,291,292,293,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,339,340,341,349,351,504,494,377,378,379,380,383,384,397,399,400,402,403,404,405,407,409,410,411,413,414,418,488,489],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"method","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[63,75,75,76,76,77,78,87,88,89,124,144,158,163,188,189,190,192,272,277,278,280,281,282,283,285,288,289,290,291,316,319,329,335,341,349,351,492,377,378,379,380,383,384,397,495,399,400,403,404,405,407,410,411,496,413,488],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[243],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:124","failures":[63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,505,505,87,88,0,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,124,134,135,136,137,138,139,140,141,142,44,151,45,46,47,48,49,50,152,153,154,155,156,157,5,6,51,166,7,8,167,52,9,10,168,169,170,171,172,53,173,174,176,54,179,180,181,11,182,183,12,13,184,189,190,192,220,221,222,223,224,225,226,227,228,56,229,230,231,232,233,251,252,253,254,255,256,257,258,260,261,262,263,264,265,266,267,268,269,272,277,278,279,280,281,282,283,285,288,289,290,291,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,316,319,329,335,338,339,340,341,342,343,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,370,377,378,379,380,382,383,384,392,393,394,396,397,399,403,404,405,407,410,411,413,60,421,422,14,423,424,425,61,426,15,16,427,428,429,430,431,432,17,18,433,434,435,436,437,440,441,442,62,448,455,456,457,458,460,461,462,463,464,465,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,485,487,488],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:197","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[0,116,117,152,153,154,155,156,53,11,182,251,252,253,254,255,267,268,269,285,294,295,296,297,298,299,300,301,302,303,304,305,306,307,431,455,456,457,458,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,487],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:89","sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[74,79,365,366,367,368,369,370,371,372,373,374,375,376,443,444,445,446,447,448,449,450,451,452,453,454],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"injection":"injection","fieldName":"qualifier","this":"qualifier"}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[63,64,65,66,67,68,69,70,71,72,73,74,75,75,76,76,77,78,79,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,80,81,82,83,84,85,86,87,88,89,90,91,0,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,133,134,135,136,137,138,139,140,141,142,19,20,21,143,144,145,146,147,148,149,150,44,151,45,46,47,48,49,50,152,153,154,155,156,157,5,6,161,163,165,51,166,7,8,167,52,9,10,168,169,170,171,172,53,173,174,175,176,54,177,178,179,180,181,11,182,183,12,13,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,55,199,200,201,22,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,56,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,23,250,251,252,253,254,255,57,58,59,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,288,289,290,291,292,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,316,318,319,321,322,325,326,327,328,329,331,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,356,357,359,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,379,380,382,383,386,391,392,393,394,395,396,399,402,403,404,405,409,410,414,418,419,420,60,421,422,14,423,424,425,61,426,15,16,427,428,429,430,431,432,17,18,433,434,435,436,437,440,441,442,62,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:38","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:37","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>.getName(), java.lang.Integer.java.lang.Class<java.lang.Integer>)","type":"CtInvocationImpl"},"failures":[506,349,350],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[507],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":458,"org.easymock.tests2.UsageTest.argumentsOrdered":16,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":51,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":362,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":449,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":204,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":424,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":79,"org.easymock.tests2.DelegateToTest.testReturnException":392,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":170,"org.easymock.tests.MockingTest.testPartialClassMocking":189,"org.easymock.tests.MockClassControlTest.testToString":145,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":386,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":213,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":323,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":24,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":319,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":441,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":500,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":465,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":152,"org.easymock.tests2.UsageTest.wrongArguments":14,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":136,"org.easymock.samples.ExampleTest.answerVsDelegate":65,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":163,"org.easymock.tests2.UsageConstraintsTest.testNull":461,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":194,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":280,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":150,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":361,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":504,"org.easymock.tests2.CaptureTest.testPrimitive":297,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":156,"org.easymock.tests.UsageTest.moreThanOneArgument":166,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":43,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":279,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":231,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":119,"org.easymock.tests.UsageTest.argumentsOrdered":10,"org.easymock.tests.UsageVarargTest.varargIntAccepted":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":209,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":251,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":397,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":453,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":416,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":404,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":198,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":255,"org.easymock.tests.ReplayStateInvalidUsageTest.times":248,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":370,"org.easymock.tests2.DependencyTest.testClassMocking":438,"org.easymock.tests2.AnswerTest.answer":343,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":466,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":211,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":437,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":160,"org.easymock.tests2.CaptureTest.testAnd":294,"org.easymock.tests2.UsageTest.strictResetToDefault":421,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":401,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":288,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":230,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":114,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":356,"org.easymock.tests2.DelegateToTest.testDelegate":396,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":123,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":39,"org.easymock.tests.LimitationsTest.mockFinalMethod":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":53,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":142,"org.easymock.tests2.DependencyTest.testClassMockingSupport":439,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":274,"org.easymock.tests2.CaptureTest.testCapture1_2446744":298,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":284,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":37,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":435,"org.easymock.tests.UsageThrowableTest.throwError":44,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":242,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":162,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":454,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":2,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":233,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":497,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":337,"org.easymock.samples.PartialClassMockTest.testGetArea":63,"org.easymock.tests.MockingTest.testInterfaceMocking":191,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":243,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":252,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":81,"org.easymock.tests2.UsageTest.niceToStrict":423,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":25,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":196,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":403,"org.easymock.tests2.MockBuilderTest.testCreateMock":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":332,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":373,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":33,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":357,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":159,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":59,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":218,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":134,"org.easymock.tests.UsageOverloadedMethodTest.overloading":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":334,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":471,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":54,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":103,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":227,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":470,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":303,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":259,"org.easymock.tests.MockClassControlTest.testEquals":149,"org.easymock.tests2.EasyMockSupportClassTest.testAll":316,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":88,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":41,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":491,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":436,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":140,"org.easymock.tests2.CaptureTest.testCaptureAll":295,"org.easymock.tests.MockNameTest.defaultName":91,"org.easymock.tests2.UsageConstraintsTest.testMatches":472,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":232,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":240,"org.easymock.samples.ExampleTest.voteForRemovals":69,"org.easymock.tests.UsageVarargTest.allKinds":267,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":157,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":141,"org.easymock.samples.BasicClassMockTest.testPrintContent":78,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":49,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":429,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":450,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":395,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":173,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":503,"org.easymock.tests2.UsageConstraintsTest.greaterThan":474,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":317,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":113,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":291,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":133,"org.easymock.samples.ExampleTest.voteForRemoval":66,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":292,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":309,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":164,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":417,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":283,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":124,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":60,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":22,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":354,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":314,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":169,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":391,"org.easymock.tests2.CaptureTest.testCaptureFirst":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":201,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":355,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":428,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":179,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":99,"org.easymock.tests2.UsageTest.moreThanOneArgument":422,"org.easymock.tests2.CaptureTest.testCapture2_2446744":306,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":311,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":411,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":212,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":266,"org.easymock.tests.GenericTest.testBridgedEquals":90,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":507,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":225,"org.easymock.tests.UsageExpectAndReturnTest.longType":95,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":138,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":352,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":496,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":42,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":479,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":118,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":40,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":20,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":229,"org.easymock.tests.UsageCallCountTest.tooManyCalls":226,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":333,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":100,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":375,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":48,"org.easymock.tests.MockingTest.testNiceClassMocking":195,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":378,"org.easymock.tests.MockingTest.testClassMocking":187,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":495,"org.easymock.tests2.UsageConstraintsTest.testContains":469,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":219,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":341,"org.easymock.tests2.UsageConstraintsTest.testFind":460,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":56,"org.easymock.tests.MockTypeTest.fromEasyMockClass":161,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":487,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":180,"org.easymock.tests.UsageExpectAndReturnTest.object":102,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":285,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":374,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":360,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":501,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":261,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":237,"org.easymock.tests.UsageTest.exactCallCountByLastCall":168,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":200,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":120,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":489,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":108,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":256,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":176,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":444,"org.easymock.tests.MockClassControlTest.testHashCode":148,"org.easymock.tests2.EasyMockSupportTest.testVerify":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":326,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":121,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":174,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":58,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":434,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":3,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":484,"org.easymock.tests.UsageVarargTest.varargCharAccepted":260,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":125,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":430,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":217,"org.easymock.tests2.UsageTest.openCallCountByLastCall":425,"org.easymock.tests.DefaultClassInstantiatorTest.object":126,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":363,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":57,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":235,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":4,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":327,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":494,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":368,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":443,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":147,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":289,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":30,"org.easymock.tests.CapturesMatcherTest.test":505,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":109,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":19,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":335,"org.easymock.tests2.UsageTest.resumeIfFailure":427,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":158,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":415,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":172,"org.easymock.tests2.StubTest.stubWithReturnValue":62,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":406,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":480,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":101,"org.easymock.tests2.SerializationTest.testAllMockedMethod":351,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":210,"org.easymock.samples.SupportTest.voteForRemovals":73,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":86,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":446,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":36,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":506,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":216,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":344,"org.easymock.tests.UsageExpectAndThrowTest.object":34,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":85,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":477,"org.easymock.tests2.DelegateToTest.testWrongClass":394,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":268,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":269,"org.easymock.tests.UsageStrictMockTest.range":12,"org.easymock.samples.ConstructorCalledMockTest.testTax":75,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":419,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":359,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":377,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":35,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":405,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":9,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":313,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":135,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":82,"org.easymock.tests2.CaptureTest.testCaptureNone":302,"org.easymock.tests.UsageUnorderedTest.message":0,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":1,"org.easymock.tests.UsageVerifyTest.twoReturns":6,"org.easymock.tests.UsageVarargTest.varargByteAccepted":265,"org.easymock.tests2.ThreadingTest.testThreadSafe":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":330,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":223,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":77,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":238,"org.easymock.tests2.CaptureTest.testCapture_2617107":296,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":276,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":214,"org.easymock.tests2.UsageConstraintsTest.any":467,"org.easymock.tests2.StubTest.stub":442,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":247,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":21,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":171,"org.easymock.tests.UsageExpectAndThrowTest.longType":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":215,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":130,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":246,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":432,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":448,"org.easymock.tests2.SerializationTest.testClass":349,"org.easymock.tests.LimitationsTest.mockNativeMethod":272,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":111,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":89,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":493,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":367,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":433,"org.easymock.tests2.NameTest.nameForMocksControl":390,"org.easymock.tests2.MockedExceptionTest.testMockedException":340,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":318,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":52,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":486,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":28,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":192,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":277,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":407,"org.easymock.tests.MockingTest.testNicePartialClassMocking":190,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":282,"org.easymock.tests2.CaptureTest.testCaptureLast":301,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":365,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":275,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":464,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":384,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":478,"org.easymock.tests.MockingTest.testTwoMocks":188,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":385,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":92,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":32,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":482,"org.easymock.samples.ExampleTest.removeNonExistingDocument":70,"org.easymock.tests.UsageStrictMockTest.differentMethods":13,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":244,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":372,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":445,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":128,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":310,"org.easymock.tests2.MockBuilderTest.testCreateMockString":413,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":143,"org.easymock.tests.UsageExpectAndThrowTest.floatType":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":320,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":473,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":315,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":346,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":490,"org.easymock.tests.UsageVerifyTest.twoThrows":5,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":329,"org.easymock.samples.ExampleTest.voteAgainstRemoval":67,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":80,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":205,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":290,"org.easymock.tests.LimitationsTest.privateConstructor":271,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":498,"org.easymock.tests2.UsageConstraintsTest.testNotNull":481,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":50,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":339,"org.easymock.tests2.UsageTest.defaultResetToNice":426,"org.easymock.samples.ExampleTest.voteAgainstRemovals":64,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":206,"org.easymock.tests.UsageVarargTest.differentLength":262,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":366,"org.easymock.tests2.CallbackTest.callback":338,"org.easymock.tests2.UsageConstraintsTest.equals":459,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":286,"org.easymock.tests.UsageTest.openCallCountByLastCall":167,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":455,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":154,"org.easymock.tests.UsageCallCountTest.tooFewCalls":221,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":380,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":137,"org.easymock.tests.UsageThrowableTest.throwCheckedException":47,"org.easymock.tests.MockingTest.testStrictClassMocking":186,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":117,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":383,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":371,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":379,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":382,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":348,"org.easymock.tests.ObjectMethodsTest.testHashCode":236,"org.easymock.tests2.NameTest.nameForNiceMock":389,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":312,"org.easymock.tests2.DependencyTest.testInterfaceMocking":440,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":502,"org.easymock.samples.ExampleTest.addDocument":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":331,"org.easymock.tests2.DelegateToTest.testStubDelegate":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":336,"org.easymock.tests2.AnswerTest.stubAnswer":347,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":182,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":408,"org.easymock.tests.UsageVarargTest.varargLongAccepted":264,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":203,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":110,"org.easymock.tests.UsageExpectAndReturnTest.floatType":94,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":488,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":76,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":475,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":452,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":177,"org.easymock.tests.UsageThrowableTest.noUpperLimit":151,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":456,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":414,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":299,"org.easymock.tests2.SerializationTest.test":350,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":127,"org.easymock.tests2.UsageConstraintsTest.testSame":462,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":93,"org.easymock.samples.SupportTest.addDocument":72,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":381,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":321,"org.easymock.tests.GenericTest.testPackageScope":87,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":199,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":451,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":193,"org.easymock.tests2.NameTest.nameForMock":387,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":104,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":412,"org.easymock.tests2.UsageStrictMockTest.differentMethods":18,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":287,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":96,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":38,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":234,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":115,"org.easymock.tests2.MockedExceptionTest.testRealException":342,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":165,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":208,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":207,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":153,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":250,"org.easymock.tests2.NameTest.nameForStrictMock":388,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":402,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":485,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":281,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":418,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":476,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":129,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":399,"org.easymock.tests2.UsageStrictMockTest.range":17,"org.easymock.tests2.UsageConstraintsTest.lessThan":483,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":202,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":353,"org.easymock.tests2.CaptureTest.testCaptureRightOne":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":325,"org.easymock.tests2.UsageConstraintsTest.testOr":463,"org.easymock.tests.UsageRangeTest.combination":112,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":278,"org.easymock.tests.UsageTest.wrongArguments":8,"org.easymock.tests2.MockBuilderTest.testWithConstructor":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":322,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":144,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":97,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":105,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":197,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":131,"org.easymock.tests.UsageVarargTest.varargShortAccepted":263,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":224,"org.easymock.tests2.UsageConstraintsTest.cmpTo":468,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":55,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":61,"org.easymock.tests2.CaptureTest.testCaptureFromStub":305,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":241,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":400,"org.easymock.tests.UsageTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":11,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":222,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":499,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":106,"org.easymock.tests2.UsageConstraintsTest.constraints":457,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":183,"org.easymock.samples.ExampleTest.addAndChangeDocument":71,"org.easymock.tests.UsageStrictMockTest.testVerify":185,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":74,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":181,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":139,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":300,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":492,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":253,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":98,"org.easymock.tests.LimitationsTest.abstractClass":270,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":178,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":254,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":257,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":358}}]

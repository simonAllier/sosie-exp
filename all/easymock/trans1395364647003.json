[{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[3,4,5],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[6,7],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1518","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","type":"CtInvocationImpl"},"failures":[8,9,10],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:56","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:30","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[11],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[8,12],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[13],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.MocksControl:114","sourceCode":"return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[14,15,16,17,17,18,18,19,20,21,22,23,24,25,26,27,28,29,30,3,4,31,32,33,5,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,13,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,2,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","constructorArgs":"constructorArgs","name":"name","proxyFactory":"org.easymock.internal.MocksControl.interfaceProxyFactory"}},{"position":"org.easymock.ConstructorArgs:77","failures":[120,121],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[122,123,124,125,126],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:36","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(char.char, java.lang.Character.java.lang.Character)","type":"CtInvocationImpl"},"failures":[127,128,129,130,131,132,133],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[14,15,16,134,17,17,18,18,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,20,21,26,150,151,152,153,154,155,156,157,158,159,160,161,162,28,163,164,165,166,29,30,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,38,39,40,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,6,43,230,231,232,233,234,7,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,53,54,55,287,288,289,290,8,291,292,293,12,9,294,295,296,297,298,299,300,0,301,302,10,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,58,332,59,333,334,335,336,337,338,339,340,60,64,65,66,67,70,71,341,342,343,344,345,1,346,347,348,349,350,351,352,72,353,354,355,356,357,358,74,75,359,76,2,77,80,83,85,89,90,91,92,360,93,94,361,362,363,364,365,366,367,368,369,370,371,372,373,374,98,101,111,117],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:148","sourceCode":"final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1064","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:98","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String)","type":"CtInvocationImpl"},"failures":[14,64,66,67,375],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:37","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(int.int, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[376,377,73,127,128,129,131,132,133],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[376,377,72,73,127,128,129,130,131,132,133],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[14,137,138,140,141,143,26,167,168,169,170,38,39,40,193,194,195,196,197,198,201,202,204,205,206,208,209,210,211,212,213,214,215,216,217,230,231,232,233,234,258,259,268,270,271,313,330,331,334,61,64,66,67,70,72,74,75,359,76,2,77,80,84,85,86,89,90,91,92,360,93,94,370,372,373,98,101,111,117],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:91","sourceCode":"java.lang.StringBuilder.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[378,175,177,180,181,218,219,220,267,268,270,271,343,344,349,350,364,365,366,367,370,372,373],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"buffer"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"result"}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[14,137,138,140,141,143,20,22,26,379,172,173,380,174,175,178,179,182,183,185,187,188,189,190,191,192,38,39,40,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,220,230,232,233,234,7,237,258,259,268,270,271,381,382,383,384,385,386,387,388,274,275,276,277,278,279,280,282,283,284,285,288,289,290,8,291,292,293,12,9,294,295,296,297,298,299,300,0,301,302,10,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,319,320,323,324,325,326,328,329,330,331,58,332,334,64,66,67,341,342,343,345,346,347,351,352,72,353,355,74,75,359,76,2,77,80,85,89,90,91,92,360,93,94,362,370,372,373,98,101,111,117],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[384,385,386,387,388],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:363","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[14,15,16,17,17,18,18,20,21,22,26,30,37,38,39,40,43,13,50,55,58,59,60,389,61,62,64,65,66,67,69,70,375,71,72,390,391,392,74,75,76,2,77,78,80,83,84,85,86,89,90,91,92,93,94,98,101,111,117],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[308,122],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:287","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[394],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":8,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":174,"org.easymock.tests2.UsageTest.argumentsOrdered":350,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":284,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":1,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":134,"org.easymock.tests2.DelegateToTest.testReturnException":333,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":151,"org.easymock.tests.MockingTest.testPartialClassMocking":38,"org.easymock.tests.MockClassControlTest.testToString":44,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":380,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":105,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":101,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":238,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":378,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":331,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":127,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":294,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":234,"org.easymock.tests2.UsageTest.wrongArguments":344,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":263,"org.easymock.samples.ExampleTest.answerVsDelegate":139,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":50,"org.easymock.tests2.UsageConstraintsTest.testNull":292,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":76,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":49,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":283,"org.easymock.tests2.CaptureTest.testPrimitive":319,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":237,"org.easymock.tests.UsageTest.moreThanOneArgument":175,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":257,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":359,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":169,"org.easymock.tests.UsageTest.argumentsOrdered":181,"org.easymock.tests.UsageVarargTest.varargIntAccepted":223,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":213,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":132,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":60,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":65,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":217,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":315,"org.easymock.tests2.DependencyTest.testClassMocking":56,"org.easymock.tests2.AnswerTest.answer":353,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":340,"org.easymock.tests2.CaptureTest.testAnd":316,"org.easymock.tests2.UsageTest.strictResetToDefault":342,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":83,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":168,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":232,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":278,"org.easymock.tests2.DelegateToTest.testDelegate":336,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":253,"org.easymock.tests.LimitationsTest.mockFinalMethod":27,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":154,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":149,"org.easymock.tests2.DependencyTest.testClassMockingSupport":57,"org.easymock.tests2.CaptureTest.testCapture1_2446744":320,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":79,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":251,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":338,"org.easymock.tests.UsageThrowableTest.throwError":185,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":119,"org.easymock.samples.PartialClassMockTest.testGetArea":14,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":163,"org.easymock.tests2.CompareToTest.testLessOrEqual":126,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":214,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":106,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":239,"org.easymock.tests2.UsageTest.niceToStrict":345,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":121,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":64,"org.easymock.tests2.MockBuilderTest.testCreateMock":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":114,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":247,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":279,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":156,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":261,"org.easymock.tests.UsageOverloadedMethodTest.overloading":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":110,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":299,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":204,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":379,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":298,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":325,"org.easymock.tests2.EasyMockSupportClassTest.testAll":98,"org.easymock.tests.MockClassControlTest.testEquals":48,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":21,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":255,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":390,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":147,"org.easymock.tests2.CaptureTest.testCaptureAll":317,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":339,"org.easymock.tests2.UsageConstraintsTest.testMatches":300,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":170,"org.easymock.samples.ExampleTest.voteForRemovals":143,"org.easymock.tests.UsageVarargTest.allKinds":6,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":218,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":148,"org.easymock.samples.BasicClassMockTest.testPrintContent":16,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":191,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":368,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":155,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":133,"org.easymock.tests2.UsageConstraintsTest.greaterThan":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":99,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":231,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":86,"org.easymock.samples.ExampleTest.voteForRemoval":140,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":34,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":87,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":311,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":78,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":30,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":341,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":68,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":276,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":96,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":150,"org.easymock.tests2.CaptureTest.testCaptureFirst":329,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":277,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":352,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":200,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":313,"org.easymock.tests2.CaptureTest.testCapture2_2446744":328,"org.easymock.tests2.UsageTest.moreThanOneArgument":343,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":70,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":229,"org.easymock.tests.GenericTest.testBridgedEquals":23,"org.easymock.tests.UsageExpectAndReturnTest.longType":196,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":145,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":274,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":256,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":375,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":254,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":167,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":115,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":201,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":243,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":190,"org.easymock.tests.MockingTest.testNiceClassMocking":41,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":90,"org.easymock.tests.MockingTest.testClassMocking":36,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":389,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":157,"org.easymock.tests2.UsageConstraintsTest.testContains":297,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":55,"org.easymock.tests2.UsageConstraintsTest.testFind":291,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":173,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":265,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":358,"org.easymock.tests.UsageExpectAndReturnTest.object":203,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":80,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":282,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":128,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":225,"org.easymock.tests.UsageTest.exactCallCountByLastCall":182,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":183,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":73,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":209,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":221,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":393,"org.easymock.tests.MockClassControlTest.testHashCode":47,"org.easymock.tests2.EasyMockSupportTest.testVerify":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":108,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":337,"org.easymock.tests.UsageVarargTest.varargCharAccepted":224,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":388,"org.easymock.tests2.UsageTest.openCallCountByLastCall":346,"org.easymock.tests.DefaultClassInstantiatorTest.object":3,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":109,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":245,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":188,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":46,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":84,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":244,"org.easymock.tests.CapturesMatcherTest.test":11,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":117,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":45,"org.easymock.tests2.UsageTest.resumeIfFailure":351,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":153,"org.easymock.tests2.StubTest.stubWithReturnValue":362,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":376,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":202,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":305,"org.easymock.tests2.SerializationTest.testAllMockedMethod":59,"org.easymock.samples.SupportTest.voteForRemovals":137,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":19,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":250,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":394,"org.easymock.tests.UsageExpectAndThrowTest.object":248,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":303,"org.easymock.tests2.DelegateToTest.testWrongClass":335,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":258,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":259,"org.easymock.samples.ConstructorCalledMockTest.testTax":17,"org.easymock.tests.UsageStrictMockTest.range":270,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":281,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":89,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":249,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":66,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":95,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":262,"org.easymock.tests2.CaptureTest.testCaptureNone":324,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":383,"org.easymock.tests.UsageUnorderedTest.message":162,"org.easymock.tests.UsageVerifyTest.twoReturns":220,"org.easymock.tests.UsageVarargTest.varargByteAccepted":228,"org.easymock.tests2.ThreadingTest.testThreadSafe":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":112,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":161,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":15,"org.easymock.tests2.CaptureTest.testCapture_2617107":318,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":386,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":236,"org.easymock.tests2.UsageConstraintsTest.any":295,"org.easymock.tests2.StubTest.stub":361,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":387,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":152,"org.easymock.tests.UsageExpectAndThrowTest.longType":241,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":33,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":165,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":371,"org.easymock.tests2.SerializationTest.testClass":58,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":309,"org.easymock.tests.LimitationsTest.mockNativeMethod":26,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":22,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":212,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":392,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":374,"org.easymock.tests2.NameTest.nameForMocksControl":367,"org.easymock.tests2.MockedExceptionTest.testMockedException":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":100,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":179,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":40,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":242,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":74,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":67,"org.easymock.tests.MockingTest.testNicePartialClassMocking":39,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":77,"org.easymock.tests2.CompareToTest.testCompareEqual":124,"org.easymock.tests2.CaptureTest.testCaptureLast":323,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":9,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":94,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":304,"org.easymock.tests.MockingTest.testTwoMocks":37,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":193,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":246,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":349,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":307,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":164,"org.easymock.tests.UsageStrictMockTest.differentMethods":271,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":31,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":312,"org.easymock.tests2.MockBuilderTest.testCreateMockString":71,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":102,"org.easymock.tests.UsageExpectAndThrowTest.floatType":240,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":97,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":354,"org.easymock.tests.UsageVerifyTest.twoThrows":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":111,"org.easymock.samples.ExampleTest.voteAgainstRemoval":141,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":385,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":381,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":85,"org.easymock.tests.LimitationsTest.privateConstructor":25,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":120,"org.easymock.tests2.UsageConstraintsTest.testNotNull":306,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":53,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":192,"org.easymock.tests2.UsageTest.defaultResetToNice":348,"org.easymock.samples.ExampleTest.voteAgainstRemovals":138,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":208,"org.easymock.tests2.CallbackTest.callback":363,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":81,"org.easymock.tests.UsageTest.openCallCountByLastCall":178,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":288,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":235,"org.easymock.tests.UsageCallCountTest.tooFewCalls":159,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":92,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":264,"org.easymock.tests.UsageThrowableTest.throwCheckedException":189,"org.easymock.tests.MockingTest.testStrictClassMocking":35,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":184,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":93,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":91,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":166,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":360,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":356,"org.easymock.tests2.CompareToTest.testGreateOrEqual":125,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":131,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":314,"org.easymock.tests2.NameTest.nameForNiceMock":366,"org.easymock.tests2.DependencyTest.testInterfaceMocking":330,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":129,"org.easymock.samples.ExampleTest.addDocument":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":118,"org.easymock.tests2.DelegateToTest.testStubDelegate":334,"org.easymock.tests2.AnswerTest.stubAnswer":355,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":268,"org.easymock.tests.UsageVarargTest.varargLongAccepted":227,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":384,"org.easymock.tests.UsageExpectAndReturnTest.floatType":195,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":211,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":72,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":18,"org.easymock.tests.UsageThrowableTest.noUpperLimit":186,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":302,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":289,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":51,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":321,"org.easymock.tests2.SerializationTest.test":332,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":194,"org.easymock.tests2.UsageConstraintsTest.testSame":293,"org.easymock.samples.SupportTest.addDocument":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":103,"org.easymock.tests.GenericTest.testPackageScope":20,"org.easymock.tests2.NameTest.nameForMock":364,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":205,"org.easymock.tests2.UsageStrictMockTest.differentMethods":373,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":82,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":197,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":252,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":233,"org.easymock.tests2.MockedExceptionTest.testRealException":287,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":377,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":370,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":29,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":7,"org.easymock.tests2.NameTest.nameForStrictMock":365,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":63,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":357,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":2,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":52,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":32,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":10,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":61,"org.easymock.tests2.UsageStrictMockTest.range":372,"org.easymock.tests2.UsageConstraintsTest.lessThan":308,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":130,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":107,"org.easymock.tests2.CaptureTest.testCaptureRightOne":326,"org.easymock.tests2.UsageConstraintsTest.testOr":12,"org.easymock.tests.UsageRangeTest.combination":230,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":75,"org.easymock.tests.UsageTest.wrongArguments":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":104,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":43,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":198,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":206,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":5,"org.easymock.tests.UsageVarargTest.varargShortAccepted":226,"org.easymock.tests2.UsageConstraintsTest.cmpTo":296,"org.easymock.tests2.CompareToTest.testLessThan":122,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":347,"org.easymock.tests2.CaptureTest.testCaptureFromStub":327,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":28,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":62,"org.easymock.tests.UsageTest.unexpectedCallWithArray":176,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":267,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":160,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":207,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":269,"org.easymock.tests2.UsageConstraintsTest.constraints":290,"org.easymock.samples.ExampleTest.addAndChangeDocument":144,"org.easymock.tests.UsageStrictMockTest.testVerify":273,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":135,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":266,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":146,"org.easymock.tests2.CompareToTest.testGreateThan":123,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":322,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":391,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":215,"org.easymock.tests.LimitationsTest.abstractClass":24,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":199,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":216,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":260,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":222,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":280}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[73,79,86,87,98,107],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockStatement:42","sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"test"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[0,2,3,42,64,65,66,99,100,101,149,150,151,152,156,184,185,186],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:80","failures":[248,249,250,126,129,251,252,253,130,131,132,133,254,255,256,257,258,259,224],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1646","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[11,260,13,261,262,263,264,265,14,15,16,17,18,35,266,267,268,269,270,42,271,272,273,274,64,275,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,276,111,112,113,115,116,118,122,126,252,130,132,133,255,134,135,277,278,136,141,142,143,144,148,153,154,279,155,156,157,280,281,159,160,282,161,283,162,163,164,165,166,284,168,285,170,171,172,173,174,175,176,177,178,179,180,181,184,286,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,221,223,224,225,227,228,229,230,231,232,233,235,237,238,240,287,243,244,245,246,288,247],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[289,290,291,292,293,11,64,68,69,94,95,96,97,98,294,102,103,104,106,107,108,109,110,123,123,124,124,148,184,187,188,191,192,193,194,199,201,202,204,205,210,211,212,295],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[296],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[158],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[224,225,226],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[297,298,266,42,299,300,301,302,303,64,275,65,304,305,306,307,308,99,100,101,156,309,310,311,184,286,185,312,214,223],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[203,313,238,239,287,241,242,243,244,247],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[314,315,316],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:324","failures":[262,263,100],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[317],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:340","sourceCode":"this.org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:332","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[158,164,203],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","shouldBeUsedInOneThread":"value"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[318,35,36,250,319],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[320,321,322],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[0,2,3,323,324,325,266,270,42,300,301,302,273,326,303,64,327,275,65,66,90,99,100,101,328,329,330,252,255,149,150,151,152,279,156,309,157,158,310,311,282,284,285,169,171,175,176,179,331,184,332,286,185,186,189,203],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[333,334,306,307],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:289","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[318],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[123,124,335,336,337,338,339,340],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[248,249,10,341,15,16,17,18,35,36,250,105,123,123,124,124,126,127,128,129,251,252,253,130,131,132,133,254,255,257,258,342,343,344,141,142,143,144,161,283,163,164,165,259,166,167,284,168,285,213,221,224,226,227,228,229,230,232,233],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[345,346],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[210],"status":-1,"binaryOperator":"java.lang.Object != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:174","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[132],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[347],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[333,334,14,348,325,266,270,42,299,300,301,302,273,326,303,64,327,275,65,66,306,307,349,350,351,352,353,354,355,99,100,101,279,156,309,157,158,310,311,282,283,284,285,169,171,175,176,179,356,357,358,359,360,361,362,363,364,365,366,331,184,332,286,185,186,189,203],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":190,"org.easymock.tests.ClassInstantiatorFactoryTest.getJVM":347,"org.easymock.tests2.UsageTest.argumentsOrdered":311,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":270,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":22,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":158,"org.easymock.tests2.StubTest.stubWithReturnValue":148,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":209,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":79,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":125,"org.easymock.tests2.SerializationTest.testAllMockedMethod":226,"org.easymock.tests2.DelegateToTest.testReturnException":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":20,"org.easymock.tests.MockingTest.testPartialClassMocking":15,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":364,"org.easymock.samples.SupportTest.voteForRemovals":122,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":318,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":293,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":55,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":43,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":142,"org.easymock.tests.UsageExpectAndThrowTest.object":53,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":328,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":207,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":154,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":68,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":69,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":196,"org.easymock.tests2.UsageTest.wrongArguments":309,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":102,"org.easymock.tests.UsageStrictMockTest.range":275,"org.easymock.samples.ConstructorCalledMockTest.testTax":123,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":8,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":312,"org.easymock.samples.ExampleTest.answerVsDelegate":114,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":177,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":227,"org.easymock.tests2.UsageConstraintsTest.testNull":192,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":54,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":163,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":132,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":179,"org.easymock.tests2.CaptureTest.testPrimitive":240,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":104,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":301,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":62,"org.easymock.tests.UsageTest.moreThanOneArgument":42,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":7,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":162,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":349,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":108,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":269,"org.easymock.tests2.CaptureTest.testCaptureNone":244,"org.easymock.tests.UsageUnorderedTest.message":266,"org.easymock.tests.UsageVerifyTest.twoReturns":101,"org.easymock.tests.UsageVarargTest.varargByteAccepted":32,"org.easymock.tests2.ThreadingTest.testThreadSafe":134,"org.easymock.tests.UsageTest.argumentsOrdered":302,"org.easymock.tests.UsageVarargTest.varargIntAccepted":27,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":5,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":305,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":127,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":365,"org.easymock.tests2.CaptureTest.testCapture_2617107":239,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":94,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":366,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":316,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":129,"org.easymock.tests2.UsageConstraintsTest.any":197,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":131,"org.easymock.tests2.StubTest.stub":147,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":21,"org.easymock.tests.UsageExpectAndThrowTest.longType":46,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":360,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":332,"org.easymock.tests2.SerializationTest.testClass":224,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":223,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":214,"org.easymock.tests.LimitationsTest.mockNativeMethod":18,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":339,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":250,"org.easymock.tests2.AnswerTest.answer":215,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":89,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":140,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":344,"org.easymock.tests2.CaptureTest.testAnd":237,"org.easymock.tests2.UsageTest.strictResetToDefault":155,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":167,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":186,"org.easymock.tests2.NameTest.nameForMocksControl":152,"org.easymock.tests2.MockedExceptionTest.testMockedException":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":107,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":92,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":174,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":272,"org.easymock.tests2.DelegateToTest.testDelegate":236,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":17,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":47,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":161,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":133,"org.easymock.tests.MockingTest.testNicePartialClassMocking":16,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":58,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":165,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":314,"org.easymock.tests2.CaptureTest.testCaptureLast":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":23,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":307,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":233,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":195,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":208,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":41,"org.easymock.tests.MockingTest.testTwoMocks":341,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":306,"org.easymock.tests2.CaptureTest.testCapture1_2446744":287,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":70,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":56,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":51,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":138,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":310,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":211,"org.easymock.tests.UsageThrowableTest.throwError":260,"org.easymock.tests.UsageStrictMockTest.differentMethods":65,"org.easymock.tests2.ConstraintsToStringTest.andToString":363,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":277,"org.easymock.tests2.MockBuilderTest.testCreateMockString":258,"org.easymock.tests.UsageExpectAndThrowTest.floatType":45,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":110,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":203,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":216,"org.easymock.tests.UsageVerifyTest.twoThrows":100,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":338,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":143,"org.easymock.samples.PartialClassMockTest.testGetArea":126,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":95,"org.easymock.samples.ExampleTest.voteAgainstRemoval":116,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":268,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":267,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":168,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":44,"org.easymock.tests2.UsageTest.niceToStrict":157,"org.easymock.tests2.UsageConstraintsTest.testNotNull":210,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":265,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":219,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":289,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":130,"org.easymock.tests2.MockBuilderTest.testCreateMock":254,"org.easymock.tests2.UsageTest.defaultResetToNice":159,"org.easymock.samples.ExampleTest.voteAgainstRemovals":113,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":85,"org.easymock.tests.UsageVarargTest.differentLength":325,"org.easymock.tests2.CallbackTest.callback":169,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":352,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":340,"org.easymock.tests.UsageTest.openCallCountByLastCall":271,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":357,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":52,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":175,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":187,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":0,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":6,"org.easymock.tests.UsageCallCountTest.tooFewCalls":3,"org.easymock.tests.UsageOverloadedMethodTest.overloading":111,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":201,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":276,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":230,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":81,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":200,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":245,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":9,"org.easymock.tests.UsageThrowableTest.throwCheckedException":262,"org.easymock.tests2.EasyMockSupportClassTest.testAll":141,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":36,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":362,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":351,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":60,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":342,"org.easymock.tests2.CaptureTest.testCaptureAll":238,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":39,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":139,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":232,"org.easymock.tests.MockNameTest.defaultName":308,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":229,"org.easymock.tests2.UsageConstraintsTest.testMatches":202,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":231,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":218,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":109,"org.easymock.samples.ExampleTest.voteForRemovals":118,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":315,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":136,"org.easymock.tests2.NameTest.nameForNiceMock":151,"org.easymock.tests.UsageVarargTest.allKinds":34,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":99,"org.easymock.tests2.DependencyTest.testInterfaceMocking":153,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":40,"org.easymock.samples.BasicClassMockTest.testPrintContent":128,"org.easymock.samples.ExampleTest.addDocument":117,"org.easymock.tests2.DelegateToTest.testStubDelegate":235,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":264,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":331,"org.easymock.tests2.AnswerTest.stubAnswer":217,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":317,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":24,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":64,"org.easymock.tests2.UsageConstraintsTest.greaterThan":204,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":335,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":91,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":285,"org.easymock.tests.UsageVarargTest.varargLongAccepted":31,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":66,"org.easymock.samples.ExampleTest.voteForRemoval":115,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":135,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":88,"org.easymock.tests.UsageExpectAndReturnTest.floatType":72,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":256,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":259,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":213,"org.easymock.tests2.ConstraintsToStringTest.orToString":356,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":124,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":334,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":205,"org.easymock.tests.UsageThrowableTest.noUpperLimit":12,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":279,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":10,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":188,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":241,"org.easymock.tests2.SerializationTest.test":225,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":172,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":13,"org.easymock.tests2.UsageConstraintsTest.testSame":193,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":71,"org.easymock.samples.SupportTest.addDocument":121,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":19,"org.easymock.tests2.CaptureTest.testCaptureFirst":247,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":173,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":282,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":348,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":77,"org.easymock.tests.GenericTest.testPackageScope":35,"org.easymock.tests2.CaptureTest.testCapture2_2446744":288,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":278,"org.easymock.tests2.UsageTest.moreThanOneArgument":156,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":296,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":290,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":33,"org.easymock.tests.GenericTest.testBridgedEquals":319,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":323,"org.easymock.tests2.NameTest.nameForMock":149,"org.easymock.tests.UsageExpectAndReturnTest.longType":73,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":37,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":170,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":257,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":82,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":61,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":313,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":294,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":337,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":59,"org.easymock.tests2.UsageStrictMockTest.differentMethods":185,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":106,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":74,"org.easymock.tests.UsageCallCountTest.tooManyCalls":324,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":350,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":57,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":93,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":2,"org.easymock.tests2.MockedExceptionTest.testRealException":222,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":298,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":292,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":353,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":48,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":184,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":263,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":103,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":228,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":251,"org.easymock.tests2.UsageConstraintsTest.testContains":199,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":1,"org.easymock.tests2.NameTest.nameForStrictMock":150,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":221,"org.easymock.tests2.UsageConstraintsTest.testFind":191,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":112,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":322,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":145,"org.easymock.tests.MockTypeTest.fromEasyMockClass":297,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":164,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":326,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":146,"org.easymock.tests.UsageExpectAndReturnTest.object":80,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":329,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":206,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":166,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":252,"org.easymock.tests2.UsageStrictMockTest.range":286,"org.easymock.tests2.UsageConstraintsTest.lessThan":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":178,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":29,"org.easymock.tests.UsageTest.exactCallCountByLastCall":273,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":291,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":171,"org.easymock.tests2.CaptureTest.testCaptureRightOne":246,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":354,"org.easymock.tests2.UsageConstraintsTest.testOr":194,"org.easymock.tests.UsageRangeTest.combination":90,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":283,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":86,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":25,"org.easymock.tests.UsageTest.wrongArguments":300,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":75,"org.easymock.tests2.EasyMockSupportTest.testVerify":182,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":83,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":359,"org.easymock.tests.UsageVarargTest.varargShortAccepted":30,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":137,"org.easymock.tests2.UsageConstraintsTest.cmpTo":198,"org.easymock.tests.UsageVarargTest.varargCharAccepted":28,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":183,"org.easymock.tests2.UsageTest.openCallCountByLastCall":280,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":281,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":321,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":181,"org.easymock.tests2.CaptureTest.testCaptureFromStub":295,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":253,"org.easymock.tests.UsageTest.unexpectedCallWithArray":299,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":304,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":355,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":50,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":303,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":261,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":4,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":336,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":84,"org.easymock.tests2.CaptureTest.testCapture":346,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":327,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":284,"org.easymock.tests2.UsageConstraintsTest.constraints":189,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":49,"org.easymock.samples.ExampleTest.addAndChangeDocument":119,"org.easymock.tests2.ConstraintsToStringTest.notToString":358,"org.easymock.tests.CapturesMatcherTest.test":345,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":87,"org.easymock.tests.UsageStrictMockTest.testVerify":67,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":120,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":361,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":144,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":38,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":242,"org.easymock.tests2.UsageTest.resumeIfFailure":160,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":343,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":96,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":248,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":76,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":14,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":97,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":330,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":26,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":176}}]

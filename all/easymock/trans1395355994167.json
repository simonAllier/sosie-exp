[{"transplantationPoint":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[1],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,109,110,110,111],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:270","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[112,113,114,115],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[116,117,118,119,120],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:122","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[102,106],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[121,122,123],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:65","sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = new java.lang.Class[java.lang.String[].int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[124,125],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[102],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:48","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"failures":[126,127,128,129,130],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:59","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte)","type":"CtInvocationImpl"},"failures":[131,132,133,134,135,136],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[137,138,51,139,140,141,142,143,144,145],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"parameterType":"parameterType","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[146],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:197","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[130],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[165,147,148,166,167,168,169,170,171,172,173,130,174,149,150,175,176,177,178,179,180,181],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"minimum"}},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[182,183],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[185],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[44,48],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[186,187],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[188,189,190,191,192,193,194,195],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:189","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","type":"CtInvocationImpl"},"failures":[5,11,14,24,30,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,170,73,74,75,76,77,78,79,80,83,85,86,87,88,89,90,91,92,93,94,95,103,104,105,107,108,109,109,110,110,111],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:228","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":121,"org.easymock.tests2.UsageTest.argumentsOrdered":169,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":137,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":154,"org.easymock.tests2.SerializationTest.testAllMockedMethod":49,"org.easymock.tests.MockingTest.testPartialClassMocking":89,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":127,"org.easymock.samples.SupportTest.voteForRemovals":136,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":102,"org.easymock.tests.MockClassControlTest.testToString":75,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":18,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":14,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":139,"org.easymock.tests2.UsageTest.wrongArguments":167,"org.easymock.samples.ConstructorCalledMockTest.testTax":109,"org.easymock.tests.UsageStrictMockTest.range":149,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":94,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":52,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":191,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":60,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":163,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":80,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":8,"org.easymock.tests.UsageTest.moreThanOneArgument":177,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":179,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":128,"org.easymock.tests.UsageUnorderedTest.message":181,"org.easymock.tests.UsageVerifyTest.twoReturns":176,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":157,"org.easymock.tests.UsageTest.argumentsOrdered":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":25,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":107,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":36,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":144,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":4,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":118,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":119,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":99,"org.easymock.tests2.SerializationTest.testClass":48,"org.easymock.tests.LimitationsTest.mockNativeMethod":83,"org.easymock.tests2.DependencyTest.testClassMocking":6,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":105,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":123,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":67,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":146,"org.easymock.tests2.NameTest.nameForMocksControl":173,"org.easymock.tests2.MockedExceptionTest.testMockedException":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":13,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":159,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":91,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":160,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":58,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":43,"org.easymock.tests.MockingTest.testNicePartialClassMocking":90,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":62,"org.easymock.tests.LimitationsTest.mockFinalMethod":84,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":57,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":185,"org.easymock.tests.MockingTest.testTwoMocks":88,"org.easymock.tests2.DependencyTest.testClassMockingSupport":7,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":161,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":168,"org.easymock.tests.UsageStrictMockTest.differentMethods":150,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":97,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":183,"org.easymock.tests2.MockBuilderTest.testCreateMockString":47,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":10,"org.easymock.tests.UsageVerifyTest.twoThrows":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":24,"org.easymock.samples.PartialClassMockTest.testGetArea":111,"org.easymock.samples.ExampleTest.voteAgainstRemoval":134,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":117,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":19,"org.easymock.tests.LimitationsTest.privateConstructor":82,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":33,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":195,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":40,"org.easymock.tests2.MockBuilderTest.testCreateMock":45,"org.easymock.samples.ExampleTest.voteAgainstRemovals":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":27,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":65,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":126,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":162,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":114,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":29,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":55,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":155,"org.easymock.tests.MockClassControlTest.testEquals":79,"org.easymock.tests2.EasyMockSupportClassTest.testAll":11,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":104,"org.easymock.tests.MockingTest.testStrictClassMocking":86,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":129,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":56,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":54,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":125,"org.easymock.samples.ExampleTest.voteForRemovals":135,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":143,"org.easymock.tests2.NameTest.nameForNiceMock":172,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":141,"org.easymock.samples.BasicClassMockTest.testPrintContent":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":31,"org.easymock.tests2.AnswerTest.stubAnswer":124,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":174,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":12,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":70,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":116,"org.easymock.samples.ExampleTest.voteForRemoval":133,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":71,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":182,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":63,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":50,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":110,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":85,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":2,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":44,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":96,"org.easymock.tests2.UsageConstraintsTest.testSame":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":16,"org.easymock.tests.GenericTest.testPackageScope":103,"org.easymock.tests2.UsageTest.moreThanOneArgument":166,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":158,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":46,"org.easymock.tests.GenericTest.testBridgedEquals":106,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":193,"org.easymock.tests2.NameTest.nameForMock":170,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":190,"org.easymock.tests2.UsageStrictMockTest.differentMethods":148,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":66,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":152,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":28,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":153,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":138,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":165,"org.easymock.tests.MockingTest.testNiceClassMocking":92,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":53,"org.easymock.tests.MockingTest.testClassMocking":87,"org.easymock.tests2.NameTest.nameForStrictMock":171,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":35,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":39,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":189,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":61,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":5,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":98,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":64,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":37,"org.easymock.tests2.UsageStrictMockTest.range":147,"org.easymock.tests2.UsageConstraintsTest.lessThan":186,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":140,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":194,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":20,"org.easymock.tests2.UsageConstraintsTest.testOr":122,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":51,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":59,"org.easymock.tests.UsageTest.wrongArguments":178,"org.easymock.tests.MockClassControlTest.testHashCode":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":17,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":21,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":100,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":113,"org.easymock.tests2.CompareToTest.testLessThan":187,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":115,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":120,"org.easymock.tests.DefaultClassInstantiatorTest.object":95,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":188,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":112,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":22,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":130,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":184,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":156,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":77,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":68,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":30,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":131,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":93,"org.easymock.tests.LimitationsTest.abstractClass":81,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":3}}]

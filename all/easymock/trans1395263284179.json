[{"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:987","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:434","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[1,2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[3],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[4,5],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:345","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[6],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[7,8,9,10,11,12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.EasyMock:747","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[13,14,15],"status":-1,"binaryOperator":"int == 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[16,17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[19],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[20,21,22],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[3,3,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[37,38,39,40,41,42],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[53],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[54,55,56,57,58,59],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[60,61,62,63],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"substring"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1581","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(boolean[]))","type":"CtInvocationImpl"},"failures":[64],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Injector:229","sourceCode":"org.easymock.internal.Injection org.easymock.internal.Injection = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[65,65,66,66,67,68],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:99","failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,8,9,38,91,39,92,93,94,10,95,96,97,98,99,100,11,101,102,40,41,103,104,105,106,107,108,109,110,111,112,113,114,115,42,12,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,0,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,13,148,149,150,151,152,60,153,154,155,156,157,61,158,159,14,62,64,160,161,162,163,164,63,165,166,167,168,169,4,170,171,172,173,174,175,176,177,178,179,50,180,51,181,182,183,1,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,23,24,26,27,30,31,32,33,35,36],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:52","failures":[69,70,208,71,72,209,210,73,211,212,213,214,215,216,85,217,89,218,90,104,219,113,114,115,220,221,222,127,129,223,131,132,224,225,134,155,156,159,14,168,169,170,226,227,228,18,229,197,198,199],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[79,81,230,133],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[73,231,232,233,234,235,74,236,75,76,77,78,237,238,239,240,241,82,83,84,242,243,86,87,88,89,218,90,38,91,92,96,11,103,104,105,106,107,108,109,110,244,112,113,114,115,42,12,245,116,117,118,119,120,121,122,222,123,124,125,126,127,128,130,0,134,135,136,137,138,139,140,141,142,143,144,145,146,147,13,148,149,150,153,154,155,156,61,158,159,14,64,160,162,163,63,165,166,246,167,168,170,247,172,176,177,178,248,249,226,50,180,51,181,182,183,1,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,201,202,203,204,205,206,207,23,24,25,26,27,30,31,32,33,36],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:159","failures":[65,66,250,67,251,252,68],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[253],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:92","sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","type":"CtForEachImpl"},"failures":[69,70,208,209,210,73,254,255,231,232,256,233,257,258,259,260,234,261,262,263,264,235,265,266,267,268,211,269,270,271,272,273,274,275,276,277,212,213,278,279,214,280,215,281,216,74,75,76,77,78,79,80,81,82,84,85,217,86,87,282,283,88,89,218,90,8,9,38,91,39,92,93,94,10,95,96,97,98,99,100,11,101,102,40,41,284,104,110,285,244,112,286,287,219,113,288,114,115,289,42,12,116,117,118,119,120,290,121,291,122,222,123,124,292,125,293,294,295,296,126,127,128,129,223,130,19,224,225,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,13,148,149,150,151,152,60,153,154,155,156,157,61,158,159,14,62,64,160,161,162,163,164,63,165,166,167,168,169,4,170,297,171,247,172,298,299,173,174,177,300,178,248,179,226,50,180,301,51,181,182,183,1,184,185,186,188,189,190,191,302,227,228,18,229,192,193,194,195,196,303,304,197,305,198,199,306,253,200,201,202,203,204,205,206,207,23,24,25,26,28,29,30,31,32,33,36],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"java.lang.Integer.MAX_VALUE":"min"}},{"position":"org.easymock.internal.MockBuilder:89","failures":[307,136,148,149],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[60,153,155,157,61,308,63,168,23,25,33],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[309,310,311,312,313,314,315,135,316,137,138,317,139,318,143,16,150,17,202,203,206,207],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"toStringMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[250,319,43,67,252,320,321,52,203,207,322],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"paramType"}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[77],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":153,"org.easymock.tests2.UsageTest.argumentsOrdered":225,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":69,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":190,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":19,"org.easymock.tests2.StubTest.stubWithReturnValue":200,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":43,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":291,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":95,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":167,"org.easymock.tests2.SerializationTest.testAllMockedMethod":301,"org.easymock.tests2.DelegateToTest.testReturnException":248,"org.easymock.tests.MockingTest.testPartialClassMocking":75,"org.easymock.samples.SupportTest.voteForRemovals":126,"org.easymock.tests.MockClassControlTest.testToString":312,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":262,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":17,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":254,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":193,"org.easymock.tests.UsageExpectAndThrowTest.object":234,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":141,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":165,"org.easymock.tests2.DelegateToTest.testWrongClass":249,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":45,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":42,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":12,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":158,"org.easymock.tests2.UsageTest.wrongArguments":223,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":86,"org.easymock.samples.ConstructorCalledMockTest.testTax":65,"org.easymock.tests.UsageStrictMockTest.range":114,"org.easymock.samples.ExampleTest.answerVsDelegate":222,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":187,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":310,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":201,"org.easymock.tests2.UsageConstraintsTest.testNull":155,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":261,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":145,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":137,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":189,"org.easymock.tests2.CaptureTest.testPrimitive":26,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":88,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":268,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":209,"org.easymock.tests.UsageTest.moreThanOneArgument":70,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":144,"org.easymock.tests2.CaptureTest.testCaptureNone":31,"org.easymock.tests.UsageUnorderedTest.message":217,"org.easymock.tests.UsageVerifyTest.twoReturns":90,"org.easymock.tests.UsageVarargTest.varargByteAccepted":276,"org.easymock.tests2.ThreadingTest.testThreadSafe":173,"org.easymock.tests.UsageTest.argumentsOrdered":210,"org.easymock.tests.UsageVarargTest.varargIntAccepted":270,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":215,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":294,"org.easymock.tests2.CaptureTest.testCapture_2617107":25,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":116,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":315,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":283,"org.easymock.tests2.UsageConstraintsTest.any":159,"org.easymock.tests2.StubTest.stub":253,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":120,"org.easymock.tests.UsageExpectAndThrowTest.longType":232,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":305,"org.easymock.tests2.SerializationTest.testClass":50,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":178,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":196,"org.easymock.tests.LimitationsTest.mockNativeMethod":112,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":41,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":111,"org.easymock.tests2.AnswerTest.answer":170,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":230,"org.easymock.tests2.CaptureTest.testAnd":23,"org.easymock.tests2.UsageTest.strictResetToDefault":128,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":319,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":306,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":16,"org.easymock.tests2.NameTest.nameForMocksControl":229,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":80,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":184,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":72,"org.easymock.tests2.DelegateToTest.testDelegate":226,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":256,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":77,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":142,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":138,"org.easymock.tests.MockingTest.testNicePartialClassMocking":76,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":235,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":147,"org.easymock.tests2.CompareToTest.testCompareEqual":15,"org.easymock.tests2.CaptureTest.testCaptureLast":30,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":244,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":243,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":207,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":61,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":166,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":242,"org.easymock.tests2.CaptureTest.testCapture1_2446744":27,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":322,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":8,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":263,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":259,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":224,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":169,"org.easymock.tests.UsageThrowableTest.throwError":103,"org.easymock.tests.UsageStrictMockTest.differentMethods":115,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":56,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":175,"org.easymock.tests2.MockBuilderTest.testCreateMockString":318,"org.easymock.tests.UsageExpectAndThrowTest.floatType":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":2,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":162,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":297,"org.easymock.tests.UsageVerifyTest.twoThrows":218,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":238,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":320,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":194,"org.easymock.samples.PartialClassMockTest.testGetArea":121,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":117,"org.easymock.samples.ExampleTest.voteAgainstRemoval":124,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":245,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":149,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":311,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":255,"org.easymock.tests2.UsageTest.niceToStrict":130,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":321,"org.easymock.tests2.UsageConstraintsTest.testNotNull":168,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":109,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":136,"org.easymock.tests2.MockBuilderTest.testCreateMock":317,"org.easymock.tests2.UsageTest.defaultResetToNice":0,"org.easymock.samples.ExampleTest.voteAgainstRemovals":122,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":11,"org.easymock.tests.UsageVarargTest.differentLength":273,"org.easymock.tests2.CallbackTest.callback":300,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":68,"org.easymock.tests.UsageTest.openCallCountByLastCall":71,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":260,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":185,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":151,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":278,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":282,"org.easymock.tests.UsageCallCountTest.tooFewCalls":214,"org.easymock.tests.UsageOverloadedMethodTest.overloading":84,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":240,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":160,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":204,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":83,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":97,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":64,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":32,"org.easymock.tests.UsageThrowableTest.throwCheckedException":106,"org.easymock.tests2.EasyMockSupportClassTest.testAll":192,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":285,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":266,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":22,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":251,"org.easymock.tests2.CaptureTest.testCaptureAll":24,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":236,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":206,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":203,"org.easymock.tests2.UsageConstraintsTest.testMatches":161,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":205,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":247,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":7,"org.easymock.samples.ExampleTest.voteForRemovals":125,"org.easymock.tests2.NameTest.nameForNiceMock":18,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":177,"org.easymock.tests.UsageVarargTest.allKinds":212,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":89,"org.easymock.tests2.DependencyTest.testInterfaceMocking":140,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":47,"org.easymock.samples.BasicClassMockTest.testPrintContent":295,"org.easymock.samples.ExampleTest.addDocument":292,"org.easymock.tests2.DelegateToTest.testStubDelegate":179,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":108,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":303,"org.easymock.tests2.AnswerTest.stubAnswer":171,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":113,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":49,"org.easymock.tests2.UsageConstraintsTest.greaterThan":163,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":79,"org.easymock.tests.UsageVarargTest.varargLongAccepted":275,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":150,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":289,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":59,"org.easymock.samples.ExampleTest.voteForRemoval":123,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":174,"org.easymock.tests.UsageExpectAndReturnTest.floatType":38,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":40,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":51,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":66,"org.easymock.tests.UsageThrowableTest.noUpperLimit":284,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":241,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":164,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":213,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":127,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":152,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":28,"org.easymock.tests2.SerializationTest.test":180,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":44,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":55,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":183,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":104,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":9,"org.easymock.tests2.UsageConstraintsTest.testSame":156,"org.easymock.samples.SupportTest.addDocument":296,"org.easymock.tests2.CaptureTest.testCaptureFirst":36,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":1,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":134,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":94,"org.easymock.tests.GenericTest.testPackageScope":110,"org.easymock.tests2.CaptureTest.testCapture2_2446744":35,"org.easymock.tests2.UsageTest.moreThanOneArgument":129,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":176,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":139,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":277,"org.easymock.tests.GenericTest.testBridgedEquals":6,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":281,"org.easymock.tests2.NameTest.nameForMock":227,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":53,"org.easymock.tests.UsageExpectAndReturnTest.longType":91,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":181,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":267,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":98,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":246,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":265,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":252,"org.easymock.tests2.UsageStrictMockTest.differentMethods":199,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":37,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":39,"org.easymock.tests.UsageCallCountTest.tooManyCalls":216,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":264,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":81,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":279,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":10,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":233,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":197,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":87,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":107,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":202,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":307,"org.easymock.tests2.NameTest.nameForStrictMock":228,"org.easymock.tests2.UsageConstraintsTest.testContains":62,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":172,"org.easymock.tests2.UsageConstraintsTest.testFind":154,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":85,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":298,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":146,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":299,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":286,"org.easymock.tests.UsageExpectAndReturnTest.object":96,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":63,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":57,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":13,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":135,"org.easymock.tests2.UsageStrictMockTest.range":198,"org.easymock.tests2.UsageConstraintsTest.lessThan":4,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":188,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":272,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":46,"org.easymock.tests.UsageTest.exactCallCountByLastCall":73,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":74,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":48,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":182,"org.easymock.tests2.CaptureTest.testCaptureRightOne":33,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":220,"org.easymock.tests2.UsageConstraintsTest.testOr":157,"org.easymock.tests.UsageRangeTest.combination":78,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":52,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":211,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":101,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":143,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":239,"org.easymock.tests.UsageTest.wrongArguments":208,"org.easymock.tests2.MockBuilderTest.testWithConstructor":250,"org.easymock.tests2.EasyMockSupportTest.testVerify":302,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":92,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":99,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":20,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":221,"org.easymock.tests.UsageVarargTest.varargShortAccepted":274,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":237,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":58,"org.easymock.tests2.UsageConstraintsTest.cmpTo":14,"org.easymock.tests.UsageVarargTest.varargCharAccepted":271,"org.easymock.tests2.CompareToTest.testLessThan":5,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":304,"org.easymock.tests2.UsageTest.openCallCountByLastCall":131,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":132,"org.easymock.tests.DefaultClassInstantiatorTest.object":54,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":191,"org.easymock.tests2.CaptureTest.testCaptureFromStub":34,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":316,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":258,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":219,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":105,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":280,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":67,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":100,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":314,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":288,"org.easymock.tests2.UsageConstraintsTest.constraints":60,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":148,"org.easymock.samples.ExampleTest.addAndChangeDocument":293,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":257,"org.easymock.tests.CapturesMatcherTest.test":3,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":102,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":290,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":313,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":195,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":21,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":29,"org.easymock.tests2.UsageTest.resumeIfFailure":133,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":118,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":309,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":93,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":82,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":119,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":269,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":186}}]

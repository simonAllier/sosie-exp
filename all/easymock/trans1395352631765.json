[{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"failures":[10,11,12,13,14,15,16,17,18,19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:108","failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:623","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:59","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,27,75,76,77,78,79,80,81,82,83,84,85],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[10,86,87,88,89,90,91,92,93,94,95,0,96,97,98,99,100,18,101,102,2,103,3,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,118,119,119,120,121,122,123,124,4,125,126,127,5,128,129,130,131,132,7,8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[133,134,87,88,89,90,92,94,0,96,98,135,18,101,102,2,103,136,3,104,105,137,107,109,117,118,118,119,119,138,139,140,141,142,143,144,145,123,146,147,148,149,150,151,152,153,154,155,156,157,129,130,131],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[158],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[143],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1951","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[58,64,65,66,67,69,159,27,75,78,80,81,82,83],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[160,67],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Injector:72","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"failures":[161],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:987","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[162,115,116],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[58,59,163,69,70,151,152,164,165,166,32,36,37,39,42,167,168,169],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:55","sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[170,171,172,173,174,175],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[176],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"potentialValue":"value","capture":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:210","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[10,177,86],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1221","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[106],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[14],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":3,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":171,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":2,"org.easymock.tests.MockNameTest.defaultName":71,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":136,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":48,"org.easymock.tests2.UsageTest.argumentsOrdered":66,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":173,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":147,"org.easymock.samples.ExampleTest.voteForRemovals":142,"org.easymock.tests2.StubTest.stubWithReturnValue":22,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":16,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":174,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":164,"org.easymock.tests2.SerializationTest.testAllMockedMethod":86,"org.easymock.tests.MockingTest.testPartialClassMocking":129,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":74,"org.easymock.samples.SupportTest.voteForRemovals":138,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":13,"org.easymock.samples.BasicClassMockTest.testPrintContent":121,"org.easymock.tests.MockClassControlTest.testToString":7,"org.easymock.tests2.DelegateToTest.testStubDelegate":135,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":116,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":40,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":55,"org.easymock.tests2.AnswerTest.stubAnswer":133,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":28,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":88,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":68,"org.easymock.tests.UsageExpectAndThrowTest.object":38,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":15,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":115,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":11,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":156,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":157,"org.easymock.samples.ExampleTest.voteForRemoval":140,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":154,"org.easymock.tests.UsageExpectAndReturnTest.floatType":150,"org.easymock.tests2.UsageTest.wrongArguments":64,"org.easymock.samples.ConstructorCalledMockTest.testTax":118,"org.easymock.tests.UsageStrictMockTest.range":69,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":110,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":18,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":62,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":119,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":101,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":4,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":122,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":20,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":1,"org.easymock.tests2.SerializationTest.test":177,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":107,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":39,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":0,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":17,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":47,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":51,"org.easymock.tests.UsageTest.moreThanOneArgument":79,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":149,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":137,"org.easymock.tests2.CaptureTest.testCaptureFirst":176,"org.easymock.tests.UsageUnorderedTest.message":78,"org.easymock.tests.GenericTest.testPackageScope":125,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":134,"org.easymock.tests2.UsageTest.moreThanOneArgument":63,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":168,"org.easymock.tests.UsageVerifyTest.twoReturns":75,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":98,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":167,"org.easymock.tests.UsageTest.argumentsOrdered":83,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":120,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":77,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":143,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":91,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":46,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":26,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":44,"org.easymock.tests2.UsageStrictMockTest.differentMethods":59,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":95,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":146,"org.easymock.tests.UsageExpectAndThrowTest.longType":31,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":151,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":42,"org.easymock.tests2.SerializationTest.testClass":10,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":61,"org.easymock.tests.LimitationsTest.mockNativeMethod":123,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":60,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":155,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":127,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":152,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":73,"org.easymock.tests2.UsageTest.strictResetToDefault":158,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":33,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":57,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":54,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":102,"org.easymock.tests2.NameTest.nameForStrictMock":162,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":49,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":169,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":131,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":32,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":105,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":100,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":96,"org.easymock.tests.MockingTest.testNicePartialClassMocking":130,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":43,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":109,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":24,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":108,"org.easymock.tests.MockTypeTest.fromEasyMockClass":72,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":23,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":85,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":104,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":111,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":92,"org.easymock.tests.MockingTest.testTwoMocks":128,"org.easymock.tests2.UsageStrictMockTest.range":58,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":84,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":12,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":148,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":41,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":36,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":163,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":14,"org.easymock.tests.UsageThrowableTest.throwError":50,"org.easymock.tests.UsageStrictMockTest.differentMethods":70,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":19,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":106,"org.easymock.tests.UsageTest.wrongArguments":81,"org.easymock.tests2.MockBuilderTest.testCreateMockString":99,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":6,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":132,"org.easymock.tests.UsageExpectAndThrowTest.floatType":30,"org.easymock.tests.UsageVerifyTest.twoThrows":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":89,"org.easymock.samples.PartialClassMockTest.testGetArea":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":144,"org.easymock.samples.ExampleTest.voteAgainstRemoval":141,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":114,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":29,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":5,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":21,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":56,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":94,"org.easymock.tests2.MockBuilderTest.testCreateMock":97,"org.easymock.samples.ExampleTest.voteAgainstRemovals":139,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":153,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":93,"org.easymock.tests.UsageTest.unexpectedCallWithArray":80,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":76,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":159,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":160,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":37,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":35,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":52,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":67,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":172,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":166,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":113,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":9,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":34,"org.easymock.tests2.ConstraintsToStringTest.nullToString":161,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":25,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":165,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":103,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":175,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":90,"org.easymock.tests.UsageThrowableTest.throwCheckedException":53,"org.easymock.tests2.EasyMockSupportClassTest.testAll":87,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":145,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":126,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":124,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":45}}]

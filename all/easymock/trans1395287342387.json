[{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","type":"CtLocalVariableImpl"},"failures":[2,3,4,5,6,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:222","failures":[8,9,10,11],"status":-1,"binaryOperator":"(\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[12,13,14,15,2,16,17,18,19,20,21,22,23],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,0,1,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,12,66,67,68,69,2,16,70,71,72,73,74,75,76,77,78,79,18,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,20,116,117,118,119,120,121,122,123,3,4,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,5,5,6,6,156,7,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,9,296,297,298,299,300,301,302,303,304,305,306,307],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[308,309,310,311,312,313,21],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[139],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"failures":[314,315],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[73,79,316,317,318,319,149,320],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1687","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[321,93,94,95,96,97,98,99,100,101,102,322,103,104,105,106,323],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[324,325,326,327,249,259],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:813","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[61],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:82","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matched"}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[130],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.InjectionPlan:51","failures":[328,329,330,331,332,125,333,334,335,336,337,338,339,340,341,342,343,143,344,345,346,347,348,349,156,157],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:183","failures":[31,37,38,39,40,350,12,71,94,95,98,99,100,101,106,110,117,119,120,121,122,131,154,155,156,157,158,159,160,162,163,164,165,166,168,182,183,184,185,186,187,188,189,190,191,193,202,228,229,230,231,351,352,241,248,251,252,253,254,256],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[52],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[324,325,326,327,249,259],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[353,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,354,45,46,47,48,0,1,355,49,50,51,52,53,54,55,56,57,58,59,60,350,61,62,63,64,65,356,357,358,359,360,12,66,67,308,68,14,15,69,361,2,16,70,71,72,73,74,75,76,77,362,363,78,17,364,79,365,18,316,366,19,80,81,82,83,84,85,86,87,88,367,89,90,91,368,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,369,370,371,372,107,373,374,108,109,110,111,112,113,114,115,20,21,375,116,117,118,119,120,121,122,376,377,378,123,379,380,3,381,382,383,384,385,386,387,388,317,4,389,390,391,392,393,124,318,319,328,329,330,331,332,125,333,334,335,336,337,338,126,127,128,129,130,131,132,133,134,135,136,137,138,139,314,315,140,141,142,339,340,341,342,343,143,344,345,346,347,348,349,144,394,145,146,147,148,149,150,151,152,153,154,155,5,5,6,6,156,7,157,158,159,160,161,162,163,164,165,395,166,167,168,169,170,171,172,173,174,175,176,177,178,179,396,397,398,399,400,180,181,182,183,184,401,185,186,402,187,188,189,190,191,22,192,193,23,403,194,195,196,197,198,199,200,201,202,203,204,404,405,406,407,408,409,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,410,225,411,412,413,414,415,416,226,227,228,229,230,231,417,351,352,418,419,420,421,422,423,232,233,424,425,426,427,428,429,234,430,235,236,431,237,432,433,238,434,239,435,436,240,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,468,469,470,266,267,268,269,270,271,272,273,274,275,471,472,473,474,475,476,477,478,479,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,8,9,480,296,297,298,299,300,301,302,303,481,482,483,484,304,305,485,306,486,487,488,489,10,490,491,11,307,492],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:126","failures":[89,91,92,161,490],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[22,403],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[22,403],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[55],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"failures":[324,325,326,327,249,259],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[458],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"failures":[440],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[463],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[41,43,56,61,493],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:52","failures":[120,121,425,426,252,253,296],"status":-1,"binaryOperator":"(int) == (int)","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[52],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[323],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[85,86,238],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[16,70,71,494],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[473,477],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[16,70,71,494],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,0,1,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,357,12,67,68,69,16,70,72,73,74,75,76,77,78,365,18,316,84,85,86,87,88,90,93,94,96,97,100,101,102,103,105,106,108,109,111,114,20,118,120,121,123,3,4,124,125,126,127,128,130,132,133,134,137,138,139,141,143,147,148,149,150,151,152,153,7,159,160,162,163,165,167,169,170,171,172,173,174,175,176,177,178,179,397,400,180,181,192,23,194,195,196,197,198,200,201,204,232,233,240,439,440,450,452,461,462,464,250,252,253,257,258,261,262,265,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,304,305,306,307],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":44,"org.easymock.tests2.UsageTest.argumentsOrdered":136,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":257,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":38,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":451,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":131,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":156,"org.easymock.tests2.DelegateToTest.testReturnException":89,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":267,"org.easymock.tests.MockingTest.testPartialClassMocking":304,"org.easymock.tests.MockClassControlTest.testToString":411,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":353,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":460,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":384,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":3,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":205,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":109,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":309,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":1,"org.easymock.tests2.UsageTest.wrongArguments":129,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":200,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":274,"org.easymock.samples.ExampleTest.answerVsDelegate":161,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":421,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":487,"org.easymock.tests2.UsageConstraintsTest.testNull":46,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":75,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":416,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":37,"org.easymock.tests2.CaptureTest.testPrimitive":96,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":204,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":224,"org.easymock.tests.UsageTest.moreThanOneArgument":258,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":74,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":301,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":424,"org.easymock.tests.UsageTest.argumentsOrdered":264,"org.easymock.tests.UsageVarargTest.varargIntAccepted":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":456,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":175,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":65,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":313,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":348,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":443,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":179,"org.easymock.tests.ReplayStateInvalidUsageTest.times":433,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":125,"org.easymock.tests2.DependencyTest.testClassMocking":373,"org.easymock.tests2.AnswerTest.answer":139,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":458,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":83,"org.easymock.tests2.CaptureTest.testAnd":93,"org.easymock.tests2.UsageTest.strictResetToDefault":127,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":79,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":359,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":300,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":32,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":196,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":428,"org.easymock.tests2.DelegateToTest.testDelegate":92,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":220,"org.easymock.tests.LimitationsTest.mockFinalMethod":437,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":270,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":246,"org.easymock.tests2.DependencyTest.testClassMockingSupport":374,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":8,"org.easymock.tests2.CaptureTest.testCapture1_2446744":97,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":363,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":218,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":81,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":430,"org.easymock.tests.UsageThrowableTest.throwError":167,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":420,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":349,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":319,"org.easymock.samples.PartialClassMockTest.testGetArea":7,"org.easymock.tests.MockingTest.testInterfaceMocking":485,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":235,"org.easymock.tests2.CompareToTest.testLessOrEqual":493,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":176,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":439,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":409,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":385,"org.easymock.tests2.UsageTest.niceToStrict":130,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":441,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":12,"org.easymock.tests2.MockBuilderTest.testCreateMock":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":391,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":335,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":214,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":324,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":33,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":467,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":226,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":272,"org.easymock.tests.UsageOverloadedMethodTest.overloading":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":317,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":491,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":53,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":400,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":287,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":52,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":102,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":401,"org.easymock.tests.MockClassControlTest.testEquals":415,"org.easymock.tests2.EasyMockSupportClassTest.testAll":123,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":193,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":222,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":82,"org.easymock.tests2.CaptureTest.testCaptureAll":94,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":244,"org.easymock.tests.MockNameTest.defaultName":481,"org.easymock.tests2.UsageConstraintsTest.testMatches":54,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":429,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":302,"org.easymock.samples.ExampleTest.voteForRemovals":165,"org.easymock.tests.UsageVarargTest.allKinds":191,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":296,"org.easymock.samples.BasicClassMockTest.testPrintContent":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":245,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":173,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":116,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":271,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":345,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":368,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":478,"org.easymock.tests2.UsageConstraintsTest.greaterThan":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":379,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":195,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":316,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":479,"org.easymock.samples.ExampleTest.voteForRemoval":162,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":85,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":366,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":422,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":362,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":126,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":256,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":448,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":30,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":377,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":266,"org.easymock.tests2.CaptureTest.testCaptureFirst":106,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":447,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":31,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":138,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":492,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":283,"org.easymock.tests2.UsageTest.moreThanOneArgument":128,"org.easymock.tests2.CaptureTest.testCapture2_2446744":105,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":459,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":69,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":190,"org.easymock.tests.GenericTest.testBridgedEquals":403,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":351,"org.easymock.tests.UsageExpectAndReturnTest.longType":279,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":28,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":242,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":223,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":399,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":350,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":221,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":469,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":299,"org.easymock.tests.UsageCallCountTest.tooManyCalls":352,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":392,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":284,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":337,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":210,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":172,"org.easymock.tests.MockingTest.testNiceClassMocking":488,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":148,"org.easymock.tests.MockingTest.testClassMocking":483,"org.easymock.tests2.UsageConstraintsTest.testContains":51,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":227,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":114,"org.easymock.tests2.UsageConstraintsTest.testFind":45,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":181,"org.easymock.tests.MockTypeTest.fromEasyMockClass":419,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":145,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":247,"org.easymock.tests.UsageExpectAndReturnTest.object":286,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":78,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":336,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":36,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":186,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":310,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":407,"org.easymock.tests.UsageTest.exactCallCountByLastCall":265,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":198,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":446,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":425,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":396,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":21,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":182,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":292,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":490,"org.easymock.tests.MockClassControlTest.testHashCode":414,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":340,"org.easymock.tests2.EasyMockSupportTest.testVerify":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":387,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":426,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":489,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":466,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":80,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":107,"org.easymock.tests.UsageVarargTest.varargCharAccepted":185,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":471,"org.easymock.tests2.CaptureTest.testCaptureMultiple":321,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":464,"org.easymock.tests2.UsageTest.openCallCountByLastCall":132,"org.easymock.tests.DefaultClassInstantiatorTest.object":472,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":39,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":465,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":388,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":212,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":170,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":331,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":339,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":413,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":365,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":211,"org.easymock.tests.CapturesMatcherTest.test":323,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":293,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":468,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":124,"org.easymock.tests2.UsageTest.resumeIfFailure":137,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":418,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":269,"org.easymock.tests2.StubTest.stubWithReturnValue":111,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":308,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":61,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":285,"org.easymock.tests2.SerializationTest.testAllMockedMethod":71,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":457,"org.easymock.samples.SupportTest.voteForRemovals":159,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":325,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":22,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":342,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":217,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":494,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":463,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":314,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":398,"org.easymock.tests.UsageExpectAndThrowTest.object":215,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":59,"org.easymock.tests2.DelegateToTest.testWrongClass":91,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":232,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":233,"org.easymock.samples.ConstructorCalledMockTest.testTax":5,"org.easymock.tests.UsageStrictMockTest.range":252,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":371,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":35,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":147,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":216,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":67,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":434,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":273,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":326,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":440,"org.easymock.tests2.CaptureTest.testCaptureNone":101,"org.easymock.tests.UsageUnorderedTest.message":241,"org.easymock.tests.UsageVerifyTest.twoReturns":298,"org.easymock.tests.UsageVarargTest.varargByteAccepted":189,"org.easymock.tests2.ThreadingTest.testThreadSafe":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":389,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":231,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":408,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":154,"org.easymock.tests2.CaptureTest.testCapture_2617107":95,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":461,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":203,"org.easymock.tests2.UsageConstraintsTest.any":49,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":432,"org.easymock.tests2.StubTest.stub":110,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":470,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":462,"org.easymock.tests.UsageExpectAndThrowTest.longType":208,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":268,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":476,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":237,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":119,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":143,"org.easymock.tests2.SerializationTest.testClass":16,"org.easymock.tests.LimitationsTest.mockNativeMethod":240,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":23,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":295,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":330,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":122,"org.easymock.tests2.NameTest.nameForMocksControl":27,"org.easymock.tests2.MockedExceptionTest.testMockedException":113,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":380,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":262,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":394,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":209,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":306,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":72,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":68,"org.easymock.tests.MockingTest.testNicePartialClassMocking":305,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":77,"org.easymock.tests2.CaptureTest.testCaptureLast":100,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":328,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":9,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":153,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":0,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":60,"org.easymock.tests.MockingTest.testTwoMocks":484,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":320,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":276,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":213,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":135,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":63,"org.easymock.samples.ExampleTest.removeNonExistingDocument":395,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":236,"org.easymock.tests.UsageStrictMockTest.differentMethods":253,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":334,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":341,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":474,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":86,"org.easymock.tests2.MockBuilderTest.testCreateMockString":2,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":410,"org.easymock.tests.UsageExpectAndThrowTest.floatType":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":381,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":378,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":140,"org.easymock.tests.UsageVerifyTest.twoThrows":297,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":375,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":4,"org.easymock.samples.ExampleTest.voteAgainstRemoval":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":452,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":438,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":18,"org.easymock.tests.LimitationsTest.privateConstructor":436,"org.easymock.tests2.UsageConstraintsTest.testNotNull":62,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":174,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":112,"org.easymock.tests2.UsageTest.defaultResetToNice":134,"org.easymock.samples.ExampleTest.voteAgainstRemovals":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":453,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":291,"org.easymock.tests.UsageVarargTest.differentLength":402,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":329,"org.easymock.tests2.CallbackTest.callback":146,"org.easymock.tests2.UsageConstraintsTest.equals":354,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":17,"org.easymock.tests.UsageTest.openCallCountByLastCall":261,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":41,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":202,"org.easymock.tests.UsageCallCountTest.tooFewCalls":229,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":150,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":275,"org.easymock.tests.UsageThrowableTest.throwCheckedException":171,"org.easymock.tests.MockingTest.testStrictClassMocking":482,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":327,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":152,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":199,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":149,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":333,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":238,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":151,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":142,"org.easymock.tests.ObjectMethodsTest.testHashCode":406,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":312,"org.easymock.tests2.NameTest.nameForNiceMock":26,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":88,"org.easymock.tests2.DependencyTest.testInterfaceMocking":108,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":311,"org.easymock.samples.ExampleTest.addDocument":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":390,"org.easymock.tests2.DelegateToTest.testStubDelegate":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":318,"org.easymock.tests2.AnswerTest.stubAnswer":141,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":250,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":13,"org.easymock.tests.UsageVarargTest.varargLongAccepted":188,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":450,"org.easymock.tests.UsageExpectAndReturnTest.floatType":278,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":294,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":20,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":6,"org.easymock.tests.UsageThrowableTest.noUpperLimit":168,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":11,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":57,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":347,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":42,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":369,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":98,"org.easymock.tests2.SerializationTest.test":70,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":473,"org.easymock.tests2.UsageConstraintsTest.testSame":47,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":277,"org.easymock.samples.SupportTest.addDocument":158,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":382,"org.easymock.tests.GenericTest.testPackageScope":192,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":445,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":346,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":486,"org.easymock.tests2.NameTest.nameForMock":24,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":288,"org.easymock.tests2.UsageStrictMockTest.differentMethods":121,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":361,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":364,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":280,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":219,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":404,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":197,"org.easymock.tests2.MockedExceptionTest.testRealException":115,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":423,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":455,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":454,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":118,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":201,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":239,"org.easymock.tests2.NameTest.nameForStrictMock":25,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":360,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":144,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":76,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":370,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":475,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":58,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":357,"org.easymock.tests2.UsageStrictMockTest.range":120,"org.easymock.tests2.UsageConstraintsTest.lessThan":64,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":449,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":386,"org.easymock.tests2.CaptureTest.testCaptureRightOne":103,"org.easymock.tests2.UsageConstraintsTest.testOr":48,"org.easymock.tests.UsageRangeTest.combination":194,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":73,"org.easymock.tests.UsageTest.wrongArguments":260,"org.easymock.tests2.MockBuilderTest.testWithConstructor":356,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":383,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":225,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":281,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":442,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":289,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":477,"org.easymock.tests.UsageVarargTest.varargShortAccepted":187,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":417,"org.easymock.tests2.UsageConstraintsTest.cmpTo":50,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":444,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":133,"org.easymock.tests2.CaptureTest.testCaptureFromStub":104,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":234,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":358,"org.easymock.tests.UsageTest.unexpectedCallWithArray":259,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":249,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":230,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":290,"org.easymock.tests2.CaptureTest.testCapture":322,"org.easymock.tests2.UsageConstraintsTest.constraints":43,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":251,"org.easymock.samples.ExampleTest.addAndChangeDocument":166,"org.easymock.tests.UsageStrictMockTest.testVerify":255,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":157,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":248,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":243,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":99,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":177,"org.easymock.tests.LimitationsTest.abstractClass":435,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":282,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":178,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":307,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":183,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":34}}]

[{"transplant":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:325","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[0,1,2],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[3],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,62,62,63],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:358","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:88","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","type":"CtLocalVariableImpl"},"failures":[64,13,37,38],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[64,66],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[67],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,62,62,63],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:152","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[68],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"failures":[3,69,4],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[70],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:233","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()))","type":"CtThrowImpl"},"failures":[91,92],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:39","sourceCode":"if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[93,94,95,96],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[97,98,93,3,99,100,101,102,69,103,104,105,106,107,108,109,110,111,112,4,113,114,115,116,117,118,119,120,121,5,6,7,8,122,123,124,125,126,127,71,128,129,72,130,131,132,133,134,135,9,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,10,11,13,14,15,16,17,18,19,155,156,73,74,157,158,159,160,67,75,76,161,162,163,164,165,166,20,167,21,22,94,168,95,169,170,171,172,173,174,175,96,176,177,70,178,179,23,24,25,26,180,27,28,181,182,183,184,185,186,29,30,187,31,32,33,34,35,36,37,38,39,77,78,79,80,188,189,190,42,43,44,45,46,47,191,192,48,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,49,221,222,81,82,223,224,83,225,226,227,84,85,51,52,53,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,86,243,87,244,245,88,89,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,90,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,56,57,332,333,334,335,336,337,338,339,340,341,342,59,60,343,61,61,62,62,63],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1349","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:471","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[344,145],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":3,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":242,"org.easymock.tests2.UsageTest.argumentsOrdered":76,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":147,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":218,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":91,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":158,"org.easymock.tests2.StubTest.stubWithReturnValue":132,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":343,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":291,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":116,"org.easymock.tests2.SerializationTest.testAllMockedMethod":21,"org.easymock.tests2.DelegateToTest.testReturnException":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":216,"org.easymock.tests.MockingTest.testPartialClassMocking":51,"org.easymock.samples.SupportTest.voteForRemovals":342,"org.easymock.tests.MockClassControlTest.testToString":44,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":316,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":40,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":304,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":6,"org.easymock.tests.UsageExpectAndThrowTest.object":314,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":113,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":121,"org.easymock.tests2.DelegateToTest.testWrongClass":165,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":302,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":303,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":228,"org.easymock.tests2.UsageTest.wrongArguments":74,"org.easymock.tests.UsageStrictMockTest.range":224,"org.easymock.samples.ConstructorCalledMockTest.testTax":61,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":249,"org.easymock.samples.ExampleTest.answerVsDelegate":334,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":144,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":55,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":23,"org.easymock.tests2.UsageConstraintsTest.testNull":100,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":315,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":31,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":192,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":15,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":146,"org.easymock.tests2.CaptureTest.testPrimitive":169,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":232,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":323,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":203,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":88,"org.easymock.tests.UsageTest.moreThanOneArgument":86,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":248,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":187,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":253,"org.easymock.tests2.CaptureTest.testCaptureNone":174,"org.easymock.tests.UsageUnorderedTest.message":90,"org.easymock.tests.UsageVerifyTest.twoReturns":85,"org.easymock.tests.UsageVarargTest.varargByteAccepted":273,"org.easymock.tests2.ThreadingTest.testThreadSafe":150,"org.easymock.tests.UsageTest.argumentsOrdered":89,"org.easymock.tests.UsageVarargTest.varargIntAccepted":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":344,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":261,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":59,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":276,"org.easymock.tests2.CaptureTest.testCapture_2617107":95,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":10,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":231,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":14,"org.easymock.tests2.UsageConstraintsTest.any":104,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":200,"org.easymock.tests2.StubTest.stub":131,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":280,"org.easymock.tests.UsageExpectAndThrowTest.longType":307,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":217,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":199,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":128,"org.easymock.tests2.SerializationTest.testClass":20,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":133,"org.easymock.tests.ReplayStateInvalidUsageTest.times":201,"org.easymock.tests.LimitationsTest.mockNativeMethod":48,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":179,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":301,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":58,"org.easymock.tests2.AnswerTest.answer":122,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":184,"org.easymock.tests2.CaptureTest.testAnd":94,"org.easymock.tests2.UsageTest.strictResetToDefault":156,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":36,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":130,"org.easymock.tests2.NameTest.nameForMocksControl":80,"org.easymock.tests2.MockedExceptionTest.testMockedException":135,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":252,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":235,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":141,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":245,"org.easymock.tests2.DelegateToTest.testDelegate":166,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":308,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":53,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":29,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":16,"org.easymock.tests.MockingTest.testNicePartialClassMocking":52,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":319,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":33,"org.easymock.tests2.CaptureTest.testCaptureLast":173,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":219,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":69,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":28,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":241,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":114,"org.easymock.tests.MockingTest.testTwoMocks":50,"org.easymock.tests2.CaptureTest.testCapture1_2446744":170,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":282,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":317,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":312,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":182,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":75,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":118,"org.easymock.tests.UsageThrowableTest.throwError":324,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":195,"org.easymock.samples.ExampleTest.removeNonExistingDocument":339,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":197,"org.easymock.tests.UsageStrictMockTest.differentMethods":83,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":152,"org.easymock.tests2.MockBuilderTest.testCreateMockString":19,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":42,"org.easymock.tests.UsageExpectAndThrowTest.floatType":306,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":255,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":110,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":123,"org.easymock.tests.UsageVerifyTest.twoThrows":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":7,"org.easymock.samples.PartialClassMockTest.testGetArea":63,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":196,"org.easymock.tests.ResultTest.createDelegateResultToString":65,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":277,"org.easymock.samples.ExampleTest.voteAgainstRemoval":336,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":38,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":305,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":41,"org.easymock.tests2.UsageTest.niceToStrict":157,"org.easymock.tests2.UsageConstraintsTest.testNotNull":117,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":331,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":134,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":2,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":13,"org.easymock.tests2.UsageTest.defaultResetToNice":67,"org.easymock.tests2.MockBuilderTest.testCreateMock":17,"org.easymock.samples.ExampleTest.voteAgainstRemovals":333,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":297,"org.easymock.tests.UsageVarargTest.differentLength":270,"org.easymock.tests2.CallbackTest.callback":178,"org.easymock.tests.UsageTest.openCallCountByLastCall":244,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":313,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":142,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":97,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":256,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":247,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":230,"org.easymock.tests.UsageCallCountTest.tooFewCalls":259,"org.easymock.tests.UsageOverloadedMethodTest.overloading":208,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":212,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":108,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":293,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":207,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":26,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":107,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":175,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":250,"org.easymock.tests.UsageThrowableTest.throwCheckedException":328,"org.easymock.tests2.EasyMockSupportClassTest.testAll":5,"org.easymock.tests.MockClassControlTest.testEquals":191,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":57,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":321,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":239,"org.easymock.tests2.CaptureTest.testCaptureAll":168,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":183,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":206,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":27,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":92,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":25,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":202,"org.easymock.tests2.UsageConstraintsTest.testMatches":109,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":180,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":125,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":254,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":193,"org.easymock.tests.ObjectMethodsTest.testHashCode":189,"org.easymock.samples.ExampleTest.voteForRemovals":338,"org.easymock.tests2.NameTest.nameForNiceMock":79,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":154,"org.easymock.tests.UsageVarargTest.allKinds":275,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":227,"org.easymock.tests2.DependencyTest.testInterfaceMocking":120,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":240,"org.easymock.samples.BasicClassMockTest.testPrintContent":60,"org.easymock.samples.ExampleTest.addDocument":337,"org.easymock.tests2.DelegateToTest.testStubDelegate":164,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":330,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":126,"org.easymock.tests2.AnswerTest.stubAnswer":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":220,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":82,"org.easymock.tests2.UsageConstraintsTest.greaterThan":111,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":234,"org.easymock.tests.UsageVarargTest.varargLongAccepted":272,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":39,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":225,"org.easymock.samples.ExampleTest.voteForRemoval":335,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":151,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":300,"org.easymock.tests.UsageExpectAndReturnTest.floatType":284,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":68,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":22,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":34,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":62,"org.easymock.tests.UsageThrowableTest.noUpperLimit":325,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":112,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":49,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":98,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":155,"org.easymock.tests2.SerializationTest.test":167,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":171,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":139,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":326,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":283,"org.easymock.tests2.UsageConstraintsTest.testSame":101,"org.easymock.samples.SupportTest.addDocument":341,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":215,"org.easymock.tests2.CaptureTest.testCaptureFirst":70,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":140,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":162,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":214,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":198,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":289,"org.easymock.tests.GenericTest.testPackageScope":56,"org.easymock.tests2.UsageTest.moreThanOneArgument":73,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":153,"org.easymock.tests2.CaptureTest.testCapture2_2446744":177,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":18,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":274,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":263,"org.easymock.tests2.NameTest.nameForMock":77,"org.easymock.tests.UsageExpectAndReturnTest.longType":285,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":237,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":137,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":322,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":294,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":66,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":115,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":320,"org.easymock.tests2.UsageStrictMockTest.differentMethods":72,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":251,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":286,"org.easymock.tests.UsageCallCountTest.tooManyCalls":264,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":318,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":236,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":258,"org.easymock.tests2.MockedExceptionTest.testRealException":136,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":290,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":309,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":71,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":329,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":229,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":204,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":24,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":257,"org.easymock.tests2.NameTest.nameForStrictMock":78,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":64,"org.easymock.tests2.UsageConstraintsTest.testContains":106,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":9,"org.easymock.tests2.UsageConstraintsTest.testFind":99,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":209,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":1,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":185,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":32,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":221,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":186,"org.easymock.tests.UsageExpectAndReturnTest.object":292,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":4,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":35,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":11,"org.easymock.tests2.UsageStrictMockTest.range":129,"org.easymock.tests2.UsageConstraintsTest.lessThan":119,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":145,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":269,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":190,"org.easymock.tests.UsageTest.exactCallCountByLastCall":246,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":205,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":138,"org.easymock.tests2.CaptureTest.testCaptureRightOne":96,"org.easymock.tests2.UsageConstraintsTest.testOr":102,"org.easymock.tests.UsageRangeTest.combination":233,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":298,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":265,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":30,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":211,"org.easymock.tests.UsageTest.wrongArguments":87,"org.easymock.tests.MockClassControlTest.testHashCode":47,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":43,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":287,"org.easymock.tests2.EasyMockSupportTest.testVerify":149,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":295,"org.easymock.tests.UsageVarargTest.varargShortAccepted":271,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":210,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":262,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":181,"org.easymock.tests2.UsageConstraintsTest.cmpTo":105,"org.easymock.tests.UsageVarargTest.varargCharAccepted":268,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":127,"org.easymock.tests2.UsageTest.openCallCountByLastCall":159,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":160,"org.easymock.tests.DefaultClassInstantiatorTest.object":281,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":0,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":148,"org.easymock.tests2.CaptureTest.testCaptureFromStub":176,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":194,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":12,"org.easymock.tests.UsageTest.unexpectedCallWithArray":243,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":188,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":311,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":327,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":81,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":260,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":296,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":223,"org.easymock.tests2.UsageConstraintsTest.constraints":93,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":37,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":46,"org.easymock.samples.ExampleTest.addAndChangeDocument":340,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":310,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":299,"org.easymock.tests.UsageStrictMockTest.testVerify":226,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":332,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":8,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":45,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":238,"org.easymock.tests2.UsageTest.resumeIfFailure":161,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":172,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":278,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":288,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":54,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":279,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":213,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":266,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":143}}]

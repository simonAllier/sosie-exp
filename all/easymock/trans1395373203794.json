[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[0,1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.RecordState:243","failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:56","sourceCode":"return int","type":"CtReturnImpl"},"failures":[4,90,91,92,93,94,5,6,95,7,8,96,9,97,10,98,12,99,100,101,102,103,104,105,106,107,17,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,19,20,21,22,23,24,25,26,27,127,128,28,29,129,30,31,32,130,33,34,35,36,37,38,39,40,41,42,131,132,133,134,135,136,137,138,139,140,141,142,143,144,43,47,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,49,50,169,170,171,172,173,174,175,51,176,52,53,177,178,179,180,181,182,183,184,185,186,187,188,189,190,0,191,192,193,194,195,196,197,198,199,1,200,2,201,202,203,204,205,206,207,208,209,56,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,57,58,225,226,227,228,59,229,230,60,61,62,63,64,231,232,233,234,235,236,237,238,239,240,241,65,242,243,244,245,246,247,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,248,249,250,251,252,253,254,255,83,256,84,85,257,86,87,88,89],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[258,259,260,106,111,112,115,116,131,132,133,175,51,52,53,233,234,239,240,250,251,252,253,83,84,85],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[4,261,261,262,262,6,95,8,263,264,265,266,267,268,10,12,269,270,271,272,99,273,274,275,106,276,277,278,279,280,281,282,283,284,285,286,287,13,14,15,16,288,17,108,109,110,111,289,112,113,114,115,116,117,118,290,119,121,122,123,124,125,126,291,19,20,21,22,23,24,25,26,27,127,128,28,29,129,30,31,32,130,33,34,35,36,37,38,39,40,41,42,131,132,133,292,293,294,295,296,297,298,299,43,44,45,46,47,145,147,148,300,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,49,50,169,301,170,171,172,302,303,304,305,306,173,175,51,176,52,53,177,307,308,309,310,178,179,180,181,182,183,184,311,185,186,187,188,189,312,313,190,314,0,315,316,191,317,192,318,319,193,194,195,196,320,197,198,321,199,1,322,200,2,201,203,204,323,205,206,207,208,209,56,210,211,212,215,216,221,222,324,223,57,58,225,226,228,59,229,230,325,326,327,328,329,61,330,62,63,331,64,332,231,232,233,234,235,237,238,333,239,240,334,241,65,242,243,244,245,66,67,68,69,70,71,335,72,336,73,74,75,76,77,78,79,80,81,82,248,254,83,256,84,85,257,86,87,88,89],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[337,338],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"failures":[339],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[340,341],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[192,200,204],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[4,90,91,261,261,262,262,10,98,11,12,107,342,19,20,21,293,343,344,190,225,227,329,345,60,346,61,330,62,63,331,64,347,332,65,348,349,350,351,66,67,69,70,71,335,72,336,73,74,75,76,77,78,79,81,82,86,87,88,89],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[193],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[352,353,354,26,28,29,30,130,153,157,158,160,163,52,53,355,84,85],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[4,90,91,261,261,262,262,356,10,98,11,357,358,359,12,360,107,291,361,362,363,364,365,366,367,368,342,19,20,21,369,292,293,294,295,296,297,298,299,343,344,370,371,372,312,313,190,225,227,329,60,346,373,61,330,62,63,374,331,64,332,65,375,66,67,69,70,71,335,72,376,377,336,73,74,75,378,379,76,77,78,79,81,82,380,381,382,86,383,384,87,385,386,387,388,389,390,391,392,393,88,394,395,396,397,398,89,399,400],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","bridgeMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[99,106,118,290,38,39,40,41,42,144,47,145,146,147,148,49,50,175,51,0,315,316,191,317,192,318,319,193,194,401,195,196,320,197,198,321,199,1,322,200,2,201,202,203,204,323,205,402,56,212,213,214,215,216,217,218,219,220,221,222,324,223,224,246,247,72,83],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:52","sourceCode":"new java.util.ArrayList<org.easymock.IMocksControl>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[200],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[403],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:40","sourceCode":"return this.org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[4,261,261,262,262,5,6,95,7,8,9,97,352,404,405,353,354,10,11,12,269,270,271,272,99,273,406,275,104,105,106,107,13,14,15,16,288,17,108,109,18,110,111,289,112,113,114,115,116,117,118,290,407,408,409,119,120,121,122,123,124,125,126,19,20,21,22,23,24,25,26,27,127,128,28,29,129,30,31,32,130,33,34,35,36,37,38,39,40,41,42,131,132,133,139,43,44,45,46,47,145,146,147,148,403,300,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,48,49,50,169,170,171,172,410,411,412,173,175,51,176,52,53,413,54,55,414,415,178,179,180,181,182,183,184,311,185,186,187,188,312,313,190,314,0,315,316,191,317,192,318,319,193,194,195,196,320,197,198,321,199,1,322,200,2,201,203,204,323,205,206,207,208,209,56,210,211,212,213,215,216,219,220,221,222,324,223,224,57,58,225,226,416,228,59,229,417,230,60,61,62,63,331,64,332,231,232,233,234,235,236,237,238,333,239,240,334,241,65,242,418,341,243,244,245,246,247,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,419,248,249,254,83,256,84,85,86,87,88,89],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"control":"control","args":"args","proxy":"proxy","method":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[420,355,421,422,423],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[424,338,425],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[123,124,132],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[258,111,112,115,116,131,132,133,175,51,52,53,233,234,239,240,250,251,252,253,83,84,85],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[199],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[61,348,350,351,73,74],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[426,418,244,245],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","sourceCode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","type":"CtReturnImpl"},"failures":[108,112,115,116,118,119,120,122,123,124,125,126,132,43,47,147,173,175,51,52,53,179,180,181,182,183,184,185,186,187,188,0,315,316,191,317,318,319,193,194,195,320,197,198,321,199,1,322,200,2,201,203,323,205,212,213,214,215,216,217,218,219,221,222,324,223,224,64,234,235,236,239,240,244,248,249,254,83,84,85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[225,427,375,428,429,430,431,432,433,434],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[4,90,91,92,261,262,93,94,5,6,95,7,8,96,9,97,264,265,266,267,268,10,98,12,269,270,271,272,99,273,406,101,102,103,275,104,105,106,107,13,14,15,16,288,17,108,109,110,111,289,112,113,114,115,116,117,118,290,119,120,121,122,123,124,125,126,19,20,21,22,23,24,25,26,27,127,128,28,29,129,30,31,32,130,33,34,35,36,37,38,39,40,41,42,131,132,133,134,135,136,137,138,139,140,141,142,143,144,43,45,46,47,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,49,50,169,170,171,302,303,304,305,306,173,174,175,51,176,52,53,177,178,179,180,181,182,183,184,311,185,186,187,188,189,312,313,190,314,0,315,316,191,317,192,318,319,193,194,195,196,320,197,198,321,199,1,322,200,2,201,202,203,204,323,205,206,207,208,56,210,211,212,213,214,215,216,217,218,219,220,221,222,324,223,224,57,58,225,226,227,228,59,229,230,325,326,327,328,329,60,61,330,62,63,331,64,332,231,232,233,234,235,236,237,238,333,239,240,334,241,65,242,243,244,245,246,247,66,67,68,69,70,71,335,72,336,73,74,75,76,77,78,79,80,81,82,419,248,249,254,255,83,256,84,85,257,86,87,88,89],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[403],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":191,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":110,"org.easymock.tests2.UsageTest.argumentsOrdered":240,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":187,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":236,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":92,"org.easymock.tests2.DelegateToTest.testReturnException":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":270,"org.easymock.tests.MockingTest.testPartialClassMocking":19,"org.easymock.tests.MockClassControlTest.testToString":294,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":18,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":388,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":149,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":87,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":258,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":58,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":429,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":194,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":47,"org.easymock.tests2.UsageTest.wrongArguments":234,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":305,"org.easymock.samples.ExampleTest.answerVsDelegate":95,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":344,"org.easymock.tests2.UsageConstraintsTest.testNull":192,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":69,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":186,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":299,"org.easymock.tests2.CaptureTest.testPrimitive":215,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":148,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":168,"org.easymock.tests.UsageTest.moreThanOneArgument":111,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":68,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":15,"org.easymock.tests.UsageTest.argumentsOrdered":116,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":352,"org.easymock.tests.UsageVarargTest.varargIntAccepted":136,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":38,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":433,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":329,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":330,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":42,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":211,"org.easymock.tests.ReplayStateInvalidUsageTest.times":284,"org.easymock.tests2.AnswerTest.answer":242,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":401,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":422,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":328,"org.easymock.tests2.CaptureTest.testAnd":212,"org.easymock.tests2.UsageTest.strictResetToDefault":232,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":336,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":14,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":182,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":45,"org.easymock.tests2.DelegateToTest.testDelegate":230,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":354,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":164,"org.easymock.tests.LimitationsTest.mockFinalMethod":360,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":99,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":268,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":403,"org.easymock.tests2.CaptureTest.testCapture1_2446744":216,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":162,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":326,"org.easymock.tests.UsageThrowableTest.throwError":119,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":278,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":400,"org.easymock.samples.PartialClassMockTest.testGetArea":4,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":279,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":39,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":389,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":150,"org.easymock.tests2.UsageTest.niceToStrict":235,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":370,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":61,"org.easymock.tests2.MockBuilderTest.testCreateMock":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":396,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":158,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":183,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":409,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":100,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":303,"org.easymock.tests.UsageOverloadedMethodTest.overloading":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":393,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":171,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":198,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":30,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":17,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":197,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":339,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":221,"org.easymock.tests2.EasyMockSupportClassTest.testAll":86,"org.easymock.tests.MockClassControlTest.testEquals":298,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":98,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":166,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":348,"org.easymock.tests2.CaptureTest.testCaptureAll":213,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":266,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":327,"org.easymock.tests2.UsageConstraintsTest.testMatches":321,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":16,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":276,"org.easymock.samples.ExampleTest.voteForRemovals":9,"org.easymock.tests.UsageVarargTest.allKinds":144,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":131,"org.easymock.samples.BasicClassMockTest.testPrintContent":91,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":267,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":125,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":254,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":417,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":273,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":434,"org.easymock.tests2.UsageConstraintsTest.greaterThan":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":383,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":44,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":75,"org.easymock.samples.ExampleTest.voteForRemoval":7,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":366,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":208,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":378,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":335,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":107,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":231,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":374,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":180,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":381,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":269,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":416,"org.easymock.tests2.CaptureTest.testCaptureFirst":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":426,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":181,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":241,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":302,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":128,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":56,"org.easymock.tests2.CaptureTest.testCapture2_2446744":223,"org.easymock.tests2.UsageTest.moreThanOneArgument":233,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":423,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":64,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":143,"org.easymock.tests.GenericTest.testBridgedEquals":357,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":104,"org.easymock.tests.UsageExpectAndReturnTest.longType":25,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":178,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":264,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":167,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":347,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":48,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":202,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":165,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":411,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":13,"org.easymock.tests.UsageCallCountTest.tooManyCalls":105,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":397,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":28,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":154,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":124,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":77,"org.easymock.tests.MockingTest.testNiceClassMocking":369,"org.easymock.tests.MockingTest.testClassMocking":368,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":274,"org.easymock.tests2.UsageConstraintsTest.testContains":320,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":345,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":190,"org.easymock.tests2.UsageConstraintsTest.testFind":317,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":109,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":173,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":247,"org.easymock.tests.UsageExpectAndReturnTest.object":129,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":185,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":430,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":138,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":310,"org.easymock.tests.UsageTest.exactCallCountByLastCall":117,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":118,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":404,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":375,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":34,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":170,"org.easymock.tests.MockClassControlTest.testHashCode":297,"org.easymock.tests2.EasyMockSupportTest.testVerify":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":391,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":405,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":408,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":169,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":325,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":402,"org.easymock.tests.UsageVarargTest.varargCharAccepted":137,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":255,"org.easymock.tests2.UsageTest.openCallCountByLastCall":237,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":188,"org.easymock.tests.DefaultClassInstantiatorTest.object":291,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":407,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":392,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":156,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":122,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":351,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":73,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":296,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":155,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":35,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":89,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":295,"org.easymock.tests2.UsageTest.resumeIfFailure":334,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":343,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":272,"org.easymock.tests2.StubTest.stubWithReturnValue":248,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":427,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":29,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":203,"org.easymock.tests2.SerializationTest.testAllMockedMethod":227,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":414,"org.easymock.samples.SupportTest.voteForRemovals":5,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":356,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":161,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":415,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":418,"org.easymock.tests.UsageExpectAndThrowTest.object":159,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":2,"org.easymock.tests2.DelegateToTest.testWrongClass":229,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":49,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":50,"org.easymock.tests.UsageStrictMockTest.range":52,"org.easymock.samples.ConstructorCalledMockTest.testTax":261,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":311,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":76,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":160,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":62,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":115,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":380,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":304,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":55,"org.easymock.tests2.CaptureTest.testCaptureNone":220,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":424,"org.easymock.tests.UsageUnorderedTest.message":106,"org.easymock.tests.UsageVerifyTest.twoReturns":133,"org.easymock.tests.UsageVarargTest.varargByteAccepted":142,"org.easymock.tests2.ThreadingTest.testThreadSafe":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":394,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":103,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":90,"org.easymock.tests2.CaptureTest.testCapture_2617107":214,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":147,"org.easymock.tests2.UsageConstraintsTest.any":195,"org.easymock.tests2.StubTest.stub":419,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":283,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":412,"org.easymock.tests.UsageExpectAndThrowTest.longType":152,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":271,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":364,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":282,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":256,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":206,"org.easymock.tests2.SerializationTest.testClass":225,"org.easymock.tests.LimitationsTest.mockNativeMethod":12,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":37,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":11,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":350,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":257,"org.easymock.tests2.NameTest.nameForMocksControl":253,"org.easymock.tests2.MockedExceptionTest.testMockedException":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":384,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":114,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":153,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":21,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":66,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":63,"org.easymock.tests.MockingTest.testNicePartialClassMocking":20,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":71,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":428,"org.easymock.tests2.CaptureTest.testCaptureLast":219,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":300,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":82,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":193,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":201,"org.easymock.tests.MockingTest.testTwoMocks":342,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":22,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":157,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":239,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":323,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":425,"org.easymock.samples.ExampleTest.removeNonExistingDocument":263,"org.easymock.tests.UsageStrictMockTest.differentMethods":53,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":280,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":338,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":362,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":209,"org.easymock.tests2.MockBuilderTest.testCreateMockString":332,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":385,"org.easymock.tests.UsageExpectAndThrowTest.floatType":151,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":382,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":243,"org.easymock.tests.UsageVerifyTest.twoThrows":132,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":88,"org.easymock.samples.ExampleTest.voteAgainstRemoval":8,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":413,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":74,"org.easymock.tests.LimitationsTest.privateConstructor":359,"org.easymock.tests2.UsageConstraintsTest.testNotNull":204,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":126,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":312,"org.easymock.tests2.UsageTest.defaultResetToNice":333,"org.easymock.samples.ExampleTest.voteAgainstRemovals":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":421,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":33,"org.easymock.tests.UsageVarargTest.differentLength":139,"org.easymock.tests2.CallbackTest.callback":249,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":376,"org.easymock.tests.UsageTest.openCallCountByLastCall":113,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":146,"org.easymock.tests.UsageCallCountTest.tooFewCalls":101,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":79,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":306,"org.easymock.tests.UsageThrowableTest.throwCheckedException":123,"org.easymock.tests.MockingTest.testStrictClassMocking":367,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":81,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":290,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":78,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":285,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":80,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":245,"org.easymock.tests.ObjectMethodsTest.testHashCode":309,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":432,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":210,"org.easymock.tests2.NameTest.nameForNiceMock":252,"org.easymock.tests2.DependencyTest.testInterfaceMocking":57,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":431,"org.easymock.samples.ExampleTest.addDocument":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":399,"org.easymock.tests2.DelegateToTest.testStubDelegate":59,"org.easymock.tests2.AnswerTest.stubAnswer":244,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":51,"org.easymock.tests.UsageVarargTest.varargLongAccepted":141,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":177,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":36,"org.easymock.tests.UsageExpectAndReturnTest.floatType":24,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":65,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":262,"org.easymock.tests.UsageThrowableTest.noUpperLimit":120,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":322,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":315,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":371,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":217,"org.easymock.tests2.SerializationTest.test":226,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":361,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":23,"org.easymock.tests2.UsageConstraintsTest.testSame":318,"org.easymock.samples.SupportTest.addDocument":94,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":386,"org.easymock.tests.GenericTest.testPackageScope":10,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":353,"org.easymock.tests2.NameTest.nameForMock":250,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":31,"org.easymock.tests2.UsageStrictMockTest.differentMethods":85,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":377,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":26,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":163,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":46,"org.easymock.tests2.MockedExceptionTest.testRealException":314,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":340,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":145,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":287,"org.easymock.tests2.NameTest.nameForStrictMock":251,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":373,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":246,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":70,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":372,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":200,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":259,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":363,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":60,"org.easymock.tests2.UsageStrictMockTest.range":84,"org.easymock.tests2.UsageConstraintsTest.lessThan":205,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":179,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":390,"org.easymock.tests2.CaptureTest.testCaptureRightOne":222,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":337,"org.easymock.tests2.UsageConstraintsTest.testOr":319,"org.easymock.tests.UsageRangeTest.combination":43,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":67,"org.easymock.tests.UsageTest.wrongArguments":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":387,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":293,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":420,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":32,"org.easymock.tests.UsageVarargTest.varargShortAccepted":140,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":365,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":275,"org.easymock.tests2.UsageConstraintsTest.cmpTo":196,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":341,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":238,"org.easymock.tests2.CaptureTest.testCaptureFromStub":324,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":277,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":346,"org.easymock.tests.UsageTest.unexpectedCallWithArray":289,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":175,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":102,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":130,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":176,"org.easymock.tests2.UsageConstraintsTest.constraints":316,"org.easymock.samples.ExampleTest.addAndChangeDocument":97,"org.easymock.tests.UsageStrictMockTest.testVerify":307,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":93,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":174,"org.easymock.tests2.CompareToTest.testGreateThan":3,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":265,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":218,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":40,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":349,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":127,"org.easymock.tests.LimitationsTest.abstractClass":358,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":172,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":41,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":184,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":135,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":260}}]

[{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[10,11,12,13],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[14,15,16,17,18,19],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:61","sourceCode":"final java.lang.Throwable java.lang.Throwable","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[21,22,23,24,25,15,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[46,47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:227","sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,21,101,102,103,104,105,106,107,108,109,22,14,23,110,111,24,25,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,15,26,139,27,28,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,29,30,31,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,35,36,37,38,230,231,232,233,39,40,234,235,236,237,238,41,42,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,43,259,44,45,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,7,289,290,291,11,292,293,12,13,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[322,151,152,153,323],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[324,325,326,327,0,328,329,8,330,331,332],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[50,51,52,53,54,56,57,333,69,89,90,91,92,93,94,95,96,97,98,99,100,334,21,106,23,24,25,137,138,15,26,139,27,28,140,141,156,157,192,193,204,206,207,208,209,210,211,212,213,214,335,336,337,338,339,228,35,36,37,38,40,235,41,42,247,253,254,255,256,257,258,43,259,44,45,260,271,272,284,285,340,309,310,313,314,315,316,321],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1999","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Character>(org.easymock.Capture<java.lang.Character>))","type":"CtInvocationImpl"},"failures":[311],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[79,297],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:116","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[324,325,326,327,0,328,329,8,330,331,332],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"f":"field"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[21,22,23,24,25,15,26,27,28,29,30,31,35,36,37,38,39,40,41,42,43,44,45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:720","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[270],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[291],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[292],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[341],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[342,193],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[343,344,345,342,346,347,10,322,348,349,350,351,352,353,354,355,356,357,358,359,360,361],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[264],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[281],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"mock"}},{"transplant":{"position":"org.easymock.internal.MocksControl:223","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[362,363],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[14,15,16,17,18,19],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[58,61,21,22,14,23,24,25,15,26,27,28,145,148,149,150,154,29,30,31,39,40,41,42,43,44,45,364,289,298],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[14,15,16,17,18,19],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":264,"org.easymock.tests2.UsageTest.argumentsOrdered":42,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":109,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":254,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":299,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":350,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":235,"org.easymock.tests2.StubTest.stubWithReturnValue":229,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":0,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":285,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":214,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":169,"org.easymock.tests2.SerializationTest.testAllMockedMethod":340,"org.easymock.tests2.DelegateToTest.testReturnException":303,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":84,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":48,"org.easymock.samples.SupportTest.voteForRemovals":213,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":19,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":362,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":341,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":358,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":128,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":49,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":116,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":11,"org.easymock.tests.UsageExpectAndThrowTest.object":126,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":32,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":282,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":231,"org.easymock.tests2.DelegateToTest.testWrongClass":305,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":2,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":142,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":143,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":270,"org.easymock.tests2.UsageTest.wrongArguments":40,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":190,"org.easymock.tests.UsageStrictMockTest.range":27,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":64,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":364,"org.easymock.samples.ExampleTest.answerVsDelegate":205,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":251,"org.easymock.tests2.UsageConstraintsTest.testNull":266,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":127,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":253,"org.easymock.tests2.CaptureTest.testPrimitive":311,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":194,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":323,"org.easymock.tests.UsageTest.moreThanOneArgument":22,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":135,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":242,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":63,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":198,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":16,"org.easymock.tests2.CaptureTest.testCaptureNone":316,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":108,"org.easymock.tests.UsageUnorderedTest.message":21,"org.easymock.tests.UsageVerifyTest.twoReturns":31,"org.easymock.tests.UsageVarargTest.varargByteAccepted":97,"org.easymock.tests2.ThreadingTest.testThreadSafe":217,"org.easymock.tests.UsageTest.argumentsOrdered":25,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":155,"org.easymock.tests.UsageVarargTest.varargIntAccepted":91,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":54,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":335,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":216,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":355,"org.easymock.tests2.CaptureTest.testCapture_2617107":310,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":359,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":193,"org.easymock.tests2.UsageConstraintsTest.any":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":345,"org.easymock.tests2.StubTest.stub":228,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":153,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":360,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":85,"org.easymock.tests.UsageExpectAndThrowTest.longType":119,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":46,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":259,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":298,"org.easymock.tests2.SerializationTest.testClass":9,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":289,"org.easymock.tests2.AnswerTest.answer":291,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":179,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":356,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":225,"org.easymock.tests2.CaptureTest.testAnd":308,"org.easymock.tests2.UsageTest.strictResetToDefault":233,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":327,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":260,"org.easymock.tests2.NameTest.nameForMocksControl":38,"org.easymock.tests2.MockedExceptionTest.testMockedException":295,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":197,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":248,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":182,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":111,"org.easymock.tests2.DelegateToTest.testDelegate":307,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":159,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":120,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":241,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":131,"org.easymock.tests2.CaptureTest.testCaptureLast":315,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":87,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":150,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":331,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":269,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":283,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":105,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":149,"org.easymock.tests2.CaptureTest.testCapture1_2446744":312,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":332,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":160,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":129,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":223,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":124,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":41,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":287,"org.easymock.tests.UsageThrowableTest.throwError":68,"org.easymock.tests.UsageStrictMockTest.differentMethods":28,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":59,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":219,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":195,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":200,"org.easymock.tests.UsageExpectAndThrowTest.floatType":118,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":278,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":293,"org.easymock.tests.UsageVerifyTest.twoThrows":30,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":77,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":324,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":185,"org.easymock.samples.ExampleTest.voteAgainstRemoval":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":351,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":106,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":107,"org.easymock.tests2.UsageTest.niceToStrict":234,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":117,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":325,"org.easymock.tests2.UsageConstraintsTest.testNotNull":286,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":294,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":343,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":20,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":338,"org.easymock.tests2.UsageTest.defaultResetToNice":238,"org.easymock.samples.ExampleTest.voteAgainstRemovals":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":352,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":175,"org.easymock.tests.UsageVarargTest.differentLength":94,"org.easymock.tests2.CallbackTest.callback":243,"org.easymock.tests.UsageTest.openCallCountByLastCall":110,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":18,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":125,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":249,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":261,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":115,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":50,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":192,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":62,"org.easymock.tests.UsageCallCountTest.tooFewCalls":52,"org.easymock.tests.UsageOverloadedMethodTest.overloading":202,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":276,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":79,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":201,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":171,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":275,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":317,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":65,"org.easymock.tests.UsageThrowableTest.throwCheckedException":72,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":334,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":17,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":133,"org.easymock.tests2.CaptureTest.testCaptureAll":309,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":224,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":103,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":67,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":330,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":290,"org.easymock.tests.MockNameTest.defaultName":154,"org.easymock.tests2.UsageConstraintsTest.testMatches":277,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":301,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":13,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":199,"org.easymock.tests.ObjectMethodsTest.testHashCode":146,"org.easymock.samples.ExampleTest.voteForRemovals":209,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":221,"org.easymock.tests2.NameTest.nameForNiceMock":37,"org.easymock.tests.UsageVarargTest.allKinds":99,"org.easymock.tests2.DependencyTest.testInterfaceMocking":230,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":29,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":4,"org.easymock.samples.BasicClassMockTest.testPrintContent":336,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":104,"org.easymock.samples.ExampleTest.addDocument":208,"org.easymock.tests2.DelegateToTest.testStubDelegate":304,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":74,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":257,"org.easymock.tests2.AnswerTest.stubAnswer":12,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":306,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":88,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":26,"org.easymock.tests2.UsageConstraintsTest.greaterThan":279,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":6,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":181,"org.easymock.tests.UsageVarargTest.varargLongAccepted":96,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":140,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":349,"org.easymock.samples.ExampleTest.voteForRemoval":206,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":218,"org.easymock.tests.UsageExpectAndReturnTest.floatType":162,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":178,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":60,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":7,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":280,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":80,"org.easymock.tests.UsageThrowableTest.noUpperLimit":69,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":333,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":262,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":232,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":313,"org.easymock.tests2.SerializationTest.test":300,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":322,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":47,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":246,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":70,"org.easymock.tests2.UsageConstraintsTest.testSame":267,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":161,"org.easymock.samples.SupportTest.addDocument":212,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":83,"org.easymock.tests2.CaptureTest.testCaptureFirst":321,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":302,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":10,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":247,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":240,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":82,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":167,"org.easymock.tests.GenericTest.testPackageScope":100,"org.easymock.tests2.CaptureTest.testCapture2_2446744":320,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":220,"org.easymock.tests2.UsageTest.moreThanOneArgument":39,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":357,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":346,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":98,"org.easymock.tests.GenericTest.testBridgedEquals":363,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":56,"org.easymock.tests2.NameTest.nameForMock":35,"org.easymock.tests.UsageExpectAndReturnTest.longType":163,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":244,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":101,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":134,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":172,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":284,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":189,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":329,"org.easymock.tests2.UsageStrictMockTest.differentMethods":45,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":132,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":196,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":152,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":164,"org.easymock.tests.UsageCallCountTest.tooManyCalls":57,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":130,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":144,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":183,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":51,"org.easymock.tests2.MockedExceptionTest.testRealException":297,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":61,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":353,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":43,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":121,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":73,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":191,"org.easymock.tests2.UsageConstraintsTest.testContains":274,"org.easymock.tests2.NameTest.nameForStrictMock":36,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":296,"org.easymock.tests2.UsageConstraintsTest.testFind":265,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":203,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":226,"org.easymock.tests.MockTypeTest.fromEasyMockClass":58,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":227,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":137,"org.easymock.tests.UsageExpectAndReturnTest.object":170,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":281,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":33,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":337,"org.easymock.tests2.UsageStrictMockTest.range":44,"org.easymock.tests2.UsageConstraintsTest.lessThan":288,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":252,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":93,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":3,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":147,"org.easymock.tests.UsageTest.exactCallCountByLastCall":112,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":348,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":245,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":5,"org.easymock.tests2.CaptureTest.testCaptureRightOne":318,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":156,"org.easymock.tests2.UsageConstraintsTest.testOr":268,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":8,"org.easymock.tests.UsageRangeTest.combination":180,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":89,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":176,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":78,"org.easymock.tests.UsageTest.wrongArguments":23,"org.easymock.tests2.MockBuilderTest.testWithConstructor":326,"org.easymock.tests2.EasyMockSupportTest.testVerify":256,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":344,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":173,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":157,"org.easymock.tests.UsageVarargTest.varargShortAccepted":95,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":76,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":114,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":222,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":55,"org.easymock.tests2.UsageConstraintsTest.cmpTo":273,"org.easymock.tests.UsageVarargTest.varargCharAccepted":92,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_Found":215,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":292,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":342,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":361,"org.easymock.tests2.UsageTest.openCallCountByLastCall":236,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":237,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":255,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":113,"org.easymock.tests2.CaptureTest.testCaptureFromStub":319,"org.easymock.tests.UsageTest.unexpectedCallWithArray":14,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":145,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":123,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":71,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":15,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":53,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":328,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":174,"org.easymock.tests2.UsageConstraintsTest.constraints":263,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":139,"org.easymock.samples.ExampleTest.addAndChangeDocument":210,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":122,"org.easymock.tests.UsageStrictMockTest.testVerify":141,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":177,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":151,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":211,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":138,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":102,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":314,"org.easymock.tests2.UsageTest.resumeIfFailure":239,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":186,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":166,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":81,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":187,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":250,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":90,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":34}}]

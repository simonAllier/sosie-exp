[{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,0,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,1,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,2,452],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[453,45],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[29,34],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[3,454,60,63,65,66,68,455,69,90,95,96,456,457,458,280,283,389],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[0,1,2],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"failures":[459],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[344,348],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[32,37,47,52],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[29,34,37],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.MockBuilder:218","failures":[3,460,461,186,191],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[458,211,212],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Find:41","sourceCode":"java.lang.StringBuffer.append(((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[462],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ErrorMessage:51","failures":[208,463,429,430,447],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[124,130,131,208,464,302,303,306,307,329,429,430,444,447],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[3,460,460,461,461,13,14,465,59,60,61,63,64,65,66,67,68,69,84,85,87,88,89,90,92,94,95,96,97,99,107,164,165,466,166,467,468,184,186,191,197,458,212,258,469,470,471,280,283,309,345,346,347,348,388,389,390,391,392,393,394,395,398,421],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[3,460,460,461,461,465,60,63,65,66,68,84,86,87,89,103,154,164,165,466,166,167,467,468,184,186,191,197,202,236,237,238,239,240,244,245,251,252,253,254,255,469,470,471,275,276,278,398,409,410,413,440,441],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[3,4,6,7,9,17,465,26,27,28,29,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,60,63,65,66,68,70,71,73,74,77,78,79,80,82,83,84,85,86,87,88,89,92,95,96,97,100,101,102,103,104,107,114,121,122,123,125,127,128,129,132,133,136,137,145,154,163,164,165,466,166,167,467,468,169,170,171,172,173,174,175,176,177,178,179,180,184,186,191,197,202,206,208,209,458,211,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,469,470,471,291,296,297,298,299,300,301,304,305,308,333,336,338,339,340,341,342,343,345,347,349,350,351,361,363,372,373,375,398,400,401,404,409,410,411,412,413,1,428,430,440,441,445,447,448,2,452],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:642","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[465,472,19],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:178","failures":[66],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[105,106,107,108,121,128,163,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,289,300,305,334,338,342,343,351,402,403,422,423,424,425,426,427],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:42","sourceCode":"if (org.easymock.internal.IMocksBehavior.isThreadSafe()) {\n    java.util.concurrent.locks.ReentrantLock.lock();\n    try {\n        return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n    } finally {\n        java.util.concurrent.locks.ReentrantLock.unlock();\n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:160","sourceCode":"if (boolean) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[121,133,198,206,308,338,429,430,445],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[287,290,293,294],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:642","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[38,333],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[473],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[28,29,32,34,35,37,47,52,70,72,80],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:227","sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[3,460,460,461,461,4,5,6,7,8,9,10,11,12,13,14,15,16,17,465,472,474,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,475,59,476,454,60,61,477,62,63,64,65,478,66,479,67,68,480,481,455,482,69,483,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,484,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,466,166,167,467,468,169,170,171,172,173,174,175,176,177,178,179,180,181,485,486,487,488,489,490,491,492,493,456,457,494,495,496,497,498,182,183,499,184,500,185,186,187,188,501,502,189,503,504,190,505,191,192,193,194,195,196,197,506,507,198,199,200,201,202,203,204,205,206,207,208,209,210,458,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,469,470,259,471,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,0,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,1,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,2,452],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[4,5,6,7,8,9,11,12,13,14,15,16,17,23,25,26,27,28,29,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,97,100,101,102,103,104,105,106,107,108,114,121,122,123,124,125,126,127,128,130,131,132,133,136,137,138,145,153,154,155,157,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,184,198,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,275,276,277,278,279,286,288,289,296,298,299,300,301,303,304,305,306,307,308,309,311,312,329,333,334,336,337,338,339,340,341,342,343,345,346,348,349,350,351,376,377,378,380,381,382,383,384,385,386,387,394,395,398,400,401,402,403,404,409,410,411,412,413,416,419,422,423,424,425,426,427,428,429,430,433,434,435,436,438,439,440,441,442,443,444,445,446,447,448,449,450],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[3,454,60,63,65,66,68,455,69,90,95,96,456,457,458,280,283,389],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.internal.matchers.Any:40","sourceCode":"java.lang.StringBuffer.append(\"<any>\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[508,509,510,511,512,513,123,206,208,209,293,294,514,515,464,301,329,428,429,430,445,447,448],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[152,156],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[459,453,516,517,518,26,28,42,45,54],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[4,6,7,9,17,411],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[458,211,212,519],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:160","sourceCode":"if (boolean) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[121,133,198,206,308,338,429,430,445],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"position":"org.easymock.internal.Range:70","failures":[208,209,447,448],"status":-1,"binaryOperator":"(\"between \" + (int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[199,202,203,358],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.Range:36","failures":[3,460,461,4,5,6,7,8,9,10,11,12,13,14,15,16,17,465,472,474,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,476,60,61,477,62,63,64,65,478,66,520,479,67,68,481,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,484,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,521,522,523,159,160,161,162,163,164,165,466,166,524,167,467,468,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,499,184,500,185,186,187,188,501,502,189,503,504,190,505,191,192,193,194,195,196,197,506,507,198,199,200,201,202,203,204,205,206,207,208,209,210,458,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,525,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,469,470,259,471,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,526,527,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,0,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,1,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,2,452],"status":-1,"binaryOperator":"(int <= int)","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":29,"org.easymock.tests2.UsageTest.argumentsOrdered":131,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":300,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":179,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":115,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":362,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":126,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":12,"org.easymock.tests2.DelegateToTest.testReturnException":153,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":423,"org.easymock.tests.MockingTest.testPartialClassMocking":469,"org.easymock.tests.MockClassControlTest.testToString":390,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":18,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":1,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":502,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":186,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":213,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":137,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":486,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":400,"org.easymock.tests2.UsageTest.wrongArguments":124,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":151,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":407,"org.easymock.samples.ExampleTest.answerVsDelegate":5,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":283,"org.easymock.tests2.UsageConstraintsTest.testNull":32,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":261,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":87,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":395,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":178,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":488,"org.easymock.tests2.CaptureTest.testPrimitive":73,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":404,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":232,"org.easymock.tests.UsageTest.moreThanOneArgument":301,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":86,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":277,"org.easymock.tests.UsageTest.argumentsOrdered":307,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":310,"org.easymock.tests.UsageVarargTest.varargIntAccepted":378,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":495,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":367,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":409,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":496,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":59,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":522,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":119,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":64,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":354,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":413,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":145,"org.easymock.tests.ReplayStateInvalidUsageTest.times":271,"org.easymock.tests2.DependencyTest.testClassMocking":134,"org.easymock.tests2.AnswerTest.answer":198,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":369,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":58,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":527,"org.easymock.tests2.CaptureTest.testAnd":70,"org.easymock.tests2.UsageTest.strictResetToDefault":122,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":477,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":94,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":276,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":173,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":298,"org.easymock.tests2.DelegateToTest.testDelegate":157,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":314,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":228,"org.easymock.tests.LimitationsTest.mockFinalMethod":399,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":426,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":319,"org.easymock.tests2.DependencyTest.testClassMockingSupport":135,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":293,"org.easymock.tests2.CaptureTest.testCapture1_2446744":74,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":91,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":226,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":56,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":265,"org.easymock.tests.UsageThrowableTest.throwError":336,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":282,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":525,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":120,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":507,"org.easymock.samples.PartialClassMockTest.testGetArea":3,"org.easymock.tests.MockingTest.testInterfaceMocking":259,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":266,"org.easymock.tests2.CompareToTest.testLessOrEqual":518,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":410,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":2,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":421,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":189,"org.easymock.tests2.UsageTest.niceToStrict":125,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":352,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":63,"org.easymock.tests2.MockBuilderTest.testCreateMock":67,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":194,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":148,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":509,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":222,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":174,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":526,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":332,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":431,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":405,"org.easymock.tests.UsageOverloadedMethodTest.overloading":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":505,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":196,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":42,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":289,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":247,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":349,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":41,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":79,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":379,"org.easymock.tests.MockClassControlTest.testEquals":394,"org.easymock.tests2.EasyMockSupportClassTest.testAll":184,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":346,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":230,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":489,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":57,"org.easymock.tests2.CaptureTest.testCaptureAll":71,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":317,"org.easymock.tests.MockNameTest.defaultName":335,"org.easymock.tests2.UsageConstraintsTest.testMatches":43,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":263,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":278,"org.easymock.samples.ExampleTest.voteForRemovals":9,"org.easymock.tests.UsageVarargTest.allKinds":387,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":428,"org.easymock.samples.BasicClassMockTest.testPrintContent":14,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":318,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":342,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":204,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":427,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":156,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":116,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":497,"org.easymock.tests2.UsageConstraintsTest.greaterThan":45,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":500,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":297,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":97,"org.easymock.samples.ExampleTest.voteForRemoval":6,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":328,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":101,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":98,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":480,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":284,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":523,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":90,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":121,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":309,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":359,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":171,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":422,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":152,"org.easymock.tests2.CaptureTest.testCaptureFirst":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":358,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":172,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":133,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":292,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":243,"org.easymock.tests2.UsageTest.moreThanOneArgument":123,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":103,"org.easymock.tests2.CaptureTest.testCapture2_2446744":82,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":68,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":370,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":386,"org.easymock.tests.GenericTest.testBridgedEquals":348,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":438,"org.easymock.tests.UsageExpectAndReturnTest.longType":239,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":169,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":315,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":455,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":231,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":0,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":50,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":229,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":234,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":275,"org.easymock.tests.UsageCallCountTest.tooManyCalls":439,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":433,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":195,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":244,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":150,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":218,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":341,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":165,"org.easymock.tests.MockingTest.testNiceClassMocking":262,"org.easymock.tests.MockingTest.testClassMocking":257,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":454,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":432,"org.easymock.tests2.UsageConstraintsTest.testContains":40,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":107,"org.easymock.tests2.UsageConstraintsTest.testFind":31,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":351,"org.easymock.tests.MockTypeTest.fromEasyMockClass":281,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":442,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":25,"org.easymock.tests.UsageExpectAndReturnTest.object":246,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":92,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":149,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":490,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":381,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":419,"org.easymock.tests.UsageTest.exactCallCountByLastCall":308,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":357,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":414,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":311,"org.easymock.tests2.ConstraintsToStringTest.findToString":462,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":472,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":252,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":376,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":288,"org.easymock.tests.MockClassControlTest.testHashCode":393,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":110,"org.easymock.tests2.EasyMockSupportTest.testVerify":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":504,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":312,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":286,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":331,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":55,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":139,"org.easymock.tests.UsageVarargTest.varargCharAccepted":380,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_Found":487,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":320,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":375,"org.easymock.tests2.UsageTest.openCallCountByLastCall":127,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":180,"org.easymock.tests.DefaultClassInstantiatorTest.object":321,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":330,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":417,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":464,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":190,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":220,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":498,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":339,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":143,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":109,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":392,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":95,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":219,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":253,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":233,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":511,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":197,"org.easymock.tests2.UsageTest.resumeIfFailure":132,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":280,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":521,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":425,"org.easymock.tests2.StubTest.stubWithReturnValue":163,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":478,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":51,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":245,"org.easymock.tests2.SerializationTest.testAllMockedMethod":212,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":368,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":483,"org.easymock.samples.SupportTest.voteForRemovals":17,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":344,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":225,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":519,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":374,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":199,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":415,"org.easymock.tests.UsageExpectAndThrowTest.object":223,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":48,"org.easymock.tests2.DelegateToTest.testWrongClass":155,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":440,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":441,"org.easymock.samples.ConstructorCalledMockTest.testTax":460,"org.easymock.tests.UsageStrictMockTest.range":447,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":160,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":176,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":164,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":224,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":182,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":273,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":306,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":406,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":452,"org.easymock.tests2.CaptureTest.testCaptureNone":78,"org.easymock.tests.UsageUnorderedTest.message":329,"org.easymock.tests.UsageVerifyTest.twoReturns":430,"org.easymock.tests.UsageVarargTest.varargByteAccepted":385,"org.easymock.tests2.ThreadingTest.testThreadSafe":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":192,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":436,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":420,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":13,"org.easymock.tests2.CaptureTest.testCapture_2617107":72,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":295,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":403,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":372,"org.easymock.tests2.UsageConstraintsTest.any":38,"org.easymock.tests2.StubTest.stub":162,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":270,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":235,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":424,"org.easymock.tests.UsageExpectAndThrowTest.longType":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":373,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":325,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":269,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":207,"org.easymock.tests2.SerializationTest.testClass":458,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":114,"org.easymock.tests.LimitationsTest.mockNativeMethod":398,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":255,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":347,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":457,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":142,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":210,"org.easymock.tests2.NameTest.nameForMocksControl":22,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":144,"org.easymock.tests2.MockedExceptionTest.testMockedException":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":185,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":305,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":471,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":24,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":217,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":84,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":66,"org.easymock.tests.MockingTest.testNicePartialClassMocking":470,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":89,"org.easymock.tests2.CompareToTest.testCompareEqual":516,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":485,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":140,"org.easymock.tests2.CaptureTest.testCaptureLast":77,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":294,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":468,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":35,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":49,"org.easymock.tests.MockingTest.testTwoMocks":258,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":168,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":236,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":221,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":130,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":53,"org.easymock.samples.ExampleTest.removeNonExistingDocument":10,"org.easymock.tests.UsageStrictMockTest.differentMethods":448,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":147,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":267,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":111,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":323,"org.easymock.tests2.ConstraintsToStringTest.andToString":512,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":102,"org.easymock.tests2.MockBuilderTest.testCreateMockString":69,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":187,"org.easymock.tests.UsageExpectAndThrowTest.floatType":215,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":499,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":201,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":474,"org.easymock.tests.UsageVerifyTest.twoThrows":429,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":191,"org.easymock.samples.ExampleTest.voteAgainstRemoval":7,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":363,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":96,"org.easymock.tests.LimitationsTest.privateConstructor":397,"org.easymock.tests2.UsageConstraintsTest.testNotNull":52,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":105,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":343,"org.easymock.tests2.UsageTest.defaultResetToNice":129,"org.easymock.samples.ExampleTest.voteAgainstRemovals":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":364,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":141,"org.easymock.tests.UsageVarargTest.differentLength":382,"org.easymock.tests2.CallbackTest.callback":138,"org.easymock.tests2.UsageConstraintsTest.equals":30,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":484,"org.easymock.tests.UsageTest.openCallCountByLastCall":304,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":26,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":402,"org.easymock.tests.UsageCallCountTest.tooFewCalls":434,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":166,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":408,"org.easymock.tests.UsageThrowableTest.throwCheckedException":340,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":514,"org.easymock.tests.MockingTest.testStrictClassMocking":256,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":467,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":334,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":466,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":146,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":272,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":167,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":203,"org.easymock.tests2.CompareToTest.testGreateOrEqual":517,"org.easymock.tests.ObjectMethodsTest.testHashCode":418,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":494,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":104,"org.easymock.tests2.NameTest.nameForNiceMock":21,"org.easymock.tests2.DependencyTest.testInterfaceMocking":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":491,"org.easymock.samples.ExampleTest.addDocument":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":506,"org.easymock.tests2.DelegateToTest.testStubDelegate":154,"org.easymock.tests2.AnswerTest.stubAnswer":202,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":445,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":520,"org.easymock.tests.UsageVarargTest.varargLongAccepted":384,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":449,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":361,"org.easymock.tests.UsageExpectAndReturnTest.floatType":238,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":254,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":465,"org.easymock.tests2.ConstraintsToStringTest.orToString":508,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":461,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":118,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":46,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":290,"org.easymock.tests.UsageThrowableTest.noUpperLimit":337,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":27,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":158,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":75,"org.easymock.tests2.SerializationTest.test":211,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":473,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":322,"org.easymock.tests2.UsageConstraintsTest.testSame":33,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":237,"org.easymock.samples.SupportTest.addDocument":16,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":524,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":188,"org.easymock.tests.GenericTest.testPackageScope":345,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":356,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":117,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":260,"org.easymock.tests2.NameTest.nameForMock":19,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":248,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":481,"org.easymock.tests2.UsageStrictMockTest.differentMethods":209,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":93,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":240,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":227,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":416,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":299,"org.easymock.tests2.MockedExceptionTest.testRealException":108,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":285,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":366,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":515,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":482,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":365,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":401,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":274,"org.easymock.tests2.NameTest.nameForStrictMock":20,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":62,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":23,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":88,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":159,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":47,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":324,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":60,"org.easymock.tests2.UsageStrictMockTest.range":208,"org.easymock.tests2.UsageConstraintsTest.lessThan":54,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":493,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":113,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":475,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":492,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":503,"org.easymock.tests2.CaptureTest.testCaptureRightOne":80,"org.easymock.tests2.UsageConstraintsTest.testOr":34,"org.easymock.tests.UsageRangeTest.combination":296,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":85,"org.easymock.tests.UsageTest.wrongArguments":303,"org.easymock.tests2.MockBuilderTest.testWithConstructor":476,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":501,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":389,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":241,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":249,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":353,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":326,"org.easymock.tests.UsageVarargTest.varargShortAccepted":383,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":437,"org.easymock.tests2.UsageConstraintsTest.cmpTo":39,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":200,"org.easymock.tests2.CompareToTest.testLessThan":459,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":355,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":128,"org.easymock.tests2.CaptureTest.testCaptureFromStub":81,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":264,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":61,"org.easymock.tests.UsageTest.unexpectedCallWithArray":302,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":444,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":435,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":250,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":446,"org.easymock.tests2.UsageConstraintsTest.constraints":28,"org.easymock.samples.ExampleTest.addAndChangeDocument":11,"org.easymock.tests2.ConstraintsToStringTest.notToString":510,"org.easymock.tests.UsageStrictMockTest.testVerify":450,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":15,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":443,"org.easymock.tests2.CompareToTest.testGreateThan":453,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":316,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":76,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":456,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":411,"org.easymock.tests.LimitationsTest.abstractClass":396,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":242,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":412,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":291,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":463,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":175,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":377}}]

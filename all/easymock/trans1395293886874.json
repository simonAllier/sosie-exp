[{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"position":"org.easymock.internal.RecordState:136","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,35,35],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:30","sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:772","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1620","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[1,51,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,35,35],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:49","sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[52],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","threadSafe":"shouldBeUsedInOneThread","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:612","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1999","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Character>(org.easymock.Capture<java.lang.Character>))","type":"CtInvocationImpl"},"failures":[53],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[54],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[55,56],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[57,58,59],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:196","sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:70","sourceCode":"java.io.InputStream.close()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:65","sourceCode":"java.util.Properties.load(java.io.InputStream)","type":"CtInvocationImpl"},"failures":[60,61,62,63],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"in":"in"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1927","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","type":"CtInvocationImpl"},"failures":[53],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[64,65,66,67,68,69,70,71,72],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:112","sourceCode":"if (!(org.easymock.Capture<T>.hasCaptured())) {\n    this.java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[73,74,75,76,77,78,79],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values","value":"value","this":"this"}},{"position":"org.easymock.internal.Range:36","failures":[80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,0,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,74,150,53,151,152,153,75,76,77,154,1,78,155,156,157,158,159,160,161,162,163,164,64,165,166,65,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,51,184,185,186,36,187,188,189,190,191,37,38,192,193,2,3,194,195,196,4,5,6,7,197,198,199,200,201,8,202,9,10,203,11,12,204,205,206,207,208,13,14,15,209,210,211,212,213,214,215,216,217,218,219,220,16,221,39,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,70,259,260,71,72,261,262,263,264,265,266,267,268,269,270,271,272,55,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,54,334,335,336,337,17,18,19,20,21,338,339,340,341,342,343,344,345,346,347,348,41,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,22,388,23,24,25,26,27,389,56,390,391,392,393,42,43,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,44,431,432,433,434,435,436,28,29,437,438,439,440,441,442,443,444,445,446,447,45,46,448,449,47,48,450,451,452,453,454,455,456,457,458,459,460,461,462,463,49,30,464,50,465,466,467,468,469,470,471,472,473,31,32,474,475,33,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,34,35,498,499,500,501,502],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:92","sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","type":"CtForEachImpl"},"failures":[81,82,83,84,94,101,102,103,104,105,106,109,113,0,114,117,118,119,120,121,122,123,125,126,127,128,129,130,133,134,135,136,137,140,143,147,148,149,74,150,53,152,153,75,76,77,154,155,158,162,164,165,168,176,183,51,184,185,186,36,187,188,37,38,192,193,2,3,194,195,4,5,6,7,197,198,200,201,8,202,9,10,203,11,12,204,205,206,208,13,14,15,210,211,212,213,215,216,217,219,220,16,221,39,222,223,224,226,237,240,250,256,70,259,260,71,262,264,265,268,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,17,18,19,20,21,41,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,380,381,382,383,384,385,386,387,22,393,42,43,412,413,420,421,422,423,430,435,28,29,437,439,440,441,442,444,445,446,447,46,47,48,450,454,455,457,461,462,463,49,30,464,50,465,466,31,32,474,475,33,486,487,488,489,490,491,492,493,495,496,497,498,499,500,501,502],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[70,259,260,503],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,0,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,74,150,53,151,152,153,75,76,77,154,1,78,155,156,157,158,159,160,161,162,163,164,64,165,166,65,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,51,184,185,186,36,187,188,189,190,191,37,38,192,193,2,3,194,195,196,4,5,6,7,197,198,199,200,201,8,202,9,10,203,11,12,204,205,206,207,208,13,14,15,209,210,211,212,213,214,215,216,217,218,219,220,16,221,39,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,70,259,260,71,72,261,262,263,264,265,266,267,268,269,270,271,272,55,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,54,334,335,336,337,17,18,19,20,21,338,339,340,341,342,343,344,345,346,347,348,41,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,22,388,23,24,25,26,27,389,56,390,391,392,393,42,43,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,44,431,432,433,434,435,436,28,29,437,438,439,440,441,442,443,444,445,446,447,45,46,448,449,47,48,450,451,452,453,454,455,456,457,458,459,460,461,462,463,49,30,464,50,465,466,467,468,469,470,471,472,473,31,32,474,475,33,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,34,35,498,499,500,501,502],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:288","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"failMessage","key":"failMessage"}},{"position":"org.easymock.internal.MockBuilder:218","failures":[110,0,116,162,166,65,167,170,240,250,70,71,72,54,336,34,35,498],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,0,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,74,150,53,151,152,153,75,76,77,154,1,78,155,156,157,158,159,160,161,162,163,164,64,165,166,65,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,51,184,185,186,36,187,188,189,190,191,37,38,192,193,2,3,194,195,196,4,5,6,7,197,198,199,200,201,8,202,9,10,203,11,12,204,205,206,207,208,13,14,15,209,210,211,212,213,214,215,216,217,218,219,220,16,221,39,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,70,259,260,71,72,261,262,263,264,265,266,267,268,269,270,271,272,55,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,54,334,335,336,337,17,18,19,20,21,338,339,340,341,342,343,344,345,346,347,348,41,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,22,388,23,24,25,26,27,389,56,390,391,392,393,42,43,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,44,431,432,433,434,435,436,28,29,437,438,439,440,441,442,443,444,445,446,447,45,46,448,449,47,48,450,451,452,453,454,455,456,457,458,459,460,461,462,463,49,30,464,50,465,466,467,468,469,470,471,472,473,31,32,474,475,33,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,34,35,498,499,500,501,502],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[109,139,149,74,150,53,151,152,153,75,76,77,154,1,78,155,2,3,194,195,4,5,6,7,197,198,199,200,201,8,202,9,10,203,11,12,204,205,206,207,208,13,14,15,209,16,224,226,17,18,19,20,21,41,387,22,388,435,28,29,49,30,31,32,474,475,33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","sourceCode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","type":"CtReturnImpl"},"failures":[94,101,102,103,104,105,106,109,0,117,118,119,120,121,122,123,125,126,127,128,129,130,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,74,150,53,151,152,153,75,76,77,154,1,78,155,162,164,165,176,183,51,184,185,186,187,188,189,190,192,193,2,3,194,195,4,5,6,7,197,198,200,201,8,202,9,10,203,11,12,204,205,206,207,208,13,14,15,210,211,212,213,215,216,217,220,16,221,39,222,223,224,226,237,240,250,256,70,259,260,71,262,264,265,266,268,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,17,18,19,20,21,41,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,380,381,383,384,385,386,387,22,388,23,24,25,26,27,393,42,43,411,412,413,414,415,416,417,418,420,422,423,425,427,428,431,432,433,434,435,436,28,29,439,440,441,442,444,445,446,447,448,449,450,454,455,457,461,463,30,464,50,465,466,31,32,474,475,33,485,486,487,488,489,490,491,492,493,495,496,497,34,35,498,499,500,501,502],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:52","sourceCode":"java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[54],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","type":"CtReturnImpl"},"failures":[81,82,83,84,186,36,37,38,16,39,222,41,393,42,43,430,447,46,47,48,49,30,50,465],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[391],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[94,101,102,103,104,105,106,109,113,0,114,117,118,119,120,121,122,123,124,125,126,127,128,130,134,136,137,138,139,140,143,147,148,149,74,53,151,75,76,77,154,78,155,158,162,164,165,168,176,51,184,185,186,187,189,190,191,192,193,2,3,194,195,4,5,6,7,197,198,200,201,8,202,9,10,203,11,12,204,205,206,208,13,14,15,210,211,212,213,215,216,217,16,39,222,237,240,250,256,70,259,71,265,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,336,17,18,19,20,21,347,348,22,393,43,411,413,414,415,416,417,418,420,421,422,423,430,28,29,446,447,448,449,450,454,455,457,30,50,465,472,31,32,33,485,486,487,488,490,491,493,498,501],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[64,66,67,68,504,505,72],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:47","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:44","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[109,149,74,150,53,151,152,153,75,76,77,154,1,78,155,2,3,194,195,4,5,6,7,197,198,199,200,201,8,202,9,10,203,11,12,204,205,206,207,208,13,14,15,209,16,224,226,17,18,19,20,21,41,387,22,388,435,28,29,49,30,31,32,474,475,33],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[81,82,83,84,186,36,37,38,16,39,222,41,393,42,43,506,507,508,447,46,47,48,49,30,50,465],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"buffer","i":"matches"}},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[11,509],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:37","failures":[94,102,105,0,117,118,119,120,121,122,123,125,126,127,128,130,133,134,136,137,138,140,147,148,149,74,75,76,154,155,162,164,165,176,183,51,184,185,186,187,188,189,190,192,193,195,5,7,197,13,220,16,221,39,222,223,70,259,262,264,265,266,268,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,335,17,18,19,20,21,41,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,380,381,383,384,385,386,387,22,23,24,25,26,27,393,42,43,411,412,413,414,415,416,417,418,425,427,428,431,432,433,434,435,436,28,29,446,447,448,449,450,463,30,464,50,465,466,31,32,474,475,33,485,486,487,488,489,490,491,492,493,495,496,497,499,500,501,502],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[195],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[55,56],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:40","failures":[12],"status":-1,"binaryOperator":"(((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[101,102,104,105,106,107,109,112,113,0,114,143,156,510,158,159,162,163,164,165,167,168,511,170,210,211,212,213,216,217,512,513,514,237,240,250,256,70,260,71,296,332,334,335,336,338,343,453,454,455,457,461,496,497,34,34,35,35,498],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[515,516,517,518,45,49],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":195,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":446,"org.easymock.tests2.UsageTest.argumentsOrdered":38,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":127,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":281,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":188,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":502,"org.easymock.tests2.DelegateToTest.testReturnException":264,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":432,"org.easymock.tests.MockingTest.testPartialClassMocking":454,"org.easymock.tests.MockClassControlTest.testToString":297,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":80,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":472,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":244,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":240,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":356,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":506,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":148,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":66,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":198,"org.easymock.tests2.UsageTest.wrongArguments":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":31,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":182,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":351,"org.easymock.samples.ExampleTest.answerVsDelegate":489,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":343,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":459,"org.easymock.tests2.UsageConstraintsTest.testNull":5,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":104,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":126,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":302,"org.easymock.tests2.CaptureTest.testPrimitive":53,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":33,"org.easymock.tests.UsageTest.moreThanOneArgument":447,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":375,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":103,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":25,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":389,"org.easymock.tests.UsageTest.argumentsOrdered":48,"org.easymock.tests.UsageVarargTest.varargIntAccepted":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":286,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":17,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":505,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":156,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":99,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":229,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":273,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":21,"org.easymock.tests.ReplayStateInvalidUsageTest.times":407,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":176,"org.easymock.tests2.DependencyTest.testClassMocking":145,"org.easymock.tests2.AnswerTest.answer":130,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":199,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":288,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":88,"org.easymock.tests2.CaptureTest.testAnd":149,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":340,"org.easymock.tests2.UsageTest.strictResetToDefault":185,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":160,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":112,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":24,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":422,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":121,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":392,"org.easymock.tests2.DelegateToTest.testDelegate":268,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":371,"org.easymock.tests.LimitationsTest.mockFinalMethod":333,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":435,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":398,"org.easymock.tests2.DependencyTest.testClassMockingSupport":146,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":269,"org.easymock.tests2.CaptureTest.testCapture1_2446744":151,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":108,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":369,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":86,"org.easymock.tests.UsageThrowableTest.throwError":411,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":401,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":342,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":419,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":100,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":258,"org.easymock.samples.PartialClassMockTest.testGetArea":498,"org.easymock.tests.MockingTest.testInterfaceMocking":456,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":402,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":18,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":347,"org.easymock.tests2.UsageTest.niceToStrict":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":245,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":308,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":357,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":272,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":162,"org.easymock.tests2.MockBuilderTest.testCreateMock":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":253,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":179,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":515,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":365,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":122,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":339,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":355,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":437,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":349,"org.easymock.tests.UsageOverloadedMethodTest.overloading":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":255,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":428,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":9,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":485,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":320,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":202,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":77,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":379,"org.easymock.tests2.EasyMockSupportClassTest.testAll":237,"org.easymock.tests.MockClassControlTest.testEquals":301,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":335,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":373,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":512,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":396,"org.easymock.tests2.CaptureTest.testCaptureAll":74,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":87,"org.easymock.tests.MockNameTest.defaultName":329,"org.easymock.tests2.UsageConstraintsTest.testMatches":10,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":399,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":26,"org.easymock.samples.ExampleTest.voteForRemovals":493,"org.easymock.tests.UsageVarargTest.allKinds":387,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":393,"org.easymock.samples.BasicClassMockTest.testPrintContent":497,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":397,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":417,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":219,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":436,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":96,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":267,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":483,"org.easymock.tests2.UsageConstraintsTest.greaterThan":11,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":238,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":421,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":114,"org.easymock.samples.ExampleTest.voteForRemoval":490,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":484,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":137,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":115,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":344,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":230,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":107,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":461,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":184,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":278,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":119,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":235,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":431,"org.easymock.tests2.CaptureTest.testCaptureFirst":155,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":277,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":120,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":193,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":44,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":316,"org.easymock.tests2.UsageTest.moreThanOneArgument":186,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":139,"org.easymock.tests2.CaptureTest.testCapture2_2446744":78,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":289,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":386,"org.easymock.tests.GenericTest.testBridgedEquals":337,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":444,"org.easymock.tests.UsageExpectAndReturnTest.longType":312,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":394,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":117,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":511,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":374,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":424,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":207,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":372,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":469,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":23,"org.easymock.tests.UsageCallCountTest.tooManyCalls":445,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":439,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":254,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":317,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":181,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":361,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":416,"org.easymock.tests.MockingTest.testNiceClassMocking":460,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":211,"org.easymock.tests.MockingTest.testClassMocking":452,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":510,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":438,"org.easymock.tests2.UsageConstraintsTest.testContains":8,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":143,"org.easymock.tests2.UsageConstraintsTest.testFind":4,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":487,"org.easymock.tests.MockTypeTest.fromEasyMockClass":341,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":462,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":226,"org.easymock.tests.UsageExpectAndReturnTest.object":319,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":109,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":180,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":125,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":67,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":381,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":306,"org.easymock.tests.UsageTest.exactCallCountByLastCall":450,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":276,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":471,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":56,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":72,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":325,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":376,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":427,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":90,"org.easymock.tests.MockClassControlTest.testHashCode":300,"org.easymock.tests2.EasyMockSupportTest.testVerify":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":247,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":390,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":425,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":354,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":85,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":209,"org.easymock.tests.UsageVarargTest.varargCharAccepted":380,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":476,"org.easymock.tests2.CaptureTest.testCaptureMultiple":73,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":220,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":294,"org.easymock.tests2.UsageTest.openCallCountByLastCall":189,"org.easymock.tests.DefaultClassInstantiatorTest.object":477,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":128,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":58,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":353,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":304,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":248,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":363,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":414,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":174,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":89,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":113,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":299,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":362,"org.easymock.tests.CapturesMatcherTest.test":79,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":326,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":468,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":256,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":298,"org.easymock.tests2.UsageTest.resumeIfFailure":192,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":338,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":434,"org.easymock.tests2.StubTest.stubWithReturnValue":51,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":64,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":208,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":318,"org.easymock.tests2.SerializationTest.testAllMockedMethod":260,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":287,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":516,"org.easymock.samples.SupportTest.voteForRemovals":501,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":54,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":92,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":368,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":503,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":293,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":131,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":473,"org.easymock.tests.UsageExpectAndThrowTest.object":366,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":205,"org.easymock.tests2.DelegateToTest.testWrongClass":266,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":28,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":29,"org.easymock.samples.ConstructorCalledMockTest.testTax":34,"org.easymock.tests.UsageStrictMockTest.range":50,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":232,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":124,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":210,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":367,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":164,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":409,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":234,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":350,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":517,"org.easymock.tests2.CaptureTest.testCaptureNone":76,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":348,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":61,"org.easymock.tests.UsageUnorderedTest.message":41,"org.easymock.tests.UsageVerifyTest.twoReturns":43,"org.easymock.tests.UsageVarargTest.varargByteAccepted":385,"org.easymock.tests2.ThreadingTest.testThreadSafe":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":251,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":442,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":496,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":307,"org.easymock.tests2.CaptureTest.testCapture_2617107":150,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":271,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":475,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":291,"org.easymock.tests2.UsageConstraintsTest.any":200,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":406,"org.easymock.tests2.StubTest.stub":183,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":470,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":433,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":292,"org.easymock.tests.UsageExpectAndThrowTest.longType":359,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":481,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":405,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":221,"org.easymock.tests2.SerializationTest.testClass":70,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":94,"org.easymock.tests.LimitationsTest.mockNativeMethod":332,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":328,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":336,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":514,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":173,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":223,"org.easymock.tests2.NameTest.nameForMocksControl":84,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":175,"org.easymock.tests2.MockedExceptionTest.testMockedException":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":239,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":449,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":457,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":225,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":360,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":101,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":165,"org.easymock.tests.MockingTest.testNicePartialClassMocking":455,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":106,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":171,"org.easymock.tests2.CaptureTest.testCaptureLast":75,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":270,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":197,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":217,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":206,"org.easymock.tests.MockingTest.testTwoMocks":453,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":218,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":309,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":364,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":37,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":14,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":63,"org.easymock.samples.ExampleTest.removeNonExistingDocument":494,"org.easymock.tests.UsageStrictMockTest.differentMethods":465,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":403,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":178,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":91,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":479,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":138,"org.easymock.tests2.ConstraintsToStringTest.andToString":52,"org.easymock.tests2.MockBuilderTest.testCreateMockString":170,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":241,"org.easymock.tests.UsageExpectAndThrowTest.floatType":358,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":236,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":133,"org.easymock.tests.UsageVerifyTest.twoThrows":42,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":261,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":250,"org.easymock.samples.ExampleTest.voteAgainstRemoval":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":282,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":346,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":0,"org.easymock.tests.LimitationsTest.privateConstructor":331,"org.easymock.tests2.UsageConstraintsTest.testNotNull":13,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":418,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":141,"org.easymock.tests2.UsageTest.defaultResetToNice":191,"org.easymock.samples.ExampleTest.voteAgainstRemovals":488,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":283,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":324,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":172,"org.easymock.tests.UsageVarargTest.differentLength":382,"org.easymock.tests2.CallbackTest.callback":262,"org.easymock.tests2.UsageConstraintsTest.equals":196,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":110,"org.easymock.tests.UsageTest.openCallCountByLastCall":448,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":2,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":474,"org.easymock.tests.UsageCallCountTest.tooFewCalls":440,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":213,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":352,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":62,"org.easymock.tests.UsageThrowableTest.throwCheckedException":415,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":518,"org.easymock.tests.MockingTest.testStrictClassMocking":451,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":388,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":216,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":177,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":212,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":408,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":215,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":135,"org.easymock.tests.ObjectMethodsTest.testHashCode":305,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":504,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":140,"org.easymock.tests2.NameTest.nameForNiceMock":83,"org.easymock.tests2.DependencyTest.testInterfaceMocking":147,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":68,"org.easymock.samples.ExampleTest.addDocument":492,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":257,"org.easymock.tests2.DelegateToTest.testStubDelegate":265,"org.easymock.tests2.AnswerTest.stubAnswer":134,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":30,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":166,"org.easymock.tests.UsageVarargTest.varargLongAccepted":384,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":466,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":280,"org.easymock.tests.UsageExpectAndReturnTest.floatType":311,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":327,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":71,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":35,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":429,"org.easymock.tests.UsageThrowableTest.noUpperLimit":412,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":98,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":12,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":3,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":227,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":152,"org.easymock.tests2.SerializationTest.test":259,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":478,"org.easymock.tests2.UsageConstraintsTest.testSame":6,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":310,"org.easymock.samples.SupportTest.addDocument":500,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":214,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":242,"org.easymock.tests.GenericTest.testPackageScope":334,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":275,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":97,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":458,"org.easymock.tests2.NameTest.nameForMock":81,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":321,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":169,"org.easymock.tests2.UsageStrictMockTest.differentMethods":222,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":111,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":313,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":370,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":303,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":423,"org.easymock.tests2.MockedExceptionTest.testRealException":144,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":345,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":233,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":285,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":284,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":410,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":32,"org.easymock.tests2.NameTest.nameForStrictMock":82,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":161,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":59,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":224,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":105,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":231,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":507,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":480,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":204,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":158,"org.easymock.tests2.UsageStrictMockTest.range":39,"org.easymock.tests2.UsageConstraintsTest.lessThan":15,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":93,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":279,"org.easymock.tests2.CaptureTest.testCaptureRightOne":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":246,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":60,"org.easymock.tests2.UsageConstraintsTest.testOr":7,"org.easymock.tests.UsageRangeTest.combination":420,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":102,"org.easymock.tests.UsageTest.wrongArguments":46,"org.easymock.tests2.MockBuilderTest.testWithConstructor":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":243,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":296,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":314,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":55,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":322,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":482,"org.easymock.tests.UsageVarargTest.varargShortAccepted":383,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":443,"org.easymock.tests2.UsageConstraintsTest.cmpTo":201,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":274,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":190,"org.easymock.tests2.CaptureTest.testCaptureFromStub":1,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":400,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":159,"org.easymock.tests.UsageTest.unexpectedCallWithArray":45,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":49,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":441,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":323,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":464,"org.easymock.tests2.UsageConstraintsTest.constraints":194,"org.easymock.samples.ExampleTest.addAndChangeDocument":495,"org.easymock.tests.UsageStrictMockTest.testVerify":467,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":499,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":463,"org.easymock.tests2.CompareToTest.testGreateThan":509,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":395,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":153,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":513,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":19,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":315,"org.easymock.tests.LimitationsTest.abstractClass":330,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":430,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":20,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":508,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":123,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":377}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (this.int)) + \" and \") + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"minimum","maximum":"minimum"}},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[21],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[22,23,24,25,26,27,1,2,28,29,3,4,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,5,80,81,82,83,84,85,6,7,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,8,9,128,129,10,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,11,12,158,159,160,161,13,14,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,19,240,241,20,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[262,263,62,264,265,266,267,268,269,270,0,114,115,271,116,272,273,123,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,136,137,289,290,290,291,291,152,153,292,293,294,295,296,297,298,299,300,301,302,303,304,305,166,167,169,170,171,306,172,307,308,309,310,311,173,312,313,205,206,207,314,315,223,316,317,318,319,320,321,322,236,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,245,344,345,246,346,347],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[193],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1939","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","type":"CtInvocationImpl"},"failures":[249,251,255,256,257,261],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[275,276,277,278,280,281],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[62,266,267,268,269,114,115,271,123,289,290,290,291,291,152,153,292,294,295,297,298,299,300,302,303,305,166,167,169,170,171,306,172,309,310,311,173,207,348,315,223,316,236,325,335,341,245,344,345,246,346,347],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:160","sourceCode":"if (boolean) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[30,6,7,108,9,156,163,201,19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[183,188,200,349],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:85","failures":[22,23,24,25,26,27,1,350,2,28,29,3,4,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,351,352,63,64,65,66,353,67,68,69,70,267,268,269,71,354,72,73,74,75,76,355,356,77,78,79,5,80,81,82,83,84,85,6,7,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,357,358,359,360,361,114,115,117,118,119,120,121,122,123,362,363,364,365,366,367,368,369,370,371,372,373,275,374,375,376,377,378,379,125,126,127,8,9,128,129,10,130,131,132,133,283,284,285,286,287,288,136,137,138,139,140,141,142,143,289,144,145,146,147,148,149,150,380,151,290,290,291,291,152,153,154,155,156,157,11,12,158,159,160,161,381,13,14,162,163,292,294,297,298,299,300,302,303,305,164,165,166,167,168,169,170,171,306,172,309,310,311,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,382,383,384,385,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,315,222,223,316,224,225,226,227,228,229,230,386,231,232,233,234,235,15,16,17,18,236,325,335,341,237,238,239,19,240,241,20,242,243,244,387,245,344,345,246,247,346,347,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[0,116],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"position":"org.easymock.internal.LastControl:92","failures":[176,177,179,181,182,388,193,198,248,250,258],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[389,390,391],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[176,177,179,181,182,388,193,198,248,250,258],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[392],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[393,394,395,396,397,398,317],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"result","equalsMethod":"result"}},{"transplant":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[350,399,400,8,401,402],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:62","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1121","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[177],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:176","sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:67","sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","type":"CtForImpl"},"failures":[403,315,222,223],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[22,23,24,25,26,27,1,350,2,28,29,3,4,30,404,405,406,262,407,408,409,410,263,411,412,413,414,415,416,417,418,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,419,54,55,56,57,58,59,60,61,62,351,352,63,64,65,66,353,67,68,420,69,70,264,265,266,267,268,421,269,422,423,270,71,354,72,73,74,424,75,76,425,355,356,77,78,79,426,427,428,5,80,81,82,83,84,85,6,7,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,357,358,359,360,361,0,114,115,271,116,117,118,119,120,121,122,272,273,123,274,362,363,364,365,366,367,368,369,370,371,372,373,429,275,276,277,278,279,280,430,281,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,374,375,376,377,124,378,379,125,455,282,126,127,8,9,128,129,10,130,131,132,133,456,457,458,459,460,134,135,461,462,463,283,284,285,286,287,288,136,137,138,139,140,141,142,143,289,144,145,146,147,148,149,150,380,151,290,291,152,153,154,155,156,157,11,12,158,159,160,161,381,13,14,162,163,292,464,294,295,465,296,297,298,299,393,300,466,301,302,303,467,305,468,469,164,165,166,167,168,169,170,171,306,389,172,307,308,309,310,311,173,312,313,174,175,176,177,392,178,179,180,181,182,183,388,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,470,471,202,203,204,382,383,384,385,205,206,207,208,209,472,210,211,212,213,214,215,216,473,474,475,476,477,217,478,479,480,481,482,483,484,218,219,220,485,221,315,222,223,316,317,486,224,225,226,227,228,229,230,386,231,232,233,234,235,487,15,16,17,18,318,488,489,490,319,491,492,320,321,322,236,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,493,494,495,496,497,237,498,499,500,501,502,503,238,239,19,240,241,20,242,243,244,387,245,344,345,246,504,247,346,347,21,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.ConstructorArgs:54","failures":[290,291,464,465,393,301,505,467,506,507,315,316,317,320,321,322,236,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,345,347,21],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[201],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1051","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[195],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:340","sourceCode":"this.org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:336","sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","shouldBeUsedInOneThread":"threadSafe"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[76,208],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[350,8,9,129,10,131,167,169,171,309,173,19,241,20],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[441,484,219],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":177,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":27,"org.easymock.tests2.UsageTest.argumentsOrdered":14,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":233,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":478,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":441,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":159,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":144,"org.easymock.tests2.DelegateToTest.testReturnException":218,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":118,"org.easymock.tests.MockingTest.testPartialClassMocking":267,"org.easymock.tests.MockClassControlTest.testToString":285,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":487,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":450,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":329,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":31,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":325,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":165,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":394,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":183,"org.easymock.tests2.UsageTest.wrongArguments":12,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":80,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":503,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":376,"org.easymock.samples.ExampleTest.answerVsDelegate":146,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":263,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":423,"org.easymock.tests2.UsageConstraintsTest.testNull":179,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":169,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":137,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":232,"org.easymock.tests2.CaptureTest.testPrimitive":251,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":84,"org.easymock.tests.UsageTest.moreThanOneArgument":1,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":50,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":168,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":24,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":460,"org.easymock.tests.UsageTest.argumentsOrdered":4,"org.easymock.tests.UsageVarargTest.varargIntAccepted":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":446,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":138,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":398,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":292,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":489,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":482,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":433,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":142,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":237,"org.easymock.tests.ReplayStateInvalidUsageTest.times":370,"org.easymock.tests2.DependencyTest.testClassMocking":468,"org.easymock.tests2.AnswerTest.answer":201,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":448,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":385,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":408,"org.easymock.tests2.CaptureTest.testAnd":248,"org.easymock.tests2.UsageTest.strictResetToDefault":157,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":465,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":309,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":23,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":228,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":462,"org.easymock.tests2.DelegateToTest.testDelegate":221,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":46,"org.easymock.tests.LimitationsTest.mockFinalMethod":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":121,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":361,"org.easymock.tests2.DependencyTest.testClassMockingSupport":469,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":426,"org.easymock.tests2.CaptureTest.testCapture1_2446744":252,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":389,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":44,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":383,"org.easymock.tests.UsageThrowableTest.throwError":106,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":364,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":410,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":483,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":463,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":26,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":506,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":343,"org.easymock.samples.PartialClassMockTest.testGetArea":289,"org.easymock.tests.MockingTest.testInterfaceMocking":421,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":365,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":139,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":457,"org.easymock.tests2.UsageTest.niceToStrict":158,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":32,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":330,"org.easymock.tests2.ThreadingTest.testChangeDefault":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":431,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":297,"org.easymock.tests2.MockBuilderTest.testCreateMock":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":338,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":500,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":401,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":40,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":229,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":407,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":418,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":351,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":374,"org.easymock.tests.UsageOverloadedMethodTest.overloading":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":340,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":188,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":76,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":97,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":77,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":187,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":257,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":419,"org.easymock.tests.MockClassControlTest.testEquals":136,"org.easymock.tests2.EasyMockSupportClassTest.testAll":236,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":115,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":48,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":348,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":384,"org.easymock.tests2.CaptureTest.testCaptureAll":249,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":359,"org.easymock.tests.MockNameTest.defaultName":420,"org.easymock.tests2.UsageConstraintsTest.testMatches":189,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":25,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":362,"org.easymock.samples.ExampleTest.voteForRemovals":150,"org.easymock.tests.UsageVarargTest.allKinds":61,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":85,"org.easymock.samples.BasicClassMockTest.testPrintContent":153,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":360,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":112,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":238,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":485,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":479,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":122,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":430,"org.easymock.tests2.UsageConstraintsTest.greaterThan":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":323,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":354,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":173,"org.easymock.samples.ExampleTest.voteForRemoval":147,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":281,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":212,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":312,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":411,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":490,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":306,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":156,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":62,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":438,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":226,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":321,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":117,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":484,"org.easymock.tests2.CaptureTest.testCaptureFirst":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":437,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":227,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":163,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":356,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":93,"org.easymock.tests2.UsageTest.moreThanOneArgument":11,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":214,"org.easymock.tests2.CaptureTest.testCapture2_2446744":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":449,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":303,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":60,"org.easymock.tests.GenericTest.testBridgedEquals":116,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":67,"org.easymock.tests.UsageExpectAndReturnTest.longType":89,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":224,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":357,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":49,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":304,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":459,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":196,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":47,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":414,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":22,"org.easymock.tests.UsageCallCountTest.tooManyCalls":68,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":339,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":94,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":502,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":36,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":111,"org.easymock.tests.MockingTest.testNiceClassMocking":270,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":344,"org.easymock.tests.MockingTest.testClassMocking":265,"org.easymock.tests2.UsageConstraintsTest.testContains":186,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":293,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":352,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":207,"org.easymock.tests2.UsageConstraintsTest.testFind":178,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":79,"org.easymock.tests.MockTypeTest.fromEasyMockClass":409,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":126,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":210,"org.easymock.tests.UsageExpectAndReturnTest.object":96,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":172,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":501,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":231,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":395,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":55,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":125,"org.easymock.tests.UsageTest.exactCallCountByLastCall":30,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":69,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":436,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":404,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":134,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":317,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":102,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":51,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":75,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":474,"org.easymock.tests.MockClassControlTest.testHashCode":288,"org.easymock.tests2.EasyMockSupportTest.testVerify":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":332,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":135,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":417,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":74,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":382,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":387,"org.easymock.tests.UsageVarargTest.varargCharAccepted":54,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":429,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":454,"org.easymock.tests2.UsageTest.openCallCountByLastCall":160,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":234,"org.easymock.tests.DefaultClassInstantiatorTest.object":275,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":416,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":378,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":333,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":109,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":496,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":473,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":287,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":310,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":37,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":103,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":413,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":341,"org.easymock.tests2.UsageTest.resumeIfFailure":162,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":262,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":488,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":120,"org.easymock.tests2.StubTest.stubWithReturnValue":244,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":393,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":95,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":197,"org.easymock.tests2.SerializationTest.testAllMockedMethod":223,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":447,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":402,"org.easymock.samples.SupportTest.voteForRemovals":155,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":476,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":43,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":403,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":453,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":470,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":406,"org.easymock.tests.UsageExpectAndThrowTest.object":41,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":194,"org.easymock.tests2.DelegateToTest.testWrongClass":220,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":132,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":133,"org.easymock.tests.UsageStrictMockTest.range":129,"org.easymock.samples.ConstructorCalledMockTest.testTax":290,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":491,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":386,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":245,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":42,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":299,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":320,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":372,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":375,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":399,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":458,"org.easymock.tests2.CaptureTest.testCaptureNone":256,"org.easymock.tests.UsageUnorderedTest.message":5,"org.easymock.tests.UsageVerifyTest.twoReturns":7,"org.easymock.tests.UsageVarargTest.varargByteAccepted":59,"org.easymock.tests2.ThreadingTest.testThreadSafe":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":336,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":66,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":455,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":152,"org.easymock.tests2.CaptureTest.testCapture_2617107":250,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":428,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":451,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":83,"org.easymock.tests2.UsageConstraintsTest.any":184,"org.easymock.tests2.StubTest.stub":243,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":369,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":415,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":452,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":119,"org.easymock.tests.UsageExpectAndThrowTest.longType":34,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":279,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":368,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":240,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":217,"org.easymock.tests2.SerializationTest.testClass":315,"org.easymock.tests.LimitationsTest.mockNativeMethod":123,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":105,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":271,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":495,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":242,"org.easymock.tests2.NameTest.nameForMocksControl":18,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":497,"org.easymock.tests2.MockedExceptionTest.testMockedException":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":324,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":29,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":472,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":35,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":269,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":166,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":300,"org.easymock.tests.MockingTest.testNicePartialClassMocking":268,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":171,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":493,"org.easymock.tests2.CaptureTest.testCaptureLast":255,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":427,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":182,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":347,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":195,"org.easymock.tests.MockingTest.testTwoMocks":266,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":21,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":39,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":199,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":390,"org.easymock.samples.ExampleTest.removeNonExistingDocument":380,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":499,"org.easymock.tests.UsageStrictMockTest.differentMethods":10,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":366,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":475,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":277,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":213,"org.easymock.tests2.MockBuilderTest.testCreateMockString":305,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":283,"org.easymock.tests.UsageExpectAndThrowTest.floatType":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":326,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":322,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":202,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":486,"org.easymock.tests.UsageVerifyTest.twoThrows":6,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":335,"org.easymock.samples.ExampleTest.voteAgainstRemoval":148,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":442,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":311,"org.easymock.tests.LimitationsTest.privateConstructor":273,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":507,"org.easymock.tests2.UsageConstraintsTest.testNotNull":198,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":113,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":205,"org.easymock.tests2.UsageTest.defaultResetToNice":381,"org.easymock.samples.ExampleTest.voteAgainstRemovals":145,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":443,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":101,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":494,"org.easymock.tests.UsageVarargTest.differentLength":56,"org.easymock.tests2.CallbackTest.callback":216,"org.easymock.tests2.UsageConstraintsTest.equals":392,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":307,"org.easymock.tests.UsageTest.openCallCountByLastCall":28,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":174,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":82,"org.easymock.tests.UsageCallCountTest.tooFewCalls":64,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":246,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":377,"org.easymock.tests.UsageThrowableTest.throwCheckedException":110,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":400,"org.easymock.tests.MockingTest.testStrictClassMocking":264,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":70,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":346,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":498,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":345,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":371,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":247,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":204,"org.easymock.tests2.CompareToTest.testGreateOrEqual":349,"org.easymock.tests.ObjectMethodsTest.testHashCode":379,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":397,"org.easymock.tests2.NameTest.nameForNiceMock":17,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":215,"org.easymock.tests2.DependencyTest.testInterfaceMocking":164,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":396,"org.easymock.samples.ExampleTest.addDocument":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":337,"org.easymock.tests2.DelegateToTest.testStubDelegate":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":342,"org.easymock.tests2.AnswerTest.stubAnswer":203,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":9,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":466,"org.easymock.tests.UsageVarargTest.varargLongAccepted":58,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":130,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":440,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":104,"org.easymock.tests.UsageExpectAndReturnTest.floatType":88,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":316,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":291,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":481,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":425,"org.easymock.tests.UsageThrowableTest.noUpperLimit":107,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":192,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":175,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":318,"org.easymock.tests2.SerializationTest.test":222,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":253,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":276,"org.easymock.tests2.UsageConstraintsTest.testSame":180,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":87,"org.easymock.samples.SupportTest.addDocument":154,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":504,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":327,"org.easymock.tests.GenericTest.testPackageScope":114,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":461,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":435,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":480,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":422,"org.easymock.tests2.NameTest.nameForMock":15,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":98,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":467,"org.easymock.tests2.UsageStrictMockTest.differentMethods":20,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":308,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":90,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":45,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":124,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":73,"org.easymock.tests2.MockedExceptionTest.testRealException":208,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":412,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":492,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":445,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":444,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":19,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":81,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":373,"org.easymock.tests2.NameTest.nameForStrictMock":16,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":296,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":209,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":170,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":319,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":193,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":278,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":294,"org.easymock.tests2.UsageStrictMockTest.range":241,"org.easymock.tests2.UsageConstraintsTest.lessThan":200,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":439,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":225,"org.easymock.tests2.CaptureTest.testCaptureRightOne":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":331,"org.easymock.tests2.UsageConstraintsTest.testOr":181,"org.easymock.tests.UsageRangeTest.combination":71,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":167,"org.easymock.tests.UsageTest.wrongArguments":2,"org.easymock.tests2.MockBuilderTest.testWithConstructor":464,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":328,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":284,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":432,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":99,"org.easymock.tests.UsageVarargTest.varargShortAccepted":57,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":280,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":353,"org.easymock.tests2.UsageConstraintsTest.cmpTo":185,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":434,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":161,"org.easymock.tests2.CaptureTest.testCaptureFromStub":259,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":363,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":295,"org.easymock.tests.UsageTest.unexpectedCallWithArray":350,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":65,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":505,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":100,"org.easymock.tests2.UsageConstraintsTest.constraints":176,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":128,"org.easymock.samples.ExampleTest.addAndChangeDocument":151,"org.easymock.tests.UsageStrictMockTest.testVerify":131,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":143,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":127,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":358,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":254,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":140,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":314,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":92,"org.easymock.tests.LimitationsTest.abstractClass":272,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":141,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":355,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":230}}]

[{"transplant":{"position":"org.easymock.internal.MocksControl:278","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:244","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[3,4,5],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[6,7,8,9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[12,13,14,15,16],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[17,18,19,20,21],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1163","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[22],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:89","sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection","fieldName":"qualifier","this":"qualifier"}},{"position":"org.easymock.internal.RecordState:183","failures":[49,50,51,52,53,54,55,56,23,57,58,24,59,60,61,12,13,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,30,112,113,114,115,116,117,118,119,120,121,14,42,122,123,124,125,126,127,128,129,20,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,15,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"m"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[67,262,81,86],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[81],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matching"}},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[263,73,264],"status":-1,"binaryOperator":"int == 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[265,266,111,267,112,118,127,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,268,205,208,269,213,215,216,217,218,219,220,223,237,238,270,271,272,273,274,275,246],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[276,62,79,85],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1494","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","type":"CtInvocationImpl"},"failures":[65,70,81],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (this.java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[49,277,277,278,278,50,51,52,53,55,56,60,61,12,13,62,63,64,65,66,67,68,69,70,71,262,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,279,280,281,282,283,284,89,90,91,285,286,92,93,94,95,287,96,97,98,99,100,101,288,289,102,103,17,104,105,290,106,264,18,291,292,19,293,107,294,108,109,110,265,266,111,267,30,31,112,113,114,295,115,116,117,118,296,297,298,299,119,120,121,14,42,43,300,122,123,124,301,125,126,127,128,129,20,130,131,132,133,134,302,135,136,137,138,303,304,139,140,141,142,305,144,145,146,15,306,307,147,148,149,308,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,309,310,311,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,312,313,314,315,316,317,318,319,320,321,322,323,324,268,325,326,327,328,202,329,203,204,205,206,10,330,207,208,331,332,209,210,333,334,335,336,337,338,339,340,341,342,211,343,344,345,212,269,346,213,214,215,216,217,218,219,220,347,348,349,222,223,350,351,233,352,353,354,234,235,236,237,238,239,355,356,357,240,241,242,243,244,358,359,360,361,270,271,272,273,274,275,245,246,247,248,254,255,362,11,257,258,259,260,261,363,364,365],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"toStringMethod","finalizeMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"failures":[263],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[65,66],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[282,366,367,293,265],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[153,154,245,259,260],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[295,297,298,153,368,10,330,331,332,211,246,247,11,259],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[49,277,277,278,278,57,58,61,282,369,283,284,89,366,90,91,370,285,371,286,103,17,105,290,106,367,264,18,291,292,19,111,128,129,20,130,132,133,372,373,374,305,144,145,146,156,158,375,199,200,201,317,320,210,347,221,348,376,234],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[295,297,298,153,154,377,378,379,368,10,330,331,332,211,246,247,11,259,260],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[380,108],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[6,7,8,9,10,11],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[306,148,149,381],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[51,14,15,307,149,323,16],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[61,382,383,384],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"ret":"constructor","clazz":"toMock"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[49,277,278,50,51,52,53,54,55,56,23,57,58,24,59,60,61,12,385,13,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,279,280,281,386,282,283,89,366,90,91,370,285,286,92,93,94,95,287,96,97,98,99,100,101,288,289,102,103,17,104,105,290,106,367,264,18,291,292,19,107,294,108,109,110,265,266,111,267,30,112,113,114,295,115,116,117,118,296,297,298,299,119,120,121,14,42,122,123,124,125,126,127,128,129,20,130,131,132,133,134,302,135,136,137,138,303,304,139,140,141,142,143,305,144,145,146,15,147,148,149,308,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,312,313,314,315,316,323,324,268,387,202,203,204,205,206,10,330,207,208,331,332,209,210,338,339,340,341,342,211,212,269,213,214,215,216,217,218,219,220,347,221,349,222,223,224,225,226,227,228,388,229,230,231,232,233,234,235,236,237,238,239,355,356,357,389,240,241,242,243,244,270,271,272,273,274,275,245,246,247,248,249,250,251,390,252,253,254,255,362,256,11,257,258,259,260,261],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[391,392,393,394,395,396],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[49,277,277,278,278,57,58,61,282,369,283,284,89,366,90,91,370,285,371,286,103,17,105,290,106,367,264,18,291,292,19,111,128,129,20,130,132,133,372,373,374,305,144,145,146,156,158,375,199,200,201,317,320,210,347,221,348,376,234],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[295,297,298,153,387,368,10,330,331,332,211,246,247,11,259],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[397],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":65,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":205,"org.easymock.tests2.UsageTest.argumentsOrdered":298,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":141,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":31,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":116,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":23,"org.easymock.tests2.DelegateToTest.testReturnException":122,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":271,"org.easymock.tests.MockingTest.testPartialClassMocking":199,"org.easymock.tests.MockClassControlTest.testToString":352,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":358,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":293,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":159,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":144,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":121,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":71,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":235,"org.easymock.tests2.UsageTest.wrongArguments":295,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":48,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":357,"org.easymock.samples.ExampleTest.answerVsDelegate":51,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":320,"org.easymock.tests2.UsageConstraintsTest.testNull":67,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":105,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":140,"org.easymock.tests2.CaptureTest.testPrimitive":95,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":239,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":178,"org.easymock.tests.UsageTest.moreThanOneArgument":206,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":104,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":314,"org.easymock.tests.UsageTest.argumentsOrdered":332,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":333,"org.easymock.tests.UsageVarargTest.varargIntAccepted":226,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":240,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":282,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":35,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":366,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":244,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":42,"org.easymock.tests2.AnswerTest.answer":15,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":262,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":386,"org.easymock.tests2.CaptureTest.testAnd":92,"org.easymock.tests2.UsageTest.strictResetToDefault":113,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":18,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":313,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":137,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":203,"org.easymock.tests2.DelegateToTest.testDelegate":125,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":337,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":174,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":274,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":342,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":326,"org.easymock.tests2.CaptureTest.testCapture1_2446744":287,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":172,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":280,"org.easymock.tests.UsageThrowableTest.throwError":213,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":319,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":36,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":378,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":316,"org.easymock.samples.PartialClassMockTest.testGetArea":49,"org.easymock.tests2.CompareToTest.testLessOrEqual":276,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":241,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":364,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":160,"org.easymock.tests2.UsageTest.niceToStrict":115,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":361,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":5,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":89,"org.easymock.tests2.MockBuilderTest.testCreateMock":370,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":45,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":168,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":6,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":138,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":345,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":355,"org.easymock.tests.UsageOverloadedMethodTest.overloading":222,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":76,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":268,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":190,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":349,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":75,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":100,"org.easymock.tests2.EasyMockSupportClassTest.testAll":305,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":221,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":176,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":2,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":372,"org.easymock.tests2.CaptureTest.testCaptureAll":93,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":281,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":340,"org.easymock.tests.MockNameTest.defaultName":346,"org.easymock.tests2.UsageConstraintsTest.testMatches":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":315,"org.easymock.samples.ExampleTest.voteForRemovals":55,"org.easymock.tests.UsageVarargTest.allKinds":233,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":245,"org.easymock.samples.BasicClassMockTest.testPrintContent":58,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":341,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":219,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":308,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":32,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":275,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":301,"org.easymock.tests2.UsageConstraintsTest.greaterThan":79,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":329,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":19,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":396,"org.easymock.samples.ExampleTest.voteForRemoval":52,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":294,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":380,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":22,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":321,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":367,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":112,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":210,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":135,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":270,"org.easymock.tests2.CaptureTest.testCaptureFirst":102,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":381,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":136,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":119,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":387,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":186,"org.easymock.tests2.UsageTest.moreThanOneArgument":114,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":109,"org.easymock.tests2.CaptureTest.testCapture2_2446744":289,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":285,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":232,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":252,"org.easymock.tests.UsageExpectAndReturnTest.longType":182,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":134,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":338,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":177,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":371,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":84,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":328,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":175,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":310,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":312,"org.easymock.tests.UsageCallCountTest.tooManyCalls":253,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":248,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":187,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":47,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":164,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":218,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":129,"org.easymock.tests2.UsageConstraintsTest.testContains":74,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":369,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":111,"org.easymock.tests2.UsageConstraintsTest.testFind":66,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":223,"org.easymock.tests.MockTypeTest.fromEasyMockClass":318,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":13,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":362,"org.easymock.tests.UsageExpectAndReturnTest.object":189,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":264,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":46,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":139,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":228,"org.easymock.tests.UsageTest.exactCallCountByLastCall":209,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":212,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":334,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":382,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":195,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":224,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":324,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":26,"org.easymock.tests2.EasyMockSupportTest.testVerify":143,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":0,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":335,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":323,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":344,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":279,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":379,"org.easymock.tests.UsageVarargTest.varargCharAccepted":227,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":150,"org.easymock.tests2.UsageTest.openCallCountByLastCall":117,"org.easymock.tests.DefaultClassInstantiatorTest.object":391,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":142,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":3,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":343,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":359,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":368,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":166,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":216,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":40,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":25,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":291,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":354,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":165,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":196,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":309,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":146,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":1,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":353,"org.easymock.tests2.UsageTest.resumeIfFailure":299,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":317,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":273,"org.easymock.tests2.StubTest.stubWithReturnValue":127,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":383,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":188,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":85,"org.easymock.tests2.SerializationTest.testAllMockedMethod":158,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":350,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":7,"org.easymock.samples.SupportTest.voteForRemovals":60,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":28,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":171,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":351,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":306,"org.easymock.tests.UsageExpectAndThrowTest.object":169,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":82,"org.easymock.tests2.DelegateToTest.testWrongClass":124,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":254,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":255,"org.easymock.tests.UsageStrictMockTest.range":259,"org.easymock.samples.ConstructorCalledMockTest.testTax":277,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":304,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":128,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":170,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":90,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":331,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":356,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":8,"org.easymock.tests2.CaptureTest.testCaptureNone":99,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":365,"org.easymock.tests.UsageUnorderedTest.message":211,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":377,"org.easymock.tests.UsageVerifyTest.twoReturns":247,"org.easymock.tests.UsageVarargTest.varargByteAccepted":231,"org.easymock.tests2.ThreadingTest.testThreadSafe":107,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":251,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":57,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":360,"org.easymock.tests2.CaptureTest.testCapture_2617107":94,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":238,"org.easymock.tests2.UsageConstraintsTest.any":72,"org.easymock.tests2.StubTest.stub":126,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":311,"org.easymock.tests.UsageExpectAndThrowTest.longType":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":272,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":152,"org.easymock.tests2.SerializationTest.testClass":156,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":30,"org.easymock.tests.LimitationsTest.mockNativeMethod":234,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":198,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":348,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":39,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":374,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":155,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":41,"org.easymock.tests2.MockedExceptionTest.testMockedException":266,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":208,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":385,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":163,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":201,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":103,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":91,"org.easymock.tests.MockingTest.testNicePartialClassMocking":200,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":106,"org.easymock.tests2.CaptureTest.testCaptureLast":98,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":37,"org.easymock.tests2.CompareToTest.testCompareEqual":263,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":327,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":133,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":70,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":83,"org.easymock.tests.MockingTest.testTwoMocks":375,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":21,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":179,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":167,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":297,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":87,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":44,"org.easymock.tests.UsageStrictMockTest.differentMethods":260,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":27,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":393,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":108,"org.easymock.tests2.MockBuilderTest.testCreateMockString":286,"org.easymock.tests.UsageExpectAndThrowTest.floatType":161,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":78,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":147,"org.easymock.tests.UsageVerifyTest.twoThrows":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":145,"org.easymock.samples.ExampleTest.voteAgainstRemoval":53,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":363,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":292,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":397,"org.easymock.tests2.UsageConstraintsTest.testNotNull":86,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":220,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":265,"org.easymock.tests2.UsageTest.defaultResetToNice":296,"org.easymock.samples.ExampleTest.voteAgainstRemovals":50,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":194,"org.easymock.tests.UsageVarargTest.differentLength":388,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":38,"org.easymock.tests2.CallbackTest.callback":14,"org.easymock.tests.UsageTest.openCallCountByLastCall":207,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":62,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":237,"org.easymock.tests.UsageCallCountTest.tooFewCalls":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":130,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":389,"org.easymock.tests.UsageThrowableTest.throwCheckedException":217,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":9,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":132,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":269,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":43,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":20,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":131,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":149,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":110,"org.easymock.tests2.DependencyTest.testInterfaceMocking":120,"org.easymock.samples.ExampleTest.addDocument":54,"org.easymock.tests2.DelegateToTest.testStubDelegate":123,"org.easymock.tests2.AnswerTest.stubAnswer":148,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":257,"org.easymock.tests.UsageVarargTest.varargLongAccepted":230,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":261,"org.easymock.tests.UsageExpectAndReturnTest.floatType":181,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":197,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":61,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":278,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":34,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":80,"org.easymock.tests.UsageThrowableTest.noUpperLimit":214,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":63,"org.easymock.tests2.SerializationTest.test":157,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":96,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":392,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":180,"org.easymock.tests2.UsageConstraintsTest.testSame":68,"org.easymock.samples.SupportTest.addDocument":59,"org.easymock.tests.GenericTest.testPackageScope":347,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":336,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":33,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":191,"org.easymock.tests2.UsageStrictMockTest.differentMethods":154,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":183,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":173,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":204,"org.easymock.tests2.MockedExceptionTest.testRealException":267,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":322,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":384,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":151,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":16,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":236,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":4,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":12,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":290,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":394,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":81,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":283,"org.easymock.tests2.UsageStrictMockTest.range":153,"org.easymock.tests2.UsageConstraintsTest.lessThan":88,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":29,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":302,"org.easymock.tests2.CaptureTest.testCaptureRightOne":101,"org.easymock.tests2.UsageConstraintsTest.testOr":69,"org.easymock.tests.UsageRangeTest.combination":202,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":17,"org.easymock.tests.UsageTest.wrongArguments":330,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":376,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":184,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":192,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":395,"org.easymock.tests.UsageVarargTest.varargShortAccepted":229,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":390,"org.easymock.tests2.UsageConstraintsTest.cmpTo":73,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":307,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":118,"org.easymock.tests2.CaptureTest.testCaptureFromStub":288,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":284,"org.easymock.tests.UsageTest.unexpectedCallWithArray":10,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":11,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":250,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":193,"org.easymock.tests2.UsageConstraintsTest.constraints":64,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":258,"org.easymock.samples.ExampleTest.addAndChangeDocument":56,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":24,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":256,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":339,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":97,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":242,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":373,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":185,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":243,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":325,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":225,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":303}}]

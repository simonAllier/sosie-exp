[{"transplant":{"position":"org.easymock.internal.MockBuilder:137","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:51","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[253],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:66","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:66","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"failures":[254,255,256,257,258,259],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[143,156,157,260,261,262],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[263,210,211,264],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:747","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[265,266,267,268,269,270],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:439","failures":[93,94,271],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[272,242,273,244,245,274,275,246,248,276,249,250,252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[265,266,267,268,269,270],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,265,277,7,8,278,279,9,280,10,281,282,283,284,285,286,287,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,288,289,290,291,292,293,294,295,296,297,298,299,37,300,301,38,302,303,304,305,306,307,308,39,40,309,310,311,312,313,314,315,44,45,46,47,48,316,49,50,317,51,318,52,53,54,253,55,319,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,320,321,322,323,324,325,93,326,94,271,95,96,97,98,99,100,327,328,101,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,102,367,368,369,370,371,103,372,373,374,375,376,377,378,379,380,381,382,383,384,268,104,385,105,106,386,387,107,108,109,110,111,112,113,114,115,116,117,388,389,390,391,392,393,394,395,118,119,120,121,122,396,123,397,124,125,126,127,398,128,399,129,400,401,402,132,133,134,135,403,136,404,137,138,139,405,406,140,141,407,142,408,409,143,410,144,145,411,146,412,413,414,147,148,149,150,151,152,153,154,415,416,155,417,418,156,157,158,419,420,159,160,161,162,421,163,164,165,166,167,168,422,169,170,171,172,173,174,175,176,177,178,179,180,423,181,182,183,184,185,186,187,188,189,190,424,425,426,427,191,192,193,194,195,428,196,197,198,199,200,201,202,429,430,431,432,433,203,434,435,436,437,438,439,204,205,206,207,208,209,211,264,213,214,215,216,217,218,219,220,221,222,223,224,440,441,442,443,444,445,446,447,448,449,450,451,225,452,226,453,454,455,456,227,457,458,459,460,461,228,462,463,464,465,466,229,467,468,469,470,471,472,473,474,230,475,231,232,476,233,234,477,235,236,238,239,478,242,243,273,244,245,274,275,246,247,248,249,250,251,252],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:195","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[479,480,481,482,483,484,210,212,485],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:229","sourceCode":"org.easymock.internal.Injection org.easymock.internal.Injection = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[325,271],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[143,156,157,260,261,262],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[285,382,486,390,391,392,144,446,237,240],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"position":"org.easymock.internal.Range:44","failures":[0,1,2,3,4,5,6,265,277,7,8,278,279,9,280,10,281,282,487,488,283,284,285,286,287,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,288,289,290,291,292,293,294,295,296,297,298,299,37,300,301,38,302,303,304,305,306,307,308,39,40,309,310,311,41,42,312,43,313,314,315,44,45,46,47,48,316,49,50,317,51,318,52,53,54,253,55,319,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,320,321,322,323,324,325,93,326,94,271,95,96,97,98,99,100,327,328,101,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,102,367,368,369,370,371,103,372,373,374,375,376,377,378,379,380,381,382,383,384,268,104,385,105,106,386,387,107,108,109,110,111,112,113,114,115,116,117,486,388,389,390,391,392,393,394,395,118,119,120,121,122,396,123,397,124,125,126,127,398,128,399,129,130,131,400,401,402,132,133,134,135,403,136,404,137,138,139,405,406,140,141,407,489,142,408,490,409,143,410,144,479,145,491,480,411,146,492,412,413,414,147,148,149,150,151,152,153,154,415,416,155,493,417,418,156,157,158,419,420,159,160,161,162,421,163,164,165,166,167,168,422,169,170,171,172,173,174,175,176,177,178,179,180,423,181,182,183,184,185,186,187,188,189,190,424,425,426,427,191,192,193,194,195,428,196,197,198,199,200,201,202,429,430,431,432,433,203,434,435,436,437,438,439,204,205,206,207,208,209,210,211,264,212,485,494,213,214,215,216,217,218,219,220,221,222,223,224,440,441,442,443,444,445,446,495,496,497,447,448,449,450,451,498,225,499,452,226,453,454,500,501,455,502,503,456,504,227,457,458,459,460,461,228,505,506,462,463,464,465,466,229,467,468,469,470,471,472,473,474,230,475,231,232,476,233,234,477,235,236,237,238,507,239,240,241,478,242,243,273,244,245,274,275,246,247,248,249,250,251,252],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[44,383,105,106,136,146,202,214,218,219,222,473,231,232],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[175,423,243,273,245,274,275,246,247,252],"status":-1,"binaryOperator":"(((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>)))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[174],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:144","sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[5,6,277,278,279,9,294,300,38,302,306,307,44,508,509,510,56,62,63,64,383,268,104,385,105,106,386,133,135,403,136,404,405,406,141,142,146,156,158,161,175,202,214,218,219,222,442,443,444,445,473,230,475,231,232,476],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer","matches":"matches","m":"this"}},{"position":"org.easymock.internal.Range:44","failures":[0,1,2,3,4,5,6,265,277,7,8,278,279,9,280,10,281,282,487,488,283,284,285,286,287,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,288,289,290,291,292,293,294,295,296,297,298,299,37,300,301,38,302,303,304,305,306,307,308,39,40,309,310,311,41,42,312,43,313,314,315,44,45,46,47,48,316,49,50,317,51,318,52,53,54,253,55,319,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,320,321,322,323,324,325,93,326,94,271,95,96,97,98,99,100,327,328,101,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,102,367,368,369,370,371,103,372,373,374,375,376,377,378,379,380,381,382,383,384,268,104,385,105,106,386,387,107,108,109,110,111,112,113,114,115,116,117,486,388,389,390,391,392,393,394,395,118,119,120,121,122,396,123,397,124,125,126,127,398,128,399,129,130,131,400,401,402,132,133,134,135,403,136,404,137,138,139,405,406,140,141,407,489,142,408,490,409,143,410,144,479,145,491,480,411,146,492,412,413,414,147,148,149,150,151,152,153,154,415,416,155,493,417,418,156,157,158,419,420,159,160,161,162,421,163,164,165,166,167,168,422,169,170,171,172,173,174,175,176,177,178,179,180,423,181,182,183,184,185,186,187,188,189,190,424,425,426,427,191,192,193,194,195,428,196,197,198,199,200,201,202,429,430,431,432,433,203,434,435,436,437,438,439,204,205,206,207,208,209,210,211,264,212,485,494,213,214,215,216,217,218,219,220,221,222,223,224,440,441,442,443,444,445,446,495,496,497,447,448,449,450,451,498,225,499,452,226,453,454,500,501,455,502,503,456,504,227,457,458,459,460,461,228,505,506,462,463,464,465,466,229,467,468,469,470,471,472,473,474,230,475,231,232,476,233,234,477,235,236,237,238,507,239,240,241,478,242,243,273,244,245,274,275,246,247,248,249,250,251,252],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","type":"CtInvocationImpl"},"failures":[511],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[157],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:305","failures":[5,6,7,8,9,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,253,55,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,99,101,102,104,105,106,107,108,109,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,423,181,182,183,184,185,189,190,193,197,198,199,200,201,202,203,205,206,207,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,234,235,236,237,238,239,240,241,242,243,273,244,245,246,247,248,249,251,252],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[277,278,279,39,44,53,57,60,63,85,86,88,89,90,91,92,383,268,104,105,106,403,136,404,405,406,146,159,160,161,162,163,165,166,167,168,169,171,172,173,174,175,176,177,178,179,180,181,183,184,189,202,214,215,216,217,218,219,221,222,223,224,473,230,231,232,234,242,243,273,244,245,274,275,246,248,249,250,251,252],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[247,276,249,252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:827","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[479,480,481,482,483,512,484,210,212,485],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:83","failures":[5,6,277,7,8,278,279,9,299,54,56,58,61,62,63,64,87,99,268,104,385,105,106,133,135,403,137,138,405,406,141,164,169,175,182,185,189,202,206,442,443,444,445,230,475,231,232,234,243,273,245,274,275,246,247,252],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[479,481,482,483,513,514,485],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[12,13,15,16],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:94","sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,265,277,7,8,278,279,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,299,37,38,39,40,311,41,42,43,44,45,46,47,48,316,49,50,317,51,318,52,53,54,253,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,320,321,322,323,324,93,94,95,96,97,98,99,100,101,102,103,373,374,375,376,383,268,104,385,105,106,386,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,131,132,133,134,135,403,136,404,137,138,139,405,406,140,141,407,142,143,410,144,145,411,146,412,147,148,149,150,151,152,153,154,415,155,418,156,157,158,159,160,161,162,163,164,165,166,167,168,422,169,170,171,172,173,174,175,176,177,178,179,180,423,181,182,183,184,185,186,187,188,189,190,424,425,426,427,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,473,230,475,231,232,476,233,234,235,236,237,238,239,240,241,242,243,273,244,245,274,275,246,247,248,249,250,251,252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":162,"org.easymock.tests2.UsageTest.argumentsOrdered":406,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":5,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":223,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":434,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":361,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":404,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":397,"org.easymock.tests2.DelegateToTest.testReturnException":205,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":96,"org.easymock.tests.MockingTest.testPartialClassMocking":41,"org.easymock.tests.MockClassControlTest.testToString":390,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":441,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":10,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":501,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":17,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":226,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":508,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":148,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":481,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":168,"org.easymock.tests2.UsageTest.wrongArguments":403,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":57,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":472,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":375,"org.easymock.samples.ExampleTest.answerVsDelegate":125,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":285,"org.easymock.tests2.UsageConstraintsTest.testNull":164,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":314,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":152,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":395,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":222,"org.easymock.tests2.CaptureTest.testPrimitive":244,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":61,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":36,"org.easymock.tests.UsageTest.moreThanOneArgument":6,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":151,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":2,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":113,"org.easymock.tests.UsageTest.argumentsOrdered":279,"org.easymock.tests.UsageVarargTest.varargIntAccepted":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":366,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":118,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":514,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":407,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":496,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":438,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":353,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":122,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":229,"org.easymock.tests.ReplayStateInvalidUsageTest.times":338,"org.easymock.tests2.DependencyTest.testClassMocking":413,"org.easymock.tests2.AnswerTest.answer":185,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":422,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":367,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":427,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":488,"org.easymock.tests2.CaptureTest.testAnd":242,"org.easymock.tests2.UsageTest.strictResetToDefault":134,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":490,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":418,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":1,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":46,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":217,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":117,"org.easymock.tests2.DelegateToTest.testDelegate":209,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":32,"org.easymock.tests.LimitationsTest.mockFinalMethod":329,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":99,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":324,"org.easymock.tests2.DependencyTest.testClassMockingSupport":414,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":253,"org.easymock.tests2.CaptureTest.testCapture1_2446744":245,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":416,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":30,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":425,"org.easymock.tests.UsageThrowableTest.throwError":85,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":332,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":284,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":486,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":439,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":506,"org.easymock.samples.PartialClassMockTest.testGetArea":123,"org.easymock.tests.MockingTest.testInterfaceMocking":312,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":333,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":119,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":455,"org.easymock.tests2.UsageTest.niceToStrict":136,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":18,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":351,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":143,"org.easymock.tests2.MockBuilderTest.testCreateMock":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":459,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":469,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":26,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":269,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":218,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":487,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":16,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":300,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":373,"org.easymock.tests.UsageOverloadedMethodTest.overloading":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":504,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":461,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":173,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":50,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":52,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":76,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":172,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":248,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":291,"org.easymock.tests.MockClassControlTest.testEquals":394,"org.easymock.tests2.EasyMockSupportClassTest.testAll":225,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":326,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":34,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":260,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":426,"org.easymock.tests2.CaptureTest.testCaptureAll":243,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":322,"org.easymock.tests.MockNameTest.defaultName":308,"org.easymock.tests2.UsageConstraintsTest.testMatches":174,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":3,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":330,"org.easymock.samples.ExampleTest.voteForRemovals":128,"org.easymock.tests.UsageVarargTest.allKinds":299,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":62,"org.easymock.samples.BasicClassMockTest.testPrintContent":401,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":323,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":91,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":473,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":435,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":100,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":208,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":484,"org.easymock.tests2.UsageConstraintsTest.greaterThan":176,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":499,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":45,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":158,"org.easymock.samples.ExampleTest.voteForRemoval":126,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":350,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":419,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":198,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":286,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":497,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":415,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":133,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":37,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":358,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":215,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":451,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":95,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":204,"org.easymock.tests2.CaptureTest.testCaptureFirst":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":357,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":216,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":141,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":318,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":72,"org.easymock.tests2.UsageTest.moreThanOneArgument":135,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":200,"org.easymock.tests2.CaptureTest.testCapture2_2446744":251,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":368,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":298,"org.easymock.tests.GenericTest.testBridgedEquals":271,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":306,"org.easymock.tests.UsageExpectAndReturnTest.longType":68,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":213,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":320,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":35,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":423,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":112,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":33,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":0,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":12,"org.easymock.tests.UsageCallCountTest.tooManyCalls":307,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":460,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":73,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":471,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":22,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":90,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":236,"org.easymock.tests.MockingTest.testNiceClassMocking":315,"org.easymock.tests.MockingTest.testClassMocking":310,"org.easymock.tests2.UsageConstraintsTest.testContains":171,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":301,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":193,"org.easymock.tests2.UsageConstraintsTest.testFind":163,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":54,"org.easymock.tests.MockTypeTest.fromEasyMockClass":283,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":196,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":383,"org.easymock.tests.UsageExpectAndReturnTest.object":75,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":155,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":470,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":221,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":482,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":293,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":380,"org.easymock.tests.UsageTest.exactCallCountByLastCall":9,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":356,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":114,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":280,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":485,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":81,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":288,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":49,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":430,"org.easymock.tests.MockClassControlTest.testHashCode":393,"org.easymock.tests2.EasyMockSupportTest.testVerify":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":503,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":115,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":15,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":48,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":424,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":477,"org.easymock.tests.UsageVarargTest.varargCharAccepted":292,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":342,"org.easymock.tests2.CaptureTest.testCaptureMultiple":272,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":372,"org.easymock.tests2.UsageTest.openCallCountByLastCall":137,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":224,"org.easymock.tests.DefaultClassInstantiatorTest.object":343,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":14,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":456,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":24,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":88,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":262,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":465,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":429,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":392,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":156,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":23,"org.easymock.tests.CapturesMatcherTest.test":511,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":82,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":11,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":228,"org.easymock.tests2.UsageTest.resumeIfFailure":140,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":282,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":495,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":98,"org.easymock.tests2.StubTest.stubWithReturnValue":234,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":479,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":181,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":74,"org.easymock.tests2.SerializationTest.testAllMockedMethod":264,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":102,"org.easymock.samples.SupportTest.voteForRemovals":132,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":270,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":325,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":432,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":29,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":263,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":103,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":186,"org.easymock.tests.UsageExpectAndThrowTest.object":27,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":281,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":179,"org.easymock.tests2.DelegateToTest.testWrongClass":207,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":107,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":108,"org.easymock.samples.ConstructorCalledMockTest.testTax":130,"org.easymock.tests.UsageStrictMockTest.range":105,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":448,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":220,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":235,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":28,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":450,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":278,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":340,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":374,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":266,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":111,"org.easymock.tests2.CaptureTest.testCaptureNone":247,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":255,"org.easymock.tests.UsageUnorderedTest.message":56,"org.easymock.tests.UsageVerifyTest.twoReturns":64,"org.easymock.tests.UsageVarargTest.varargByteAccepted":297,"org.easymock.tests2.ThreadingTest.testThreadSafe":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":457,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":304,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":400,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":381,"org.easymock.tests2.CaptureTest.testCapture_2617107":273,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":319,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":60,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":370,"org.easymock.tests2.UsageConstraintsTest.any":169,"org.easymock.tests2.StubTest.stub":233,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":337,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":97,"org.easymock.tests.UsageExpectAndThrowTest.longType":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":371,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":347,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":336,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":475,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":203,"org.easymock.tests2.SerializationTest.testClass":210,"org.easymock.tests.LimitationsTest.mockNativeMethod":101,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":84,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":94,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":464,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":261,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":476,"org.easymock.tests2.NameTest.nameForMocksControl":445,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":256,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":466,"org.easymock.tests2.MockedExceptionTest.testMockedException":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":452,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":8,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":428,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":21,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":149,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":145,"org.easymock.tests.MockingTest.testNicePartialClassMocking":42,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":154,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":462,"org.easymock.tests2.CaptureTest.testCaptureLast":246,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":55,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":167,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":241,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":180,"org.easymock.tests.MockingTest.testTwoMocks":311,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":478,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":25,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":405,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":183,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":259,"org.easymock.samples.ExampleTest.removeNonExistingDocument":399,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":468,"org.easymock.tests.UsageStrictMockTest.differentMethods":106,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":334,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":431,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":258,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":345,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":199,"org.easymock.tests2.MockBuilderTest.testCreateMockString":412,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":453,"org.easymock.tests.UsageExpectAndThrowTest.floatType":19,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":498,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":188,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":494,"org.easymock.tests.UsageVerifyTest.twoThrows":63,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":316,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":227,"org.easymock.samples.ExampleTest.voteAgainstRemoval":127,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":362,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":157,"org.easymock.tests.LimitationsTest.privateConstructor":328,"org.easymock.tests2.UsageConstraintsTest.testNotNull":182,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":191,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":92,"org.easymock.tests2.UsageTest.defaultResetToNice":139,"org.easymock.samples.ExampleTest.voteAgainstRemovals":124,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":80,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":363,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":463,"org.easymock.tests.UsageVarargTest.differentLength":294,"org.easymock.tests2.CallbackTest.callback":202,"org.easymock.tests2.UsageConstraintsTest.equals":421,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":493,"org.easymock.tests.UsageTest.openCallCountByLastCall":7,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":159,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":59,"org.easymock.tests.UsageCallCountTest.tooFewCalls":302,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":238,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":376,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":257,"org.easymock.tests.UsageThrowableTest.throwCheckedException":89,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":267,"org.easymock.tests.MockingTest.testStrictClassMocking":309,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":40,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":240,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":467,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":237,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":339,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":239,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":190,"org.easymock.tests.ObjectMethodsTest.testHashCode":379,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":513,"org.easymock.tests2.NameTest.nameForNiceMock":444,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":201,"org.easymock.tests2.DependencyTest.testInterfaceMocking":147,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":483,"org.easymock.samples.ExampleTest.addDocument":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":458,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":505,"org.easymock.tests2.DelegateToTest.testStubDelegate":206,"org.easymock.tests2.AnswerTest.stubAnswer":189,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":104,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":491,"org.easymock.tests.UsageVarargTest.varargLongAccepted":296,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":386,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":360,"org.easymock.tests.UsageExpectAndReturnTest.floatType":67,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":212,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":131,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":437,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":177,"org.easymock.tests.UsageThrowableTest.noUpperLimit":86,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":317,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":160,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":446,"org.easymock.tests2.SerializationTest.test":211,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":274,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":344,"org.easymock.tests2.UsageConstraintsTest.testSame":165,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":66,"org.easymock.samples.SupportTest.addDocument":402,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":507,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":454,"org.easymock.tests.GenericTest.testPackageScope":93,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":355,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":436,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":313,"org.easymock.tests2.NameTest.nameForMock":442,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":77,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":492,"org.easymock.tests2.UsageStrictMockTest.differentMethods":232,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":417,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":69,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":31,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":377,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":47,"org.easymock.tests2.MockedExceptionTest.testRealException":194,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":287,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":449,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":365,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":364,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":58,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":341,"org.easymock.tests2.NameTest.nameForStrictMock":443,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":409,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":195,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":153,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":447,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":509,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":178,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":346,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":142,"org.easymock.tests2.UsageStrictMockTest.range":231,"org.easymock.tests2.UsageConstraintsTest.lessThan":184,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":433,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":512,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":502,"org.easymock.tests2.CaptureTest.testCaptureRightOne":249,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":254,"org.easymock.tests2.UsageConstraintsTest.testOr":166,"org.easymock.tests.UsageRangeTest.combination":44,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":150,"org.easymock.tests.UsageTest.wrongArguments":277,"org.easymock.tests2.MockBuilderTest.testWithConstructor":489,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":500,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":389,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":70,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":352,"org.easymock.tests.UsageVarargTest.varargShortAccepted":295,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":348,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":305,"org.easymock.tests2.UsageConstraintsTest.cmpTo":170,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":187,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":354,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":138,"org.easymock.tests2.CaptureTest.testCaptureFromStub":250,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":331,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":408,"org.easymock.tests.UsageTest.unexpectedCallWithArray":265,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":268,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":303,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":79,"org.easymock.tests2.CaptureTest.testCapture":276,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":385,"org.easymock.tests2.UsageConstraintsTest.constraints":161,"org.easymock.samples.ExampleTest.addAndChangeDocument":129,"org.easymock.tests.UsageStrictMockTest.testVerify":387,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":396,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":384,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":321,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":275,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":120,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":71,"org.easymock.tests.LimitationsTest.abstractClass":327,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":121,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":51,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":510,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":219,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":289}}]

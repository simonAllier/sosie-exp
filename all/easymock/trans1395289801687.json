[{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[0,1,2,3,4,5,6,7],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"failures":[8,9],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[11],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[12,13,14,15,16,17,18],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"failures":[19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"org.easymock.internal.EasyMockProperties.PREFIX"}},{"position":"org.easymock.EasyMock:1163","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[20,21,22],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:223","failures":[23],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:60","failures":[24,25,26,12,27,28,13,29,30,31,32],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:36","failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.String","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[63,64,65,66,67,68,69,70,71,10,72],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"suffix","key":"suffix"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:54","sourceCode":"return false","type":"CtReturnImpl"},"failures":[74],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1847","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","type":"CtInvocationImpl"},"failures":[75],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[76,77,78,79],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","bridgeMethod":"m"}},{"position":"org.easymock.internal.RecordState:183","failures":[81,82,83,84,85,86,87,88,89,90,91,92,93,94,33,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,24,113,114,115,25,116,23,117,118,119,120,121,122,123,63,124,64,125,126,127,128,129,130,65,131,132,133,134,135,136,73,66,67,137,68,138,69,70,77,139,140,141,142,78,143,144,145,75,10,146,147,148,149,72,150,79,151,152,153,154,155,156,157,158,159,160,161,43,162,44,45,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,46,208,209,210,211,212,213,214,215,216,217,218,219,220,221,48,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,51,52,53,264,265,266,267,60,268,61,62,269,270,271,272],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[82,84,111,112,24,113,115,25,116,273,23,117,118,274,275,276,121,277,122,123,278,279,280,132,281,134,282,135,283,284,285,286,287,288,289,151,290,290,291,291,175,176,177,292,293,206,222,294,295,263,296,297,298,299,300,301,302,303,270,271,272],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[35,41,47,54,56,59],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[81,82,83,84,304,305,306,307,85,86,87,88,89,90,91,92,93,94,33,308,95,96,97,98,309,310,311,312,99,100,313,101,102,103,104,314,315,105,106,107,108,109,110,111,112,24,113,114,115,25,116,273,23,117,118,316,317,318,319,119,120,274,275,121,277,122,123,278,279,280,63,124,64,125,320,126,127,128,129,130,65,321,322,131,132,281,133,134,282,135,283,284,285,286,287,288,136,73,66,67,137,68,138,69,70,77,139,140,141,142,78,143,144,145,75,10,146,147,148,149,72,150,79,323,324,151,325,152,153,154,155,156,157,326,158,159,160,327,161,43,162,44,45,163,164,165,166,167,168,169,170,171,172,328,173,174,290,290,291,291,175,176,177,178,329,330,179,180,331,332,333,334,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,46,47,335,208,209,336,337,210,338,339,211,212,213,214,340,215,216,217,218,219,220,221,48,341,342,343,344,345,346,347,348,349,350,351,352,353,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,354,355,356,357,358,359,360,361,362,253,254,255,256,257,363,258,259,260,261,262,295,263,297,298,299,300,301,302,364,365,51,52,53,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,264,381,265,266,382,267,59,60,268,61,62,269,383,270,271,272],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:54","sourceCode":"return false","type":"CtReturnImpl"},"failures":[74],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[384],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[76,77,78,79],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[346],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.Capture:134","failures":[385],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:148","sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder))","type":"CtThrowImpl"},"failures":[93,308,95,96,310,311,312,99,313,104,314,106,110,275,278,279,280,281,286,288,66,144,327,162,44,45,207,47,335,336,337,210,340,215,216,48,363,52,53,264,382,59,268,61,62],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[12,13,14,15,16,17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[82,84,111,112,24,113,115,25,116,273,23,117,118,274,386,275,276,121,277,122,123,278,279,387,280,388,389,132,281,134,282,135,283,284,285,286,287,288,151,290,290,291,291,175,176,177,292,293,206,222,295,263,296,298,303,270,271,272],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"failures":[81,82,83,85,390,391,86,87,89,90,91,92,93,94,33,308,95,96,97,98,309,310,311,312,99,100,313,101,102,103,104,314,315,105,106,107,108,109,110,119,120,121,122,123,63,124,64,125,320,126,127,128,129,130,65,321,322,131,132,281,282,284,285,286,287,288,136,73,66,67,137,68,138,69,70,77,71,139,140,141,142,78,143,144,145,75,10,146,147,148,149,72,150,79,323,152,392,153,154,155,393,156,157,326,158,159,160,327,161,43,162,44,45,163,164,165,166,167,168,169,170,171,172,328,173,174,176,177,394,395,178,329,330,179,180,331,396,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,46,335,208,209,336,337,210,8,397,398,217,218,219,220,221,48,341,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,49,50,243,244,245,246,247,248,249,250,251,252,399,400,401,357,358,359,360,361,362,253,254,255,256,257,363,258,259,260,261,262,295,263,51,52,53,366,367,368,369,370,371,402,372,373,403,374,9,404,405,382,267,59,60,268,61,62,269,383],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[85,390,391,86,87,88,91,92,110,168,371],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[86,91,92,110],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:152","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:90","sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[12,13,14,15,16,17,18],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:295","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:207","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[81,82,83,87,89,90,93,94,33,95,97,98,309,312,99,100,313,101,102,103,104,314,315,105,106,107,108,111,112,24,113,114,115,25,116,273,23,117,118,120,275,121,122,123,279,63,124,125,320,128,129,130,65,322,131,132,281,133,134,282,135,284,286,287,288,136,73,66,67,137,68,138,69,70,77,139,140,141,142,78,143,144,145,75,10,146,147,149,72,150,79,151,152,154,157,326,158,159,160,43,44,45,165,167,169,170,172,175,394,395,178,330,179,180,181,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,46,208,209,210,217,218,219,220,221,222,243,245,246,247,248,249,250,251,252,406,407,408,409,410,401,295,296,51,53,374,264,381,265,266,60,61,62,270,271,272],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[144],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:138","sourceCode":"java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[48,411],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":67,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":207,"org.easymock.tests2.UsageTest.argumentsOrdered":311,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":107,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":96,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":166,"org.easymock.tests2.DelegateToTest.testReturnException":153,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":358,"org.easymock.tests.MockingTest.testPartialClassMocking":270,"org.easymock.tests.MockClassControlTest.testToString":299,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":401,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":289,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":23,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":223,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":90,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":14,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":77,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":181,"org.easymock.tests2.UsageTest.wrongArguments":308,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":333,"org.easymock.samples.ExampleTest.answerVsDelegate":168,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":293,"org.easymock.tests2.UsageConstraintsTest.testNull":68,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":134,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":106,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":365,"org.easymock.tests2.CaptureTest.testPrimitive":125,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":185,"org.easymock.tests.UsageTest.moreThanOneArgument":46,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":242,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":133,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":368,"org.easymock.tests.UsageTest.argumentsOrdered":337,"org.easymock.tests.UsageVarargTest.varargIntAccepted":255,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":42,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":217,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":18,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":274,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":277,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":221,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":38,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":81,"org.easymock.tests.ReplayStateInvalidUsageTest.times":350,"org.easymock.tests2.AnswerTest.answer":85,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":71,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":307,"org.easymock.tests2.CaptureTest.testAnd":63,"org.easymock.tests2.UsageTest.strictResetToDefault":94,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":28,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":285,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":367,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":103,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":265,"org.easymock.tests2.DelegateToTest.testDelegate":156,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":238,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":361,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":380,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":49,"org.easymock.tests2.CaptureTest.testCapture1_2446744":320,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":236,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":305,"org.easymock.tests.UsageThrowableTest.throwError":243,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":344,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":370,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":31,"org.easymock.samples.PartialClassMockTest.testGetArea":175,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":345,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":218,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":394,"org.easymock.tests2.UsageTest.niceToStrict":95,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":224,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":294,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":7,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":121,"org.easymock.tests2.MockBuilderTest.testCreateMock":278,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":35,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":232,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":104,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":405,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":331,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":4,"org.easymock.tests.UsageOverloadedMethodTest.overloading":179,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":78,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":373,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":197,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":330,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":142,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":21,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":130,"org.easymock.tests2.EasyMockSupportClassTest.testAll":273,"org.easymock.tests.MockClassControlTest.testEquals":364,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":263,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":240,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":388,"org.easymock.tests2.CaptureTest.testCaptureAll":124,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":306,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":378,"org.easymock.tests2.UsageConstraintsTest.testMatches":143,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":342,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":369,"org.easymock.samples.ExampleTest.voteForRemovals":172,"org.easymock.tests.UsageVarargTest.allKinds":262,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":51,"org.easymock.samples.BasicClassMockTest.testPrintContent":177,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":379,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":249,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":327,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":393,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":362,"org.easymock.tests2.UsageConstraintsTest.greaterThan":145,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":381,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":288,"org.easymock.samples.ExampleTest.voteForRemoval":169,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":326,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":283,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":93,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":206,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":101,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":245,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":357,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":392,"org.easymock.tests2.CaptureTest.testCaptureFirst":131,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":102,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":99,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":375,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":193,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":159,"org.easymock.tests2.UsageTest.moreThanOneArgument":33,"org.easymock.tests2.CaptureTest.testCapture2_2446744":322,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":279,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":261,"org.easymock.tests.GenericTest.testBridgedEquals":80,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":5,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":2,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":215,"org.easymock.tests.UsageExpectAndReturnTest.longType":189,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":100,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":376,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":387,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":241,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":396,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":148,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":239,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":397,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":366,"org.easymock.tests.UsageCallCountTest.tooManyCalls":216,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":55,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":211,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":194,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":228,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":248,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":112,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":386,"org.easymock.tests2.UsageConstraintsTest.testContains":141,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":339,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":151,"org.easymock.tests2.UsageConstraintsTest.testFind":137,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":180,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":92,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":382,"org.easymock.tests.UsageExpectAndReturnTest.object":196,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":284,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":105,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":15,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":257,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":356,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":6,"org.easymock.tests.UsageTest.exactCallCountByLastCall":210,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":178,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":12,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":202,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":253,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":372,"org.easymock.tests.MockClassControlTest.testHashCode":302,"org.easymock.tests2.EasyMockSupportTest.testVerify":109,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":37,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":404,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":371,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":304,"org.easymock.tests.UsageVarargTest.varargCharAccepted":256,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":410,"org.easymock.tests2.UsageTest.openCallCountByLastCall":97,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":108,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":0,"org.easymock.tests.DefaultClassInstantiatorTest.object":341,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":9,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":354,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":58,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":230,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":246,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":286,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":301,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":229,"org.easymock.tests.CapturesMatcherTest.test":385,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":203,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":118,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":39,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":300,"org.easymock.tests2.UsageTest.resumeIfFailure":312,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":292,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":360,"org.easymock.tests2.StubTest.stubWithReturnValue":120,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":13,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":149,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":195,"org.easymock.tests2.SerializationTest.testAllMockedMethod":84,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":399,"org.easymock.samples.SupportTest.voteForRemovals":165,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":41,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":235,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":400,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":390,"org.easymock.tests.UsageExpectAndThrowTest.object":233,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":146,"org.easymock.tests2.DelegateToTest.testWrongClass":155,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":251,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":252,"org.easymock.tests.UsageStrictMockTest.range":61,"org.easymock.samples.ConstructorCalledMockTest.testTax":290,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":315,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":111,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":3,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":234,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":122,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":336,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":352,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":332,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":54,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":395,"org.easymock.tests2.CaptureTest.testCaptureNone":129,"org.easymock.tests.UsageUnorderedTest.message":48,"org.easymock.tests.UsageVerifyTest.twoReturns":53,"org.easymock.tests.UsageVarargTest.varargByteAccepted":260,"org.easymock.tests2.ThreadingTest.testThreadSafe":157,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":214,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":176,"org.easymock.tests2.CaptureTest.testCapture_2617107":64,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":408,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":184,"org.easymock.tests2.UsageConstraintsTest.any":139,"org.easymock.tests2.StubTest.stub":119,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":349,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":398,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":409,"org.easymock.tests.UsageExpectAndThrowTest.longType":226,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":359,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":20,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":348,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":162,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":152,"org.easymock.tests2.SerializationTest.testClass":82,"org.easymock.tests.LimitationsTest.mockNativeMethod":222,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":205,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":296,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":163,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":19,"org.easymock.tests2.NameTest.nameForMocksControl":319,"org.easymock.tests2.MockedExceptionTest.testMockedException":324,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":209,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":227,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":272,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":132,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":123,"org.easymock.tests.MockingTest.testNicePartialClassMocking":271,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":135,"org.easymock.tests2.CaptureTest.testCaptureLast":128,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":50,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":25,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":70,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":147,"org.easymock.tests.MockingTest.testTwoMocks":303,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":26,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":186,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":231,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":310,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":150,"org.easymock.samples.ExampleTest.removeNonExistingDocument":328,"org.easymock.tests.UsageStrictMockTest.differentMethods":62,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":346,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":158,"org.easymock.tests2.ConstraintsToStringTest.andToString":40,"org.easymock.tests2.MockBuilderTest.testCreateMockString":280,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":297,"org.easymock.tests.UsageExpectAndThrowTest.floatType":225,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":144,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":86,"org.easymock.tests.UsageVerifyTest.twoThrows":52,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":117,"org.easymock.samples.ExampleTest.voteAgainstRemoval":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":407,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":287,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":32,"org.easymock.tests2.UsageConstraintsTest.testNotNull":72,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":250,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":323,"org.easymock.tests2.UsageTest.defaultResetToNice":309,"org.easymock.samples.ExampleTest.voteAgainstRemovals":167,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":201,"org.easymock.tests.UsageVarargTest.differentLength":363,"org.easymock.tests2.CallbackTest.callback":110,"org.easymock.tests2.UsageConstraintsTest.equals":74,"org.easymock.tests.UsageTest.openCallCountByLastCall":208,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":136,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":183,"org.easymock.tests.UsageCallCountTest.tooFewCalls":212,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":113,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":334,"org.easymock.tests.UsageThrowableTest.throwCheckedException":247,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":56,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":115,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":329,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":24,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":351,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":114,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":88,"org.easymock.tests2.CompareToTest.testGreateOrEqual":76,"org.easymock.tests.ObjectMethodsTest.testHashCode":355,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":17,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":160,"org.easymock.tests2.NameTest.nameForNiceMock":318,"org.easymock.tests2.DependencyTest.testInterfaceMocking":89,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":16,"org.easymock.samples.ExampleTest.addDocument":171,"org.easymock.tests2.DelegateToTest.testStubDelegate":154,"org.easymock.tests2.AnswerTest.stubAnswer":87,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":60,"org.easymock.tests.UsageVarargTest.varargLongAccepted":259,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":269,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":406,"org.easymock.tests.UsageExpectAndReturnTest.floatType":188,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":204,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":116,"org.easymock.tests2.ConstraintsToStringTest.orToString":34,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":291,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":403,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":75,"org.easymock.tests.UsageThrowableTest.noUpperLimit":244,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":73,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":126,"org.easymock.tests2.SerializationTest.test":83,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":22,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":187,"org.easymock.tests2.UsageConstraintsTest.testSame":138,"org.easymock.samples.SupportTest.addDocument":164,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":347,"org.easymock.tests.GenericTest.testPackageScope":295,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":11,"org.easymock.tests2.NameTest.nameForMock":316,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":198,"org.easymock.tests2.UsageStrictMockTest.differentMethods":45,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":30,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":190,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":237,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":266,"org.easymock.tests2.MockedExceptionTest.testRealException":325,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":57,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":43,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":182,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":353,"org.easymock.tests2.NameTest.nameForStrictMock":317,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":1,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":91,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":282,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":411,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":10,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":275,"org.easymock.tests2.UsageStrictMockTest.range":44,"org.easymock.tests2.UsageConstraintsTest.lessThan":79,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":313,"org.easymock.tests2.CaptureTest.testCaptureRightOne":65,"org.easymock.tests2.UsageConstraintsTest.testOr":69,"org.easymock.tests.UsageRangeTest.combination":264,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":281,"org.easymock.tests.UsageTest.wrongArguments":335,"org.easymock.tests2.MockBuilderTest.testWithConstructor":27,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":298,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":191,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":199,"org.easymock.tests.UsageVarargTest.varargShortAccepted":258,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":340,"org.easymock.tests2.UsageConstraintsTest.cmpTo":140,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":391,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":98,"org.easymock.tests2.CaptureTest.testCaptureFromStub":321,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":343,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":276,"org.easymock.tests.UsageTest.unexpectedCallWithArray":47,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":59,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":213,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":29,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":200,"org.easymock.tests2.CaptureTest.testCapture":384,"org.easymock.tests2.UsageConstraintsTest.constraints":66,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":268,"org.easymock.samples.ExampleTest.addAndChangeDocument":173,"org.easymock.tests2.ConstraintsToStringTest.notToString":36,"org.easymock.tests.UsageStrictMockTest.testVerify":383,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":174,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":267,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":377,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":127,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":389,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":219,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":192,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":220,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":374,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":314}}]

[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1531","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0,1,2,3,4],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","position":"org.easymock.internal.matchers.EndsWith:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:133","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:800","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.ObjectMethodsFilter:92","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>))","position":"org.easymock.internal.DefaultClassInstantiator:42","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.ExpectedInvocation:108","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:197","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:78","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.IExpectationSetters<T>)(org.easymock.internal.MocksControl))","position":"org.easymock.EasyMock:562","type":"CtReturnImpl"},"status":-2},{"failures":[5,6,7,8,9,10],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ArgumentToString:46","type":"mutation","status":-1},{"failures":[11],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","position":"org.easymock.internal.ObjectMethodsFilter:45","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.TypeVariable<?>.getBounds()","position":"org.easymock.internal.BridgeMethodResolver:350","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:355","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1397","type":"CtReturnImpl"},"status":-2},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:352","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Constructor<?>.getParameterTypes()","position":"org.easymock.ConstructorArgs:48","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:345","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:161","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"paramTypes":"paramTypes","name":"name","clazz":"searchType"},"name":"replace","transplant":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","position":"org.easymock.internal.LastControl:124","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","position":"org.easymock.internal.EasyMockProperties:69","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : java.util.List<org.easymock.internal.Injection>) {\n    final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier());\n    final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field);\n    if (org.easymock.internal.InjectionTarget == null) {\n        continue;\n    } \n    if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n        org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n        java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n    } \n}","position":"org.easymock.internal.Injector:161","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","position":"org.easymock.EasyMock:1951","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:324","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","position":"org.easymock.EasyMock:1646","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"verified":"matched"},"name":"add","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.Injection:74","type":"CtAssignmentImpl"},"status":0},{"failures":[28],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"status":0},{"failures":[29],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.ErrorMessage:40","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"suid":"this"},"name":"replace","transplant":{"sourceCode":"return java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","position":"org.easymock.internal.DefaultClassInstantiator:155","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"status":-2},{"failures":[30],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:380","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:144","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:53","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:190","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:233","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1803","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","position":"org.easymock.EasyMock:759","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"java.lang.Float.TYPE":"java.lang.Float.TYPE","number":"number","java.lang.Double.TYPE":"java.lang.Double.TYPE","returnType":"returnType"},"name":"add","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(this.java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(this.java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:202","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.Result:46","type":"CtThrowImpl"},"status":-2},{"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,21,46,47,48,49,50,22,51,52,53,54,55,23,56,57,58,24,59,25,27,60],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:108","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"status":-2},{"failures":[61,62,63,64,65,66,67,68,69,70],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.MocksControl:276","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:352","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"result":"method","method":"method"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.AndroidClassProxyFactory:80","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:210","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \")","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:58","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ClassProxyFactory:200","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"genericType":"genericType"},"name":"add","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","position":"org.easymock.internal.RecordState:336","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"status":0},{"failures":[71,72],"variableMapping":{"rawType":"genericParameter","typeVariableMap":"typeVariableMap","this":"this","candidateParameter":"candidateParameter"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:200","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isArray()) {\n    final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n            return false;\n        } \n        break;\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:196","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Object java.lang.Object","position":"org.easymock.internal.Injector:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.ConstructorArgs:57","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:90","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>.getName(), java.lang.Integer.java.lang.Class<java.lang.Integer>)","position":"org.easymock.internal.MethodSerializationWrapper:37","type":"CtInvocationImpl"},"status":0},{"failures":[73,74,75],"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","position":"org.easymock.internal.matchers.Equals:53","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"max":"endPosition","java.lang.Integer.MAX_VALUE":"endPosition"},"name":"add","transplant":{"sourceCode":"int = int","position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{"shouldBeUsedInOneThread":"state","this":"this","mock":"mock"},"name":"add","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","position":"org.easymock.EasyMock:2159","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","position":"org.easymock.EasyMock:2096","type":"CtInvocationImpl"},"status":0},{"failures":[76],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToDefault()","position":"org.easymock.EasyMockSupport:584","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToStrict()","position":"org.easymock.EasyMockSupport:595","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:159","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","position":"org.easymock.EasyMock:2159","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"cls":"searchType","type":"searchType"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.ReflectionUtils:120","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.util.LinkedList<org.easymock.internal.Range>.isEmpty())) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.getLast();\n    if (!(org.easymock.internal.Range.hasFixedCount())) {\n        throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n    } \n} ","position":"org.easymock.internal.Results:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String).matcher(((java.lang.String)(java.lang.Object))).find())","position":"org.easymock.internal.matchers.Find:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:323","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int < 0","position":"org.easymock.LogicalOperator:27","type":"CtReturnImpl"},"status":-2},{"failures":[77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","position":"org.easymock.internal.LastControl:96","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"replace","transplant":{"sourceCode":"return new java.lang.Class[]{ java.lang.Class<?> }","position":"org.easymock.internal.BridgeMethodResolver:378","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isInterface()) {\n    return new java.lang.Class[]{ java.lang.Class<?> };\n} ","position":"org.easymock.internal.BridgeMethodResolver:377","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","position":"org.easymock.EasyMock:1079","type":"CtInvocationImpl"},"status":-2},{"failures":[61,63,97,64,98,99,100,101,102,103,31,104,105,106,107,108,109,110,111,77,78,79,80,81,82,83,84,86,112,113,28,114,115,116,117,118,87,88,119,120,89,90,121,122,123,124,125,126,127,128,129,130,131,132,133,65,66,134,135,136,137,138,139,140,141,142,76,143,144,145,146,147,148,149,91,92,93,94,150,151,152,153,154,95,155,156,157,158,159,67,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,68,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,14,216,217,218,219,220,15,221,222,223,224,225,16,226,227,228,17,229,18,230,231,232,36,233,42,234,235,30,236,237,238,239,240,241,242,243,244,245,246,43,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,44,265,266,267,268,269,45,21,46,47,48,49,50,22,51,52,53,54,55,23,56,57,58,24,59,25,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:221","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.reflect.Type[].int) > 0) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0];\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.lang.reflect.Type = java.lang.reflect.Type;\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:352","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:314","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.matchers.Equals org.easymock.internal.matchers.Equals = ((org.easymock.internal.matchers.Equals)(java.lang.Object))","position":"org.easymock.internal.matchers.Equals:56","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"status":-2},{"failures":[61,63,97,104,105,287,106,65,66,91,92,93,94,12,150,151,152,153,154,95,96,13,155,68,288,289],"binaryOperator":"(java.util.Stack<org.easymock.internal.Invocation> == null)","name":"removeConditional","position":"org.easymock.internal.LastControl:116","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1333","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","position":"org.easymock.internal.ClassProxyFactory:273","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ClassProxyFactory:194","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1555","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int]","position":"org.easymock.internal.BridgeMethodResolver:383","type":"CtLocalVariableImpl"},"status":-2},{"failures":[72],"variableMapping":{"method":"m"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:75","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.DefaultClassInstantiator:162","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","position":"org.easymock.internal.MocksBehavior:122","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.ConstructorArgs:56","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","position":"org.easymock.internal.ReplayState:45","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"message":"methodName"},"name":"add","transplant":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.ErrorMessage:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)) {\n    return (java.lang.String + \".\") + java.lang.String;\n} ","position":"org.easymock.internal.Invocation:153","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"between \" + (int))","name":"math","position":"org.easymock.internal.Range:70","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.IAnswer<?>.answer()","position":"org.easymock.internal.Result:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"status":-2},{"failures":[132,290,181],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:190","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","position":"org.easymock.internal.ClassProxyFactory:269","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","position":"org.easymock.internal.ClassProxyFactory:273","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"java.lang.Integer.MAX_VALUE":"java.lang.reflect.Modifier.FINAL","maximum":"java.lang.reflect.Modifier.FINAL"},"name":"replace","transplant":{"sourceCode":"return (this.java.lang.reflect.Modifier.int) == (this.java.lang.reflect.Modifier.int)","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.reflect.Field == null) || (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0)","position":"org.easymock.internal.Injector:224","type":"CtReturnImpl"},"status":-2},{"failures":[71,72],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1360","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","position":"org.easymock.internal.BridgeMethodResolver:266","type":"CtWhileImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"-4859402739599754147L","position":"org.easymock.internal.matchers.Compare:32","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"break","position":"org.easymock.Capture:107","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:49","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:509","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"status":-2},{"failures":[123,291,124,184,253,292,254,264,44,265,293,294,29,295,26,270],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:853","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-1},{"failures":[123,124,125,184,231,253,254,255,264,44,265,296,270],"variableMapping":{"arg":"mock"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":37,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":131,"org.easymock.tests2.MockedExceptionTest.testRealException":137,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":252,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":57,"org.easymock.tests.UsageVarargTest.varargIntAccepted":279,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":263,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":110,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":102,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":203,"org.easymock.tests2.UsageConstraintsTest.testContains":113,"org.easymock.tests2.UsageConstraintsTest.testFind":79,"org.easymock.tests2.StubTest.stubWithReturnValue":31,"org.easymock.tests.UsageVarargTest.allKinds":286,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":150,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":269,"org.easymock.tests2.CaptureTest.testCaptureAll":92,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":236,"org.easymock.samples.ExampleTest.addAndChangeDocument":196,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":167,"org.easymock.tests.UsageVarargTest.varargCharAccepted":280,"org.easymock.tests2.CaptureTest.testCaptureFromStub":96,"org.easymock.tests.UsageVerifyTest.twoThrows":44,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":249,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":281,"org.easymock.tests2.DelegateToTest.testReturnException":104,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":186,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":116,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":148,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":71,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":122,"org.easymock.tests2.CaptureTest.testAnd":91,"org.easymock.tests.UsageStrictMockTest.testVerify":256,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":51,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":154,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":288,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":55,"org.easymock.tests2.UsageConstraintsTest.testMatches":115,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":1,"org.easymock.tests2.UsageConstraintsTest.testNull":80,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":172,"org.easymock.tests2.EasyMockSupportClassTest.testAll":98,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":76,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":16,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":58,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":164,"org.easymock.tests.UsageThrowableTest.throwError":35,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":230,"org.easymock.tests2.UsageConstraintsTest.greaterThan":117,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":277,"org.easymock.samples.SupportTest.addDocument":200,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":250,"org.easymock.tests2.StubTest.stub":103,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":241,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":3,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":18,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":87,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":145,"org.easymock.tests.UsageExpectAndReturnTest.object":223,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":4,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":285,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":125,"org.easymock.tests.UsageExpectAndThrowTest.object":53,"org.easymock.tests2.DelegateToTest.testWrongClass":287,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":7,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":245,"org.easymock.tests2.UsageTest.moreThanOneArgument":184,"org.easymock.tests.UsageVarargTest.varargByteAccepted":284,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":22,"org.easymock.samples.ExampleTest.voteAgainstRemoval":193,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":213,"org.easymock.tests.CapturesMatcherTest.test":289,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":40,"org.easymock.tests.UsageVarargTest.varargShortAccepted":282,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":54,"org.easymock.tests2.UsageTest.defaultResetToNice":187,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":8,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":5,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":136,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":240,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":202,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":171,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":159,"org.easymock.tests2.SerializationTest.testAllMockedMethod":109,"org.easymock.tests2.NameTest.nameForMocksControl":182,"org.easymock.samples.ExampleTest.voteAgainstRemovals":191,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":273,"org.easymock.tests2.CaptureTest.testCapture1_2446744":12,"org.easymock.tests.ErrorMessageTest.testGetters":29,"org.easymock.tests2.DelegateToTest.testStubDelegate":105,"org.easymock.tests.LimitationsTest.mockNativeMethod":251,"org.easymock.tests.UsageUnorderedTest.message":26,"org.easymock.samples.ExampleTest.answerVsDelegate":68,"org.easymock.samples.ExampleTest.voteForRemoval":192,"org.easymock.tests.UsageCallCountTest.tooFewCalls":207,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":222,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":63,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":209,"org.easymock.tests.UsageVerifyTest.twoReturns":265,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":70,"org.easymock.tests2.DependencyTest.testInterfaceMocking":165,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":218,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":138,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":231,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":244,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":141,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":163,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":83,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":255,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":266,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":294,"org.easymock.tests2.CaptureTest.testCaptureRightOne":95,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":220,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":206,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":267,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":134,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":62,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":130,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":272,"org.easymock.tests2.UsageConstraintsTest.cmpTo":112,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":204,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":224,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":174,"org.easymock.tests2.MockedExceptionTest.testMockedException":135,"org.easymock.tests.UsageThrowableTest.throwCheckedException":38,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":25,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":120,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":259,"org.easymock.samples.PartialClassMockTest.testGetArea":199,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":264,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":36,"org.easymock.samples.ExampleTest.voteForRemovals":195,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":42,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":114,"org.easymock.samples.ConstructorCalledMockTest.testTax":197,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":34,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":246,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":129,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":27,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":64,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":219,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":210,"org.easymock.tests2.AnswerTest.answer":61,"org.easymock.tests.MockingTest.testNicePartialClassMocking":235,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":253,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":14,"org.easymock.tests2.UsageConstraintsTest.any":86,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":221,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":242,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":20,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":261,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":147,"org.easymock.tests.UsageExpectAndThrowTest.longType":47,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":24,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":66,"org.easymock.tests2.CallbackTest.callback":67,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":100,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":144,"org.easymock.tests2.NameTest.nameForMock":179,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":78,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":170,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":28,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":229,"org.easymock.tests2.NameTest.nameForStrictMock":180,"org.easymock.tests2.CaptureTest.testCaptureNone":153,"org.easymock.tests2.SerializationTest.test":108,"org.easymock.tests.UsageExpectAndReturnTest.longType":217,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":2,"org.easymock.tests2.SerializationTest.testClass":107,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":151,"org.easymock.tests2.CaptureTest.testCaptureFirst":155,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":88,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":296,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":189,"org.easymock.tests2.EasyMockSupportTest.testVerify":149,"org.easymock.tests2.UsageTest.niceToStrict":185,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":243,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":214,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":169,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":49,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":32,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":23,"org.easymock.tests2.UsageTest.strictResetToDefault":183,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":17,"org.easymock.tests.GenericTest.testBridgedEquals":72,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":133,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":45,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":84,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":15,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":176,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":160,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":118,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":128,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":278,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":126,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":247,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":30,"org.easymock.tests2.UsageConstraintsTest.testOr":82,"org.easymock.tests2.DelegateToTest.testDelegate":106,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":158,"org.easymock.tests2.UsageConstraintsTest.testNotNull":89,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":156,"org.easymock.tests2.CaptureTest.testCapture_2617107":93,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":11,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":41,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":225,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":237,"org.easymock.tests2.ThreadingTest.testThreadSafe":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":19,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":33,"org.easymock.tests.UsageThrowableTest.noUpperLimit":232,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":258,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":173,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":175,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":146,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":139,"org.easymock.tests.UsageExpectAndReturnTest.floatType":216,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":85,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":162,"org.easymock.tests2.UsageConstraintsTest.testSame":81,"org.easymock.tests2.UsageTest.resumeIfFailure":188,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":177,"org.easymock.tests.UsageOverloadedMethodTest.overloading":233,"org.easymock.samples.SupportTest.voteForRemovals":201,"org.easymock.tests.UsageRangeTest.combination":271,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":39,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":198,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":90,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":276,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":50,"org.easymock.tests2.NameTest.nameForNiceMock":181,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":274,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":119,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":257,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":123,"org.easymock.tests2.CaptureTest.testPrimitive":94,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":127,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":226,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":56,"org.easymock.samples.BasicClassMockTest.testPrintContent":190,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":268,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":238,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":295,"org.easymock.tests.UsageExpectAndThrowTest.floatType":46,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":132,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":65,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":227,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":205,"org.easymock.tests2.UsageStrictMockTest.differentMethods":124,"org.easymock.tests2.AnswerTest.stubAnswer":97,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":140,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":143,"org.easymock.tests2.CaptureTest.testCaptureLast":152,"org.easymock.tests2.UsageConstraintsTest.equals":73,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":21,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":208,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":99,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":166,"org.easymock.tests.UsageStrictMockTest.range":292,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":60,"org.easymock.tests.UsageTest.unexpectedCallWithArray":10,"org.easymock.tests.MockingTest.testPartialClassMocking":234,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":228,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":74,"org.easymock.tests2.UsageConstraintsTest.constraints":77,"org.easymock.samples.ExampleTest.addDocument":194,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":293,"org.easymock.tests2.UsageConstraintsTest.lessThan":121,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":161,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":75,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":69,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":260,"org.easymock.tests.UsageVarargTest.varargLongAccepted":283,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":9,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":6,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":101,"org.easymock.tests2.UsageStrictMockTest.range":291,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":178,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":212,"org.easymock.tests.UsageTest.moreThanOneArgument":270,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":239,"org.easymock.tests.UsageStrictMockTest.differentMethods":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":142,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":111,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":262,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":0,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":48,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":215,"org.easymock.tests2.CaptureTest.testCapture2_2446744":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":43,"org.easymock.tests.GenericTest.testPackageScope":275}}]

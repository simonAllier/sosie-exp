[{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[0,1,2,3,4],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[5,6,7],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[8,9,10,11,12,13,14],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:127","sourceCode":"java.lang.Object[][int] = java.lang.Object","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:249","sourceCode":"return ","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[56,8,57,58,59,60,61,62,15,15,16,16,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,17,79,80,9,81,82,83,84,85,86,87,88,89,90,18,91,92,93,94,95,96,97,98,99,19,20,100,101,21,22,23,24,102,103,104,105,25,106,26,27,107,28,29,108,109,110,111,30,31,32,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,33,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,10,144,11,145,146,12,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,1,3,34,35,172,173,174,175,176,177,41,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,14,193,194,195,42,43,196,197,44,45,46,47,48,49,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,50,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,51,52,53,54,55,261,262,263,264],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[100,101,22,24,102,265,108,30,120,266,127],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"failures":[67,267,268,269,270,271,272,273],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[274],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[56,8,57,58,275,59,60,63,64,65,66,67,69,72,73,76,77,276,17,80,277,278,279,280,281,9,82,83,84,282,87,88,90,18,95,96,99,19,20,100,101,21,22,23,24,102,103,104,105,25,106,26,27,107,28,29,108,109,110,111,30,31,32,283,284,285,286,112,113,115,116,119,120,121,266,122,287,288,124,125,126,127,129,142,143,289,10,145,146,12,290,148,291,152,154,155,156,157,158,292,160,163,164,293,294,295,296,165,166,167,168,1,2,297,298,299,300,301,34,35,173,174,175,302,41,179,303,304,181,185,186,187,188,189,190,191,192,195,42,43,44,45,46,47,48,49,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,50,305,306,307,308,309,310,311,312,313,314,225,226,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,256,257,258,315,316,259,317,318,319,320,51,52,53,54,55,321],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[129],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[17,80,277,83,283,284,285,286,173,174,175,41,179,303,181,315,259,317],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[67,322,142,268,269,270,323,273,324,325],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:50","failures":[15,16,67,322,73,77,326,327,328,329,330,331,91,332,333,92,334,335,336,337,338,339,340,341,342,93,343,344,345,346,347,94,348,349,142,350,351,324,325,352,353],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[88,166,167,168],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:801","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"failures":[56,8,57,58,275,59,354,60,355,356,357,61,63,64,65,66,358,359,69,70,74,75,360,276,17,361,79,80,277,362,278,279,280,281,9,81,82,83,363,84,282,85,86,87,364,365,88,89,90,18,366,367,368,369,329,91,333,92,335,341,344,347,95,96,97,98,99,19,20,100,101,21,22,23,24,102,103,265,104,105,25,106,26,27,107,28,29,108,109,110,370,111,30,31,32,283,112,113,114,115,116,117,118,119,120,121,266,122,123,287,288,124,125,126,127,33,128,129,130,131,132,133,134,135,137,139,140,141,371,143,289,10,144,11,145,146,12,152,153,154,155,156,157,372,158,373,292,159,161,374,162,163,164,293,294,295,296,165,166,167,168,169,170,171,1,2,4,375,376,297,298,299,300,301,34,35,172,173,174,175,176,177,377,302,378,41,379,178,179,303,304,180,181,380,381,182,183,382,383,184,384,185,186,187,188,189,190,191,192,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,14,402,193,194,403,195,404,42,43,196,197,44,45,46,47,48,49,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,50,223,305,306,307,308,309,405,310,311,312,313,314,406,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,407,408,409,256,410,411,412,413,315,316,259,317,318,319,414,415,416,417,320,418,419,420,421,422,423,260,51,52,53,54,55,261,262,263,424,425,426,427,428,429,430,431,432,433,264,321],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[101,24,265],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[176,433,264],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1494","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","type":"CtInvocationImpl"},"failures":[101,102,108],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksControl:190","failures":[360,79,80,9,84,282,365,101,102,103,104,106,108,109,110,111,127,131,133,135,136,139,140,141,151,153,160,163,165,172,174,377,178,179,383,224,225,227,228,229,230,231],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:174","sourceCode":"try {\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n} catch (final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException) {\n    net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader());\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:217","failures":[434,56,8,57,58,275,59,354,60,435,355,356,357,61,62,15,15,16,16,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,360,276,17,361,79,80,277,362,278,279,280,281,9,81,82,83,363,84,282,85,86,87,364,365,88,89,90,18,91,92,93,94,95,96,97,98,99,19,20,100,101,21,22,23,24,102,103,265,104,105,25,106,26,27,107,28,29,108,109,110,370,111,30,31,32,283,284,285,286,112,113,114,115,116,117,118,119,120,121,266,122,123,287,288,124,125,126,127,33,128,129,130,131,132,133,134,135,136,137,138,139,140,141,371,142,143,289,10,144,11,145,146,12,290,147,148,291,149,150,436,151,437,152,153,154,155,156,157,438,158,292,159,160,161,162,163,164,293,294,295,296,165,166,167,168,169,170,171,1,2,3,297,298,299,300,301,34,35,172,173,174,175,176,177,377,302,378,41,379,178,179,303,304,180,181,380,381,182,183,382,383,184,185,186,187,188,189,190,191,192,386,387,388,390,391,392,393,394,395,396,397,398,399,400,401,14,402,193,194,403,195,404,42,43,196,197,44,45,46,47,48,49,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,50,223,305,306,307,308,309,405,310,311,312,313,314,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,409,256,257,258,315,316,259,317,318,319,414,415,416,417,320,418,419,420,421,422,423,260,51,52,53,54,55,261,262,263,425,433,264],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[434,56,8,57,58,275,59,60,435,355,356,357,61,62,15,16,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,360,276,17,361,79,80,277,278,279,280,281,9,81,82,83,363,84,282,85,86,87,364,365,88,89,90,18,91,92,93,94,95,96,97,98,99,19,20,100,101,21,22,23,24,102,103,104,105,25,106,26,27,107,28,29,108,109,110,370,111,30,31,32,112,113,115,116,117,119,120,121,266,122,123,287,288,124,125,126,127,33,128,129,130,131,132,133,134,135,136,137,138,139,140,141,371,142,143,289,10,145,146,12,290,147,148,291,149,150,436,151,437,152,153,154,155,156,157,438,158,292,159,160,161,162,163,164,293,294,295,296,165,167,168,1,2,297,298,299,300,301,34,35,172,173,174,175,377,302,378,41,379,178,179,303,439,439,180,181,380,381,182,183,382,383,184,185,186,187,188,189,190,191,192,14,193,194,404,42,43,196,197,44,45,46,47,48,49,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,50,223,305,306,307,308,309,405,310,311,312,313,314,224,225,226,227,228,229,230,231,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,256,257,258,259,317,318,319,414,415,416,51,52,53,54,55],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.Capture:82","failures":[120,266,122,123,287,288,124,126,440,127,33,129],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[267,271,272,441,442],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[443,444,445],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[79,80,178,179],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"minimum"}},{"position":"org.easymock.ConstructorArgs:60","failures":[322,73,77,326,327,328,350,351,324,352,353],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[100,101,22,24,102,265,108,30,120,266,127],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:234","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[396],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[434,56,8,57,58,275,59,354,60,435,355,356,357,61,62,63,64,65,66,446,447,448,449,450,68,443,451,452,453,454,455,358,359,69,70,71,72,74,75,326,456,457,458,459,460,78,444,461,462,463,464,465,360,276,17,361,79,80,277,362,278,279,280,281,9,81,82,83,363,84,282,85,86,87,364,365,88,89,90,18,366,367,368,369,329,330,91,333,92,334,335,338,341,93,343,344,345,346,347,94,95,96,97,98,99,19,20,100,101,274,21,22,23,24,102,103,265,104,105,25,106,26,27,107,28,29,108,109,110,370,111,30,31,32,466,283,284,285,286,112,467,113,114,115,116,117,118,119,120,121,266,122,123,287,288,124,125,126,127,33,128,129,130,131,132,133,134,135,136,137,138,139,140,141,371,143,289,10,144,11,145,146,12,290,147,468,469,148,291,149,150,436,151,437,152,153,154,155,156,157,438,372,158,373,292,159,160,161,374,470,162,163,164,293,294,295,296,165,166,167,168,169,170,171,0,1,2,3,4,471,375,445,472,473,376,297,298,299,300,301,34,35,172,173,174,175,36,474,475,476,37,38,477,478,479,480,481,482,483,13,39,484,176,485,486,40,487,488,177,489,377,302,378,41,379,178,179,303,304,180,181,380,381,182,183,382,383,184,384,490,185,491,186,187,188,189,190,191,192,385,386,387,388,389,492,390,391,392,393,394,395,396,397,398,399,400,401,14,402,193,194,403,195,404,42,43,196,197,44,45,46,47,48,49,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,50,223,305,306,307,493,308,309,405,310,311,312,313,314,406,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,407,408,409,410,411,412,413,315,316,259,317,318,319,414,415,416,417,320,418,419,420,421,422,423,494,260,495,51,52,53,54,55,261,262,263,424,425,426,427,428,429,430,431,432,433,264,321],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.RecordState:305","failures":[176,433,264],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"actualTypeArgument","this":"this"}},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[496],"status":-1,"binaryOperator":"(\"eq(\" + (java.lang.Number))","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":101,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":180,"org.easymock.tests2.UsageTest.argumentsOrdered":365,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":140,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":481,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":282,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":434,"org.easymock.tests2.DelegateToTest.testReturnException":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":187,"org.easymock.tests.MockingTest.testPartialClassMocking":256,"org.easymock.tests.MockClassControlTest.testToString":418,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":466,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":260,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":470,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":337,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":92,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":233,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":70,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":268,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":42,"org.easymock.tests2.UsageTest.wrongArguments":363,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":455,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":295,"org.easymock.samples.ExampleTest.answerVsDelegate":8,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":472,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":412,"org.easymock.tests2.UsageConstraintsTest.testNull":22,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":155,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":423,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":139,"org.easymock.tests2.CaptureTest.testPrimitive":122,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":44,"org.easymock.tests.UsageTest.moreThanOneArgument":181,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":252,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":154,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":53,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":218,"org.easymock.tests.UsageTest.argumentsOrdered":383,"org.easymock.tests.UsageVarargTest.varargIntAccepted":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":484,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":45,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":272,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":290,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":464,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":475,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":49,"org.easymock.tests.ReplayStateInvalidUsageTest.times":398,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":68,"org.easymock.tests2.DependencyTest.testClassMocking":358,"org.easymock.tests2.AnswerTest.answer":10,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":485,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":281,"org.easymock.tests2.CaptureTest.testAnd":120,"org.easymock.tests2.UsageTest.strictResetToDefault":82,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":292,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":351,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":52,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":167,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":134,"org.easymock.tests2.DelegateToTest.testDelegate":119,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":222,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":248,"org.easymock.tests.LimitationsTest.mockFinalMethod":491,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":190,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":301,"org.easymock.tests2.DependencyTest.testClassMockingSupport":359,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":433,"org.easymock.tests2.CaptureTest.testCapture1_2446744":123,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":372,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":246,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":279,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":392,"org.easymock.tests.UsageThrowableTest.throwError":224,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":445,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":465,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":55,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":349,"org.easymock.samples.PartialClassMockTest.testGetArea":62,"org.easymock.tests.MockingTest.testInterfaceMocking":410,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":393,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":46,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":254,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":492,"org.easymock.tests2.UsageTest.niceToStrict":84,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":36,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":7,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":148,"org.easymock.tests2.MockBuilderTest.testCreateMock":436,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":345,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":452,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":242,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":135,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":171,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":315,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":293,"org.easymock.tests.UsageOverloadedMethodTest.overloading":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":347,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":26,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":194,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":162,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":209,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":106,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":126,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":493,"org.easymock.tests.MockClassControlTest.testEquals":422,"org.easymock.tests2.EasyMockSupportClassTest.testAll":91,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":2,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":250,"org.easymock.tests2.CaptureTest.testCaptureAll":121,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":280,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":299,"org.easymock.tests.MockNameTest.defaultName":406,"org.easymock.tests2.UsageConstraintsTest.testMatches":27,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":390,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":54,"org.easymock.samples.ExampleTest.voteForRemovals":59,"org.easymock.tests.UsageVarargTest.allKinds":314,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":173,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":300,"org.easymock.samples.BasicClassMockTest.testPrintContent":356,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":230,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":360,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":461,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":191,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":118,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":431,"org.easymock.tests2.UsageConstraintsTest.greaterThan":28,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":332,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":166,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":161,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":432,"org.easymock.samples.ExampleTest.voteForRemoval":57,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":96,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":374,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":473,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":438,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":81,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":192,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":325,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":478,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":132,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":330,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":186,"org.easymock.tests2.CaptureTest.testCaptureFirst":129,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":477,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":133,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":89,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":404,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":205,"org.easymock.tests2.CaptureTest.testCapture2_2446744":128,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":98,"org.easymock.tests2.UsageTest.moreThanOneArgument":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":486,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":151,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":313,"org.easymock.tests.GenericTest.testBridgedEquals":4,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":415,"org.easymock.tests.UsageExpectAndReturnTest.longType":201,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":130,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":297,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":251,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":232,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":370,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":249,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":51,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":262,"org.easymock.tests.UsageCallCountTest.tooManyCalls":416,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":346,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":206,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":454,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":238,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":229,"org.easymock.tests.MockingTest.testNiceClassMocking":413,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":72,"org.easymock.tests.MockingTest.testClassMocking":408,"org.easymock.tests2.UsageConstraintsTest.testContains":25,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":316,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":65,"org.easymock.tests2.UsageConstraintsTest.testFind":21,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":164,"org.easymock.tests.MockTypeTest.fromEasyMockClass":375,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":113,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":377,"org.easymock.tests.UsageExpectAndReturnTest.object":208,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":158,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":453,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":496,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":138,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":269,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":309,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":388,"org.easymock.tests.UsageTest.exactCallCountByLastCall":184,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":38,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":494,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":219,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":322,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":214,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":305,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":193,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":457,"org.easymock.tests.MockClassControlTest.testHashCode":421,"org.easymock.tests2.EasyMockSupportTest.testVerify":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":340,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":220,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":170,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":14,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":278,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":362,"org.easymock.tests.UsageVarargTest.varargCharAccepted":308,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":424,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":489,"org.easymock.tests2.UsageTest.openCallCountByLastCall":85,"org.easymock.tests.DefaultClassInstantiatorTest.object":425,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":141,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":5,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":169,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":386,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":341,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":227,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":449,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":456,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":420,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":159,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":239,"org.easymock.tests.CapturesMatcherTest.test":439,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":215,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":261,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":419,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":94,"org.easymock.tests2.UsageTest.resumeIfFailure":88,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":471,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":189,"org.easymock.tests2.StubTest.stubWithReturnValue":18,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":324,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":111,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":207,"org.easymock.tests2.SerializationTest.testAllMockedMethod":289,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":176,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":442,"org.easymock.samples.SupportTest.voteForRemovals":61,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":459,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":245,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":177,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":144,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":495,"org.easymock.tests.UsageExpectAndThrowTest.object":243,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":109,"org.easymock.tests2.DelegateToTest.testWrongClass":117,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":34,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":35,"org.easymock.tests.UsageStrictMockTest.range":178,"org.easymock.samples.ConstructorCalledMockTest.testTax":15,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":368,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":137,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":71,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":244,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":149,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":329,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":382,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":294,"org.easymock.tests2.CaptureTest.testCaptureNone":125,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":255,"org.easymock.tests.UsageUnorderedTest.message":172,"org.easymock.tests.UsageVerifyTest.twoReturns":175,"org.easymock.tests.UsageVarargTest.varargByteAccepted":312,"org.easymock.tests2.ThreadingTest.testThreadSafe":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":343,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":319,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":389,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":355,"org.easymock.tests2.CaptureTest.testCapture_2617107":266,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":487,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":197,"org.easymock.tests2.UsageConstraintsTest.any":104,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":397,"org.easymock.tests2.StubTest.stub":90,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":488,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":188,"org.easymock.tests.UsageExpectAndThrowTest.longType":236,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":429,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":396,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":361,"org.easymock.tests2.SerializationTest.testClass":142,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":78,"org.easymock.tests.LimitationsTest.mockNativeMethod":185,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":3,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":217,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":448,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":277,"org.easymock.tests2.NameTest.nameForMocksControl":286,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":450,"org.easymock.tests2.MockedExceptionTest.testMockedException":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":333,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":183,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":467,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":237,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":258,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":152,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":150,"org.easymock.tests.MockingTest.testNicePartialClassMocking":257,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":157,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":446,"org.easymock.tests2.CaptureTest.testCaptureLast":124,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":267,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":264,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":102,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":77,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":110,"org.easymock.tests.MockingTest.testTwoMocks":409,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":326,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":198,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":241,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":364,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":31,"org.easymock.samples.ExampleTest.removeNonExistingDocument":354,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":451,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":394,"org.easymock.tests.UsageStrictMockTest.differentMethods":179,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":458,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":427,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":97,"org.easymock.tests2.MockBuilderTest.testCreateMockString":437,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":417,"org.easymock.tests.UsageExpectAndThrowTest.floatType":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":334,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":331,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":145,"org.easymock.tests.UsageVerifyTest.twoThrows":174,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":93,"org.easymock.samples.ExampleTest.voteAgainstRemoval":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":482,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":253,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":160,"org.easymock.tests.LimitationsTest.privateConstructor":490,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":328,"org.easymock.tests2.UsageConstraintsTest.testNotNull":30,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":63,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":231,"org.easymock.tests2.UsageTest.defaultResetToNice":87,"org.easymock.samples.ExampleTest.voteAgainstRemovals":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":483,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":213,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":447,"org.easymock.tests.UsageVarargTest.differentLength":405,"org.easymock.tests2.CallbackTest.callback":9,"org.easymock.tests2.UsageConstraintsTest.equals":274,"org.easymock.tests.UsageTest.openCallCountByLastCall":182,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":19,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":196,"org.easymock.tests.UsageCallCountTest.tooFewCalls":317,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":74,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":296,"org.easymock.tests.UsageThrowableTest.throwCheckedException":228,"org.easymock.tests.MockingTest.testStrictClassMocking":407,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":76,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":223,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":443,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":73,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":399,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":75,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":12,"org.easymock.tests.ObjectMethodsTest.testHashCode":387,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":271,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":99,"org.easymock.tests2.NameTest.nameForNiceMock":285,"org.easymock.tests2.DependencyTest.testInterfaceMocking":69,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":270,"org.easymock.samples.ExampleTest.addDocument":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":344,"org.easymock.tests2.DelegateToTest.testStubDelegate":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":348,"org.easymock.tests2.AnswerTest.stubAnswer":146,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":41,"org.easymock.tests.UsageVarargTest.varargLongAccepted":311,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":480,"org.easymock.tests.UsageExpectAndReturnTest.floatType":200,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":216,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":67,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":16,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":463,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":403,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":29,"org.easymock.tests.UsageThrowableTest.noUpperLimit":225,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":20,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":366,"org.easymock.tests2.SerializationTest.test":143,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":287,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":426,"org.easymock.tests2.UsageConstraintsTest.testSame":23,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":199,"org.easymock.samples.SupportTest.addDocument":357,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":335,"org.easymock.tests.GenericTest.testPackageScope":1,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":37,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":462,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":411,"org.easymock.tests2.NameTest.nameForMock":283,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":210,"org.easymock.tests2.UsageStrictMockTest.differentMethods":80,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":353,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":373,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":202,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":247,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":385,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":168,"org.easymock.tests2.MockedExceptionTest.testRealException":66,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":376,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":39,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":369,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":13,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":17,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":401,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":43,"org.easymock.tests2.NameTest.nameForStrictMock":284,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":469,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":112,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":6,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":156,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":367,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":428,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":108,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":147,"org.easymock.tests2.UsageStrictMockTest.range":79,"org.easymock.tests2.UsageConstraintsTest.lessThan":32,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":460,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":479,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":131,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":323,"org.easymock.tests2.CaptureTest.testCaptureRightOne":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":339,"org.easymock.tests2.UsageConstraintsTest.testOr":24,"org.easymock.tests.UsageRangeTest.combination":165,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":153,"org.easymock.tests.UsageTest.wrongArguments":381,"org.easymock.tests2.MockBuilderTest.testWithConstructor":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":336,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":320,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":474,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":211,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":430,"org.easymock.tests.UsageVarargTest.varargShortAccepted":310,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":414,"org.easymock.tests2.UsageConstraintsTest.cmpTo":105,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":476,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":86,"org.easymock.tests2.CaptureTest.testCaptureFromStub":33,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":391,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":468,"org.easymock.tests.UsageTest.unexpectedCallWithArray":380,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":378,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":318,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":352,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":212,"org.easymock.tests2.CaptureTest.testCapture":440,"org.easymock.tests2.UsageConstraintsTest.constraints":100,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":379,"org.easymock.samples.ExampleTest.addAndChangeDocument":60,"org.easymock.tests.UsageStrictMockTest.testVerify":304,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":435,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":302,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":298,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":288,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":47,"org.easymock.tests.LimitationsTest.abstractClass":384,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":204,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":48,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":195,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":136,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":306}}]

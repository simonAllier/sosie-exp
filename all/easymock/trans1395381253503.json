[{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[3],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[4,5,6,7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Matches:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","type":"CtReturnImpl"},"failures":[8],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[9,10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"failures":[11],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:81","sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[12,13,14,15,16],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[17],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[12,16],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[56,57,58,59],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:194","sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:196","sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"args":"args","mockClass":"mockClass","cstr":"cstr"}},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"failures":[60,61,62,63,64,65,4,56,57,66,67,68,5,69,58,59,7,70,71,72],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[73,74,75,76,77,78,79,61,62,80,81,82,83,84,85,86,87,88,89,90,91,4,57,66,67,68,6,3,92,8,93,94,72,95,96,97,98,21,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,32,33,36,38,39,40,41,43,44,45,46,48,49,50,51,120,53,121,122,123,124,54,125,126,55],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[77,78,102,103,107,110,111,112,115,36,40,41,43,46],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[127,128,0,129,130,131,132,133,134,135],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"ret":"ret","clazz":"clazz"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[89,136,52,18,137],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[77,138,139,140,22,141,142,143,144,102,145,120,146,147,148,149],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"this.org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[150,151,152,153],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[154,155],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this","key":"key"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:39","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>.getName(), java.lang.Float.java.lang.Class<java.lang.Float>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1518","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","type":"CtInvocationImpl"},"failures":[56,5,7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:144","sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[156,157,158,77,78,159,79,150,160,161,162,163,164,4,165,166,167,168,169,152,153,20,96,138,170,97,139,140,171,172,173,174,100,22,141,175,144,176,177,102,103,178,179,104,180,181,182,120,183,121,54,125,147,148,149,184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer","matches":"matches","m":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[60,61,62,63,64,65,4,56,57,66,67,68,5,69,58,59,7,70,71,72],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":56,"org.easymock.tests2.UsageConstraintsTest.testMatches":8,"org.easymock.tests2.UsageTest.argumentsOrdered":140,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":54,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":97,"org.easymock.tests2.StubTest.stubWithReturnValue":19,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":111,"org.easymock.tests2.NameTest.nameForNiceMock":168,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":100,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":131,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":12,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":151,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":44,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":28,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":156,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":137,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":32,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":133,"org.easymock.tests.UsageExpectAndThrowTest.object":42,"org.easymock.tests2.UsageConstraintsTest.greaterThan":93,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":172,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":122,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":70,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":160,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":178,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":129,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":75,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":69,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":118,"org.easymock.tests2.UsageTest.wrongArguments":138,"org.easymock.tests.UsageStrictMockTest.range":102,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":127,"org.easymock.tests.UsageThrowableTest.noUpperLimit":101,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":94,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":20,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":91,"org.easymock.tests2.UsageConstraintsTest.testNull":66,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":43,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":81,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":164,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":135,"org.easymock.tests2.CaptureTest.testPrimitive":63,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":148,"org.easymock.tests.UsageTest.moreThanOneArgument":125,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":24,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":51,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":106,"org.easymock.tests2.UsageConstraintsTest.testSame":67,"org.easymock.tests2.CaptureTest.testCaptureNone":83,"org.easymock.tests2.CaptureTest.testCaptureFirst":85,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":171,"org.easymock.tests.UsageUnorderedTest.message":120,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":145,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":109,"org.easymock.tests.GenericTest.testPackageScope":13,"org.easymock.tests2.UsageTest.moreThanOneArgument":96,"org.easymock.tests2.CaptureTest.testCapture2_2446744":84,"org.easymock.tests.UsageVerifyTest.twoReturns":141,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":153,"org.easymock.tests2.ThreadingTest.testThreadSafe":74,"org.easymock.tests.UsageTest.argumentsOrdered":149,"org.easymock.tests.GenericTest.testBridgedEquals":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":18,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":181,"org.easymock.tests2.NameTest.nameForMock":166,"org.easymock.tests2.CaptureTest.testCapture_2617107":62,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":113,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":50,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":52,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":48,"org.easymock.tests2.UsageConstraintsTest.any":59,"org.easymock.tests2.UsageStrictMockTest.differentMethods":78,"org.easymock.tests2.StubTest.stub":89,"org.easymock.tests.UsageExpectAndThrowTest.longType":35,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":9,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":107,"org.easymock.tests.UsageCallCountTest.tooManyCalls":182,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":158,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":46,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":119,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":15,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":124,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":58,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":104,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":110,"org.easymock.tests2.CaptureTest.testAnd":60,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":159,"org.easymock.tests2.NameTest.nameForMocksControl":169,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":157,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":37,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":27,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":123,"org.easymock.tests2.NameTest.nameForStrictMock":167,"org.easymock.tests2.UsageConstraintsTest.testContains":6,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":55,"org.easymock.tests2.DelegateToTest.testDelegate":88,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":36,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":47,"org.easymock.tests2.UsageConstraintsTest.testFind":57,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":53,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":86,"org.easymock.tests2.CaptureTest.testCaptureLast":82,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":30,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":175,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":87,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":173,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":7,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":5,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":152,"org.easymock.tests2.UsageStrictMockTest.range":77,"org.easymock.tests2.UsageConstraintsTest.lessThan":95,"org.easymock.tests2.CaptureTest.testCapture1_2446744":80,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":130,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":105,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":45,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":40,"org.easymock.tests.UsageTest.exactCallCountByLastCall":184,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":139,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":72,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":155,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":161,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":132,"org.easymock.tests.UsageThrowableTest.throwError":23,"org.easymock.tests.UsageStrictMockTest.differentMethods":103,"org.easymock.tests2.CaptureTest.testCaptureRightOne":64,"org.easymock.tests2.UsageConstraintsTest.testOr":68,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":128,"org.easymock.tests.UsageRangeTest.combination":121,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":116,"org.easymock.tests.UsageTest.wrongArguments":147,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":76,"org.easymock.tests.UsageExpectAndThrowTest.floatType":34,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":165,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":114,"org.easymock.tests.UsageVerifyTest.twoThrows":22,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":142,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":11,"org.easymock.tests2.UsageTest.niceToStrict":170,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":33,"org.easymock.tests2.ThreadingTest.testChangeDefault":154,"org.easymock.tests2.UsageTest.openCallCountByLastCall":98,"org.easymock.tests2.UsageConstraintsTest.testNotNull":71,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":29,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":21,"org.easymock.tests2.CaptureTest.testCaptureFromStub":65,"org.easymock.tests2.UsageTest.defaultResetToNice":10,"org.easymock.tests.UsageVarargTest.differentLength":183,"org.easymock.tests2.CallbackTest.callback":79,"org.easymock.tests.UsageTest.unexpectedCallWithArray":146,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":143,"org.easymock.tests.UsageTest.openCallCountByLastCall":126,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":41,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":39,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":162,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":144,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":25,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":90,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":179,"org.easymock.tests.UsageCallCountTest.tooFewCalls":180,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":115,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":177,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":150,"org.easymock.tests2.UsageConstraintsTest.constraints":4,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":38,"org.easymock.samples.ExampleTest.addAndChangeDocument":73,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":31,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":92,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":112,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":117,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":3,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":17,"org.easymock.tests.UsageThrowableTest.throwCheckedException":26,"org.easymock.tests2.UsageTest.resumeIfFailure":99,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":108,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":14,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":49,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":174,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":163,"org.easymock.tests2.CaptureTest.testCaptureAll":61}}]

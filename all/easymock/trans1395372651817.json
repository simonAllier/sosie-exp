[{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod","typeParameterMap":"typeParameterMap","candidateMethod":"bridgeMethod","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1177","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[17,18,19,20,21,22,1,23,24,3,25,26,27,28,29,30,31,6,32,33,34,35,36,37,38,39,40,41,42,43,14,44,45,46,47,48,49,50,51,52,53,0,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[87,88,89,90],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[91,92,93],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[1,2,94,95,96,24,3,4,5,6,7,8,97,98,99,100,13,101,102,103,14,15,16],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[48,49,51,53,0,55,65,70,73,75,83],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[104],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:83","sourceCode":"return (int) == (java.lang.Integer.int)","type":"CtReturnImpl"},"failures":[105,106,4,5,6,107,108,109,15,16],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"maximum"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:206","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[110],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[111,112,113],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if (java.lang.Object == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[62],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[91,92,93],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:75","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"failures":[114,73,74,75,76,77,78,79,80,82,83,84,85,86],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[115,116,117,118,119,120,87,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"failMessage"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[136,137,138,139,140,141,142,143,144,145,146,147,17,18,19,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,20,21,167,168,169,170,171,172,173,174,175,176,22,177,178,1,23,179,180,181,182,183,2,184,94,105,106,95,96,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,24,3,208,4,5,209,25,26,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,27,28,29,30,31,6,7,8,32,33,34,35,36,233,234,235,236,237,238,239,107,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,37,268,38,269,270,271,272,273,274,275,39,40,41,276,277,278,279,280,13,101,281,282,108,109,283,102,103,284,285,286,287,288,289,290,291,292,42,43,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,14,44,15,16,312,46,47,48,49,50,51,52,53,0,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,313,314,315,316,89,90,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.Capture:82","failures":[73,75,76,77,78,79,80,82,336,83,84,86],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[137,139,142,17,19,148,150,151,152,153,154,20,167,168,169,170,171,173,174,175,176,22,1,95,96,206,207,3,208,4,5,209,25,26,104,230,27,28,29,30,31,7,32,33,34,35,36,239,240,241,242,243,245,246,249,253,258,263,41,276,280,281,282,102,103,287,290,294,296,297,298,299,300,302,303,306,307,308,310,311,14,44,15,16,312,46,47,49,50,51,52,53,0,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,89,333,335,74,75,76,77,78,79,80,81,82,83,85,86],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"control"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[337],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[338],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:345","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[339,340,341,342,343,344],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":49,"org.easymock.tests2.UsageTest.argumentsOrdered":103,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":183,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":307,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":166,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":124,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":282,"org.easymock.tests2.StubTest.stubWithReturnValue":276,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":339,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":252,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":219,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":69,"org.easymock.tests2.SerializationTest.testAllMockedMethod":324,"org.easymock.tests2.DelegateToTest.testReturnException":332,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":164,"org.easymock.tests.MockingTest.testPartialClassMocking":159,"org.easymock.samples.SupportTest.voteForRemovals":249,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":198,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":132,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":273,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":186,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":88,"org.easymock.tests.UsageExpectAndThrowTest.object":196,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":9,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":278,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":66,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":340,"org.easymock.tests2.DelegateToTest.testWrongClass":334,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":25,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":26,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":54,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":32,"org.easymock.tests2.UsageTest.wrongArguments":101,"org.easymock.samples.ConstructorCalledMockTest.testTax":250,"org.easymock.tests.UsageStrictMockTest.range":4,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":145,"org.easymock.samples.ExampleTest.answerVsDelegate":241,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":304,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":325,"org.easymock.tests2.UsageConstraintsTest.testNull":51,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":289,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":197,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":306,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":260,"org.easymock.tests2.CaptureTest.testPrimitive":76,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":36,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":205,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":95,"org.easymock.tests.UsageTest.moreThanOneArgument":2,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":288,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":144,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":235,"org.easymock.tests2.CaptureTest.testCaptureNone":81,"org.easymock.tests.UsageUnorderedTest.message":1,"org.easymock.tests.UsageVerifyTest.twoReturns":8,"org.easymock.tests.UsageVarargTest.varargByteAccepted":175,"org.easymock.tests2.ThreadingTest.testThreadSafe":265,"org.easymock.tests.UsageTest.argumentsOrdered":96,"org.easymock.tests.UsageVarargTest.varargIntAccepted":169,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":139,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":129,"org.easymock.tests2.CaptureTest.testCapture_2617107":75,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":27,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":256,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":133,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":259,"org.easymock.tests2.UsageConstraintsTest.any":56,"org.easymock.tests2.StubTest.stub":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":31,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":134,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":165,"org.easymock.tests.UsageExpectAndThrowTest.longType":189,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":91,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":44,"org.easymock.tests2.SerializationTest.testClass":322,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":321,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":314,"org.easymock.tests.LimitationsTest.mockNativeMethod":162,"org.easymock.tests2.AnswerTest.answer":315,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":229,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":55,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":130,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":271,"org.easymock.tests2.CaptureTest.testAnd":73,"org.easymock.tests2.UsageTest.strictResetToDefault":280,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":312,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":43,"org.easymock.tests2.NameTest.nameForMocksControl":100,"org.easymock.tests2.MockedExceptionTest.testMockedException":318,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":234,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":301,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":231,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":106,"org.easymock.tests2.DelegateToTest.testDelegate":335,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":161,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":190,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":286,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":261,"org.easymock.tests.MockingTest.testNicePartialClassMocking":160,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":201,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":291,"org.easymock.tests2.CaptureTest.testCaptureLast":80,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":20,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":331,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":0,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":67,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":182,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":104,"org.easymock.tests2.CaptureTest.testCapture1_2446744":77,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":210,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":199,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":269,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":194,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":102,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":71,"org.easymock.tests.UsageThrowableTest.throwError":19,"org.easymock.tests.UsageStrictMockTest.differentMethods":5,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":267,"org.easymock.tests2.MockBuilderTest.testCreateMockString":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":237,"org.easymock.tests.UsageExpectAndThrowTest.floatType":188,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":62,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":316,"org.easymock.tests.UsageVerifyTest.twoThrows":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":274,"org.easymock.samples.PartialClassMockTest.testGetArea":253,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":28,"org.easymock.samples.ExampleTest.voteAgainstRemoval":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":125,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":294,"org.easymock.tests2.UsageTest.niceToStrict":281,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":187,"org.easymock.tests2.UsageConstraintsTest.testNotNull":70,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":317,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":154,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":337,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":115,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":258,"org.easymock.tests2.UsageTest.defaultResetToNice":283,"org.easymock.tests2.MockBuilderTest.testCreateMock":262,"org.easymock.samples.ExampleTest.voteAgainstRemovals":240,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":126,"org.easymock.tests.UsageVarargTest.differentLength":172,"org.easymock.tests2.CallbackTest.callback":296,"org.easymock.tests.UsageTest.openCallCountByLastCall":105,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":195,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":302,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":46,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":34,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":143,"org.easymock.tests.UsageCallCountTest.tooFewCalls":137,"org.easymock.tests.UsageOverloadedMethodTest.overloading":239,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":60,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":157,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":328,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":221,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":92,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":59,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":82,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":146,"org.easymock.tests.UsageThrowableTest.throwCheckedException":151,"org.easymock.tests2.EasyMockSupportClassTest.testAll":272,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":178,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":203,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":113,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":270,"org.easymock.tests2.CaptureTest.testCaptureAll":74,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":180,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":330,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":18,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":327,"org.easymock.tests2.UsageConstraintsTest.testMatches":61,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":329,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":90,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":236,"org.easymock.samples.ExampleTest.voteForRemovals":245,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":268,"org.easymock.tests2.NameTest.nameForNiceMock":99,"org.easymock.tests.UsageVarargTest.allKinds":22,"org.easymock.tests2.DependencyTest.testInterfaceMocking":277,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":6,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":342,"org.easymock.samples.BasicClassMockTest.testPrintContent":255,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":181,"org.easymock.samples.ExampleTest.addDocument":244,"org.easymock.tests2.DelegateToTest.testStubDelegate":333,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":153,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":310,"org.easymock.tests2.AnswerTest.stubAnswer":89,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":21,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":3,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":343,"org.easymock.tests2.UsageConstraintsTest.greaterThan":63,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":295,"org.easymock.tests.UsageVarargTest.varargLongAccepted":174,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":209,"org.easymock.samples.ExampleTest.voteForRemoval":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":123,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":266,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":228,"org.easymock.tests.UsageExpectAndReturnTest.floatType":212,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":313,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":292,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":251,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":64,"org.easymock.tests.UsageThrowableTest.noUpperLimit":148,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":279,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":47,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":147,"org.easymock.tests2.SerializationTest.test":323,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":78,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":121,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":299,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":149,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":211,"org.easymock.tests2.UsageConstraintsTest.testSame":52,"org.easymock.samples.SupportTest.addDocument":248,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":163,"org.easymock.tests2.CaptureTest.testCaptureFirst":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":87,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":300,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":285,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":158,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":217,"org.easymock.tests.GenericTest.testPackageScope":177,"org.easymock.tests2.CaptureTest.testCapture2_2446744":85,"org.easymock.tests2.UsageTest.moreThanOneArgument":13,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":37,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":119,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":176,"org.easymock.tests2.NameTest.nameForMock":97,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":141,"org.easymock.tests.UsageExpectAndReturnTest.longType":213,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":297,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":23,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":222,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":204,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":68,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":202,"org.easymock.tests2.UsageStrictMockTest.differentMethods":16,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":233,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":214,"org.easymock.tests.UsageCallCountTest.tooManyCalls":142,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":200,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":232,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":136,"org.easymock.tests2.MockedExceptionTest.testRealException":320,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":218,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":128,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":127,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":191,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":33,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":152,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":326,"org.easymock.tests2.UsageConstraintsTest.testContains":58,"org.easymock.tests2.NameTest.nameForStrictMock":98,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":319,"org.easymock.tests2.UsageConstraintsTest.testFind":50,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":107,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":39,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":290,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":206,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":40,"org.easymock.tests.UsageExpectAndReturnTest.object":220,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":65,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":10,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":42,"org.easymock.tests.ErrorMessageTest.testGetters":11,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":257,"org.easymock.tests2.UsageStrictMockTest.range":15,"org.easymock.tests2.UsageConstraintsTest.lessThan":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":305,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":341,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":171,"org.easymock.tests.UsageTest.exactCallCountByLastCall":185,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":120,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":338,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":122,"org.easymock.tests2.CaptureTest.testCaptureRightOne":83,"org.easymock.tests2.UsageConstraintsTest.testOr":53,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":344,"org.easymock.tests.UsageRangeTest.combination":230,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":287,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":226,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":167,"org.easymock.tests.UsageTest.wrongArguments":94,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":156,"org.easymock.tests2.EasyMockSupportTest.testVerify":309,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":215,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":223,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":116,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":111,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":155,"org.easymock.tests.UsageVarargTest.varargShortAccepted":173,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":38,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":140,"org.easymock.tests2.UsageConstraintsTest.cmpTo":57,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":45,"org.easymock.tests.UsageVarargTest.varargCharAccepted":170,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":135,"org.easymock.tests2.UsageTest.openCallCountByLastCall":108,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":109,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":308,"org.easymock.tests2.CaptureTest.testCaptureFromStub":84,"org.easymock.tests.UsageTest.unexpectedCallWithArray":184,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":193,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":24,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":150,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":138,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":224,"org.easymock.tests2.CaptureTest.testCapture":336,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":293,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":208,"org.easymock.tests2.UsageConstraintsTest.constraints":48,"org.easymock.samples.ExampleTest.addAndChangeDocument":246,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":192,"org.easymock.tests.CapturesMatcherTest.test":114,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":227,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":275,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":207,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":112,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":179,"org.easymock.tests2.UsageTest.resumeIfFailure":284,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":79,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":29,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":216,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":30,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":303,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":12,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":168}}]

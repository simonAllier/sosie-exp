[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:269","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[1,2,3],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[4,5,6,7],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.EasyMock:509","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:519","sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType.org.easymock.MockType)","type":"CtReturnImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:90","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1963","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Float>(org.easymock.Capture<java.lang.Float>))","type":"CtInvocationImpl"},"failures":[68],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[69],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:61","sourceCode":"final java.lang.Throwable java.lang.Throwable","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[4,5,6,7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[70],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[71],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[72,73,74,75,76,77,78,79,80,5],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[81,82,83,84],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"cached"}},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[19,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,42,120,121,122,123,124,125],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[126,127],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:171","sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:189","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","type":"CtInvocationImpl"},"failures":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,9,9,10,10,151,152,11,153,154,50,155,156,157,158,159,160,51,52,53,161,162,163,164,165,166,167,54,168,169,170,171,172,173,174,55,175,56,176,177,178,179,12,13,14,79,121,122,123,5,7],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[180,181,182,0,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[180,183,184,193,197,201,202],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[38,39,64,65],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:47","sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"failures":[203,204],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[20,21,205,85,22,23,24,206,207,208,201,36,209,210,211,154],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[72,74,75,76,212,213,80],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":19,"org.easymock.tests2.UsageTest.argumentsOrdered":47,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":16,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":189,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":45,"org.easymock.tests2.StubTest.stubWithReturnValue":125,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":72,"org.easymock.tests2.SerializationTest.testAllMockedMethod":7,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":89,"org.easymock.tests.MockingTest.testPartialClassMocking":142,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":211,"org.easymock.samples.SupportTest.voteForRemovals":8,"org.easymock.tests.MockClassControlTest.testToString":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":197,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":109,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":177,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":4,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":12,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":97,"org.easymock.tests.UsageExpectAndThrowTest.object":107,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":18,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":74,"org.easymock.tests2.UsageTest.wrongArguments":43,"org.easymock.samples.ConstructorCalledMockTest.testTax":9,"org.easymock.tests.UsageStrictMockTest.range":38,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":129,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":161,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":108,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":168,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":60,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":137,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":159,"org.easymock.tests2.CaptureTest.testPrimitive":68,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":22,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":116,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":207,"org.easymock.tests.UsageUnorderedTest.message":34,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":40,"org.easymock.tests.UsageVerifyTest.twoReturns":33,"org.easymock.tests.UsageTest.argumentsOrdered":23,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":151,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":194,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":213,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":198,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":87,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":199,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":90,"org.easymock.tests.UsageExpectAndThrowTest.longType":100,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":3,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":63,"org.easymock.tests2.SerializationTest.testClass":5,"org.easymock.tests.LimitationsTest.mockNativeMethod":138,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":178,"org.easymock.tests2.AnswerTest.answer":70,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":174,"org.easymock.tests2.MockedExceptionTest.testMockedException":122,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":85,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":101,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":144,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":167,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":160,"org.easymock.tests.MockingTest.testNicePartialClassMocking":143,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":112,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":92,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":166,"org.easymock.tests.MockingTest.testTwoMocks":141,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":110,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":105,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":46,"org.easymock.tests.UsageStrictMockTest.differentMethods":39,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":71,"org.easymock.tests2.MockBuilderTest.testCreateMockString":53,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":41,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":130,"org.easymock.tests.UsageExpectAndThrowTest.floatType":99,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":67,"org.easymock.tests.UsageVerifyTest.twoThrows":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":13,"org.easymock.samples.PartialClassMockTest.testGetArea":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":190,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":175,"org.easymock.tests2.UsageTest.niceToStrict":44,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":98,"org.easymock.tests2.UsageConstraintsTest.testNotNull":82,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":119,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":121,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":180,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":157,"org.easymock.tests2.MockBuilderTest.testCreateMock":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":191,"org.easymock.tests.UsageVarargTest.differentLength":25,"org.easymock.tests2.CallbackTest.callback":61,"org.easymock.tests.UsageTest.openCallCountByLastCall":205,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":210,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":106,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":58,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":86,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":94,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":164,"org.easymock.tests.MockClassControlTest.testEquals":136,"org.easymock.tests2.EasyMockSupportClassTest.testAll":179,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":148,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":208,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":114,"org.easymock.tests.MockingTest.testStrictClassMocking":139,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":96,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":165,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":163,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":202,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":212,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":76,"org.easymock.samples.BasicClassMockTest.testPrintContent":152,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":118,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":62,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":204,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":93,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":209,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":78,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":188,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":176,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":79,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":171,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":10,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":42,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":150,"org.easymock.tests2.SerializationTest.test":6,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":186,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":88,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":185,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":15,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":49,"org.easymock.tests.GenericTest.testPackageScope":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":196,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":183,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":28,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":115,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":127,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":201,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":81,"org.easymock.tests2.UsageStrictMockTest.differentMethods":65,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":113,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":173,"org.easymock.tests.UsageCallCountTest.tooManyCalls":29,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":1,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":111,"org.easymock.tests2.MockedExceptionTest.testRealException":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":192,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":102,"org.easymock.tests.MockingTest.testNiceClassMocking":145,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":162,"org.easymock.tests.MockingTest.testClassMocking":140,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":126,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":123,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":95,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":156,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":83,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":169,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":84,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":35,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":153,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":69,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":172,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":50,"org.easymock.tests2.UsageStrictMockTest.range":64,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":75,"org.easymock.tests.UsageTest.exactCallCountByLastCall":24,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":184,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":77,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":187,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":80,"org.easymock.tests.UsageRangeTest.combination":26,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":206,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":54,"org.easymock.tests.UsageTest.wrongArguments":21,"org.easymock.tests.MockClassControlTest.testHashCode":135,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":181,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":2,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":27,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":200,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":120,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":17,"org.easymock.tests.DefaultClassInstantiatorTest.object":146,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":155,"org.easymock.tests.UsageTest.unexpectedCallWithArray":20,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":31,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":104,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":36,"org.easymock.tests2.UsageConstraintsTest.constraints":66,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":55,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":37,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":134,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":14,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":133,"org.easymock.tests2.UsageTest.resumeIfFailure":48,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":128,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":59}}]

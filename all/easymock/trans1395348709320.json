[{"transplant":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:47","sourceCode":"java.lang.StringBuffer.append(\"and(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[6],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:110","sourceCode":"break","type":"CtBreakImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[7],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1939","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","type":"CtInvocationImpl"},"failures":[8,9,10,11,12,13],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[14,15,2,16,17,18,19,20,21,3,22,23,24,25,26],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[27,28,29,9,30,31,32,10,12,33,34,35,13],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,19,20,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,28,8,29,9,31,32,10,11,12,34,13,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"method"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[237,238,239,240,240,241,241,48,49,242,243,50,63,244,75,76,77,245,114,246,247,248,249,250,251,252,253,254,156,188,190,198,255,256,199,200,257,258,259,260,261,207,214,262,216,217,218,263,219,220,264,221,7,265,266,222,223,267,224,225,268,269,270,271],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"toMock"}},{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[237,238,239,272,240,240,241,241,273,274,275,36,37,38,39,40,41,276,42,277,278,279,280,281,43,44,45,46,47,282,48,49,242,243,283,284,50,285,51,52,53,54,55,56,57,58,59,60,61,62,286,287,288,14,289,290,291,292,293,294,295,296,297,298,299,300,63,64,65,66,67,68,301,69,70,302,303,304,305,306,71,2,16,307,308,17,18,309,72,310,311,312,313,314,73,74,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,244,75,76,331,77,332,333,334,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,19,20,104,105,106,335,107,108,336,109,110,111,112,113,245,114,246,247,248,249,250,251,115,116,117,118,119,120,337,338,121,339,340,341,252,342,343,253,344,345,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,346,142,143,347,348,349,350,351,144,21,352,353,354,145,146,147,148,355,149,3,150,356,22,151,152,153,357,358,359,360,361,362,363,364,254,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,154,155,156,157,158,159,160,161,406,162,163,164,165,166,167,407,168,169,170,171,172,173,174,175,176,177,178,179,408,180,181,182,183,409,410,411,412,413,414,415,416,417,418,419,420,421,184,185,422,423,186,424,425,426,427,428,429,430,431,432,433,434,435,28,8,29,9,30,31,32,10,11,12,34,35,436,13,437,438,187,439,188,189,190,440,191,192,441,442,193,194,195,196,197,198,443,255,256,444,445,199,200,257,446,258,447,259,260,448,261,449,201,202,23,203,204,450,451,205,24,25,206,452,207,453,454,208,455,456,209,210,211,212,457,213,214,262,215,216,217,218,263,458,219,459,460,220,264,221,7,461,265,266,222,223,267,462,224,225,226,227,228,463,229,230,231,232,464,233,234,465,26,235,236,466,467,468,268,469,470,269,471,472,473,474,475,476,477,478,479,270,480,481,482,483,484,271,485,486],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:173","sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder.toString()))","type":"CtThrowImpl"},"failures":[57,59,60,71,103,19,20,150,151,152,202,229,230,231,232,234,235,236],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[237,240,240,241,241,275,36,37,38,39,41,42,277,278,279,280,281,48,242,50,51,52,53,54,55,56,59,14,63,64,65,66,67,68,301,69,70,303,306,71,307,308,309,72,310,311,312,313,314,73,74,315,316,317,318,319,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,19,20,115,116,117,118,119,120,337,338,121,340,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,346,142,143,347,349,350,144,352,353,354,150,22,151,357,358,359,381,387,389,390,391,392,393,394,395,396,397,398,399,400,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,415,184,185,422,423,186,429,28,8,9,30,10,11,12,34,35,436,13,187,439,188,189,440,191,192,441,442,193,255,199,257,258,260,449,201,202,203,450,451,205,206,452,207,208,455,456,209,210,211,212,213,214,262,215,216,217,218,219,264,221,7,266,222,223,267,462,224,225,226,227,228,234,26,235,268,269,270,271],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[237,238,239,272,240,241,273,274,275,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,6,6,51,52,53,54,55,56,59,60,61,62,286,287,288,14,63,64,65,66,67,68,301,69,70,306,71,2,16,307,308,17,18,309,72,310,314,73,74,315,316,317,318,319,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,19,20,104,105,106,107,108,336,109,110,111,112,113,115,117,118,119,120,337,338,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,347,349,350,21,145,146,147,148,355,149,3,150,356,22,151,152,389,390,391,392,393,394,395,396,397,398,399,400,401,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,408,180,181,182,183,415,184,185,422,423,186,429,28,8,29,9,30,31,32,10,11,12,34,35,436,13,187,439,188,189,190,191,192,441,193,194,195,196,197,198,255,199,200,257,258,259,260,261,449,201,202,23,203,204,450,451,205,24,25,206,452,207,208,209,210,211,212,213,214,262,215,216,217,218,263,219,220,264,221,7,266,222,223,267,462,224,225,226,227,228,464,233,234,465,26,235,236,268,269,270,271],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append(((org.easymock.internal.ErrorMessage.getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[487,488,489,14,71,16,17,18,103,19,20,3,150,22,151,202,23,24,25,229,230,231,232,234,26,235],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","matches":"matches","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[282,48,49,242,243],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[325,490,491],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[492,188,189,190],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:121","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:140","sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>)","type":"CtInvocationImpl"},"failures":[188],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:572","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:38","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","type":"CtInvocationImpl"},"failures":[115],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[437,438],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[446,453,493,494,495,496],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[240,240,241,241,188,447,207,453,459],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:75","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:93","sourceCode":"return this","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[14,289,0,497,1,498,499,500,15,63,71,2,16,307,17,18,72,103,19,20,109,339,340,122,123,348,349,350,351,144,21,149,3,150,22,151,152,153,391,395,398,161,175,501,4,502,503,504,505,506,507,5,508,509,28,201,202,23,204,24,25,207,262,215,221,7,229,233,234,465,26,235,236,268],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[488,489,14,19,20,22,26],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[113,120,337,338,160,161,163,165,166,181,28,8,29,10,11,34,13],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[237,238,239,272,240,240,241,241,273,274,275,36,37,38,39,40,41,276,42,277,278,279,280,281,43,44,45,46,47,282,48,49,242,243,283,284,50,285,51,52,53,54,55,56,57,58,59,60,61,62,286,287,288,14,289,290,291,292,293,294,295,296,297,298,299,300,63,64,65,66,67,68,301,69,70,302,303,304,305,306,71,2,16,307,308,17,18,309,72,310,311,312,313,314,73,74,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,244,75,76,331,77,332,333,334,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,19,20,104,105,106,335,107,108,336,109,110,111,112,113,245,114,246,247,248,249,250,251,115,116,117,118,119,120,337,338,121,339,340,341,252,342,343,253,344,345,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,346,142,143,347,348,349,350,351,144,21,352,353,354,145,146,147,148,355,149,3,150,356,22,151,152,153,357,358,359,360,361,362,363,364,254,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,154,155,156,157,158,159,160,161,406,162,163,164,165,166,167,407,168,169,170,171,172,173,174,175,176,177,178,179,408,180,181,182,183,409,410,411,412,413,414,415,416,417,418,419,420,421,184,185,422,423,186,424,425,426,427,428,429,430,431,432,433,434,435,28,8,29,9,30,31,32,10,11,12,34,35,436,13,437,438,187,439,188,189,190,440,191,192,441,442,193,194,195,196,197,198,443,255,256,444,445,199,200,257,446,258,447,259,260,448,261,449,201,202,23,203,204,450,451,205,24,25,206,452,207,453,454,208,455,456,209,210,211,212,457,213,214,262,215,216,217,218,263,458,219,459,460,220,264,221,7,461,265,266,222,223,267,462,224,225,226,227,228,463,229,230,231,232,464,233,234,465,26,235,236,466,467,468,268,469,470,269,471,472,473,474,475,476,477,478,479,270,480,481,482,483,484,271,485,486],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[188,189,190],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[240,241,64,65,66,67,68,72,98,99,100,101,102,119,120,121,142,143,150,158,159,162,163,164,165,170,172,173,175,176,181,182,183,35,227,234],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[510],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[491],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"expected":"o"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":161,"org.easymock.tests2.UsageTest.argumentsOrdered":25,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":306,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":399,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":416,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":375,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":204,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":272,"org.easymock.tests2.DelegateToTest.testReturnException":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":52,"org.easymock.tests.MockingTest.testPartialClassMocking":75,"org.easymock.tests.MockClassControlTest.testToString":246,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":463,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":384,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":474,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":122,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":269,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":487,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":439,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":493,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":167,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":119,"org.easymock.tests2.UsageTest.wrongArguments":23,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":435,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":147,"org.easymock.samples.ExampleTest.answerVsDelegate":37,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":253,"org.easymock.tests2.UsageConstraintsTest.testNull":163,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":333,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":216,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":398,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":251,"org.easymock.tests2.CaptureTest.testPrimitive":9,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":121,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":141,"org.easymock.tests.UsageTest.moreThanOneArgument":71,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":215,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":66,"org.easymock.tests.UsageTest.argumentsOrdered":18,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":277,"org.easymock.tests.UsageVarargTest.varargIntAccepted":106,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":508,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":380,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":98,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":198,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":420,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":367,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":102,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":504,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":429,"org.easymock.tests.ReplayStateInvalidUsageTest.times":297,"org.easymock.tests2.DependencyTest.testClassMocking":437,"org.easymock.tests2.AnswerTest.answer":208,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":407,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":382,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":197,"org.easymock.tests2.CaptureTest.testAnd":28,"org.easymock.tests2.UsageTest.strictResetToDefault":201,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":444,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":65,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":393,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":117,"org.easymock.tests2.DelegateToTest.testDelegate":193,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":281,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":137,"org.easymock.tests.LimitationsTest.mockFinalMethod":285,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":55,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":47,"org.easymock.tests2.DependencyTest.testClassMockingSupport":438,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":339,"org.easymock.tests2.CaptureTest.testCapture1_2446744":30,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":458,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":135,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":195,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":291,"org.easymock.tests.UsageThrowableTest.throwError":314,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":343,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":421,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":486,"org.easymock.samples.PartialClassMockTest.testGetArea":237,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":292,"org.easymock.tests.MockingTest.testInterfaceMocking":331,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":99,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":475,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":123,"org.easymock.tests2.UsageTest.niceToStrict":203,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":365,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":199,"org.easymock.tests2.MockBuilderTest.testCreateMock":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":482,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":432,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":131,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":4,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":394,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":313,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":57,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":145,"org.easymock.tests.UsageOverloadedMethodTest.overloading":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":479,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":172,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":350,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":89,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":301,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":490,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":171,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":12,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":335,"org.easymock.tests.MockClassControlTest.testEquals":250,"org.easymock.tests2.EasyMockSupportClassTest.testAll":268,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":49,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":506,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":139,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":45,"org.easymock.tests2.CaptureTest.testCaptureAll":8,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":196,"org.easymock.tests.MockNameTest.defaultName":305,"org.easymock.tests2.UsageConstraintsTest.testMatches":173,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":67,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":289,"org.easymock.samples.ExampleTest.voteForRemovals":41,"org.easymock.tests.UsageVarargTest.allKinds":113,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":46,"org.easymock.samples.BasicClassMockTest.testPrintContent":239,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":318,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":464,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":442,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":417,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":56,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":496,"org.easymock.tests2.UsageConstraintsTest.greaterThan":175,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":469,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":116,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":7,"org.easymock.samples.ExampleTest.voteForRemoval":38,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":328,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":461,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":185,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":344,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":263,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":449,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":63,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":372,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":391,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":467,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":51,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":440,"org.easymock.tests2.CaptureTest.testCaptureFirst":13,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":371,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":392,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":452,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":21,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":85,"org.easymock.tests2.CaptureTest.testCapture2_2446744":436,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":423,"org.easymock.tests2.UsageTest.moreThanOneArgument":202,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":383,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":112,"org.easymock.tests.GenericTest.testBridgedEquals":243,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":287,"org.easymock.tests.UsageExpectAndReturnTest.longType":81,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":389,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":140,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":408,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":346,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":138,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":64,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":353,"org.easymock.tests.UsageCallCountTest.tooManyCalls":288,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":497,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":483,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":86,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":434,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":127,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":317,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":222,"org.easymock.tests.MockingTest.testNiceClassMocking":334,"org.easymock.tests.MockingTest.testClassMocking":330,"org.easymock.tests2.UsageConstraintsTest.testContains":170,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":58,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":156,"org.easymock.tests2.UsageConstraintsTest.testFind":162,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":70,"org.easymock.tests.MockTypeTest.fromEasyMockClass":342,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":213,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":355,"org.easymock.tests.UsageExpectAndReturnTest.object":88,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":219,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":433,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":397,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":494,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":108,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":363,"org.easymock.tests.UsageTest.exactCallCountByLastCall":309,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":370,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":278,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":302,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":500,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":453,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":104,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":94,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":349,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":411,"org.easymock.tests.MockClassControlTest.testHashCode":249,"org.easymock.tests2.EasyMockSupportTest.testVerify":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":477,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":503,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":279,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":312,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":347,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":194,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":409,"org.easymock.tests.UsageVarargTest.varargCharAccepted":107,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":320,"org.easymock.tests2.CaptureTest.testCaptureMultiple":27,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":233,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":388,"org.easymock.tests2.UsageTest.openCallCountByLastCall":450,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":400,"org.easymock.tests.DefaultClassInstantiatorTest.object":321,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":311,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":361,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":478,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":129,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":315,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":427,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":410,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":248,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":264,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":128,"org.easymock.tests.CapturesMatcherTest.test":6,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":95,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":352,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":505,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":271,"org.easymock.tests2.UsageTest.resumeIfFailure":206,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":252,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":54,"org.easymock.tests2.StubTest.stubWithReturnValue":227,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":446,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":180,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":87,"org.easymock.tests2.SerializationTest.testAllMockedMethod":190,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":381,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":5,"org.easymock.samples.SupportTest.voteForRemovals":275,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":282,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":413,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":134,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":492,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":387,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":455,"org.easymock.tests.UsageExpectAndThrowTest.object":132,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":304,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":178,"org.easymock.tests2.DelegateToTest.testWrongClass":441,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":142,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":143,"org.easymock.tests.UsageStrictMockTest.range":22,"org.easymock.samples.ConstructorCalledMockTest.testTax":240,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":404,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":396,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":266,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":133,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":466,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":299,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":146,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":0,"org.easymock.tests2.CaptureTest.testCaptureNone":11,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":359,"org.easymock.tests.UsageUnorderedTest.message":14,"org.easymock.tests.UsageVerifyTest.twoReturns":20,"org.easymock.tests.UsageVarargTest.varargByteAccepted":111,"org.easymock.tests2.ThreadingTest.testThreadSafe":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":480,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":62,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":238,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":364,"org.easymock.tests2.CaptureTest.testCapture_2617107":29,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":509,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":341,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":385,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":338,"org.easymock.tests2.UsageConstraintsTest.any":168,"org.easymock.tests2.StubTest.stub":226,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":296,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":386,"org.easymock.tests.UsageExpectAndThrowTest.longType":125,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":53,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":325,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":295,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":465,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":415,"org.easymock.tests2.SerializationTest.testClass":188,"org.easymock.tests.LimitationsTest.mockNativeMethod":50,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":97,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":242,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":426,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":236,"org.easymock.tests2.NameTest.nameForMocksControl":232,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":428,"org.easymock.tests2.MockedExceptionTest.testMockedException":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":470,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":308,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":457,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":126,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":77,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":214,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":258,"org.easymock.tests.MockingTest.testNicePartialClassMocking":76,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":218,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":424,"org.easymock.tests2.CaptureTest.testCaptureLast":10,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":340,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":166,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":225,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":179,"org.easymock.tests.MockingTest.testTwoMocks":244,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":78,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":130,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":182,"org.easymock.samples.ExampleTest.removeNonExistingDocument":276,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":431,"org.easymock.tests.UsageStrictMockTest.differentMethods":151,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":293,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":412,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":323,"org.easymock.tests2.ConstraintsToStringTest.andToString":507,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":422,"org.easymock.tests2.MockBuilderTest.testCreateMockString":261,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":471,"org.easymock.tests.UsageExpectAndThrowTest.floatType":124,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":468,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":209,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":454,"org.easymock.tests.UsageVerifyTest.twoThrows":19,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":270,"org.easymock.samples.ExampleTest.voteAgainstRemoval":39,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":376,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":221,"org.easymock.tests.LimitationsTest.privateConstructor":284,"org.easymock.tests2.UsageConstraintsTest.testNotNull":181,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":154,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":319,"org.easymock.tests2.UsageTest.defaultResetToNice":205,"org.easymock.samples.ExampleTest.voteAgainstRemovals":36,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":377,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":425,"org.easymock.tests.UsageVarargTest.differentLength":336,"org.easymock.tests2.CallbackTest.callback":228,"org.easymock.tests2.UsageConstraintsTest.equals":406,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":498,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":459,"org.easymock.tests.UsageTest.openCallCountByLastCall":307,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":158,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":337,"org.easymock.tests.UsageCallCountTest.tooFewCalls":60,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":267,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":148,"org.easymock.tests.UsageThrowableTest.throwCheckedException":316,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":1,"org.easymock.tests.MockingTest.testStrictClassMocking":329,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":224,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":310,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":430,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":223,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":298,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":462,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":211,"org.easymock.tests.ObjectMethodsTest.testHashCode":362,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":186,"org.easymock.tests2.NameTest.nameForNiceMock":231,"org.easymock.tests2.DependencyTest.testInterfaceMocking":187,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":495,"org.easymock.samples.ExampleTest.addDocument":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":481,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":485,"org.easymock.tests2.DelegateToTest.testStubDelegate":192,"org.easymock.tests2.AnswerTest.stubAnswer":210,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":150,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":510,"org.easymock.tests.UsageVarargTest.varargLongAccepted":110,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":374,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":96,"org.easymock.tests.UsageExpectAndReturnTest.floatType":80,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":207,"org.easymock.tests2.ConstraintsToStringTest.orToString":501,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":241,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":419,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":176,"org.easymock.tests.UsageThrowableTest.noUpperLimit":73,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":351,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":159,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":402,"org.easymock.tests2.SerializationTest.test":189,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":31,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":491,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":322,"org.easymock.tests2.UsageConstraintsTest.testSame":164,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":79,"org.easymock.samples.SupportTest.addDocument":274,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":472,"org.easymock.tests.GenericTest.testPackageScope":48,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":369,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":418,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":332,"org.easymock.tests2.NameTest.nameForMock":229,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":90,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":448,"org.easymock.tests2.UsageStrictMockTest.differentMethods":235,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":460,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":82,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":136,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":360,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":118,"org.easymock.tests2.MockedExceptionTest.testRealException":157,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":345,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":379,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":499,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":234,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":378,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":120,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":300,"org.easymock.tests2.NameTest.nameForStrictMock":230,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":445,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":212,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":217,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":403,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":488,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":177,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":324,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":255,"org.easymock.tests2.UsageStrictMockTest.range":26,"org.easymock.tests2.UsageConstraintsTest.lessThan":183,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":414,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":390,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":476,"org.easymock.tests2.CaptureTest.testCaptureRightOne":34,"org.easymock.tests2.UsageConstraintsTest.testOr":165,"org.easymock.tests.UsageRangeTest.combination":115,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":262,"org.easymock.tests.UsageTest.wrongArguments":16,"org.easymock.tests2.MockBuilderTest.testWithConstructor":443,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":473,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":114,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":83,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":366,"org.easymock.tests.UsageVarargTest.varargShortAccepted":109,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":326,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":286,"org.easymock.tests2.UsageConstraintsTest.cmpTo":169,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":368,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":451,"org.easymock.tests2.CaptureTest.testCaptureFromStub":35,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":290,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":256,"org.easymock.tests.UsageTest.unexpectedCallWithArray":2,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":3,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":61,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":92,"org.easymock.tests2.CaptureTest.testCapture":33,"org.easymock.tests2.UsageConstraintsTest.constraints":160,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":356,"org.easymock.samples.ExampleTest.addAndChangeDocument":42,"org.easymock.tests2.ConstraintsToStringTest.notToString":502,"org.easymock.tests.UsageStrictMockTest.testVerify":153,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":273,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":149,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":44,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":32,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":100,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":84,"org.easymock.tests.LimitationsTest.abstractClass":283,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":101,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":489,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":395,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":105}}]

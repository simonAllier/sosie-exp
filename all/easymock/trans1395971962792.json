[{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:202","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-1726286682930686024L","position":"org.easymock.internal.ObjectMethodsFilter:29","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<T>.isEmpty())","position":"org.easymock.Capture:67","type":"CtReturnImpl"},"status":-2},{"failures":[0,1,2,3,4],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"not(\")","position":"org.easymock.internal.matchers.Not:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","position":"org.easymock.internal.ErrorMessage:51","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","position":"org.easymock.internal.MockBuilder:128","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Same:42","type":"CtInvocationImpl"},"status":-2},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:63","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.MocksBehavior:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"bound","bound":"bound"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.Invocation:212","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","position":"org.easymock.internal.matchers.ArrayEquals:35","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1471","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:296","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"methodName":"key"},"name":"add","transplant":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","position":"org.easymock.internal.DefaultClassInstantiator:191","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","position":"org.easymock.internal.EasyMockProperties:116","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1902","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:206","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:159","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","position":"org.easymock.internal.InjectionTarget:59","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && ((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","position":"org.easymock.internal.matchers.Contains:36","type":"CtReturnImpl"},"status":-2},{"failures":[71,72,73,74],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","position":"org.easymock.internal.MethodSerializationWrapper:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ObjectMethodsFilter:108","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:531","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Results.getMainInterval()","position":"org.easymock.internal.Results:81","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.Injection","position":"org.easymock.internal.Injector:240","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getMockedType(java.lang.Object)","position":"org.easymock.internal.Invocation:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class });\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"));\n}","position":"org.easymock.internal.DefaultClassInstantiator:180","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","position":"org.easymock.internal.ArgumentToString:89","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method != null ? org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>) : false","position":"org.easymock.internal.BridgeMethodResolver:145","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","position":"org.easymock.internal.RecordState:321","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"default :\n    throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));","position":"org.easymock.Capture:123","type":"CtCaseImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"math","position":"org.easymock.internal.matchers.Find:41","type":"mutation","status":-2},{"failures":[39],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:163","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:35","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)))","position":"org.easymock.internal.ClassProxyFactory:227","type":"CtAssignmentImpl"},"status":-2},{"failures":[75,76,77,78,79,80,81,19,20,0,82,83,1,2,21,84,85,86,87,88,55,4,89,90,91,92,93,94,95],"name":"returnValue","position":"org.easymock.internal.Invocation:182","type":"mutation","return":"return true","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","position":"org.easymock.EasyMock:1646","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2067","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.ClassProxyFactory:89","type":"CtIfImpl"},"status":-2},{"failures":[96,97],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","position":"org.easymock.internal.EasyMockProperties:127","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:141","type":"CtInvocationImpl"},"status":-2},{"failures":[98,99,100,101,12,102,103,104],"variableMapping":{"throwable":"throwable","state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"genericType":"genericType"},"name":"add","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"status":-2},{"failures":[105,8,106,107,12,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,1,129,130,131,132,133,134,135,136,137,104],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"status":-1},{"failures":[138,139,140],"variableMapping":{"data":"data"},"name":"add","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:149","type":"CtInvocationImpl"},"status":-1},{"failures":[141],"variableMapping":{"result":"result"},"name":"replace","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:286","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"position":"position"},"name":"add","transplant":{"sourceCode":"int int = this.int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:345","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"status":0},{"failures":[75,77,78,79,19,20,0,82,83,1,2,142,85,86,87,88,55,4,89,92,93,94,95],"variableMapping":{"result":"buffer"},"name":"replace","transplant":{"sourceCode":"java.lang.StringBuilder.append(\", \")","position":"org.easymock.internal.ArgumentToString:91","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","position":"org.easymock.internal.ErrorMessage:57","type":"CtInvocationImpl"},"status":-1},{"failures":[143,144],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:116","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:412","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:632","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IMocksControl","position":"org.easymock.EasyMockSupport:482","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator","position":"org.easymock.internal.ClassInstantiatorFactory:61","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.MocksBehavior:194","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:144","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1385","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:93","type":"CtReturnImpl"},"status":-2},{"failures":[42],"binaryOperator":"int < 0","name":"conditionalBoundary","position":"org.easymock.:27","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:137","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:56","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object java.lang.Object","position":"org.easymock.internal.Injector:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:89","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1471","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Void.java.lang.Class<java.lang.Void>, null)","position":"org.easymock.internal.RecordState:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"method","method":"method"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.Invocation:211","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:839","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","position":"org.easymock.internal.Injector:70","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.fieldsOf(java.lang.Class<?>)","position":"org.easymock.internal.Injector:159","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:64","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.MockType","position":"org.easymock.internal.MocksControl:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.ConstructorArgs:78","type":"CtContinueImpl"},"status":-2},{"failures":[64,145,66,69],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:318","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<T>.isEmpty())","position":"org.easymock.Capture:67","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.matchers.Equals org.easymock.internal.matchers.Equals = ((org.easymock.internal.matchers.Equals)(java.lang.Object))","position":"org.easymock.internal.matchers.Equals:56","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.DefaultClassInstantiator:46","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"status":0},{"failures":[21,57,58,60,61,62,63,64,68,69],"binaryOperator":"int > (int)","name":"conditionalBoundary","position":"org.easymock.internal.Results:56","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2096","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:64","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"proxy":"proxy"},"name":"add","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:159","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1471","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Not:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:92","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","position":"org.easymock.internal.RecordState:115","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties","position":"org.easymock.internal.EasyMockProperties:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<java.lang.reflect.Field>","position":"org.easymock.internal.Injector:200","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","position":"org.easymock.internal.matchers.Or:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:206","type":"CtAssignmentImpl"},"status":-2},{"failures":[146,147,148,149,150,151,152,153,154,155,156,157,158,13,159],"binaryOperator":"int + int","name":"math","position":"org.easymock.internal.Invocation:62","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","position":"org.easymock.internal.LastControl:48","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:197","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","position":"org.easymock.internal.matchers.ArrayEquals:61","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = java.lang.reflect.Method.getName()","position":"org.easymock.internal.Invocation:143","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:435","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>.getName(), java.lang.Byte.java.lang.Class<java.lang.Byte>)","position":"org.easymock.internal.MethodSerializationWrapper:34","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:119","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n    int = java.lang.Integer.int;\n} else {\n    int += org.easymock.internal.Range.getMaximum();\n}","position":"org.easymock.internal.Results:94","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.RecordState:191","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:82","type":"CtIfImpl"},"status":-2},{"failures":[160,161,161,162,162,163,164,146,147,165,166,167,168,148,169,170,171,172,173,174,175,176,105,177,178,179,180,5,6,7,8,9,181,182,183,184,185,186,187,188,189,190,10,11,106,75,76,77,191,107,78,79,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,98,99,100,101,12,102,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,80,81,213,149,150,151,214,152,153,154,155,156,157,158,13,159,215,128,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,138,231,232,233,14,15,16,17,18,234,235,236,237,238,239,240,19,20,241,0,82,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,103,71,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,72,272,273,73,74,274,275,276,277,278,279,280,83,1,2,281,282,283,284,285,286,287,288,289,290,291,292,21,22,23,129,293,130,131,132,133,134,135,294,295,296,297,143,298,299,300,144,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,24,25,26,27,28,338,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,136,339,85,86,340,341,342,137,343,87,88,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,53,366,54,367,368,369,370,371,372,373,374,55,375,4,89,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,56,57,58,59,60,61,62,63,64,65,66,67,68,69,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,90,428,91,429,430,431,432,433,434,435,436,70,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,104,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,92,93,94,95],"variableMapping":{"toMock":"toMock","name":"name","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod()","position":"org.easymock.internal.Result:82","type":"CtLocalVariableImpl"},"status":-2},{"failures":[105,8,106,107,12,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,1,129,130,131,132,133,134,135,136,137,104],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.Injection:74","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","position":"org.easymock.internal.InjectionTarget:46","type":"CtReturnImpl"},"status":-2},{"failures":[106,191,107,192,20,83,2,136,342,137,345,55,398],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:100","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field)","position":"org.easymock.internal.InjectionPlan:71","type":"CtInvocationImpl"},"status":-2},{"failures":[5,8,77,78,79,215,239,19,20,1,129,293,131,132,133,134,135,25,26,27,29,31,32,38,40,41,42,43,44,51,52,86,340,341,87,88,373,55,380,66,402,104,475,476,478,479,480,482,483],"name":"returnValue","position":"org.easymock.internal.ExpectedInvocation:95","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","position":"org.easymock.internal.MethodSerializationWrapper:58","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","position":"org.easymock.internal.LastControl:95","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:161","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.Invocation:210","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":131,"org.easymock.tests2.MockedExceptionTest.testRealException":361,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":452,"org.easymock.tests.UsageVarargTest.varargIntAccepted":151,"org.easymock.tests.LimitationsTest.mockFinalMethod":297,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":25,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":196,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":471,"org.easymock.tests.UsageCallCountTest.tooManyCalls":292,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":463,"org.easymock.tests.UsageVarargTest.allKinds":13,"org.easymock.tests2.StubTest.stubWithReturnValue":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":469,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":190,"org.easymock.tests2.CaptureTest.testCaptureAll":57,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":22,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":42,"org.easymock.tests2.CaptureTest.testAnd":56,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":473,"org.easymock.tests.UsageStrictMockTest.testVerify":243,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":116,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":176,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":181,"org.easymock.tests.MockClassControlTest.testToString":195,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":404,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":311,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":479,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":124,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":327,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":386,"org.easymock.tests.UsageThrowableTest.throwError":129,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":9,"org.easymock.samples.SupportTest.addDocument":164,"org.easymock.tests2.StubTest.stub":470,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":272,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":305,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":381,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":17,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":436,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":269,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":354,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":333,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":271,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":443,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":158,"org.easymock.tests.UsageExpectAndThrowTest.object":118,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":395,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":465,"org.easymock.tests2.UsageTest.moreThanOneArgument":85,"org.easymock.tests.UsageVarargTest.varargByteAccepted":157,"org.easymock.tests.MockClassControlTest.testEquals":199,"org.easymock.tests.UsageTest.wrongArguments":77,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":204,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":247,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":385,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":119,"org.easymock.tests2.UsageTest.defaultResetToNice":343,"org.easymock.tests.MockingTest.testNiceClassMocking":225,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":360,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":396,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":425,"org.easymock.tests2.MockBuilderTest.testCreateMock":427,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":397,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":301,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":306,"org.easymock.samples.ExampleTest.voteAgainstRemovals":147,"org.easymock.tests2.CompareToTest.testCompareEqual":141,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":373,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":175,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":384,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":279,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":159,"org.easymock.tests2.CaptureTest.testCapture1_2446744":60,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":371,"org.easymock.samples.ExampleTest.voteForRemoval":166,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":336,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":289,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":178,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":208,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":424,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":187,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":242,"org.easymock.tests2.CaptureTest.testCaptureRightOne":66,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":320,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":302,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":400,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":434,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":278,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":73,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":303,"org.easymock.tests2.UsageConstraintsTest.cmpTo":37,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":97,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":138,"org.easymock.tests.MockTypeTest.fromEasyMockClass":182,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":390,"org.easymock.tests2.MockedExceptionTest.testMockedException":359,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":49,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":127,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":236,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":83,"org.easymock.samples.PartialClassMockTest.testGetArea":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":103,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":128,"org.easymock.samples.ConstructorCalledMockTest.testTax":161,"org.easymock.tests2.UsageTest.argumentsOrdered":88,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":399,"org.easymock.samples.ExampleTest.removeNonExistingDocument":169,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":337,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":229,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":403,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":212,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":319,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":201,"org.easymock.tests2.AnswerTest.answer":398,"org.easymock.tests.MockingTest.testNicePartialClassMocking":220,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":391,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":20,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":18,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":238,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":273,"org.easymock.tests.UsageExpectAndThrowTest.longType":111,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":186,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":461,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":481,"org.easymock.tests.UsageTest.argumentsOrdered":79,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":28,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":423,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":332,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":7,"org.easymock.tests2.MockBuilderTest.testCreateMockString":91,"org.easymock.tests2.NameTest.nameForStrictMock":93,"org.easymock.tests2.CaptureTest.testCaptureNone":64,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":268,"org.easymock.tests2.SerializationTest.testClass":377,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":249,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":172,"org.easymock.tests.MockingTest.testInterfaceMocking":221,"org.easymock.tests2.EasyMockSupportTest.testVerify":486,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":245,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":388,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":422,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":113,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":224,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":48,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":136,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":90,"org.easymock.tests.GenericTest.testBridgedEquals":144,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":331,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":34,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":408,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":429,"org.easymock.tests2.UsageConstraintsTest.testOr":32,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":394,"org.easymock.tests.MockClassControlTest.testHashCode":198,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":347,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":487,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":23,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":135,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":184,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":326,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":139,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":235,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":405,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":407,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":468,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":449,"org.easymock.tests2.UsageConstraintsTest.testSame":31,"org.easymock.tests2.UsageTest.resumeIfFailure":344,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":282,"org.easymock.tests.UsageOverloadedMethodTest.overloading":215,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":409,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":185,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":437,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":350,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":457,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":276,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":162,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":456,"org.easymock.tests.UsageTest.openCallCountByLastCall":191,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":84,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":114,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":275,"org.easymock.tests2.NameTest.nameForNiceMock":94,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":308,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":387,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":280,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":234,"org.easymock.tests2.CaptureTest.testPrimitive":59,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":431,"org.easymock.samples.BasicClassMockTest.testPrintContent":173,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":14,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":3,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":439,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":53,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":291,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":285,"org.easymock.tests2.UsageStrictMockTest.differentMethods":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":458,"org.easymock.tests.MockingTest.testClassMocking":217,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":476,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":300,"org.easymock.tests2.CaptureTest.testCaptureLast":63,"org.easymock.tests2.UsageConstraintsTest.equals":338,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":109,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":290,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":288,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":414,"org.easymock.tests.UsageStrictMockTest.range":0,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":107,"org.easymock.tests.UsageTest.unexpectedCallWithArray":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":459,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":253,"org.easymock.samples.ExampleTest.addDocument":168,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":223,"org.easymock.tests2.UsageConstraintsTest.lessThan":52,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":179,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":78,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":174,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":72,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":140,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":260,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":334,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":233,"org.easymock.tests2.MockBuilderTest.testWithConstructor":416,"org.easymock.tests2.UsageStrictMockTest.range":4,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":410,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":80,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":255,"org.easymock.tests.UsageTest.moreThanOneArgument":75,"org.easymock.tests2.UsageTest.openCallCountByLastCall":342,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":417,"org.easymock.tests.UsageStrictMockTest.differentMethods":82,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":257,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":335,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":112,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":206,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":314,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":450,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":96,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":70,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":241,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":383,"org.easymock.tests2.DependencyTest.testClassMockingSupport":412,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":123,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":10,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":349,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":160,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":209,"org.easymock.tests2.UsageConstraintsTest.testContains":38,"org.easymock.tests2.UsageConstraintsTest.testFind":29,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":61,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":230,"org.easymock.samples.ExampleTest.addAndChangeDocument":170,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":415,"org.easymock.tests.UsageVarargTest.varargCharAccepted":152,"org.easymock.tests2.CaptureTest.testCaptureFromStub":67,"org.easymock.tests.UsageVerifyTest.twoThrows":1,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":392,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":6,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":153,"org.easymock.tests2.DelegateToTest.testReturnException":368,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":341,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":472,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":485,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":143,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":366,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":374,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":283,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":231,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":312,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":65,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":120,"org.easymock.tests2.UsageConstraintsTest.testMatches":41,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":259,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":270,"org.easymock.tests2.UsageConstraintsTest.testNull":30,"org.easymock.tests.LimitationsTest.abstractClass":294,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":232,"org.easymock.tests2.EasyMockSupportClassTest.testAll":448,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":180,"org.easymock.tests2.UsageConstraintsTest.greaterThan":43,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":149,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":307,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":45,"org.easymock.tests.UsageExpectAndReturnTest.object":324,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":482,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":376,"org.easymock.tests2.DelegateToTest.testWrongClass":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":252,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":115,"org.easymock.samples.ExampleTest.voteAgainstRemoval":167,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":134,"org.easymock.tests.UsageVarargTest.varargShortAccepted":155,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":74,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":248,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":356,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":16,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":447,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":193,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":382,"org.easymock.tests2.NameTest.nameForMocksControl":95,"org.easymock.tests2.SerializationTest.testAllMockedMethod":379,"org.easymock.tests.MockingTest.testStrictClassMocking":216,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":8,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":345,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":455,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":207,"org.easymock.tests.LimitationsTest.mockNativeMethod":296,"org.easymock.tests2.DelegateToTest.testStubDelegate":369,"org.easymock.tests.UsageUnorderedTest.message":21,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":177,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":262,"org.easymock.samples.ExampleTest.answerVsDelegate":165,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":211,"org.easymock.tests.UsageCallCountTest.tooFewCalls":287,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":323,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":401,"org.easymock.tests.UsageVerifyTest.twoReturns":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":464,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":261,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":318,"org.easymock.tests2.DependencyTest.testInterfaceMocking":413,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":474,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":263,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":477,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":365,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":33,"org.easymock.tests.MockingTest.testTwoMocks":218,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":286,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":188,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":358,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":453,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":325,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":406,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":389,"org.easymock.tests.UsageThrowableTest.throwCheckedException":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":446,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":183,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":130,"org.easymock.samples.ExampleTest.voteForRemovals":148,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":40,"org.easymock.tests.ReplayStateInvalidUsageTest.times":309,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":101,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":454,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":433,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":250,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":315,"org.easymock.tests2.UsageConstraintsTest.any":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":251,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":348,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":322,"org.easymock.tests2.CaptureTest.testCapture":145,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":254,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":484,"org.easymock.tests.LimitationsTest.privateConstructor":295,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":54,"org.easymock.tests2.CallbackTest.callback":380,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":71,"org.easymock.tests2.NameTest.nameForMock":92,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":428,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":39,"org.easymock.tests.MockNameTest.defaultName":313,"org.easymock.tests2.SerializationTest.test":378,"org.easymock.tests.UsageExpectAndReturnTest.longType":317,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":62,"org.easymock.tests2.CaptureTest.testCaptureFirst":69,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":46,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":213,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":98,"org.easymock.tests2.UsageTest.niceToStrict":340,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":205,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":210,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":226,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":239,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":121,"org.easymock.tests2.UsageTest.strictResetToDefault":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":445,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":441,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":11,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":108,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":321,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":362,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":420,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":435,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":44,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":150,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":432,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":102,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":222,"org.easymock.tests2.DelegateToTest.testDelegate":372,"org.easymock.tests2.UsageConstraintsTest.testNotNull":50,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":375,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":419,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":351,"org.easymock.tests2.CaptureTest.testCapture_2617107":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":265,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":310,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":353,"org.easymock.tests2.ThreadingTest.testThreadSafe":393,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":266,"org.easymock.tests.UsageThrowableTest.noUpperLimit":293,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":214,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":483,"org.easymock.tests.UsageExpectAndReturnTest.floatType":316,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":475,"org.easymock.tests2.UsageTest.wrongArguments":86,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":35,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":364,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":197,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":426,"org.easymock.samples.SupportTest.voteForRemovals":146,"org.easymock.tests.UsageRangeTest.combination":277,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":460,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":51,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":466,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":357,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":55,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":328,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":122,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":189,"org.easymock.tests.UsageExpectAndThrowTest.floatType":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":462,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":329,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":430,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":346,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":438,"org.easymock.tests.UsageTest.exactCallCountByLastCall":192,"org.easymock.tests2.AnswerTest.stubAnswer":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":480,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":451,"org.easymock.tests.MockingTest.testPartialClassMocking":219,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":330,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":87,"org.easymock.tests2.UsageConstraintsTest.constraints":27,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":142,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":363,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":24,"org.easymock.tests.UsageVarargTest.varargLongAccepted":156,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":237,"org.easymock.tests.ObjectMethodsTest.testHashCode":246,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":440,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":442,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":19,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":126,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":467,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":81,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":418,"org.easymock.tests2.DependencyTest.testClassMocking":411,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":15,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":200,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":244,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":355,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":478,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":26,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":194,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":421,"org.easymock.tests.DefaultClassInstantiatorTest.object":227,"org.easymock.tests.UsageVarargTest.differentLength":154,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":264,"org.easymock.tests2.CaptureTest.testCapture2_2446744":68,"org.easymock.tests.GenericTest.testPackageScope":298}}]

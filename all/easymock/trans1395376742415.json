[{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[208,212,249],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:189","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:110","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"isThreadSafe":"shouldFillInStackTrace"}},{"transplant":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"failures":[250,251,252,253,254,255,256,15,257,258,259,260,261,262,60,61,263,264,265,266,267,101,268,269,270,271,132,133,272,273,135,274,275,276,277,278,279,280,281,179,183,184,187,191,282,283,284,203,207,221],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:278","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[285,286],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"method","name":"methodName"}},{"transplant":{"position":"org.easymock.EasyMock:987","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:141","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[287],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[288,289,290,25,291,292,293,294,295,296,297,298,299,58,300,301,302,303,71,72,73,304,305,306,307,308,285,309,310,311,111,112,312,313,113,116,116,117,117,125,126,127,314,315,136,275,316,317,137,138,139,140,318,276,277,278,141,142,143,144,146,147,148,279,150,151,152,319,153,320,321,154,280,155,281,322,323,324,325,326,157,327,328,158,329,330,331,287,332,333,334,335,336,159,337,338,339,340,341,160,342,343,170,344,174,175,176,233,235],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod","typeParameterMap":"typeParameterMap","candidateMethod":"bridgeMethod","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[345],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[363,364,365,366,367,143,147,368,369,370,371,372,373,374,375,376,344,377],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnValue":"arg","returnedType":"paramType"}},{"transplant":{"position":"org.easymock.EasyMock:632","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1633","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[286],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1764","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:71","sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","type":"CtReturnImpl"},"failures":[250,1,378,379,255,2,3,4,5,6,7,8,9,10,11,12,13,380,381,14,15,16,17,18,382,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,259,260,58,59,61,263,62,63,64,65,66,67,68,383,69,70,71,72,73,74,384,75,76,77,78,99,100,266,267,101,102,385,104,105,386,387,388,389,390,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,270,130,131,132,133,391,392,134,135,274,136,275,137,138,139,140,277,141,142,143,144,145,146,147,148,279,149,150,151,152,319,153,154,280,155,281,156,157,158,159,160,161,162,163,164,165,166,168,170,171,172,393,394,173,176,178,179,180,181,182,183,184,185,186,187,188,189,190,197,199,200,201,202,283,284,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,395,227,228,229,230,231,232,233,234,235,236,237,238,239,396,240,241,242,243,244,245,397,398,246,247],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:346","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[399,400,401,402],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:80","failures":[288,289,312,127,136,403,275,316,137,138,139,140,276,277,404,405,278,319,233],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[406],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[288,289,25,58,303,71,72,73,111,112,312,113,116,116,117,117,125,126,127,136,403,275,316,137,138,139,140,276,277,405,278,141,142,143,144,146,147,148,279,150,151,152,319,153,154,280,155,281,407,408,409,157,158,159,160,170,176,233,235],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[410,411,250,1,252,378,379,253,254,255,2,3,4,5,6,256,7,8,9,10,11,12,13,380,381,14,15,16,17,18,19,20,21,22,23,24,290,412,413,414,415,416,26,417,418,419,420,421,422,423,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,259,260,424,425,426,58,59,60,61,263,62,63,64,65,66,67,68,383,69,70,303,71,72,73,427,74,384,75,400,428,429,401,402,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,264,99,265,100,266,267,101,102,103,385,104,105,386,387,388,389,390,106,107,108,109,110,111,112,312,430,431,432,113,114,115,116,116,117,117,118,119,120,121,122,123,124,125,126,127,128,129,270,130,131,271,132,133,391,392,134,272,273,135,274,275,137,139,140,277,141,142,143,144,145,146,147,148,279,149,150,151,152,153,154,280,155,281,156,157,158,159,160,161,166,433,434,167,168,169,170,171,172,393,394,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,406,196,197,435,436,198,199,200,282,201,202,283,284,203,204,205,206,207,208,209,210,211,212,213,214,249,215,216,217,218,219,220,221,222,223,224,225,226,395,227,228,229,230,231,232,233,234,235,236,237,238,239,396,240,241,242,243,244,245,397,398,246,247,248],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[437,438,439,440,441],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"failures":[208,213,224],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[442],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"failures":[288,289,312,127,136,275,316,137,138,139,140,276,277,278,319,280,155,323,158,159,160,233],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":208,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":250,"org.easymock.tests2.UsageTest.argumentsOrdered":273,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":188,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":359,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":133,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":129,"org.easymock.tests2.DelegateToTest.testReturnException":196,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":20,"org.easymock.tests.MockingTest.testPartialClassMocking":71,"org.easymock.tests.MockClassControlTest.testToString":291,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":420,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":287,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":158,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":79,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":232,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":214,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":12,"org.easymock.tests2.UsageTest.wrongArguments":271,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":77,"org.easymock.samples.ExampleTest.answerVsDelegate":119,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":289,"org.easymock.tests2.UsageConstraintsTest.testNull":210,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":150,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":187,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":296,"org.easymock.tests2.CaptureTest.testPrimitive":239,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":14,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":98,"org.easymock.tests.UsageTest.moreThanOneArgument":1,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":149,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":66,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":400,"org.easymock.tests.UsageTest.argumentsOrdered":254,"org.easymock.tests.UsageVarargTest.varargIntAccepted":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":106,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":136,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":138,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":110,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":156,"org.easymock.tests2.AnswerTest.answer":166,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":249,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":165,"org.easymock.tests2.CaptureTest.testAnd":236,"org.easymock.tests2.UsageTest.strictResetToDefault":130,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":154,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":364,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":65,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":182,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":17,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":402,"org.easymock.tests2.DelegateToTest.testDelegate":198,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":94,"org.easymock.tests.LimitationsTest.mockFinalMethod":300,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":23,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":31,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":410,"org.easymock.tests2.CaptureTest.testCapture1_2446744":396,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":440,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":92,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":163,"org.easymock.tests.UsageThrowableTest.throwError":385,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":346,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":269,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":362,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":68,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":343,"org.easymock.samples.PartialClassMockTest.testGetArea":127,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":107,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":431,"org.easymock.tests2.UsageTest.niceToStrict":132,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":80,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":332,"org.easymock.tests2.ThreadingTest.testChangeDefault":441,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":376,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":137,"org.easymock.tests2.MockBuilderTest.testCreateMock":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":339,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":353,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":88,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":183,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":423,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":52,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":75,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":373,"org.easymock.tests.UsageOverloadedMethodTest.overloading":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":341,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":415,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":43,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":383,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":218,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":244,"org.easymock.tests2.EasyMockSupportClassTest.testAll":157,"org.easymock.tests.MockClassControlTest.testEquals":295,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":112,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":96,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":407,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":164,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":29,"org.easymock.tests2.CaptureTest.testCaptureAll":237,"org.easymock.tests2.UsageConstraintsTest.testMatches":220,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":427,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":67,"org.easymock.samples.ExampleTest.voteForRemovals":123,"org.easymock.tests.UsageVarargTest.allKinds":11,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":59,"org.easymock.samples.BasicClassMockTest.testPrintContent":126,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":30,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":389,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":282,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":436,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":24,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":360,"org.easymock.tests2.UsageConstraintsTest.greaterThan":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":327,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":16,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":281,"org.easymock.samples.ExampleTest.voteForRemoval":120,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":310,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":172,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":322,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":404,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":319,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":113,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":270,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":318,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":180,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":325,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":19,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":406,"org.easymock.tests2.CaptureTest.testCaptureFirst":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":181,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":274,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":257,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":39,"org.easymock.tests2.CaptureTest.testCapture2_2446744":398,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":394,"org.easymock.tests2.UsageTest.moreThanOneArgument":131,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":277,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":10,"org.easymock.tests.GenericTest.testBridgedEquals":313,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":374,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":259,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":371,"org.easymock.tests.UsageExpectAndReturnTest.longType":35,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":178,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":27,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":405,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":97,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":426,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":395,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":95,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":418,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":64,"org.easymock.tests.UsageCallCountTest.tooManyCalls":260,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":340,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":40,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":84,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":388,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":142,"org.easymock.tests.MockingTest.testNiceClassMocking":304,"org.easymock.tests.MockingTest.testClassMocking":302,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":403,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":53,"org.easymock.tests2.UsageConstraintsTest.testContains":217,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":176,"org.easymock.tests2.UsageConstraintsTest.testFind":209,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":70,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":248,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":264,"org.easymock.tests.UsageExpectAndReturnTest.object":42,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":153,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":186,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":6,"org.easymock.tests.UsageTest.exactCallCountByLastCall":255,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":375,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":74,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":428,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":344,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":2,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":48,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":414,"org.easymock.tests.MockClassControlTest.testHashCode":294,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":356,"org.easymock.tests2.EasyMockSupportTest.testVerify":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":334,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":429,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":422,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":412,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":162,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":261,"org.easymock.tests.UsageVarargTest.varargCharAccepted":5,"org.easymock.tests2.CaptureTest.testCaptureMultiple":442,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":201,"org.easymock.tests2.UsageTest.openCallCountByLastCall":391,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":189,"org.easymock.tests.DefaultClassInstantiatorTest.object":305,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":421,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":262,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":335,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":386,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":355,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":280,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":293,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":85,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":49,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":417,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":160,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":292,"org.easymock.tests2.UsageTest.resumeIfFailure":135,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":288,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":22,"org.easymock.tests2.StubTest.stubWithReturnValue":200,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":365,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":41,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":227,"org.easymock.tests2.SerializationTest.testAllMockedMethod":235,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":424,"org.easymock.samples.SupportTest.voteForRemovals":115,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":311,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":91,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":425,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":433,"org.easymock.tests.UsageExpectAndThrowTest.object":89,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":225,"org.easymock.tests2.DelegateToTest.testWrongClass":435,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":62,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":63,"org.easymock.samples.ConstructorCalledMockTest.testTax":116,"org.easymock.tests.UsageStrictMockTest.range":267,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":185,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":141,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":372,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":90,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":139,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":324,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":76,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":432,"org.easymock.tests2.CaptureTest.testCaptureNone":243,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":437,"org.easymock.tests.UsageUnorderedTest.message":263,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":268,"org.easymock.tests.UsageVerifyTest.twoReturns":61,"org.easymock.tests.UsageVarargTest.varargByteAccepted":9,"org.easymock.tests2.ThreadingTest.testThreadSafe":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":337,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":57,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":125,"org.easymock.tests2.CaptureTest.testCapture_2617107":238,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":381,"org.easymock.tests2.UsageConstraintsTest.any":215,"org.easymock.tests2.StubTest.stub":199,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":419,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":21,"org.easymock.tests.UsageExpectAndThrowTest.longType":82,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":285,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":283,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":161,"org.easymock.tests2.SerializationTest.testClass":233,"org.easymock.tests.LimitationsTest.mockNativeMethod":58,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":51,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":312,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":409,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":349,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":204,"org.easymock.tests2.NameTest.nameForMocksControl":195,"org.easymock.tests2.MockedExceptionTest.testMockedException":175,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":328,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":379,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":73,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":83,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":345,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":148,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":140,"org.easymock.tests.MockingTest.testNicePartialClassMocking":72,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":152,"org.easymock.tests2.CaptureTest.testCaptureLast":242,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":347,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":411,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":147,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":213,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":226,"org.easymock.tests.MockingTest.testTwoMocks":303,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":368,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":32,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":87,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":272,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":229,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":439,"org.easymock.tests.UsageStrictMockTest.differentMethods":101,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":352,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":357,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":438,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":307,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":393,"org.easymock.tests2.MockBuilderTest.testCreateMockString":278,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":290,"org.easymock.tests.UsageExpectAndThrowTest.floatType":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":329,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":326,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":167,"org.easymock.tests.ResultTest.createReturnResultToString":382,"org.easymock.tests.UsageVerifyTest.twoThrows":60,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":159,"org.easymock.samples.ExampleTest.voteAgainstRemoval":121,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":430,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":155,"org.easymock.tests.LimitationsTest.privateConstructor":299,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":370,"org.easymock.tests2.UsageConstraintsTest.testNotNull":228,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":390,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":174,"org.easymock.tests2.UsageTest.defaultResetToNice":134,"org.easymock.samples.ExampleTest.voteAgainstRemovals":118,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":47,"org.easymock.tests.UsageVarargTest.differentLength":256,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":348,"org.easymock.tests2.CallbackTest.callback":191,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":320,"org.easymock.tests.UsageTest.openCallCountByLastCall":378,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":205,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":380,"org.easymock.tests.UsageCallCountTest.tooFewCalls":55,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":144,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":78,"org.easymock.tests.UsageThrowableTest.throwCheckedException":387,"org.easymock.tests.MockingTest.testStrictClassMocking":301,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":384,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":146,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":143,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":351,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":145,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":169,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":173,"org.easymock.tests2.NameTest.nameForNiceMock":194,"org.easymock.tests2.DependencyTest.testInterfaceMocking":231,"org.easymock.samples.ExampleTest.addDocument":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":338,"org.easymock.tests2.DelegateToTest.testStubDelegate":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":342,"org.easymock.tests2.AnswerTest.stubAnswer":168,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":100,"org.easymock.tests.UsageVarargTest.varargLongAccepted":8,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":102,"org.easymock.tests.UsageExpectAndReturnTest.floatType":34,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":50,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":170,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":117,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":416,"org.easymock.tests.UsageThrowableTest.noUpperLimit":104,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":223,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":206,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":314,"org.easymock.tests2.SerializationTest.test":234,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":240,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":286,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":306,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":33,"org.easymock.tests2.UsageConstraintsTest.testSame":211,"org.easymock.samples.SupportTest.addDocument":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":330,"org.easymock.tests.GenericTest.testPackageScope":111,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":401,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":361,"org.easymock.tests2.NameTest.nameForMock":192,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":44,"org.easymock.tests2.UsageStrictMockTest.differentMethods":203,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":367,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":321,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":36,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":93,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":18,"org.easymock.tests2.MockedExceptionTest.testRealException":177,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":202,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":13,"org.easymock.tests2.NameTest.nameForStrictMock":193,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":317,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":247,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":377,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":151,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":315,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":224,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":308,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":275,"org.easymock.tests2.UsageStrictMockTest.range":284,"org.easymock.tests2.UsageConstraintsTest.lessThan":230,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":399,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":179,"org.easymock.tests2.CaptureTest.testCaptureRightOne":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":333,"org.easymock.tests2.UsageConstraintsTest.testOr":212,"org.easymock.tests.UsageRangeTest.combination":15,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":279,"org.easymock.tests.UsageTest.wrongArguments":252,"org.easymock.tests2.MockBuilderTest.testWithConstructor":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":331,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":25,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":37,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":45,"org.easymock.tests.UsageVarargTest.varargShortAccepted":7,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":309,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":258,"org.easymock.tests2.UsageConstraintsTest.cmpTo":216,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":434,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":392,"org.easymock.tests2.CaptureTest.testCaptureFromStub":397,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":316,"org.easymock.tests.UsageTest.unexpectedCallWithArray":251,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":265,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":56,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":366,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":46,"org.easymock.tests2.UsageConstraintsTest.constraints":207,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":266,"org.easymock.samples.ExampleTest.addAndChangeDocument":124,"org.easymock.tests.UsageStrictMockTest.testVerify":103,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":128,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":99,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":28,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":241,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":408,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":108,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":38,"org.easymock.tests.LimitationsTest.abstractClass":298,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":109,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":26,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":184,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":3}}]

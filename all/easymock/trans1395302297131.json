[{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,104,105,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[43,44,187,188],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[21,26,37,189],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[190,43],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[191,192,193,194,195,196,77,78,79,87,197,198,199,200,146,147,148,150,174,175,176,201,177,202,203,186,204],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[205,206,207],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"toMock"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[208,209,210,211,212,213],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"propertyFileName":"propertyFileName","properties":"properties","in":"in"}},{"transplant":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"failures":[214,215],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[216,194,217],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"expected"}},{"transplant":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[218,219,220,221,222,0,1,2,3,4,5,6,7,8,9,10,11,223,12,13,14,15,224,16,17,18,19,20,21,225,22,23,24,25,26,27,28,29,30,31,32,33,226,34,35,36,37,208,209,210,211,212,213,227,38,228,229,39,230,40,41,190,231,42,232,43,44,187,45,46,47,48,49,50,233,234,51,235,236,237,52,53,54,238,239,240,241,242,243,55,244,56,57,58,59,245,246,60,247,248,249,61,62,250,63,64,251,252,65,66,67,68,69,70,71,253,254,255,256,257,258,214,215,72,73,259,74,260,261,75,262,76,263,264,265,77,266,78,79,267,268,269,270,80,271,272,81,273,274,275,276,277,278,279,280,281,82,282,283,284,285,286,83,287,288,289,290,291,292,293,84,294,295,296,297,298,299,85,86,87,300,88,301,89,90,91,302,303,92,93,94,304,305,306,95,307,308,309,310,311,312,96,313,314,315,316,317,318,319,320,321,322,97,98,99,100,323,101,102,103,324,325,326,104,105,327,106,328,329,107,108,330,109,110,331,111,332,333,112,334,113,114,115,116,117,118,119,120,121,122,123,335,124,336,125,126,127,128,337,338,339,340,341,342,343,344,345,346,347,348,349,129,350,130,351,131,132,133,134,135,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,136,137,375,376,138,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,139,140,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,141,447,448,142,143,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,144,465,466,467,468,469,145,470,471,472,473,200,474,475,476,477,478,479,480,481,146,482,147,148,483,484,485,149,150,486,487,151,152,488,489,153,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,205,507,508,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,509,176,201,177,178,179,180,181,182,510,511,512,513,183,184,514,185,515,516,517,518,202,519,520,203,186,204],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[78,300,302,303,199,200,481,147,486,487,488,489,201,177],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:223","failures":[81],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:126","failures":[246,247,249,330,519],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[219,220,221,222,0,1,2,3,4,5,6,7,8,9,10,11,223,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,226,34,35,36,37,227,38,39,230,40,41,231,42,232,43,44,187,45,46,47,48,49,50,233,51,237,52,53,54,240,241,242,243,55,56,57,58,59,246,60,247,249,61,62,250,63,64,251,252,65,66,67,68,69,70,71,72,73,259,74,260,261,75,262,76,264,265,77,266,78,79,267,80,81,82,83,84,85,86,87,300,88,301,89,90,91,302,303,92,93,94,306,95,307,96,319,321,322,97,98,99,100,101,102,103,325,326,104,105,327,106,328,329,107,108,330,109,110,331,111,332,333,112,334,113,114,115,116,117,118,119,120,121,122,123,126,127,128,337,338,339,341,342,343,344,345,346,347,348,129,350,131,132,133,134,135,352,136,137,375,376,138,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,139,140,433,434,435,436,437,438,439,440,441,442,443,444,141,200,474,475,476,477,478,479,480,481,146,482,147,148,483,484,485,149,150,486,487,151,152,488,489,153,493,494,495,496,497,498,499,500,501,502,503,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,201,177,178,179,180,181,182,183,184,185,518,519,520,186,204],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[459],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:116","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[521,522,523,524,525,526,527,263,99,103,324],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"f":"field"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[21,26,37,189],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MocksControl:136","failures":[227,38,228,229,39,230,40,41,190,231,42,232,43,187,45,46,48,49,50,233,51,235,236,237,52,53,54,238,239,253,254,255,256,214,215,260,261,75,76,263,268,269,270,80,271,272,81,273,274,275,276,277,278,279,280,281,82,282,283,284,285,286,83,287,288,97,98,99,100,102,103,325,326,104,104,105,105,106,349,129,350,130,351,403,404,405,406,407,408,409,410,420,425,445,446,141,447,485,503,504,505,506,205,507,508,511,512,513,183,184,185,517],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[227,528,38,228,39,230,40,41,231,42,529,232,43,187,45,46,48,49,50,233,51,237,52,53,54,530,531,532,75,76,80,81,82,83,97,98,99,100,102,103,325,326,104,104,105,105,106,129,350,130,404,420,425,141,485,513,183,184,185],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"result"}},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[200,533],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[74,260,261,75,262,85,90,113,117,118,128,352,375,376,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,149,152,493,494,495,496,497,498,520],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[432],"status":-1,"binaryOperator":"(int <= int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:280","failures":[245,246,60,247,248,249,330,519],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"failures":[227,38,228,39,230,40,41,231,42,232,43,233,52,53,239,81,82,83,106,130,420,425],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:52","sourceCode":"return int == int","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[29,534],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"result","maximum":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,225,22,23,24,25,26,27,28,29,30,31,32,33,226,34,35,36,37,227,38,228,39,230,40,41,231,42,232,43,44,45,46,47,48,49,50,233,51,237,52,53,54,239,240,241,242,243,55,56,57,58,59,245,246,60,247,248,249,61,62,250,63,64,251,252,65,66,67,68,69,70,71,72,73,259,74,260,261,75,262,76,264,77,266,78,79,267,80,81,82,83,84,294,85,86,87,300,88,301,89,90,91,302,303,92,93,94,304,305,306,95,307,96,313,319,321,322,97,98,99,100,101,102,103,104,104,105,105,106,107,108,330,109,110,111,333,112,334,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,348,129,130,131,132,133,134,135,352,136,137,375,376,138,378,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,405,406,407,413,420,423,424,425,426,427,139,140,428,429,430,431,432,141,448,142,143,144,145,471,472,473,200,474,475,476,477,478,479,481,146,482,147,148,483,485,149,150,486,487,151,152,488,489,153,490,491,492,493,494,495,496,497,498,499,500,501,502,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,201,177,178,179,180,181,182,510,513,183,184,185,518,202,519,520,203,186,204],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"verified":"matched"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[246,247,248,249,330,451,519],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":15,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":149,"org.easymock.tests2.UsageTest.argumentsOrdered":303,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":10,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":459,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":301,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":327,"org.easymock.tests2.DelegateToTest.testReturnException":246,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":494,"org.easymock.tests.MockingTest.testPartialClassMocking":183,"org.easymock.tests.MockClassControlTest.testToString":405,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":218,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":467,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":276,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":81,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":383,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":73,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":374,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":21,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":136,"org.easymock.tests2.UsageTest.wrongArguments":300,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":299,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":501,"org.easymock.samples.ExampleTest.answerVsDelegate":330,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":425,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":516,"org.easymock.tests2.UsageConstraintsTest.testNull":17,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":48,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":410,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":9,"org.easymock.tests2.CaptureTest.testPrimitive":63,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":138,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":402,"org.easymock.tests.UsageTest.moreThanOneArgument":150,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":47,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":180,"org.easymock.tests.UsageTest.argumentsOrdered":489,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":428,"org.easymock.tests.UsageVarargTest.varargIntAccepted":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":464,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":196,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":119,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":227,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":255,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":317,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":451,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":123,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":358,"org.easymock.tests.ReplayStateInvalidUsageTest.times":441,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":84,"org.easymock.tests2.DependencyTest.testClassMocking":214,"org.easymock.tests2.AnswerTest.answer":94,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":465,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":243,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":422,"org.easymock.tests2.CaptureTest.testAnd":61,"org.easymock.tests2.UsageTest.strictResetToDefault":86,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":524,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":237,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":179,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":133,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":4,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":432,"org.easymock.tests2.DelegateToTest.testDelegate":249,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":357,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":398,"org.easymock.tests.LimitationsTest.mockFinalMethod":447,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":497,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":478,"org.easymock.tests2.DependencyTest.testClassMockingSupport":215,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":174,"org.easymock.tests2.CaptureTest.testCapture1_2446744":64,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":234,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":396,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":241,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":435,"org.easymock.tests.UsageThrowableTest.throwError":112,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":424,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":318,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":182,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":521,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":288,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":361,"org.easymock.samples.PartialClassMockTest.testGetArea":106,"org.easymock.tests.MockingTest.testInterfaceMocking":514,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":436,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":120,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":142,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":384,"org.easymock.tests2.UsageTest.niceToStrict":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":277,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":382,"org.easymock.tests2.ThreadingTest.testChangeDefault":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":449,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":39,"org.easymock.tests2.MockBuilderTest.testCreateMock":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":284,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":296,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":392,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":192,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":5,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":421,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":473,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":411,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":499,"org.easymock.tests.UsageOverloadedMethodTest.overloading":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":286,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":520,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":26,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":165,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":126,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":25,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":206,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":67,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":340,"org.easymock.tests.MockClassControlTest.testEquals":409,"org.easymock.tests2.EasyMockSupportClassTest.testAll":80,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":350,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":400,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":217,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":530,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":476,"org.easymock.tests2.CaptureTest.testCaptureAll":62,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":242,"org.easymock.tests.MockNameTest.defaultName":510,"org.easymock.tests2.UsageConstraintsTest.testMatches":27,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":433,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":181,"org.easymock.samples.ExampleTest.voteForRemovals":111,"org.easymock.tests.UsageVarargTest.allKinds":348,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":176,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":477,"org.easymock.samples.BasicClassMockTest.testPrintContent":326,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":117,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":264,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":498,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":248,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":314,"org.easymock.tests2.UsageConstraintsTest.greaterThan":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":271,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":132,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":54,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":362,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":508,"org.easymock.samples.ExampleTest.voteForRemoval":109,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":56,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":238,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":426,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":233,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":354,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":485,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":85,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":456,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":2,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":269,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":493,"org.easymock.tests2.CaptureTest.testCaptureFirst":71,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":455,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":3,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":93,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":204,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":161,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":58,"org.easymock.tests2.CaptureTest.testCapture2_2446744":70,"org.easymock.tests2.UsageTest.moreThanOneArgument":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":466,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":42,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":347,"org.easymock.tests.GenericTest.testBridgedEquals":351,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":418,"org.easymock.tests.UsageExpectAndReturnTest.longType":157,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":474,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":0,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":529,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":401,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":125,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":226,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":399,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":491,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":178,"org.easymock.tests.UsageCallCountTest.tooManyCalls":419,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":285,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":162,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":298,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":388,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":116,"org.easymock.tests.MockingTest.testNiceClassMocking":517,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":98,"org.easymock.tests.MockingTest.testClassMocking":512,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":528,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":412,"org.easymock.tests2.UsageConstraintsTest.testContains":24,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":75,"org.easymock.tests2.UsageConstraintsTest.testFind":16,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":128,"org.easymock.tests.MockTypeTest.fromEasyMockClass":423,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":479,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":321,"org.easymock.tests.UsageExpectAndReturnTest.object":164,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":51,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":297,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":8,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":342,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":380,"org.easymock.tests.UsageTest.exactCallCountByLastCall":153,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":454,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":429,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":335,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":263,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":170,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":337,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":519,"org.easymock.tests.MockClassControlTest.testHashCode":408,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":309,"org.easymock.tests2.EasyMockSupportTest.testVerify":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":279,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":216,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":430,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":518,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":472,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":240,"org.easymock.tests.UsageVarargTest.varargCharAccepted":341,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":470,"org.easymock.tests2.UsageTest.openCallCountByLastCall":89,"org.easymock.tests.DefaultClassInstantiatorTest.object":503,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":11,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":471,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":378,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":199,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":280,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":114,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":292,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":308,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":407,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":52,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":360,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":389,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":171,"org.easymock.tests.ReplayStateInvalidCallsTest.times":366,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":490,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":367,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":83,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":194,"org.easymock.tests2.UsageTest.resumeIfFailure":92,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":420,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":254,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":496,"org.easymock.tests2.StubTest.stubWithReturnValue":74,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":525,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":163,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":34,"org.easymock.tests2.SerializationTest.testAllMockedMethod":187,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":144,"org.easymock.samples.SupportTest.voteForRemovals":107,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":349,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":311,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":395,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":188,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":145,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":304,"org.easymock.tests.UsageExpectAndThrowTest.object":393,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":336,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":32,"org.easymock.tests2.DelegateToTest.testWrongClass":247,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":139,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":364,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":140,"org.easymock.tests.UsageStrictMockTest.range":147,"org.easymock.samples.ConstructorCalledMockTest.testTax":104,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":257,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":7,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":97,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":394,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":40,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":488,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":443,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":268,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":500,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":356,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":143,"org.easymock.tests2.CaptureTest.testCaptureNone":66,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":209,"org.easymock.tests.UsageUnorderedTest.message":200,"org.easymock.tests.UsageVerifyTest.twoReturns":177,"org.easymock.tests.UsageVarargTest.varargByteAccepted":346,"org.easymock.tests2.ThreadingTest.testThreadSafe":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":282,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":416,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":325,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":381,"org.easymock.tests2.CaptureTest.testCapture_2617107":250,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":509,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":468,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":376,"org.easymock.tests2.UsageConstraintsTest.any":22,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":440,"org.easymock.tests2.StubTest.stub":259,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":492,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":495,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":469,"org.easymock.tests.UsageExpectAndThrowTest.longType":386,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":205,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":439,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":266,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":96,"org.easymock.tests2.SerializationTest.testClass":43,"org.easymock.tests.LimitationsTest.mockNativeMethod":141,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":173,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":130,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":532,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":291,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":372,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":267,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":210,"org.easymock.tests2.NameTest.nameForMocksControl":222,"org.easymock.tests2.MockedExceptionTest.testMockedException":261,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":272,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":152,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":387,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":185,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":320,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":45,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":41,"org.easymock.tests.MockingTest.testNicePartialClassMocking":184,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":50,"org.easymock.tests2.CaptureTest.testCaptureLast":65,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":289,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":175,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":103,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":20,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":371,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":33,"org.easymock.tests.MockingTest.testTwoMocks":513,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":368,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":324,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":154,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":391,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":302,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":36,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":213,"org.easymock.samples.ExampleTest.removeNonExistingDocument":332,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":437,"org.easymock.tests.UsageStrictMockTest.differentMethods":148,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":295,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":310,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":505,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":212,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":57,"org.easymock.tests2.ConstraintsToStringTest.andToString":195,"org.easymock.tests2.MockBuilderTest.testCreateMockString":232,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":403,"org.easymock.tests.UsageExpectAndThrowTest.floatType":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":273,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":270,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":306,"org.easymock.tests.UsageVerifyTest.twoThrows":201,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":82,"org.easymock.samples.ExampleTest.voteAgainstRemoval":110,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":460,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":448,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":53,"org.easymock.tests.LimitationsTest.privateConstructor":446,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":522,"org.easymock.tests2.UsageConstraintsTest.testNotNull":35,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":118,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":260,"org.easymock.tests2.UsageTest.defaultResetToNice":91,"org.easymock.samples.ExampleTest.voteAgainstRemovals":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":461,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":169,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":290,"org.easymock.tests.UsageVarargTest.differentLength":343,"org.easymock.tests2.CallbackTest.callback":322,"org.easymock.tests2.UsageConstraintsTest.equals":224,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":235,"org.easymock.tests.UsageTest.openCallCountByLastCall":151,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":12,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":375,"org.easymock.tests.UsageCallCountTest.tooFewCalls":414,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":100,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":502,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":211,"org.easymock.tests.UsageThrowableTest.throwCheckedException":115,"org.easymock.tests.MockingTest.testStrictClassMocking":511,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":197,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":102,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":352,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":99,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":294,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":442,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":101,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":307,"org.easymock.tests2.CompareToTest.testGreateOrEqual":189,"org.easymock.tests.ObjectMethodsTest.testHashCode":379,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":59,"org.easymock.tests2.NameTest.nameForNiceMock":221,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":370,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":365,"org.easymock.tests2.DependencyTest.testInterfaceMocking":72,"org.easymock.samples.ExampleTest.addDocument":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":283,"org.easymock.tests2.DelegateToTest.testStubDelegate":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":287,"org.easymock.tests2.AnswerTest.stubAnswer":95,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":146,"org.easymock.tests.UsageVarargTest.varargLongAccepted":345,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":458,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":172,"org.easymock.tests.UsageExpectAndReturnTest.floatType":156,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":76,"org.easymock.tests2.ConstraintsToStringTest.orToString":191,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":105,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":30,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":203,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":316,"org.easymock.tests.UsageThrowableTest.noUpperLimit":334,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":13,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":253,"org.easymock.tests2.SerializationTest.test":44,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":251,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":207,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":504,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":155,"org.easymock.tests2.UsageConstraintsTest.testSame":18,"org.easymock.samples.SupportTest.addDocument":329,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":323,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":355,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":274,"org.easymock.tests.GenericTest.testPackageScope":129,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":453,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":315,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":515,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":353,"org.easymock.tests2.NameTest.nameForMock":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":166,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":527,"org.easymock.tests2.UsageStrictMockTest.differentMethods":79,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":236,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":158,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":397,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":377,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":134,"org.easymock.tests2.MockedExceptionTest.testRealException":262,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":258,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":198,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":462,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":77,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":444,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":137,"org.easymock.tests2.NameTest.nameForStrictMock":220,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":229,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":319,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":49,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":256,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":533,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":506,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":31,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":38,"org.easymock.tests2.UsageStrictMockTest.range":78,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":359,"org.easymock.tests2.UsageConstraintsTest.lessThan":37,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":457,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":1,"org.easymock.tests2.CaptureTest.testCaptureRightOne":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":278,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":208,"org.easymock.tests2.UsageConstraintsTest.testOr":19,"org.easymock.tests.UsageRangeTest.combination":131,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":46,"org.easymock.tests.UsageTest.wrongArguments":487,"org.easymock.tests2.MockBuilderTest.testWithConstructor":523,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":275,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":404,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":450,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":167,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":507,"org.easymock.tests.UsageVarargTest.varargShortAccepted":344,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":417,"org.easymock.tests2.UsageConstraintsTest.cmpTo":23,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":373,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":305,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":363,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":452,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":90,"org.easymock.tests2.CaptureTest.testCaptureFromStub":69,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":434,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":228,"org.easymock.tests.UsageTest.unexpectedCallWithArray":486,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":369,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":481,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":415,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":526,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":168,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":482,"org.easymock.tests2.UsageConstraintsTest.constraints":14,"org.easymock.samples.ExampleTest.addAndChangeDocument":333,"org.easymock.tests2.ConstraintsToStringTest.notToString":193,"org.easymock.tests.UsageStrictMockTest.testVerify":484,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":328,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":480,"org.easymock.tests2.CompareToTest.testGreateThan":534,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":475,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":252,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":531,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":121,"org.easymock.tests.LimitationsTest.abstractClass":445,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":160,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":186,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":122,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":6,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":338}}]

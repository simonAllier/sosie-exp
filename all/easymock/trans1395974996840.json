[{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:420","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:75","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"<any>\")","position":"org.easymock.internal.matchers.Any:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","position":"org.easymock.internal.RecordState:156","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1385","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName()))) && ((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","position":"org.easymock.internal.BridgeMethodResolver:130","type":"CtReturnImpl"},"status":-2},{"failures":[0,1,2,3,4],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":-1},{"failures":[5],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor });\n    if (org.easymock.ConstructorArgs != null) {\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n        try {\n            java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n        } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n            throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n        }\n        T T;\n        try {\n            java.lang.reflect.Constructor<?>.setAccessible(true);\n            T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n        } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n        } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n        }\n        return T;\n    } else {\n        net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n        try {\n            net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n        }\n        net.sf.cglib.proxy.Factory.getCallback(0);\n        return ((T)(net.sf.cglib.proxy.Factory));\n    }\n} finally {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null);\n}","position":"org.easymock.internal.ClassProxyFactory:188","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:66","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>.getName(), java.lang.Float.java.lang.Class<java.lang.Float>)","position":"org.easymock.internal.MethodSerializationWrapper:39","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:826","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n    java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n} ","position":"org.easymock.internal.Injector:169","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Proxy.java.lang.reflect.Proxy.isProxyClass(V.getClass())) {\n    return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]));\n} ","position":"org.easymock.internal.MocksControl:182","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual","expected":"expected","this":"this"},"name":"add","transplant":{"sourceCode":"return java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:45","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:415","type":"CtForEachImpl"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"status":-1},{"failures":[34,35,36,37,38,39,40,41,42,43,44,0,45,1,2,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,8,98,9,10,99,12,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,13,117,118,119,120,121,122,18,123,124,125,126,21,22,127,128,129,130,131,132,133,134,135,136,137,138,23,139,140,141,142,143,144,145,146,147,148,3,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,4,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1276","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    try {\n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n            continue;\n        } \n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n            continue;\n        } \n        final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n        org.easymock.internal.Invocation.validateCaptures();\n        return org.easymock.internal.Result;\n    } finally {\n        org.easymock.internal.Invocation.clearCaptures();\n    }\n}","position":"org.easymock.internal.UnorderedBehavior:50","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:161","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object java.lang.Object","position":"org.easymock.internal.Injector:122","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:121","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:168","type":"CtForEachImpl"},"status":0},{"failures":[34,35,36,37,38,39,40,41,42,44,0,45,2,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,8,98,9,10,99,12,100,101,102,103,104,105,106,107,109,110,111,112,113,114,116,13,117,118,121,122,18,123,124,125,126,21,22,127,128,129,130,131,132,133,134,273,274,275,276,135,136,137,138,23,139,142,143,145,146,147,148,3,149,150,151,152,153,154,155,156,157,158,277,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,278,189,190,197,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,254,255,256,257,279,260,261,262,263,264,265,266,267,268,269,270,271,272],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:90","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:531","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1290","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:171","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class });\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"));\n}","position":"org.easymock.internal.DefaultClassInstantiator:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","position":"org.easymock.internal.ClassProxyFactory:176","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ObjectMethodsFilter:107","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:123","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:254","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.Invocation:220","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>.getName(), java.lang.Boolean.java.lang.Class<java.lang.Boolean>)","position":"org.easymock.internal.MethodSerializationWrapper:33","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>","position":"org.easymock.internal.BridgeMethodResolver:275","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","position":"org.easymock.internal.MockBuilder:139","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.fieldsOf(java.lang.Class<?>)","position":"org.easymock.internal.Injector:159","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:785","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:520","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"actual","o":"actual"},"name":"replace","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Equals:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","position":"org.easymock.internal.matchers.Compare:55","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1107","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:946","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))","position":"org.easymock.internal.AndroidClassProxyFactory:97","type":"CtReturnImpl"},"status":-2},{"failures":[263,264,265,266,267,268,269,270,271],"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","position":"org.easymock.internal.Invocation:73","type":"mutation","status":-1},{"failures":[57],"binaryOperator":"((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","name":"conditionalBoundary","position":"org.easymock.internal.matchers.Contains:36","type":"mutation","status":-1},{"failures":[],"binaryOperator":"\"codegen.\" + (net.sf.cglib.core.DefaultNamingPolicy.getClassName(java.lang.String, java.lang.String, java.lang.Object, net.sf.cglib.core.Predicate))","name":"removeConditional","position":"org.easymock.internal.:149","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:254","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.EasyMockSupport:508","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injection.getAnnotation()","position":"org.easymock.internal.InjectionPlan:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"endPosition":"initialPosition"},"name":"replace","transplant":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = int","position":"org.easymock.internal.MocksBehavior:105","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))","position":"org.easymock.internal.AndroidClassProxyFactory:97","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.asStub()","position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:52","type":"CtReturnImpl"},"status":-2},{"failures":[280,281,282,283,218,284],"binaryOperator":"int > 0","name":"negateConditional","position":"org.easymock.internal.ArgumentToString:47","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1709","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToStrict()","position":"org.easymock.EasyMockSupport:595","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","position":"org.easymock.internal.ReflectionUtils:35","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"[\")","position":"org.easymock.internal.ArgumentToString:45","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","position":"org.easymock.internal.ClassProxyFactory:207","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"status":-2},{"failures":[62],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:41","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass()","position":"org.easymock.internal.Injector:80","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:71","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5418279681566430252L","position":"org.easymock.internal.RecordState:31","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4859402739599754147L","position":"org.easymock.internal.matchers.Compare:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[50],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.easymock.internal.RecordState:327","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","position":"org.easymock.internal.matchers.EndsWith:36","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","position":"org.easymock.internal.MocksControl:128","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:110","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.SecurityException java.lang.SecurityException","position":"org.easymock.internal.Injector:208","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.get()","position":"org.easymock.internal.LastControl:56","type":"CtReturnImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:233","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.ClassLoader","position":"org.easymock.internal.EasyMockProperties:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:83","type":"CtInvocationImpl"},"status":-2},{"failures":[65],"variableMapping":{"count":"result","maximum":"result","minimum":"result"},"name":"replace","transplant":{"sourceCode":"return (int <= int) && (int <= int)","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.LogicalOperator:51","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:193","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:106","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","position":"org.easymock.internal.MethodSerializationWrapper:30","type":"CtNewClassImpl"},"status":-2},{"failures":[285],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","position":"org.easymock.internal.EasyMockProperties:89","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:124","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.io.IOException java.io.IOException","position":"org.easymock.internal.DefaultClassInstantiator:44","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Number java.lang.Number = ((java.lang.Number)(java.lang.Object))","position":"org.easymock.internal.matchers.EqualsWithDelta:39","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:45","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int == (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:747","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:108","type":"CtIfImpl"},"status":-2},{"failures":[11],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:572","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl"},"status":0},{"failures":[],"binaryOperator":"((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \")","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","position":"org.easymock.EasyMock:1079","type":"CtInvocationImpl"},"status":-2},{"failures":[34,36,38,39,40,41,42,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,78,80,81,83,84,85,86,87,88,89,91,96,97,8,98,9,10,99,12,100,101,102,104,105,107,108,111,112,113,114,115,116,13,117,118,119,120,121,18,123,124,126,21,22,128,129,130,131,132,133,134,135,136,137,23,140,141,144,145,148,149,150,152,154,156,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,286,287,288,289,290,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,291,292,293,204,205,206,207,208,210,211,214,215,219,221,222,224,225,227,294,249,250,252,253,256,257,258,259,260,295],"variableMapping":{"answer":"value","state":"state"},"name":"replace","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:284","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:257","type":"CtTryImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","position":"org.easymock.internal.MethodSerializationWrapper:38","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.ReflectionUtils:92","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.internal.Invocation.(toStringIsDefined(java.lang.Object))) {\n    return java.lang.String;\n} ","position":"org.easymock.internal.Invocation:147","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocationAndResult.getResult()","position":"org.easymock.internal.MocksBehavior:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.DefaultClassInstantiator:162","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ExpectedInvocationAndResult.getExpectedInvocation().matches(org.easymock.internal.Invocation)) {\n    return org.easymock.internal.ExpectedInvocationAndResult.getResult();\n} ","position":"org.easymock.internal.MocksBehavior:66","type":"CtIfImpl"},"status":0},{"failures":[44,135,141,296,198,209,213,226,228,229,232,234,235,236,237,239,240,241,242,244,245,246,247,249,253],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","position":"org.easymock.internal.RecordState:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory","position":"org.easymock.internal.ClassProxyFactory:225","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ExpectedInvocation:113","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","position":"org.easymock.internal.EasyMockProperties:127","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int]","position":"org.easymock.internal.BridgeMethodResolver:323","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.get(java.lang.Class<?>)","position":"org.easymock.internal.RecordState:229","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"equalsMethod","method":"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"method"},"name":"replace","transplant":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"private static class MockHandler implements java.lang.reflect.InvocationHandler {\n    private final java.lang.reflect.InvocationHandler delegate;\n\n    private final java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockHandler(java.lang.reflect.InvocationHandler delegate ,java.lang.reflect.Method... mockedMethods) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n        this.java.util.Set<java.lang.reflect.Method> = java.lang.reflect.Method[] != null ? new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[])) : null;\n    }\n\n    public java.lang.Object invoke(java.lang.Object obj, java.lang.reflect.Method method, java.lang.Object[] args) throws java.lang.Throwable {\n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()));\n        if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n            return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    private boolean isMocked(java.lang.reflect.Method method) {\n        return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:67","type":"CtClassImpl"},"status":-2},{"failures":[52,56],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1304","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ClassProxyFactory:200","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:233","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:155","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:49","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.ExpectedInvocation:60","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"\"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","name":"removeConditional","position":"org.easymock.internal.ObjectMethodsFilter:98","type":"mutation","status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":191,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":89,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":220,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":217,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":243,"org.easymock.tests.UsageVarargTest.varargIntAccepted":264,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":224,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":49,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":42,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":158,"org.easymock.tests2.UsageConstraintsTest.testContains":61,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":285,"org.easymock.tests.UsageCallCountTest.tooManyCalls":164,"org.easymock.tests2.UsageConstraintsTest.testFind":53,"org.easymock.tests2.StubTest.stubWithReturnValue":44,"org.easymock.tests.UsageVarargTest.allKinds":272,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":109,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":33,"org.easymock.tests2.CaptureTest.testCaptureAll":105,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":202,"org.easymock.samples.ExampleTest.addAndChangeDocument":153,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":19,"org.easymock.tests.UsageVarargTest.varargCharAccepted":265,"org.easymock.tests.UsageVerifyTest.twoThrows":226,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":211,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":266,"org.easymock.tests2.DelegateToTest.testReturnException":0,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":139,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":65,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":102,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":77,"org.easymock.tests2.CaptureTest.testAnd":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":236,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":4,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":113,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":240,"org.easymock.tests2.UsageConstraintsTest.testMatches":64,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":26,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":287,"org.easymock.tests2.UsageConstraintsTest.testNull":54,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":128,"org.easymock.tests2.EasyMockSupportClassTest.testAll":38,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":10,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":178,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":244,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":18,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":185,"org.easymock.tests.UsageThrowableTest.throwError":188,"org.easymock.tests2.UsageConstraintsTest.greaterThan":66,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":262,"org.easymock.samples.SupportTest.addDocument":155,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":214,"org.easymock.tests2.StubTest.stub":43,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":207,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":289,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":12,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":68,"org.easymock.tests.UsageExpectAndReturnTest.object":175,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":290,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":271,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":82,"org.easymock.tests.UsageExpectAndThrowTest.object":238,"org.easymock.tests2.DelegateToTest.testWrongClass":1,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":119,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":282,"org.easymock.tests2.UsageTest.moreThanOneArgument":137,"org.easymock.tests.UsageVarargTest.varargByteAccepted":270,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":235,"org.easymock.samples.ExampleTest.voteAgainstRemoval":150,"org.easymock.tests.UsageTest.wrongArguments":251,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":28,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":194,"org.easymock.tests.UsageVarargTest.varargShortAccepted":268,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":239,"org.easymock.tests2.UsageTest.defaultResetToNice":24,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":283,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":280,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":95,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":206,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":120,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":157,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":22,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":121,"org.easymock.tests2.SerializationTest.testAllMockedMethod":48,"org.easymock.tests2.NameTest.nameForMocksControl":276,"org.easymock.samples.ExampleTest.voteAgainstRemovals":148,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":76,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":258,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":213,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":196,"org.easymock.tests2.CaptureTest.testCapture1_2446744":108,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":145,"org.easymock.tests2.DelegateToTest.testStubDelegate":45,"org.easymock.tests.LimitationsTest.mockNativeMethod":215,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":292,"org.easymock.tests.UsageUnorderedTest.message":248,"org.easymock.samples.ExampleTest.answerVsDelegate":3,"org.easymock.samples.ExampleTest.voteForRemoval":149,"org.easymock.tests.UsageCallCountTest.tooFewCalls":160,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":174,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":35,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":162,"org.easymock.tests.UsageVerifyTest.twoReturns":227,"org.easymock.tests2.DependencyTest.testInterfaceMocking":123,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":169,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":237,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":96,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":278,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":98,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":293,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":17,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":57,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":30,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":223,"org.easymock.tests2.CaptureTest.testCaptureRightOne":114,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":171,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":159,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":31,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":88,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":279,"org.easymock.tests2.UsageConstraintsTest.cmpTo":60,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":277,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":176,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":130,"org.easymock.tests.UsageThrowableTest.throwCheckedException":192,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":72,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":247,"org.easymock.samples.PartialClassMockTest.testGetArea":154,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":225,"org.easymock.samples.ExampleTest.voteForRemovals":152,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":190,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":198,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":63,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":187,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":87,"org.easymock.tests2.UsageTest.argumentsOrdered":143,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":249,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":37,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":170,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":25,"org.easymock.tests2.AnswerTest.answer":34,"org.easymock.tests.MockingTest.testNicePartialClassMocking":200,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":219,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":166,"org.easymock.tests2.UsageConstraintsTest.any":59,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":173,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":208,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":101,"org.easymock.tests.UsageExpectAndThrowTest.longType":231,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":94,"org.easymock.tests2.CallbackTest.callback":122,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":40,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":11,"org.easymock.tests2.NameTest.nameForMock":273,"org.easymock.tests.UsageTest.argumentsOrdered":255,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":21,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":52,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":62,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":183,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":212,"org.easymock.tests2.NameTest.nameForStrictMock":274,"org.easymock.tests2.CaptureTest.testCaptureNone":112,"org.easymock.tests2.SerializationTest.test":47,"org.easymock.tests.UsageExpectAndReturnTest.longType":168,"org.easymock.tests2.SerializationTest.testClass":46,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":110,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":288,"org.easymock.tests2.CaptureTest.testCaptureFirst":116,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":69,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":146,"org.easymock.tests2.UsageTest.niceToStrict":23,"org.easymock.tests2.EasyMockSupportTest.testVerify":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":29,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":20,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":294,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":216,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":233,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":71,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":135,"org.easymock.tests2.UsageTest.strictResetToDefault":136,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":241,"org.easymock.tests.GenericTest.testBridgedEquals":5,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":91,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":127,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":182,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":228,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":58,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":132,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":172,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":14,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":6,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":67,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":86,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":263,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":83,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":201,"org.easymock.tests2.UsageConstraintsTest.testOr":56,"org.easymock.tests2.DelegateToTest.testDelegate":2,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":118,"org.easymock.tests2.UsageConstraintsTest.testNotNull":73,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":79,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":13,"org.easymock.tests2.CaptureTest.testCapture_2617107":106,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":177,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":195,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":203,"org.easymock.tests2.ThreadingTest.testThreadSafe":117,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":141,"org.easymock.tests.UsageThrowableTest.noUpperLimit":189,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":129,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":131,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":100,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":97,"org.easymock.tests.UsageExpectAndReturnTest.floatType":167,"org.easymock.tests2.UsageTest.wrongArguments":138,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":16,"org.easymock.tests2.UsageConstraintsTest.testSame":55,"org.easymock.tests2.UsageTest.resumeIfFailure":144,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":133,"org.easymock.tests.UsageOverloadedMethodTest.overloading":197,"org.easymock.samples.SupportTest.voteForRemovals":156,"org.easymock.tests.UsageRangeTest.combination":257,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":193,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":74,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":261,"org.easymock.tests.UsageTest.openCallCountByLastCall":252,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":234,"org.easymock.tests2.NameTest.nameForNiceMock":275,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":259,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":70,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":78,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":85,"org.easymock.tests2.CaptureTest.testPrimitive":107,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":179,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":242,"org.easymock.samples.BasicClassMockTest.testPrintContent":147,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":32,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":204,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":7,"org.easymock.tests.UsageExpectAndThrowTest.floatType":230,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":84,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":93,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":163,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":180,"org.easymock.tests2.UsageStrictMockTest.differentMethods":81,"org.easymock.tests.UsageTest.exactCallCountByLastCall":256,"org.easymock.tests2.AnswerTest.stubAnswer":36,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":8,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":99,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":295,"org.easymock.tests2.CaptureTest.testCaptureLast":111,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":229,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":161,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":39,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":124,"org.easymock.tests.UsageStrictMockTest.range":221,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":253,"org.easymock.tests.UsageTest.unexpectedCallWithArray":284,"org.easymock.tests.MockingTest.testPartialClassMocking":199,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":296,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":142,"org.easymock.tests2.UsageConstraintsTest.constraints":51,"org.easymock.samples.ExampleTest.addDocument":151,"org.easymock.tests2.UsageConstraintsTest.lessThan":75,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":15,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":254,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":186,"org.easymock.tests.UsageVarargTest.varargLongAccepted":269,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":90,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":92,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":218,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":246,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":41,"org.easymock.tests2.UsageStrictMockTest.range":80,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":134,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":27,"org.easymock.tests.UsageTest.moreThanOneArgument":250,"org.easymock.tests2.UsageTest.openCallCountByLastCall":140,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":205,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":125,"org.easymock.tests.UsageStrictMockTest.differentMethods":222,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":9,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":50,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":286,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":232,"org.easymock.tests.UsageVarargTest.differentLength":267,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":291,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":165,"org.easymock.tests2.CaptureTest.testCapture2_2446744":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":209,"org.easymock.tests.GenericTest.testPackageScope":260}}]

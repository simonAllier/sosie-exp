[{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[5,6],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"m"}},{"position":"org.easymock.EasyMock:879","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[7,8,9,10,11,12,13,14],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"o"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:193","sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if (java.lang.Object == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[15,16,17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"substring"}},{"position":"org.easymock.ConstructorArgs:77","failures":[19],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[20,21,22,23,24,25,26,27,28,29],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[29,30,31,32],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[15,33,34,35,16,36,18,37,38,39,40],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[41,42,43],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[44,45,46,47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"in":"in"}},{"position":"org.easymock.EasyMock:1121","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[48],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[21,22,24,25,26,49,50],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[51],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[52,53,20,21,54,55,56,57,58,59,60,61,19,62,63,22,23,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,29],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append(((org.easymock.internal.ErrorMessage.getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","matches":"matches","this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:140","sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>)","type":"CtInvocationImpl"},"failures":[29],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[119,52,53,120,121,122,123,124,125,126,127,128,129,130,131,132,133,20,21,134,135,93,94,95,96,136,137,138,139,140,15,33,141,142,34,143,35,16,144,36,145,146,17,147,148,149,150,6,151,18,152,153,154,155,37,156,157,158,159,160,161,162,62,163,164,63,165,9,166,167,22,168,169,23,170,171,64,172,38,173,39,174,175,176,177,41,178,42,40,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,10,11,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,97,98,220,221,222,223,224,99,100,0,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,65,261,262,263,264,66,67,265,266,267,268,269,270,271,272,273,274,275,276,277,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,278,279,280,281,282,283,284,285,101,286,102,103,287,29,30,31,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,1,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,2,378,3,379,104,380,105,381,382,106,107,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,111,404,405,406,407,408,409,410,411,412,413,414,415,416,417,51,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,4,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,112,113,114,501,502,503,504,505,506,507,508,509,510,511,512,513,115,116,514,117,118,515,516,517,518,519],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[520,144,148,157],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:35","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"value"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[98,99,100,102,372,521,522,380,105,106,107,111,113,114,115,117],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[98,99,100,102,372,522,380,105,106,107,111,113,114,115,117],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[385],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[523,139,6,155],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[279,282,283,431],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[119,52,52,53,53,120,121,122,123,124,125,127,128,129,130,131,132,133,20,93,94,95,96,136,138,139,140,15,33,142,34,143,35,16,144,36,145,146,17,147,148,149,150,6,151,18,152,153,154,155,37,156,157,163,9,167,168,171,38,173,39,174,175,176,177,41,178,42,40,179,180,181,182,183,184,185,186,187,190,10,11,194,197,198,199,200,201,202,203,204,205,211,218,219,97,98,220,221,222,223,224,99,100,0,225,228,229,230,237,244,245,246,247,248,249,257,258,259,260,65,261,263,264,66,265,266,267,268,269,270,271,272,273,274,275,276,277,71,74,84,90,278,279,280,281,282,283,284,285,101,286,102,103,287,29,30,31,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,334,335,336,338,353,354,355,356,357,366,367,368,369,370,371,373,374,376,377,2,378,3,379,104,105,381,382,106,107,383,384,385,386,387,388,389,111,404,405,406,407,408,410,411,412,413,414,415,416,417,418,419,420,422,423,424,441,446,448,449,450,452,453,454,455,456,457,458,459,470,472,473,474,475,476,481,482,483,484,485,487,495,496,497,498,499,500,112,113,114,501,503,504,505,506,508,509,510,511,512,513,115,116,514,117,118,515,516,517,518,519],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[136,137],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[524,525,526,527,380,115],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[136,138,139,140,15,33,142,34,143,35,16,144,36,145,146,17,147,148,149,150,6,151,18,152,153,154,155,37,156,157,38,173,39,174,175,176,177,41,178,42,40,179,180,181,190,200,101,111,407,408,459,472,473,474,475,476,481,482,483,484,485,499,510,511,115,116],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[119,52,53,120,121,122,123,124,125,126,127,128,129,130,131,132,133,20,93,94,95,96,136,138,139,140,15,33,142,34,143,35,16,144,145,146,17,147,148,149,150,6,151,18,152,153,154,155,37,156,157,158,159,160,161,162,163,9,166,167,168,170,171,172,38,173,39,174,175,176,177,41,178,42,40,179,180,181,182,183,184,185,186,187,188,190,193,10,11,194,197,198,199,200,201,202,203,204,205,211,218,219,97,98,220,221,222,223,224,99,100,0,225,228,229,230,237,245,246,247,249,257,258,259,260,65,261,263,264,66,265,266,267,268,269,270,271,272,273,274,275,276,277,71,74,84,90,278,281,282,283,284,285,101,286,102,103,287,29,30,31,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,335,336,338,342,343,344,345,346,347,348,1,349,350,351,352,353,354,355,356,357,366,368,369,371,372,377,2,378,3,379,104,380,105,381,382,106,107,383,384,390,391,392,393,394,396,111,407,408,410,411,412,413,414,415,416,417,418,419,422,423,424,448,449,450,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,470,472,473,474,475,476,477,478,479,480,481,482,483,484,485,490,491,492,495,496,497,498,499,500,112,113,114,501,502,503,504,505,506,507,508,509,510,511,512,513,115,116,514,117,118,515,516],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[109,111],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[5,6],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"value"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[44,45,46,47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"in":"in"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":33,"org.easymock.tests2.UsageTest.argumentsOrdered":100,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":379,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":275,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":212,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":435,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":221,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":128,"org.easymock.tests2.DelegateToTest.testReturnException":245,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":496,"org.easymock.tests.MockingTest.testPartialClassMocking":335,"org.easymock.tests.MockClassControlTest.testToString":462,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":135,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":443,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":78,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":74,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":288,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":108,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":229,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":24,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":144,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":472,"org.easymock.tests2.UsageTest.wrongArguments":98,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":243,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":479,"org.easymock.samples.ExampleTest.answerVsDelegate":121,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":363,"org.easymock.tests2.UsageConstraintsTest.testNull":34,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":340,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":185,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":467,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":274,"org.easymock.tests2.CaptureTest.testPrimitive":174,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":476,"org.easymock.tests.UsageTest.moreThanOneArgument":104,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":307,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":184,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":355,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":385,"org.easymock.tests.UsageTest.argumentsOrdered":107,"org.easymock.tests.UsageVarargTest.varargIntAccepted":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":440,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":481,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":162,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":50,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":216,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":252,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":166,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":427,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":485,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":237,"org.easymock.tests.ReplayStateInvalidUsageTest.times":349,"org.easymock.tests2.DependencyTest.testClassMocking":226,"org.easymock.tests2.AnswerTest.answer":278,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":4,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":161,"org.easymock.tests2.CaptureTest.testAnd":38,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":360,"org.easymock.tests2.UsageTest.strictResetToDefault":219,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":63,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":193,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":354,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":269,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":378,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":389,"org.easymock.tests2.DelegateToTest.testDelegate":249,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":303,"org.easymock.tests.LimitationsTest.mockFinalMethod":471,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":499,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":394,"org.easymock.tests2.DependencyTest.testClassMockingSupport":227,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":373,"org.easymock.tests2.CaptureTest.testCapture1_2446744":175,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":189,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":301,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":159,"org.easymock.tests.UsageThrowableTest.throwError":410,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":344,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":362,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":217,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":311,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":357,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":92,"org.easymock.samples.PartialClassMockTest.testGetArea":119,"org.easymock.tests.MockingTest.testInterfaceMocking":337,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":345,"org.easymock.tests2.CompareToTest.testLessOrEqual":523,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":482,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":518,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":494,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":79,"org.easymock.tests2.UsageTest.niceToStrict":220,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":425,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":19,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":9,"org.easymock.tests2.MockBuilderTest.testCreateMock":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":87,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":240,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":524,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":297,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":270,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":359,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":406,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":501,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":477,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":59,"org.easymock.tests.UsageOverloadedMethodTest.overloading":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":89,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":148,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":369,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":422,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":323,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":147,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":42,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":451,"org.easymock.tests.MockClassControlTest.testEquals":466,"org.easymock.tests2.EasyMockSupportClassTest.testAll":71,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":419,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":305,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":12,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":392,"org.easymock.tests2.CaptureTest.testCaptureAll":173,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":160,"org.easymock.tests.MockNameTest.defaultName":409,"org.easymock.tests2.UsageConstraintsTest.testMatches":149,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":342,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":356,"org.easymock.samples.ExampleTest.voteForRemovals":125,"org.easymock.tests.UsageVarargTest.allKinds":459,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":112,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":393,"org.easymock.samples.BasicClassMockTest.testPrintContent":130,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":416,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":284,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":500,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":213,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":248,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":402,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":28,"org.easymock.tests2.UsageConstraintsTest.greaterThan":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":72,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":2,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":194,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":403,"org.easymock.samples.ExampleTest.voteForRemoval":122,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":195,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":198,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":364,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":253,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":188,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":384,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":218,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":432,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":267,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":69,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":495,"org.easymock.tests2.CaptureTest.testCaptureFirst":181,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":431,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":268,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":225,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":372,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":319,"org.easymock.tests2.CaptureTest.testCapture2_2446744":180,"org.easymock.tests2.UsageTest.moreThanOneArgument":97,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":442,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":171,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":458,"org.easymock.tests.GenericTest.testBridgedEquals":421,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":60,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":508,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":57,"org.easymock.tests.UsageExpectAndReturnTest.longType":315,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":390,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":265,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":306,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":154,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":376,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":304,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":309,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":353,"org.easymock.tests.UsageCallCountTest.tooManyCalls":509,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":503,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":88,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":320,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":242,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":293,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":415,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":260,"org.easymock.tests.MockingTest.testNiceClassMocking":341,"org.easymock.tests.MockingTest.testClassMocking":333,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":502,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":8,"org.easymock.tests2.UsageConstraintsTest.testContains":17,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":204,"org.easymock.tests2.UsageConstraintsTest.testFind":142,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":424,"org.easymock.tests.MockTypeTest.fromEasyMockClass":361,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":512,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":138,"org.easymock.tests.UsageExpectAndReturnTest.object":322,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":190,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":241,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":273,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":453,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":25,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":492,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":61,"org.easymock.tests.UsageTest.exactCallCountByLastCall":383,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":407,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":430,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":486,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":386,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":21,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":448,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":328,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":368,"org.easymock.tests.MockClassControlTest.testHashCode":465,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":207,"org.easymock.tests2.EasyMockSupportTest.testVerify":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":81,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":387,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":405,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":366,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":521,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":158,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":231,"org.easymock.tests.UsageVarargTest.varargCharAccepted":452,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":395,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":447,"org.easymock.tests2.UsageTest.openCallCountByLastCall":222,"org.easymock.tests.DefaultClassInstantiatorTest.object":396,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":276,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":404,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":490,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":522,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":82,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":295,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":413,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":14,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":235,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":206,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":464,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":10,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":294,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":329,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":308,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":90,"org.easymock.tests2.UsageTest.resumeIfFailure":0,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":358,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":251,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":498,"org.easymock.tests2.StubTest.stubWithReturnValue":258,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":22,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":155,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":321,"org.easymock.tests2.SerializationTest.testAllMockedMethod":31,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":441,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":525,"org.easymock.samples.SupportTest.voteForRemovals":133,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":51,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":209,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":300,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":32,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":446,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":279,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":488,"org.easymock.tests.UsageExpectAndThrowTest.object":298,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":152,"org.easymock.tests2.DelegateToTest.testWrongClass":247,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":510,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":511,"org.easymock.tests.UsageStrictMockTest.range":117,"org.easymock.samples.ConstructorCalledMockTest.testTax":52,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":255,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":272,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":259,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":58,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":299,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":167,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":68,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":351,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":478,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":526,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":519,"org.easymock.tests2.CaptureTest.testCaptureNone":178,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":45,"org.easymock.tests.UsageUnorderedTest.message":111,"org.easymock.tests.UsageVerifyTest.twoReturns":114,"org.easymock.tests.UsageVarargTest.varargByteAccepted":457,"org.easymock.tests2.ThreadingTest.testThreadSafe":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":85,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":506,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":493,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":129,"org.easymock.tests2.CaptureTest.testCapture_2617107":39,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":375,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":475,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":444,"org.easymock.tests2.UsageConstraintsTest.any":145,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":1,"org.easymock.tests2.StubTest.stub":257,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":310,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":497,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":445,"org.easymock.tests.UsageExpectAndThrowTest.longType":291,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":400,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":348,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":286,"org.easymock.tests2.SerializationTest.testClass":29,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":211,"org.easymock.tests.LimitationsTest.mockNativeMethod":470,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":420,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":331,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":13,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":234,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":287,"org.easymock.tests2.NameTest.nameForMocksControl":96,"org.easymock.tests2.MockedExceptionTest.testMockedException":203,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":73,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":382,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":137,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":292,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":338,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":182,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":168,"org.easymock.tests.MockingTest.testNicePartialClassMocking":336,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":187,"org.easymock.tests2.CaptureTest.testCaptureLast":41,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":232,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":374,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":16,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":66,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":153,"org.easymock.tests.MockingTest.testTwoMocks":334,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":67,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":312,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":296,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":99,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":156,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":47,"org.easymock.samples.ExampleTest.removeNonExistingDocument":126,"org.easymock.tests.UsageStrictMockTest.differentMethods":118,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":239,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":346,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":208,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":398,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":199,"org.easymock.tests2.MockBuilderTest.testCreateMockString":172,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":75,"org.easymock.tests.UsageExpectAndThrowTest.floatType":290,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":70,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":281,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":134,"org.easymock.tests.UsageVerifyTest.twoThrows":113,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":84,"org.easymock.samples.ExampleTest.voteAgainstRemoval":123,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":517,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":436,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":11,"org.easymock.tests.LimitationsTest.privateConstructor":469,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":56,"org.easymock.tests2.UsageConstraintsTest.testNotNull":37,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":417,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":202,"org.easymock.tests2.UsageTest.defaultResetToNice":224,"org.easymock.samples.ExampleTest.voteAgainstRemovals":120,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":437,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":327,"org.easymock.tests.UsageVarargTest.differentLength":454,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":233,"org.easymock.tests2.CallbackTest.callback":230,"org.easymock.tests2.UsageConstraintsTest.equals":141,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":191,"org.easymock.tests.UsageTest.openCallCountByLastCall":381,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":139,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":474,"org.easymock.tests.UsageCallCountTest.tooFewCalls":504,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":261,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":480,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":46,"org.easymock.tests.UsageThrowableTest.throwCheckedException":414,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":527,"org.easymock.tests.MockingTest.testStrictClassMocking":332,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":408,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":264,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":65,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":238,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":350,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":263,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":283,"org.easymock.tests2.CompareToTest.testGreateOrEqual":520,"org.easymock.tests.ObjectMethodsTest.testHashCode":491,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":49,"org.easymock.tests2.NameTest.nameForNiceMock":95,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":201,"org.easymock.tests2.DependencyTest.testInterfaceMocking":228,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":26,"org.easymock.samples.ExampleTest.addDocument":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":91,"org.easymock.tests2.DelegateToTest.testStubDelegate":246,"org.easymock.tests2.AnswerTest.stubAnswer":282,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":116,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":169,"org.easymock.tests.UsageVarargTest.varargLongAccepted":456,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":515,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":434,"org.easymock.tests.UsageExpectAndReturnTest.floatType":314,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":330,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":20,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":53,"org.easymock.tests.UsageThrowableTest.noUpperLimit":411,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":151,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":215,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":370,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":140,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":250,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":176,"org.easymock.tests2.SerializationTest.test":30,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":397,"org.easymock.tests2.UsageConstraintsTest.testSame":143,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":313,"org.easymock.samples.SupportTest.addDocument":132,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":262,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":76,"org.easymock.tests.GenericTest.testPackageScope":418,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":429,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":214,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":339,"org.easymock.tests2.NameTest.nameForMock":93,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":324,"org.easymock.tests2.UsageStrictMockTest.differentMethods":103,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":64,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":192,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":316,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":302,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":489,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":3,"org.easymock.tests2.MockedExceptionTest.testRealException":205,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":439,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":438,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":101,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":473,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":352,"org.easymock.tests2.NameTest.nameForStrictMock":94,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":165,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":136,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":54,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":186,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":254,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":399,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":109,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":18,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":163,"org.easymock.tests2.UsageStrictMockTest.range":102,"org.easymock.tests2.UsageConstraintsTest.lessThan":157,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":210,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":433,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":27,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":266,"org.easymock.tests2.CaptureTest.testCaptureRightOne":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":80,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":44,"org.easymock.tests2.UsageConstraintsTest.testOr":35,"org.easymock.tests.UsageRangeTest.combination":377,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":183,"org.easymock.tests.UsageTest.wrongArguments":105,"org.easymock.tests2.MockBuilderTest.testWithConstructor":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":77,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":461,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":426,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":325,"org.easymock.tests.UsageVarargTest.varargShortAccepted":455,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":401,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":507,"org.easymock.tests2.UsageConstraintsTest.cmpTo":146,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":428,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":223,"org.easymock.tests2.CaptureTest.testCaptureFromStub":179,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":343,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":164,"org.easymock.tests.UsageTest.unexpectedCallWithArray":380,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":115,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":505,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":326,"org.easymock.tests2.CaptureTest.testCapture":43,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":514,"org.easymock.tests2.UsageConstraintsTest.constraints":15,"org.easymock.samples.ExampleTest.addAndChangeDocument":127,"org.easymock.tests2.ConstraintsToStringTest.notToString":48,"org.easymock.tests.UsageStrictMockTest.testVerify":516,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":131,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":513,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":391,"org.easymock.tests2.CompareToTest.testGreateThan":5,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":177,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":483,"org.easymock.tests.LimitationsTest.abstractClass":468,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":318,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":484,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":371,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":449,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":110,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":271}}]

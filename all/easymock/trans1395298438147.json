[{"position":"org.easymock.internal.Range:44","failures":[0],"status":-1,"binaryOperator":"(int >= 1)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:632","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:217","failures":[52,53,54,55,56,57,58,59,1,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,7,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,12,13,158,159,160,161,162,163,164,17,165,166,167,168,169,170,171,172,173,20,21,23,28,33,38,174,175,176,39,40,177,178,41,42,49,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,50,194,195,196,197,198,199,200,201,202,203,204,205],"status":-1,"binaryOperator":"(boolean) && ((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[53,54,55,206],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[207,208],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:255","failures":[208],"status":-1,"binaryOperator":"java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:64","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float)","type":"CtInvocationImpl"},"failures":[158,209,210,211,212,213],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[95,97,104,214,114,115,215,116,216,122,127],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[137,138,209,217,218,219,220,22,26,27,29,32,221,200,201,0,222,223],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.LastControl:92","failures":[95,97,104,214,114,215,116,216,122],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[207],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[53,87,224,225,226,227,228,229,230],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[122],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[231,95,97,98,232,99,100,101,103,233,104,234,105],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[61,64,65,137,235,164,17,165,172,190,191,236,237,197,200],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[224,225,227,228,229,238,239],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[240,241,235,242,243,197],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:121","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:140","sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>)","type":"CtInvocationImpl"},"failures":[53],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[122],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[244],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[1,2,13,14,16,39,190],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[245,246,247,248,249,250,251,252],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[122],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:205","failures":[53,87,224,253,89,90,91,4,254,255,256,257,258,92,259,93,225,94,260,226,261,262,263,264,265,266,267,113,268,5,269,270,151,271,272,207,273],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[52,53,54,55,274,275,276,277,56,57,278,279,58,59,280,281,1,60,282,61,62,63,283,2,284,64,65,285,66,67,68,69,70,71,72,73,286,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,287,288,289,290,291,3,4,255,92,259,93,94,261,262,264,95,96,97,98,232,99,100,101,102,103,104,234,292,105,106,107,108,109,110,111,265,112,293,267,113,294,295,296,214,114,297,115,298,215,116,117,118,119,299,120,300,301,121,302,303,122,123,124,125,126,127,304,305,5,6,7,8,128,129,306,130,131,307,308,309,132,133,310,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,311,149,150,269,269,270,270,151,152,153,312,9,154,155,10,11,313,314,315,156,157,12,13,316,317,318,158,159,209,160,319,320,217,218,161,219,321,322,220,162,323,324,210,211,163,14,15,235,164,325,16,17,165,166,326,327,328,167,168,169,329,170,171,330,331,332,333,334,172,335,336,337,338,339,340,341,342,343,344,345,346,347,173,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,175,176,39,40,177,178,41,42,212,348,349,350,351,43,44,45,46,47,48,49,179,180,181,182,352,183,184,185,186,187,188,189,353,354,355,356,357,358,359,360,361,190,191,213,362,363,364,365,192,193,50,194,236,366,367,368,369,370,195,371,372,373,374,196,197,198,199,200,201,202,375,203,204,205],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[116,117],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[52,53,54,55,274,275,276,277,56,57,278,279,58,59,280,281,1,60,282,61,62,63,283,2,284,64,65,285,66,67,68,69,70,71,72,73,286,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,291,3,4,255,92,259,93,94,261,262,264,95,96,97,98,232,99,100,101,102,103,104,234,292,105,106,107,108,109,110,111,265,112,293,267,113,294,295,296,214,114,297,115,298,215,116,117,118,119,299,120,300,301,121,302,303,122,123,124,125,126,127,304,305,5,6,7,8,128,129,306,130,131,307,308,309,132,133,310,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,269,270,151,152,153,312,9,154,155,10,11,313,314,315,156,157,12,13,316,317,318,158,159,209,160,319,320,217,218,161,219,321,322,220,162,323,324,210,211,163,14,15,235,164,325,16,17,165,166,328,167,168,169,329,170,171,330,331,332,333,334,172,173,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,175,176,39,40,177,178,41,42,212,348,43,44,45,46,47,48,49,179,180,181,182,352,183,184,185,186,187,188,189,361,190,191,213,362,363,364,365,192,193,50,236,366,367,368,369,370,195,372,373,374,196,197,198,199,200,201,202,203,204,205],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[53,54,55,274,275,276,277,56,57,278,279,58,280,281,1,60,282,61,62,63,283,2,284,64,65,285,66,79,81,82,85,86,87,287,288,289,290,291,3,4,92,259,262,264,376,95,96,97,98,232,99,100,101,102,103,104,234,292,105,106,107,108,109,110,111,112,293,113,295,296,214,114,297,115,298,215,116,117,118,119,299,120,300,301,121,302,303,122,123,124,126,127,304,305,5,6,7,8,129,306,130,131,307,308,309,132,133,310,134,135,136,137,138,139,143,144,145,146,147,148,149,312,9,155,10,11,313,314,315,156,157,12,13,316,317,318,158,159,209,160,319,320,217,218,161,219,321,322,220,162,323,324,210,211,163,14,15,235,164,325,16,17,165,166,326,327,328,167,168,169,330,331,332,333,334,172,340,173,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,174,175,176,39,40,177,178,41,42,212,348,43,44,45,46,47,48,49,179,180,181,182,183,184,185,186,187,188,189,354,361,190,191,213,362,363,364,365,194,366,367,368,369,370,195,371,372,373,374,196,197,198,199,200,201,202,375,203,204,205],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,142,150],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.Range:36","failures":[377,378,379,380,381,52,382,383,384,385,386,387,53,54,55,274,275,276,277,56,399,400,57,278,279,401,402,58,59,280,403,281,1,60,282,61,62,63,283,2,284,64,65,285,66,404,405,406,407,408,409,410,67,68,69,70,71,72,73,286,74,75,76,77,78,79,80,81,82,83,411,84,85,86,412,87,224,253,413,414,415,88,416,417,89,418,419,420,421,422,423,424,425,426,90,427,428,429,430,431,91,432,433,434,287,288,289,290,291,3,4,254,255,256,257,258,92,259,93,225,94,260,226,261,262,263,264,376,95,96,97,98,232,99,100,101,102,103,104,234,292,105,106,107,108,109,110,111,265,435,112,266,436,293,267,113,294,437,268,295,296,214,114,438,297,115,298,215,116,117,216,118,119,299,120,300,301,121,302,303,122,123,124,125,126,127,304,305,5,6,7,8,388,389,390,391,392,128,393,394,395,396,397,398,439,129,306,130,440,131,307,308,309,132,133,310,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,311,149,150,269,270,151,152,153,441,442,443,312,9,154,155,10,11,313,314,315,444,156,157,12,13,316,271,445,446,447,448,272,449,450,317,318,158,159,209,160,319,320,217,218,161,219,321,322,220,162,323,324,210,211,163,14,15,235,164,325,16,17,165,166,451,452,453,326,327,328,167,168,169,329,170,171,330,331,332,333,334,172,454,335,455,456,457,458,459,460,461,462,336,337,338,339,340,341,342,343,344,345,346,347,463,464,173,465,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,174,466,175,176,39,40,177,178,41,42,212,348,467,468,469,470,471,472,473,474,221,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,349,350,351,494,495,43,44,45,46,47,48,49,179,180,496,181,182,352,183,184,185,186,187,207,188,189,273,208,353,354,355,356,357,358,359,360,361,190,191,213,362,363,364,365,192,497,193,50,51,194,236,498,499,500,501,366,367,368,369,370,195,371,372,373,374,196,197,198,199,200,201,202,375,502,503,504,203,204,505,205,506,507,508,0,509,510,222,223],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:77","failures":[252],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[240,241,235,242,243,197],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[441,442,443,475,477,486,487,489,491],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[61,64,65,137,235,164,17,165,172,190,191,236,237,197,200],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[240,241,235,242,243,197],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:53","sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[96,97,232,99,100,101,102,292,105,172],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[278,279],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[56],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:94","failures":[95,96,97,98,104,234,214,114,297,115,298,215,116,117,216,118,122,123,127,304],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:83","failures":[61,64,65,137,235,164,17,165,172,190,191,236,511,237,197,200],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:56","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"parameterTypes":"paramTypes","i":"i"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":114,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":14,"org.easymock.tests2.UsageTest.argumentsOrdered":65,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":76,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":393,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":476,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":63,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":142,"org.easymock.tests2.DelegateToTest.testReturnException":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":44,"org.easymock.tests.MockingTest.testPartialClassMocking":203,"org.easymock.tests.MockClassControlTest.testToString":355,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":434,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":485,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":421,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":18,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":89,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":59,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":227,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":117,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":156,"org.easymock.tests2.UsageTest.wrongArguments":61,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":387,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":314,"org.easymock.samples.ExampleTest.answerVsDelegate":144,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":272,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":507,"org.easymock.tests2.UsageConstraintsTest.testNull":115,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":109,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":75,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":360,"org.easymock.tests2.CaptureTest.testPrimitive":98,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":316,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":37,"org.easymock.tests.UsageTest.moreThanOneArgument":15,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":108,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":363,"org.easymock.tests.UsageTest.argumentsOrdered":165,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":0,"org.easymock.tests.UsageVarargTest.varargIntAccepted":180,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":481,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":330,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":4,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":239,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":406,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":397,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":469,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":334,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":52,"org.easymock.tests.ReplayStateInvalidUsageTest.times":344,"org.easymock.tests2.DependencyTest.testClassMocking":401,"org.easymock.tests2.AnswerTest.answer":56,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":483,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":277,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":446,"org.easymock.tests2.CaptureTest.testAnd":95,"org.easymock.tests2.UsageTest.strictResetToDefault":60,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":257,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":293,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":71,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":372,"org.easymock.tests2.DelegateToTest.testDelegate":131,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":223,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":33,"org.easymock.tests.LimitationsTest.mockFinalMethod":465,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":47,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":370,"org.easymock.tests2.DependencyTest.testClassMockingSupport":402,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":38,"org.easymock.tests2.CaptureTest.testCapture1_2446744":232,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":435,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":31,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":275,"org.easymock.tests.UsageThrowableTest.throwError":175,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":338,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":448,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":501,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":398,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":433,"org.easymock.samples.PartialClassMockTest.testGetArea":151,"org.easymock.tests.MockingTest.testInterfaceMocking":505,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":339,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":331,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":442,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":495,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":422,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":19,"org.easymock.tests2.UsageTest.niceToStrict":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":467,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":252,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":92,"org.easymock.tests2.MockBuilderTest.testCreateMock":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":429,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":384,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":27,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":240,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":72,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":445,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":500,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":326,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":11,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":249,"org.easymock.tests.UsageOverloadedMethodTest.overloading":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":426,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":50,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":300,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":154,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":219,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":120,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":103,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":496,"org.easymock.tests2.EasyMockSupportClassTest.testAll":88,"org.easymock.tests.MockClassControlTest.testEquals":359,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":189,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":35,"org.easymock.tests2.CaptureTest.testCaptureAll":96,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":276,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":368,"org.easymock.tests.MockNameTest.defaultName":462,"org.easymock.tests2.UsageConstraintsTest.testMatches":301,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":336,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":364,"org.easymock.samples.ExampleTest.voteForRemovals":148,"org.easymock.tests.UsageVarargTest.allKinds":187,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":361,"org.easymock.samples.BasicClassMockTest.testPrintContent":153,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":369,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":41,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":310,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":440,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":394,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":48,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":460,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":230,"org.easymock.tests2.UsageConstraintsTest.greaterThan":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":416,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":371,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":294,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":461,"org.easymock.samples.ExampleTest.voteForRemoval":145,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":437,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":308,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":449,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":407,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":265,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":163,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":1,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":474,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":69,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":39,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":414,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":43,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":439,"org.easymock.tests2.CaptureTest.testCaptureFirst":105,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":473,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":70,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":66,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":236,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":320,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":132,"org.easymock.tests2.UsageTest.moreThanOneArgument":282,"org.easymock.tests2.CaptureTest.testCapture2_2446744":292,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":484,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":262,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":186,"org.easymock.tests.GenericTest.testBridgedEquals":208,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":250,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":170,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":247,"org.easymock.tests.UsageExpectAndReturnTest.longType":159,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":67,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":366,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":36,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":444,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":125,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":34,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":452,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":213,"org.easymock.tests.UsageCallCountTest.tooManyCalls":171,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":430,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":217,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":386,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":23,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":178,"org.easymock.tests.MockingTest.testNiceClassMocking":508,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":81,"org.easymock.tests.MockingTest.testClassMocking":503,"org.easymock.tests2.UsageConstraintsTest.testContains":299,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":327,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":7,"org.easymock.tests2.UsageConstraintsTest.testFind":297,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":10,"org.easymock.tests.MockTypeTest.fromEasyMockClass":447,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":281,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":374,"org.easymock.tests.UsageExpectAndReturnTest.object":161,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":112,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":385,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":74,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":182,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":228,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":351,"org.easymock.tests.UsageTest.exactCallCountByLastCall":166,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":251,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":509,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":490,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":224,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":49,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":323,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":193,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":389,"org.easymock.tests.MockClassControlTest.testHashCode":358,"org.easymock.tests2.EasyMockSupportTest.testVerify":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":424,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":510,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":499,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":192,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":511,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":274,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":376,"org.easymock.tests.UsageVarargTest.varargCharAccepted":181,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":454,"org.easymock.tests2.CaptureTest.testCaptureMultiple":231,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":489,"org.easymock.tests2.UsageTest.openCallCountByLastCall":283,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":77,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":245,"org.easymock.tests.DefaultClassInstantiatorTest.object":335,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":498,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":349,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":425,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":25,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":40,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":380,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":388,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":267,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":357,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":24,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":324,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":91,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":356,"org.easymock.tests2.UsageTest.resumeIfFailure":285,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":271,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":405,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":46,"org.easymock.tests2.StubTest.stubWithReturnValue":3,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":225,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":126,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":218,"org.easymock.tests2.SerializationTest.testAllMockedMethod":55,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":482,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":244,"org.easymock.samples.SupportTest.voteForRemovals":141,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":241,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":207,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":391,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":30,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":206,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":488,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":399,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":492,"org.easymock.tests.UsageExpectAndThrowTest.object":28,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":123,"org.easymock.tests2.DelegateToTest.testWrongClass":130,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":212,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":348,"org.easymock.tests.UsageStrictMockTest.range":200,"org.easymock.samples.ConstructorCalledMockTest.testTax":269,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":409,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":286,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":80,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":248,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":29,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":413,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":346,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":313,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":242,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":443,"org.easymock.tests2.CaptureTest.testCaptureNone":102,"org.easymock.tests.UsageUnorderedTest.message":172,"org.easymock.tests.UsageVerifyTest.twoReturns":191,"org.easymock.tests.UsageVarargTest.varargByteAccepted":185,"org.easymock.tests2.ThreadingTest.testThreadSafe":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":427,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":169,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":494,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":152,"org.easymock.tests2.CaptureTest.testCapture_2617107":97,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":466,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":486,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":13,"org.easymock.tests2.UsageConstraintsTest.any":118,"org.easymock.tests2.StubTest.stub":291,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":343,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":453,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":487,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":45,"org.easymock.tests.UsageExpectAndThrowTest.longType":21,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":458,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":342,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":136,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":128,"org.easymock.tests2.SerializationTest.testClass":53,"org.easymock.tests.LimitationsTest.mockNativeMethod":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":211,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":273,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":379,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":139,"org.easymock.tests2.NameTest.nameForMocksControl":290,"org.easymock.tests2.MockedExceptionTest.testMockedException":6,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":381,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":417,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":16,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":403,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":22,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":205,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":106,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":94,"org.easymock.tests.MockingTest.testNicePartialClassMocking":204,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":111,"org.easymock.tests2.CaptureTest.testCaptureLast":101,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":377,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":174,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":116,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":86,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":124,"org.easymock.tests.MockingTest.testTwoMocks":504,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":412,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":317,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":26,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":64,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":304,"org.easymock.samples.ExampleTest.removeNonExistingDocument":311,"org.easymock.tests.UsageStrictMockTest.differentMethods":201,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":340,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":383,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":390,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":456,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":309,"org.easymock.tests2.MockBuilderTest.testCreateMockString":264,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":418,"org.easymock.tests.UsageExpectAndThrowTest.floatType":20,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":415,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":57,"org.easymock.tests.UsageVerifyTest.twoThrows":190,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":253,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":497,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":90,"org.easymock.samples.ExampleTest.voteAgainstRemoval":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":477,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":441,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":113,"org.easymock.tests.LimitationsTest.privateConstructor":464,"org.easymock.tests2.UsageConstraintsTest.testNotNull":127,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":42,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":5,"org.easymock.tests2.UsageTest.defaultResetToNice":284,"org.easymock.samples.ExampleTest.voteAgainstRemovals":143,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":478,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":162,"org.easymock.tests.UsageVarargTest.differentLength":352,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":378,"org.easymock.tests2.CallbackTest.callback":79,"org.easymock.tests2.UsageConstraintsTest.equals":438,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":266,"org.easymock.tests.UsageTest.openCallCountByLastCall":325,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":295,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":12,"org.easymock.tests.UsageCallCountTest.tooFewCalls":167,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":83,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":315,"org.easymock.tests.UsageThrowableTest.throwCheckedException":177,"org.easymock.tests.MockingTest.testStrictClassMocking":502,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":243,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":9,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":85,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":82,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":382,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":345,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":84,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":279,"org.easymock.tests.ObjectMethodsTest.testHashCode":350,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":238,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":133,"org.easymock.tests2.NameTest.nameForNiceMock":289,"org.easymock.tests2.DependencyTest.testInterfaceMocking":58,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":229,"org.easymock.samples.ExampleTest.addDocument":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":428,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":432,"org.easymock.tests2.DelegateToTest.testStubDelegate":306,"org.easymock.tests2.AnswerTest.stubAnswer":278,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":198,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":260,"org.easymock.tests.UsageVarargTest.varargLongAccepted":184,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":475,"org.easymock.tests.UsageExpectAndReturnTest.floatType":158,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":210,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":87,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":270,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":396,"org.easymock.tests.UsageThrowableTest.noUpperLimit":176,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":51,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":303,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":296,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":404,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":99,"org.easymock.tests2.SerializationTest.test":54,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":455,"org.easymock.tests2.UsageConstraintsTest.testSame":298,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":318,"org.easymock.samples.SupportTest.addDocument":140,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":411,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":419,"org.easymock.tests.GenericTest.testPackageScope":188,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":471,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":395,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":506,"org.easymock.tests2.NameTest.nameForMock":287,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":321,"org.easymock.tests2.UsageStrictMockTest.differentMethods":138,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":263,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":436,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":209,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":32,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":493,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":373,"org.easymock.tests2.MockedExceptionTest.testRealException":8,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":480,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":479,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":135,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":157,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":347,"org.easymock.tests2.NameTest.nameForStrictMock":288,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":258,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":246,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":280,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":110,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":408,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":457,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":122,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":255,"org.easymock.tests2.UsageStrictMockTest.range":137,"org.easymock.tests2.UsageConstraintsTest.lessThan":305,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":392,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":68,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":423,"org.easymock.tests2.CaptureTest.testCaptureRightOne":104,"org.easymock.tests2.UsageConstraintsTest.testOr":215,"org.easymock.tests.UsageRangeTest.combination":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":107,"org.easymock.tests.UsageTest.wrongArguments":164,"org.easymock.tests2.MockBuilderTest.testWithConstructor":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":420,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":354,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":468,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":322,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":459,"org.easymock.tests.UsageVarargTest.varargShortAccepted":183,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":329,"org.easymock.tests2.UsageConstraintsTest.cmpTo":119,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":470,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":2,"org.easymock.tests2.CaptureTest.testCaptureFromStub":234,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":337,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":256,"org.easymock.tests.UsageTest.unexpectedCallWithArray":235,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":197,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":168,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":220,"org.easymock.tests2.CaptureTest.testCapture":233,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":199,"org.easymock.tests2.UsageConstraintsTest.constraints":214,"org.easymock.samples.ExampleTest.addAndChangeDocument":149,"org.easymock.tests.UsageStrictMockTest.testVerify":375,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":150,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":196,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":367,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":100,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":332,"org.easymock.tests.LimitationsTest.abstractClass":463,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":319,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":333,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":179,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":73}}]

[{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"methodArgs","args":"methodArgs"}},{"position":"org.easymock.EasyMock:827","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[1,2,3,4,5],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,1,45,46,47,48,49,50,51,52,53,2,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,3,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,6,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,4,181,182,183,184,185,186,5,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,7,205,206,207,208,209,8,9,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,11,12,292,293,294,295,296,297,298,299,300,301,13,302,303,14,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,15,332,333,334,335,336,337,338,339,340,341,342,16,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,0,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,17,18,476,477,19,20,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:336","sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[108],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[99],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[48,203],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[311,316,339],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[21,22,23,24,25,26,28,39,41,42,43,44,46,49,51,54,57,59,3,72,73,74,77,80,81,82,83,85,86,88,89,90,91,92,93,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,132,133,136,137,138,139,161,162,166,167,169,170,171,174,175,176,177,178,179,180,4,186,5,196,199,200,201,203,204,205,206,209,210,212,213,214,215,217,218,219,220,221,222,225,254,255,256,257,258,259,261,262,263,275,276,279,280,281,283,284,286,287,288,289,290,291,11,12,295,296,297,298,299,301,302,304,305,306,307,308,309,310,312,319,320,321,322,325,331,332,333,336,343,344,345,346,347,348,353,354,355,356,357,358,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,385,386,388,393,394,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,457,458,459,460,461,472,475,479,480],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[489],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:210","sourceCode":"try {\n    this.java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[137,138,139],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stream":"stream","method":"toStringMethod"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[55,490,491,492,493,494,188],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[495],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:103","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"failures":[101],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[80,81,82,83,86,88,204,7,8,9,11,12,13,302,304,16,475,18,19,20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"minimum"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[131,133,421],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:65","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[30,37,63,64,65,66,67,69,70,122,123,124,125,126,128,129],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[30,37,63,64,65,66,67,69,70,122,123,124,125,126,128,129],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[137,138,139,496],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[497,498,499,500,13,17],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Invocation:99","failures":[23,24,26,28,29,36,102,156,158,186,307,501],"status":-1,"binaryOperator":"((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[116],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksControl:105","failures":[21,22,23,24,25,26,27,28,30,35,36,37,38,41,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,3,72,73,74,77,78,79,80,81,82,83,84,85,86,87,6,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,165,168,169,170,171,172,173,174,175,176,177,178,179,180,196,197,198,199,200,201,202,203,204,7,205,206,207,208,209,8,9,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,251,252,253,255,256,257,258,259,260,261,262,263,264,279,280,281,282,283,284,285,286,287,288,289,290,291,11,12,292,293,294,295,296,297,298,299,300,301,13,302,303,14,304,305,306,307,308,309,310,319,320,321,322,323,324,325,326,327,328,329,330,331,15,332,333,334,335,336,337,338,339,340,341,342,16,343,344,345,346,347,348,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,387,389,390,392,393,394,395,396,397,398,399,400,401,402,0,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,465,466,468,469,474,475,17,18,476,477,19,20,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[274],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[33,34,47,54,55,137,181,184,188,191,502,194,503,504,505],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[506,507,508],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:108","failures":[180,262,11,329,335,347,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,392,395,396,397,398,399],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[433],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[96,101,111,116],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[137,138,139,496],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[33,34,47,54,55,56,137,181,184,188,191,194],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[180,262,11,329,347,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,392,395,396,397,398,399],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:48","failures":[],"status":0,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:35","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[137,191],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"failures":[137,138,139,496],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[100,106,118,509],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod","typeParameterMap":"typeParameterMap","candidateMethod":"bridgeMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[510],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"m"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[93],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[511],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":93,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":474,"org.easymock.tests2.UsageTest.argumentsOrdered":9,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":157,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":421,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":206,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":37,"org.easymock.tests2.DelegateToTest.testReturnException":132,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":344,"org.easymock.tests.MockingTest.testPartialClassMocking":385,"org.easymock.tests.MockClassControlTest.testToString":313,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":79,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":430,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":236,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":362,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":78,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":490,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":100,"org.easymock.tests2.UsageTest.wrongArguments":7,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":332,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":130,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":321,"org.easymock.samples.ExampleTest.answerVsDelegate":22,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":467,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":390,"org.easymock.tests2.UsageConstraintsTest.testNull":96,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":42,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":156,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":318,"org.easymock.tests2.CaptureTest.testPrimitive":215,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":336,"org.easymock.tests.UsageTest.moreThanOneArgument":475,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":381,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":41,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":297,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":481,"org.easymock.tests.UsageTest.argumentsOrdered":20,"org.easymock.tests.UsageVarargTest.varargIntAccepted":281,"org.easymock.tests.InvocationTest.testEquals":501,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":426,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":457,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":494,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":4,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":142,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":70,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":413,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":461,"org.easymock.tests.ReplayStateInvalidUsageTest.times":407,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":124,"org.easymock.tests2.DependencyTest.testClassMocking":75,"org.easymock.tests2.AnswerTest.answer":196,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":428,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":178,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":464,"org.easymock.tests2.CaptureTest.testAnd":212,"org.easymock.tests2.UsageTest.strictResetToDefault":203,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":184,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":49,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":296,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":151,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":309,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":485,"org.easymock.tests2.DelegateToTest.testDelegate":136,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":377,"org.easymock.tests.LimitationsTest.mockFinalMethod":473,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":347,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":259,"org.easymock.tests2.DependencyTest.testClassMockingSupport":76,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":323,"org.easymock.tests2.CaptureTest.testCapture1_2446744":216,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":375,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":176,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":402,"org.easymock.tests.UsageThrowableTest.throwError":392,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":466,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":71,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":349,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":299,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":503,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":250,"org.easymock.samples.PartialClassMockTest.testGetArea":29,"org.easymock.tests.MockingTest.testInterfaceMocking":387,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":0,"org.easymock.tests2.CompareToTest.testLessOrEqual":489,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":458,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":487,"org.easymock.tests2.UsageTest.niceToStrict":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":237,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":342,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":363,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":508,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":411,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":186,"org.easymock.tests2.MockBuilderTest.testCreateMock":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":245,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":127,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":497,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":371,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":152,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":463,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":352,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":353,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":319,"org.easymock.tests.UsageOverloadedMethodTest.overloading":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":247,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":106,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":329,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":446,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":260,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":105,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":221,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":282,"org.easymock.tests2.EasyMockSupportClassTest.testAll":229,"org.easymock.tests.MockClassControlTest.testEquals":317,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":276,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":379,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":177,"org.easymock.tests2.CaptureTest.testCaptureAll":213,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":257,"org.easymock.tests.MockNameTest.defaultName":455,"org.easymock.tests2.UsageConstraintsTest.testMatches":107,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":400,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":298,"org.easymock.samples.ExampleTest.voteForRemovals":26,"org.easymock.tests.UsageVarargTest.allKinds":290,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":291,"org.easymock.samples.BasicClassMockTest.testPrintContent":32,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":258,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":398,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":84,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":135,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":67,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":348,"org.easymock.tests2.UsageConstraintsTest.greaterThan":109,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":272,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":230,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":308,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":52,"org.easymock.samples.ExampleTest.voteForRemoval":23,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":273,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":171,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":53,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":510,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":468,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":143,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":1,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":202,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":254,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":418,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":149,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":227,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":343,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":131,"org.easymock.tests2.CaptureTest.testCaptureFirst":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":417,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":150,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":211,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":15,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":442,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":173,"org.easymock.tests2.UsageTest.moreThanOneArgument":204,"org.easymock.tests2.CaptureTest.testCapture2_2446744":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":429,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":193,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":289,"org.easymock.tests.GenericTest.testBridgedEquals":278,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":360,"org.easymock.tests.UsageExpectAndReturnTest.longType":438,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":147,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":255,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":380,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":456,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":114,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":378,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":293,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":295,"org.easymock.tests.UsageCallCountTest.tooManyCalls":361,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":246,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":443,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":129,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":367,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":397,"org.easymock.tests.MockingTest.testNiceClassMocking":391,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":161,"org.easymock.tests.MockingTest.testClassMocking":383,"org.easymock.tests2.UsageConstraintsTest.testContains":104,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":354,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":73,"org.easymock.tests2.UsageConstraintsTest.testFind":95,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":262,"org.easymock.tests.MockTypeTest.fromEasyMockClass":465,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":59,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":300,"org.easymock.tests.UsageExpectAndReturnTest.object":445,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":128,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":155,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":491,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":284,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":340,"org.easymock.tests.UsageTest.exactCallCountByLastCall":478,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":416,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":482,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":251,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":55,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":451,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":279,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":328,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":61,"org.easymock.tests.MockClassControlTest.testHashCode":316,"org.easymock.tests2.EasyMockSupportTest.testVerify":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":239,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":483,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":326,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":351,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":175,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":38,"org.easymock.tests.UsageVarargTest.varargCharAccepted":283,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":265,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":434,"org.easymock.tests2.UsageTest.openCallCountByLastCall":207,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":506,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":158,"org.easymock.tests.DefaultClassInstantiatorTest.object":266,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":350,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":338,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":240,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":369,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":395,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":122,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":60,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":50,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":315,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":368,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":452,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":248,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":314,"org.easymock.tests2.UsageTest.resumeIfFailure":210,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":462,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":141,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":346,"org.easymock.tests2.StubTest.stubWithReturnValue":180,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":188,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":444,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":115,"org.easymock.tests2.SerializationTest.testAllMockedMethod":139,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":427,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":505,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":498,"org.easymock.samples.SupportTest.voteForRemovals":36,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":274,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":63,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":374,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":496,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":433,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":197,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":253,"org.easymock.tests.UsageExpectAndThrowTest.object":372,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":112,"org.easymock.tests2.DelegateToTest.testWrongClass":134,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":479,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":480,"org.easymock.samples.ConstructorCalledMockTest.testTax":33,"org.easymock.tests.UsageStrictMockTest.range":14,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":145,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":154,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":160,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":373,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":187,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":409,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":226,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":320,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":499,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":488,"org.easymock.tests2.CaptureTest.testCaptureNone":220,"org.easymock.tests.UsageUnorderedTest.message":16,"org.easymock.tests.UsageVerifyTest.twoReturns":12,"org.easymock.tests.UsageVarargTest.varargByteAccepted":288,"org.easymock.tests2.ThreadingTest.testThreadSafe":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":243,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":358,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":31,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":341,"org.easymock.tests2.CaptureTest.testCapture_2617107":214,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":325,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":431,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":335,"org.easymock.tests2.UsageConstraintsTest.any":102,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":406,"org.easymock.tests2.StubTest.stub":179,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":432,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":345,"org.easymock.tests.UsageExpectAndThrowTest.longType":365,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":270,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":405,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":87,"org.easymock.tests2.SerializationTest.testClass":137,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":65,"org.easymock.tests.LimitationsTest.mockNativeMethod":472,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":454,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":277,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":121,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":89,"org.easymock.tests2.NameTest.nameForMocksControl":83,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":123,"org.easymock.tests2.MockedExceptionTest.testMockedException":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":231,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":477,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":388,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":58,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":366,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":39,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":189,"org.easymock.tests.MockingTest.testNicePartialClassMocking":386,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":44,"org.easymock.tests2.CompareToTest.testNotComparable":511,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":119,"org.easymock.tests2.CaptureTest.testCaptureLast":219,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":324,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":167,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":99,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":113,"org.easymock.tests.MockingTest.testTwoMocks":384,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":168,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":435,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":370,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":8,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":117,"org.easymock.samples.ExampleTest.removeNonExistingDocument":27,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":403,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":126,"org.easymock.tests.UsageStrictMockTest.differentMethods":304,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":62,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":268,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":172,"org.easymock.tests2.MockBuilderTest.testCreateMockString":195,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":233,"org.easymock.tests.UsageExpectAndThrowTest.floatType":364,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":228,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":199,"org.easymock.tests.UsageVerifyTest.twoThrows":11,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":56,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":242,"org.easymock.samples.ExampleTest.voteAgainstRemoval":24,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":486,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":422,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":51,"org.easymock.tests.LimitationsTest.privateConstructor":471,"org.easymock.tests2.UsageConstraintsTest.testNotNull":116,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":399,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":3,"org.easymock.tests2.UsageTest.defaultResetToNice":209,"org.easymock.samples.ExampleTest.voteAgainstRemovals":21,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":423,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":120,"org.easymock.tests.UsageVarargTest.differentLength":285,"org.easymock.tests2.CallbackTest.callback":169,"org.easymock.tests2.UsageConstraintsTest.equals":94,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":47,"org.easymock.tests.UsageTest.openCallCountByLastCall":476,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":90,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":334,"org.easymock.tests.UsageCallCountTest.tooFewCalls":356,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":163,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":322,"org.easymock.tests.UsageThrowableTest.throwCheckedException":396,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":500,"org.easymock.tests.MockingTest.testStrictClassMocking":382,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":166,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":264,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":162,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":125,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":408,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":165,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":201,"org.easymock.tests2.CompareToTest.testGreateOrEqual":509,"org.easymock.tests.ObjectMethodsTest.testHashCode":339,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":493,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":174,"org.easymock.tests2.NameTest.nameForNiceMock":82,"org.easymock.tests2.DependencyTest.testInterfaceMocking":77,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":492,"org.easymock.samples.ExampleTest.addDocument":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":244,"org.easymock.tests2.DelegateToTest.testStubDelegate":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":249,"org.easymock.tests2.AnswerTest.stubAnswer":200,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":302,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":190,"org.easymock.tests.UsageVarargTest.varargLongAccepted":287,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":420,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":453,"org.easymock.tests.UsageExpectAndReturnTest.floatType":437,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":54,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":34,"org.easymock.tests.UsageThrowableTest.noUpperLimit":393,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":110,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":69,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":330,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":91,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":140,"org.easymock.tests2.SerializationTest.test":138,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":217,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":495,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":267,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":436,"org.easymock.tests2.UsageConstraintsTest.testSame":97,"org.easymock.samples.SupportTest.addDocument":35,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":164,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":234,"org.easymock.tests.GenericTest.testPackageScope":275,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":415,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":68,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":389,"org.easymock.tests2.NameTest.nameForMock":80,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":447,"org.easymock.tests2.UsageStrictMockTest.differentMethods":88,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":194,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":48,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":439,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":376,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":337,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":310,"org.easymock.tests2.MockedExceptionTest.testRealException":74,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":425,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":146,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":424,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":86,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":410,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":333,"org.easymock.tests2.NameTest.nameForStrictMock":81,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":185,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":507,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":57,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":43,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":144,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":111,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":269,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":182,"org.easymock.tests2.UsageStrictMockTest.range":6,"org.easymock.tests2.UsageConstraintsTest.lessThan":118,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":64,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":419,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":148,"org.easymock.tests2.CaptureTest.testCaptureRightOne":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":238,"org.easymock.tests2.UsageConstraintsTest.testOr":98,"org.easymock.tests.UsageRangeTest.combination":307,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":40,"org.easymock.tests.UsageTest.wrongArguments":18,"org.easymock.tests2.MockBuilderTest.testWithConstructor":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":235,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":312,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":440,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":412,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":271,"org.easymock.tests.UsageVarargTest.varargShortAccepted":286,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":359,"org.easymock.tests2.UsageConstraintsTest.cmpTo":103,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":198,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":414,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":208,"org.easymock.tests2.CaptureTest.testCaptureFromStub":223,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":401,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":183,"org.easymock.tests.UsageTest.unexpectedCallWithArray":17,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":13,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":357,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":502,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":449,"org.easymock.tests2.UsageConstraintsTest.constraints":92,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":303,"org.easymock.samples.ExampleTest.addAndChangeDocument":28,"org.easymock.tests.UsageStrictMockTest.testVerify":306,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":30,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":301,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":256,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":218,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":459,"org.easymock.tests.LimitationsTest.abstractClass":470,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":441,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":460,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":331,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":153,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":280}}]

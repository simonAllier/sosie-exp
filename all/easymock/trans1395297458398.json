[{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"failMessage","this":"failMessage"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,26,27,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,29,126,127,128,129,130,131,132,133,1,2,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,32,33,176,177,34,35,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,40,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,43,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[280,281,282],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:70","failures":[45,46,47,48,49,50,51,283,52,53,54,55,56,284,285,286,287,288,289,290,291,292,57,58,59,60,61,62,63,64,65,66,293,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,89,90,95,294,108,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,171,172,31,174,182,184,185,206,207,208,209,210,211,212,213,214,215,40,248],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:225","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[284,287,295,281],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[296],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"m"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[45,46,47,48,49,50,51,52,53,54,55,56,286,288,289,60,65,66,67,68,70,73,76,77,78,79,80,84,85,87,88,89,90,94,95,294,98,100,102,103,104,105,106,107,108,297,109,298,299,300,110,301,302,111,112,303,304,115,117,119,120,28,122,123,29,30,127,305,128,129,0,1,2,134,135,136,137,139,140,141,142,143,144,147,150,151,153,158,163,168,173,31,175,176,306,307,308,34,35,309,188,189,190,191,200,203,204,214,218,219,221,226,231,236,237,238,310,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,42,43,44,261,311,264,265,267,268,269,270,271,272,312,274,275,276,277,278,279],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[280],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[4,8,9,18,22],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:865","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[80],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:163","failures":[313,314,315,316,317],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:2124","failures":[128,129,130,132,318,133,268],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:148","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[319,320,321],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:933","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[46,50,51,53,285,290,291,292,59,73,322,87,26,27,103,323,324,118,119,28,122,123,29,30,126,127,325,31,175,32,33,34,35,326,190,191,192,36,37,38,39,40,327,257,41,42,43,44,261],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[328,315,305,329,0,316,316,317,317],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[330,331,332],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"actual"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[333,334,335,336,337,338],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[296],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[103,280],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[59,60,61,62,63,64,65,66,293,67,76,77,81,82,134,135,136,137,144,145],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack","this":"this"}},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:124","failures":[132],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[339,340,341,342],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[70],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:161","sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : java.util.List<org.easymock.internal.Injection>) {\n    final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier());\n    final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field);\n    if (org.easymock.internal.InjectionTarget == null) {\n        continue;\n    } \n    if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n        org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n        java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n    } \n}","type":"CtForEachImpl"},"failures":[343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,274,279],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[66,71,83,363],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:417","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[364],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[264,265,365,266],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[62,79,94,248],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[59,60,62,64,65,293,76,81,134,136,144],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[26,28,29,30,31,32,34,35,37,40,41,42,43,44],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[26,28,29,30,31,32,34,35,37,366,40,41,42,43,44],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[59,66,71,83,363],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[367,368,369,370,371,372],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[373,328,305,329,0,374,375,376,377,378],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[373,329,374,375,376,378],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"parameterType"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[319,320,321],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":60,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":257,"org.easymock.tests2.UsageTest.argumentsOrdered":30,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":54,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":357,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":14,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":123,"org.easymock.tests2.StubTest.stubWithReturnValue":97,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":373,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":274,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":225,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":80,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests2.DelegateToTest.testReturnException":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":179,"org.easymock.tests.MockingTest.testPartialClassMocking":306,"org.easymock.samples.SupportTest.voteForRemovals":278,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":364,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":281,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":22,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":160,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":3,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":298,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":148,"org.easymock.tests.UsageExpectAndThrowTest.object":158,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":90,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":77,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":374,"org.easymock.tests2.DelegateToTest.testWrongClass":100,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":184,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":185,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":66,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":211,"org.easymock.tests2.UsageTest.wrongArguments":28,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":352,"org.easymock.samples.ConstructorCalledMockTest.testTax":316,"org.easymock.tests.UsageStrictMockTest.range":32,"org.easymock.samples.ExampleTest.answerVsDelegate":268,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":283,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":110,"org.easymock.tests2.UsageConstraintsTest.testNull":62,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":105,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":159,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":288,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":263,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":53,"org.easymock.tests2.CaptureTest.testPrimitive":137,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":215,"org.easymock.tests.UsageTest.moreThanOneArgument":258,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":167,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":104,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":197,"org.easymock.tests2.CaptureTest.testCaptureNone":142,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":334,"org.easymock.tests.UsageUnorderedTest.message":40,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":38,"org.easymock.tests.UsageVerifyTest.twoReturns":35,"org.easymock.tests.UsageVarargTest.varargByteAccepted":246,"org.easymock.tests2.ThreadingTest.testThreadSafe":91,"org.easymock.tests.UsageTest.argumentsOrdered":44,"org.easymock.tests.UsageVarargTest.varargIntAccepted":241,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":189,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":19,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":206,"org.easymock.tests2.CaptureTest.testCapture_2617107":136,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":284,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":361,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":23,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":287,"org.easymock.tests2.UsageConstraintsTest.any":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":6,"org.easymock.tests2.StubTest.stub":96,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":24,"org.easymock.tests.UsageExpectAndThrowTest.longType":151,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":180,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":331,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":319,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":87,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":117,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":84,"org.easymock.tests.LimitationsTest.mockNativeMethod":168,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":365,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":235,"org.easymock.tests2.AnswerTest.answer":128,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":20,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":345,"org.easymock.tests2.CaptureTest.testAnd":134,"org.easymock.tests2.UsageTest.strictResetToDefault":120,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":280,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":88,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":335,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":346,"org.easymock.tests2.MockedExceptionTest.testMockedException":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":196,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":193,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":49,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":260,"org.easymock.tests2.DelegateToTest.testDelegate":101,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":318,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":308,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":152,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":102,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":289,"org.easymock.tests.MockingTest.testNicePartialClassMocking":307,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":163,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":107,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":343,"org.easymock.tests2.CaptureTest.testCaptureLast":141,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":182,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":311,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":304,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":65,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":78,"org.easymock.tests2.CaptureTest.testCapture1_2446744":138,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":216,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":161,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":156,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":29,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":82,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":338,"org.easymock.tests.UsageThrowableTest.throwError":249,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":348,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":309,"org.easymock.tests.UsageStrictMockTest.differentMethods":33,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":355,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":369,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":337,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":93,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":362,"org.easymock.tests2.MockBuilderTest.testCreateMockString":292,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":39,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":199,"org.easymock.tests.UsageExpectAndThrowTest.floatType":150,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":73,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":129,"org.easymock.tests.UsageVerifyTest.twoThrows":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":299,"org.easymock.samples.PartialClassMockTest.testGetArea":312,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":207,"org.easymock.samples.ExampleTest.voteAgainstRemoval":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":15,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":297,"org.easymock.tests2.UsageTest.niceToStrict":122,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":149,"org.easymock.tests2.UsageConstraintsTest.testNotNull":81,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":256,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":4,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":286,"org.easymock.tests2.MockBuilderTest.testCreateMock":290,"org.easymock.samples.ExampleTest.voteAgainstRemovals":267,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":16,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":344,"org.easymock.tests.UsageVarargTest.differentLength":327,"org.easymock.tests2.CallbackTest.callback":118,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":349,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":315,"org.easymock.tests.UsageTest.openCallCountByLastCall":259,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":157,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":50,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":57,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":213,"org.easymock.tests.UsageCallCountTest.tooFewCalls":187,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":339,"org.easymock.tests.UsageOverloadedMethodTest.overloading":204,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":238,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":71,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":227,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":203,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":111,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":320,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":70,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":143,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":336,"org.easymock.tests.UsageThrowableTest.throwCheckedException":253,"org.easymock.tests.MockClassControlTest.testEquals":262,"org.easymock.tests2.EasyMockSupportClassTest.testAll":109,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":265,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":165,"org.easymock.tests2.CaptureTest.testCaptureAll":135,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":303,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":172,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":347,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":302,"org.easymock.tests2.UsageConstraintsTest.testMatches":72,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":112,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":131,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":198,"org.easymock.tests2.CompareToTest.testGreateOrEqual":363,"org.easymock.samples.ExampleTest.voteForRemovals":272,"org.easymock.tests2.NameTest.nameForNiceMock":282,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":95,"org.easymock.tests.UsageVarargTest.allKinds":248,"org.easymock.tests2.DependencyTest.testInterfaceMocking":89,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":376,"org.easymock.samples.BasicClassMockTest.testPrintContent":276,"org.easymock.samples.ExampleTest.addDocument":271,"org.easymock.tests2.DelegateToTest.testStubDelegate":99,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":255,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":322,"org.easymock.tests2.AnswerTest.stubAnswer":130,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":358,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":183,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":174,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":378,"org.easymock.tests2.UsageConstraintsTest.greaterThan":74,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":324,"org.easymock.tests.UsageVarargTest.varargLongAccepted":245,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":176,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":372,"org.easymock.samples.ExampleTest.voteForRemoval":269,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":13,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":92,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":234,"org.easymock.tests.UsageExpectAndReturnTest.floatType":218,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":296,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":305,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":295,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":317,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":360,"org.easymock.tests.UsageThrowableTest.noUpperLimit":250,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":75,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":200,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":58,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":139,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":328,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":11,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":368,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":47,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":251,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":217,"org.easymock.tests2.UsageConstraintsTest.testSame":63,"org.easymock.samples.SupportTest.addDocument":277,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":178,"org.easymock.tests2.CaptureTest.testCaptureFirst":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":10,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":48,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":127,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":366,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":223,"org.easymock.tests.GenericTest.testPackageScope":264,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":94,"org.easymock.tests2.UsageTest.moreThanOneArgument":121,"org.easymock.tests2.CaptureTest.testCapture2_2446744":146,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":21,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":8,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":359,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":247,"org.easymock.tests.GenericTest.testBridgedEquals":266,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":340,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":190,"org.easymock.tests.UsageExpectAndReturnTest.longType":219,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":45,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":228,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":166,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":79,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":314,"org.easymock.tests2.UsageStrictMockTest.differentMethods":27,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":164,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":195,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":220,"org.easymock.tests.UsageCallCountTest.tooManyCalls":191,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":332,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":162,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":201,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":194,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":186,"org.easymock.tests2.MockedExceptionTest.testRealException":116,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":18,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":351,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":17,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":153,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":254,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":212,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":301,"org.easymock.tests2.UsageConstraintsTest.testContains":69,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":115,"org.easymock.tests2.UsageConstraintsTest.testFind":61,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":205,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":342,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":132,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":106,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":325,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":133,"org.easymock.tests.UsageExpectAndReturnTest.object":226,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":370,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":76,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":108,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":285,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":350,"org.easymock.tests2.UsageStrictMockTest.range":26,"org.easymock.tests2.UsageConstraintsTest.lessThan":83,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":52,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":375,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":243,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":356,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":202,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":341,"org.easymock.tests.UsageTest.exactCallCountByLastCall":261,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":9,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":12,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":46,"org.easymock.tests2.CaptureTest.testCaptureRightOne":144,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":333,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":169,"org.easymock.tests2.UsageConstraintsTest.testOr":64,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":329,"org.easymock.tests.UsageRangeTest.combination":192,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":239,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":232,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":103,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":237,"org.easymock.tests.UsageTest.wrongArguments":42,"org.easymock.tests2.MockBuilderTest.testWithConstructor":313,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":354,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":221,"org.easymock.tests2.EasyMockSupportTest.testVerify":56,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":229,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":5,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":330,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":170,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":371,"org.easymock.tests.UsageVarargTest.varargShortAccepted":244,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":236,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":326,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":36,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":294,"org.easymock.tests2.UsageConstraintsTest.cmpTo":68,"org.easymock.tests.UsageVarargTest.varargCharAccepted":242,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":25,"org.easymock.tests2.UsageTest.openCallCountByLastCall":124,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":125,"org.easymock.tests.DefaultClassInstantiatorTest.object":367,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":55,"org.easymock.tests2.CaptureTest.testCaptureFromStub":145,"org.easymock.tests.UsageTest.unexpectedCallWithArray":41,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":37,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":155,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":252,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":31,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":188,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":353,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":230,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":323,"org.easymock.tests2.UsageConstraintsTest.constraints":59,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":175,"org.easymock.samples.ExampleTest.addAndChangeDocument":273,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":154,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":233,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":300,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":173,"org.easymock.tests2.UsageTest.resumeIfFailure":126,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":140,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":208,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":222,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":310,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":209,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":240,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":51}}]

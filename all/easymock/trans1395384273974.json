[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,35,36,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,6,7,8,12,159,160,161,162,163,164,15,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,19,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,27,28,29,30,31,32,33,34,261,262,263,264,265,266,267,268,269,270,271,272,35,35,36,36,37,40,45,46,47,48,50,51,53,273,274,275,276,277,278,279,280,281,62,65,75,81,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,84,85,297,86,87,88,89,90,93,94,95,96,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,101,343,344,345,346,103,104,105,347,348,106,349,108,109,110,111,350,112,113,351,352,353,354,355,356,357,358,359,360,361],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[330],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[119,130],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:241","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[362],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[363,145,159,160,161,162,163,164,364,365,366,224,367,282,103,104,105,347],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[368,138,369,370,371,372,140,141,142,143,2,144,145,146,373,147,148,149,150,151,152,157,6,7,8,12,159,160,161,162,163,164,374,375,376,377,378,379,380,381,382,383,15,16,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,384,201,202,203,204,205,206,207,208,209,213,218,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,367,385,260,28,261,262,263,264,265,267,268,269,270,386,271,387,388,389,40,45,46,51,53,273,274,275,276,277,278,279,280,281,390,391,392,282,393,394,395,396,283,285,286,287,288,289,397,290,291,292,293,294,295,296,84,85,297,86,87,88,90,93,95,398,311,399,312,313,314,315,316,400,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,101,344,401,345,346,103,104,105,347,106,349,107,109,110,112,113,351,352,353,354,355,402,403,356,357,404,405,406,407,358,359,360,361,408],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:105","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[45,52],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[409],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"o":"expected","this":"actual"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"m","equalsMethod":"m"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[15,17,410,411,266],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[14,18],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[144,202,208,209,250,251,252,253,254,412,258,259,260,261,262,263,264,265,35,35,36,36,312,317,318,321,322,323,324,329,331,332,334,335,340,341,342,360],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[413],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? this.java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:94","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"initArgs","args":"initArgs"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[40,46,89,98,103],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:105","sourceCode":"java.lang.StringBuffer.append(\"(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[172,173,174,177,178,201,414,415,416,287,288,293,294,417,418,419,420],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"buffer"}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:45","sourceCode":"final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[421,49,422,423,424,425,426,101,102,106],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"qualifier"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"failures":[144,145,327,328],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[427,106,349,107],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[428],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"failures":[390,429],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[172,173,174,177,178,201,414,415,416,287,288,293,294,417,418,419,420],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[18],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[289],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":320,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":171,"org.easymock.tests2.UsageTest.argumentsOrdered":294,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":308,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":132,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":397,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":115,"org.easymock.tests2.DelegateToTest.testReturnException":351,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":160,"org.easymock.tests.MockingTest.testPartialClassMocking":6,"org.easymock.tests.MockClassControlTest.testToString":29,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":69,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":180,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":65,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":284,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":422,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":326,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":258,"org.easymock.tests2.UsageTest.wrongArguments":288,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":126,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":142,"org.easymock.samples.ExampleTest.answerVsDelegate":270,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":1,"org.easymock.tests2.UsageConstraintsTest.testNull":322,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":86,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":34,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":307,"org.easymock.tests2.CaptureTest.testPrimitive":356,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":260,"org.easymock.tests.UsageTest.moreThanOneArgument":172,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":199,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":297,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":263,"org.easymock.tests.UsageTest.argumentsOrdered":178,"org.easymock.tests.UsageVarargTest.varargIntAccepted":376,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":250,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":40,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":136,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":46,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":254,"org.easymock.tests.ReplayStateInvalidUsageTest.times":222,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":343,"org.easymock.tests2.AnswerTest.answer":344,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":281,"org.easymock.tests2.CaptureTest.testAnd":355,"org.easymock.tests2.UsageTest.strictResetToDefault":286,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":93,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":262,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":248,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":302,"org.easymock.tests2.DelegateToTest.testDelegate":354,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":195,"org.easymock.tests.LimitationsTest.mockFinalMethod":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":163,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":170,"org.easymock.tests2.CaptureTest.testCapture1_2446744":357,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":193,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":279,"org.easymock.tests.UsageThrowableTest.throwError":146,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":216,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":137,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":83,"org.easymock.samples.PartialClassMockTest.testGetArea":37,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":217,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":251,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":181,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":70,"org.easymock.tests2.UsageTest.niceToStrict":289,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":45,"org.easymock.tests2.MockBuilderTest.testCreateMock":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":78,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":123,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":417,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":189,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":303,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":368,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":140,"org.easymock.tests.UsageOverloadedMethodTest.overloading":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":80,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":156,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":331,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":237,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":266,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":330,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":358,"org.easymock.tests.MockClassControlTest.testEquals":33,"org.easymock.tests2.EasyMockSupportClassTest.testAll":62,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":16,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":418,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":197,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":54,"org.easymock.tests2.CaptureTest.testCaptureAll":402,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":168,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":280,"org.easymock.tests2.UsageConstraintsTest.testMatches":332,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":214,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":264,"org.easymock.samples.ExampleTest.voteForRemovals":388,"org.easymock.tests.UsageVarargTest.allKinds":383,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":255,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":169,"org.easymock.samples.BasicClassMockTest.testPrintContent":39,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":151,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":311,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":164,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":133,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":426,"org.easymock.tests2.UsageConstraintsTest.greaterThan":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":63,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":247,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":96,"org.easymock.samples.ExampleTest.voteForRemoval":386,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":25,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":97,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":274,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":89,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":2,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":285,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":363,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":300,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":60,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":159,"org.easymock.tests2.CaptureTest.testCaptureFirst":408,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":409,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":301,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":296,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":158,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":233,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":276,"org.easymock.tests2.UsageTest.moreThanOneArgument":287,"org.easymock.tests2.CaptureTest.testCapture2_2446744":361,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":51,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":382,"org.easymock.tests.GenericTest.testBridgedEquals":18,"org.easymock.tests.UsageExpectAndReturnTest.longType":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":166,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":298,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":52,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":198,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":412,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":196,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":261,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":365,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":79,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":234,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":125,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":185,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":150,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":109,"org.easymock.tests.MockingTest.testNiceClassMocking":9,"org.easymock.tests.MockingTest.testClassMocking":4,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":138,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":41,"org.easymock.tests2.UsageConstraintsTest.testContains":329,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":105,"org.easymock.tests2.UsageConstraintsTest.testFind":321,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":268,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":391,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":200,"org.easymock.tests.UsageExpectAndReturnTest.object":236,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":90,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":124,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":306,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":423,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":378,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":212,"org.easymock.tests.UsageTest.exactCallCountByLastCall":179,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":144,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":416,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":102,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":242,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":374,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":155,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":128,"org.easymock.tests.MockClassControlTest.testHashCode":32,"org.easymock.tests2.EasyMockSupportTest.testVerify":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":72,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":153,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":278,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":400,"org.easymock.tests.UsageVarargTest.varargCharAccepted":377,"org.easymock.tests2.CaptureTest.testCaptureMultiple":428,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":399,"org.easymock.tests2.UsageTest.openCallCountByLastCall":290,"org.easymock.tests.DefaultClassInstantiatorTest.object":19,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":309,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":210,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":73,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":148,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":58,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":119,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":127,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":31,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":94,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":186,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":243,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":364,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":81,"org.easymock.tests2.UsageTest.resumeIfFailure":295,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":0,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":162,"org.easymock.tests2.StubTest.stubWithReturnValue":282,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":421,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":235,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":339,"org.easymock.tests2.SerializationTest.testAllMockedMethod":107,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":419,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":14,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":130,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":192,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":427,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":362,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":413,"org.easymock.tests.UsageExpectAndThrowTest.object":190,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":337,"org.easymock.tests2.DelegateToTest.testWrongClass":353,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":208,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":209,"org.easymock.samples.ConstructorCalledMockTest.testTax":35,"org.easymock.tests.UsageStrictMockTest.range":204,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":305,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":108,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":191,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":47,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":59,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":224,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":141,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":414,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":411,"org.easymock.tests2.CaptureTest.testCaptureNone":407,"org.easymock.tests.UsageUnorderedTest.message":165,"org.easymock.tests.UsageVerifyTest.twoReturns":257,"org.easymock.tests.UsageVarargTest.varargByteAccepted":381,"org.easymock.tests2.ThreadingTest.testThreadSafe":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":76,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":372,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":38,"org.easymock.tests2.CaptureTest.testCapture_2617107":403,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":420,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":385,"org.easymock.tests2.UsageConstraintsTest.any":327,"org.easymock.tests2.StubTest.stub":392,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":221,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":366,"org.easymock.tests.UsageExpectAndThrowTest.longType":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":161,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":23,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":220,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":313,"org.easymock.tests2.SerializationTest.testClass":106,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":348,"org.easymock.tests.LimitationsTest.mockNativeMethod":12,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":17,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":245,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":118,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":57,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":316,"org.easymock.tests2.NameTest.nameForMocksControl":396,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":120,"org.easymock.tests2.MockedExceptionTest.testMockedException":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":64,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":176,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":429,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":184,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":8,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":84,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":48,"org.easymock.tests.MockingTest.testNicePartialClassMocking":7,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":88,"org.easymock.tests2.CaptureTest.testCaptureLast":406,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":116,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":213,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":113,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":325,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":338,"org.easymock.tests.MockingTest.testTwoMocks":5,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":226,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":188,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":293,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":341,"org.easymock.samples.ExampleTest.removeNonExistingDocument":272,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":122,"org.easymock.tests.UsageStrictMockTest.differentMethods":205,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":218,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":129,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":21,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":275,"org.easymock.tests2.MockBuilderTest.testCreateMockString":53,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":27,"org.easymock.tests.UsageExpectAndThrowTest.floatType":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":66,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":61,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":401,"org.easymock.tests.UsageVerifyTest.twoThrows":256,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":75,"org.easymock.samples.ExampleTest.voteAgainstRemoval":271,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":410,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":95,"org.easymock.tests.LimitationsTest.privateConstructor":11,"org.easymock.tests2.UsageConstraintsTest.testNotNull":340,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":152,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":103,"org.easymock.tests2.UsageTest.defaultResetToNice":292,"org.easymock.samples.ExampleTest.voteAgainstRemovals":269,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":241,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":117,"org.easymock.tests2.CallbackTest.callback":398,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":91,"org.easymock.tests.UsageTest.openCallCountByLastCall":175,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":317,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":367,"org.easymock.tests.UsageCallCountTest.tooFewCalls":370,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":111,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":143,"org.easymock.tests.UsageThrowableTest.throwCheckedException":149,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":415,"org.easymock.tests.MockingTest.testStrictClassMocking":3,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":145,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":112,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":121,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":110,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":223,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":350,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":346,"org.easymock.tests.ObjectMethodsTest.testHashCode":211,"org.easymock.tests2.NameTest.nameForNiceMock":395,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":277,"org.easymock.tests2.DependencyTest.testInterfaceMocking":283,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":424,"org.easymock.samples.ExampleTest.addDocument":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":82,"org.easymock.tests2.DelegateToTest.testStubDelegate":352,"org.easymock.tests2.AnswerTest.stubAnswer":345,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":202,"org.easymock.tests.UsageVarargTest.varargLongAccepted":380,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":206,"org.easymock.tests.UsageExpectAndReturnTest.floatType":228,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":244,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":101,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":36,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":135,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":335,"org.easymock.tests.UsageThrowableTest.noUpperLimit":373,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":318,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":99,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":404,"org.easymock.tests2.SerializationTest.test":349,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":20,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":227,"org.easymock.tests2.UsageConstraintsTest.testSame":323,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":67,"org.easymock.tests.GenericTest.testPackageScope":15,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":134,"org.easymock.tests2.NameTest.nameForMock":393,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":238,"org.easymock.tests2.UsageStrictMockTest.differentMethods":315,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":92,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":230,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":194,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":249,"org.easymock.tests2.MockedExceptionTest.testRealException":347,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":312,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":225,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":259,"org.easymock.tests2.NameTest.nameForStrictMock":394,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":44,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":390,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":87,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":100,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":22,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":336,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":42,"org.easymock.tests2.UsageStrictMockTest.range":314,"org.easymock.tests2.UsageConstraintsTest.lessThan":342,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":55,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":131,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":425,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":71,"org.easymock.tests2.CaptureTest.testCaptureRightOne":359,"org.easymock.tests2.UsageConstraintsTest.testOr":324,"org.easymock.tests.UsageRangeTest.combination":246,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":85,"org.easymock.tests.UsageTest.wrongArguments":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":68,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":28,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":231,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":239,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":24,"org.easymock.tests.UsageVarargTest.varargShortAccepted":379,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":139,"org.easymock.tests2.UsageConstraintsTest.cmpTo":328,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":291,"org.easymock.tests2.CaptureTest.testCaptureFromStub":360,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":215,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":43,"org.easymock.tests.UsageTest.unexpectedCallWithArray":173,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":201,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":371,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":240,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":203,"org.easymock.tests2.UsageConstraintsTest.constraints":319,"org.easymock.samples.ExampleTest.addAndChangeDocument":389,"org.easymock.tests.UsageStrictMockTest.testVerify":207,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":114,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":384,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":167,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":405,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":56,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":252,"org.easymock.tests.LimitationsTest.abstractClass":10,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":232,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":157,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":253,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":304,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":375}}]

[{"transplant":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(this.java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"value","properties":"properties","key":"value"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:153","sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectByType(java.lang.Object, java.util.List<java.lang.reflect.Field>, org.easymock.internal.InjectionPlan.getUnqualifiedInjections())","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:208","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:225","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[37,38,39,40],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[41],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:340","sourceCode":"this.org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:332","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[42,43,44],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","shouldBeUsedInOneThread":"value"}},{"transplant":{"position":"org.easymock.internal.ReplayState:81","sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[45,46,47,48,49,50,51,52,53,0,54,1,55,56,57,58,59,60,61,62,63,64,65,66,22,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,42,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,38,39,116,117,118,119,43,120,121,122,123,124,125,126,127],"status":-2,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[42,43,44],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"failures":[128,129,26,130,131,31],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[22,67,27,132],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[133,134,135,136],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[92],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[137],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[52,53,138,139,140,141],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[142,143,144,145,146],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[133,134,135],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[147,148],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[46,61,62,114,149,115,39,150,151],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[46,152,153,154,155,156,157],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[158,159],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[160,161],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[162,163,164],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":77,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":6,"org.easymock.tests2.UsageConstraintsTest.testMatches":89,"org.easymock.tests2.UsageTest.argumentsOrdered":25,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":39,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":16,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":44,"org.easymock.samples.ExampleTest.voteForRemovals":50,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":96,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":1,"org.easymock.tests2.SerializationTest.testAllMockedMethod":135,"org.easymock.tests2.DelegateToTest.testReturnException":152,"org.easymock.tests2.DependencyTest.testInterfaceMocking":59,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":129,"org.easymock.samples.SupportTest.voteForRemovals":56,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":142,"org.easymock.samples.BasicClassMockTest.testPrintContent":58,"org.easymock.samples.ExampleTest.addDocument":49,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":148,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":162,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":63,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":136,"org.easymock.tests2.AnswerTest.stubAnswer":38,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":154,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":17,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":37,"org.easymock.tests2.UsageConstraintsTest.greaterThan":90,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":60,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":93,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":126,"org.easymock.tests2.DelegateToTest.testWrongClass":153,"org.easymock.samples.ExampleTest.voteForRemoval":47,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":83,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":137,"org.easymock.tests2.UsageTest.wrongArguments":23,"org.easymock.tests.UsageStrictMockTest.range":27,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":11,"org.easymock.samples.ConstructorCalledMockTest.testTax":52,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":127,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":121,"org.easymock.samples.ExampleTest.answerVsDelegate":46,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":53,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":19,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":91,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":75,"org.easymock.tests2.UsageConstraintsTest.testNull":79,"org.easymock.tests2.SerializationTest.test":134,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":119,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":105,"org.easymock.tests2.CaptureTest.testPrimitive":103,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":33,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":118,"org.easymock.tests2.UsageConstraintsTest.testSame":80,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":130,"org.easymock.samples.SupportTest.addDocument":55,"org.easymock.tests2.CaptureTest.testCaptureFirst":113,"org.easymock.tests2.CaptureTest.testCaptureNone":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":40,"org.easymock.tests.UsageUnorderedTest.message":35,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":36,"org.easymock.tests.GenericTest.testPackageScope":143,"org.easymock.tests2.CaptureTest.testCapture2_2446744":112,"org.easymock.tests.UsageVerifyTest.twoReturns":29,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":18,"org.easymock.tests.UsageTest.argumentsOrdered":34,"org.easymock.tests.GenericTest.testBridgedEquals":146,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":41,"org.easymock.tests2.CaptureTest.testCapture_2617107":102,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":164,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":161,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":20,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":95,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":141,"org.easymock.tests2.UsageStrictMockTest.differentMethods":67,"org.easymock.tests2.UsageConstraintsTest.any":84,"org.easymock.tests2.StubTest.stub":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":156,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":66,"org.easymock.tests2.SerializationTest.testClass":133,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":73,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":145,"org.easymock.tests2.AnswerTest.answer":114,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":72,"org.easymock.tests2.CaptureTest.testAnd":100,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":4,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":10,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":123,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":68,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":5,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":65,"org.easymock.tests2.UsageConstraintsTest.testContains":86,"org.easymock.tests2.DelegateToTest.testDelegate":155,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":116,"org.easymock.tests2.UsageConstraintsTest.testFind":78,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":120,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":61,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":43,"org.easymock.tests2.CaptureTest.testCaptureLast":107,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":2,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":62,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":82,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":92,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":122,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":94,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":9,"org.easymock.tests2.UsageStrictMockTest.range":22,"org.easymock.tests2.UsageConstraintsTest.lessThan":99,"org.easymock.tests2.CaptureTest.testCapture1_2446744":104,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":15,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":70,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":98,"org.easymock.tests.UsageStrictMockTest.differentMethods":132,"org.easymock.tests2.CaptureTest.testCaptureRightOne":110,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":7,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":14,"org.easymock.tests2.UsageConstraintsTest.testOr":81,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":117,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":157,"org.easymock.tests.UsageTest.wrongArguments":32,"org.easymock.tests2.MockBuilderTest.testWithConstructor":139,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":21,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":13,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":42,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":115,"org.easymock.tests.UsageVerifyTest.twoThrows":28,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":151,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":69,"org.easymock.tests2.UsageConstraintsTest.cmpTo":85,"org.easymock.samples.PartialClassMockTest.testGetArea":54,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":149,"org.easymock.samples.ExampleTest.voteAgainstRemoval":48,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":163,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":125,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":64,"org.easymock.tests2.UsageConstraintsTest.testNotNull":97,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":159,"org.easymock.tests2.CaptureTest.testCaptureFromStub":111,"org.easymock.samples.ExampleTest.voteAgainstRemovals":45,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":3,"org.easymock.tests2.CallbackTest.callback":150,"org.easymock.tests.UsageTest.unexpectedCallWithArray":31,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":138,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":30,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":8,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":128,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":26,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":74,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":147,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":140,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":12,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":124,"org.easymock.tests2.UsageConstraintsTest.constraints":76,"org.easymock.samples.ExampleTest.addAndChangeDocument":51,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":88,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":158,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":87,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":109,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":0,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":106,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":144,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":131,"org.easymock.tests2.CaptureTest.testCaptureAll":101,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":71}}]

[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"break","position":"org.easymock.Capture:107","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int));\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:333","type":"CtTryImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:295","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n    return false;\n} ","position":"org.easymock.internal.UnorderedBehavior:75","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"status":-2},{"failures":[26,27,28,29,30,4,5,9,10,31,32,33,34,17,18],"variableMapping":{"result":"errorMessage","i":"matches"},"name":"replace","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"case ALL :\n    java.util.List<T>.add(T);\n    break;","position":"org.easymock.Capture:108","type":"CtCaseImpl"},"status":-2},{"failures":[],"binaryOperator":"((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\")","name":"math","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:50","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2110","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ReflectionUtils:229","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.objenesis.ObjenesisHelper.org.objenesis.ObjenesisHelper.newInstance(java.lang.Class<?>)","position":"org.easymock.internal.ObjenesisClassInstantiator:26","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"ifc"},"name":"add","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n    java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:384","type":"CtIfImpl"},"status":0},{"failures":[35,36],"variableMapping":{"genericType":"genericType"},"name":"replace","transplant":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"status":-1},{"failures":[37,38,39],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:122","type":"CtReturnImpl"},"status":-1},{"failures":[40,41,42,43,44],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.MockBuilder:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","position":"org.easymock.internal.RecordState:181","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.Invocation:212","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:197","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1013","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:154","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"-4434322855124959723L","position":"org.easymock.internal.ThrowableWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"private static class MockHandler implements java.lang.reflect.InvocationHandler {\n    private final java.lang.reflect.InvocationHandler delegate;\n\n    private final java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockHandler(java.lang.reflect.InvocationHandler delegate ,java.lang.reflect.Method... mockedMethods) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n        this.java.util.Set<java.lang.reflect.Method> = java.lang.reflect.Method[] != null ? new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[])) : null;\n    }\n\n    public java.lang.Object invoke(java.lang.Object obj, java.lang.reflect.Method method, java.lang.Object[] args) throws java.lang.Throwable {\n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()));\n        if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n            return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    private boolean isMocked(java.lang.reflect.Method method) {\n        return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:67","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (int > (int)) {\n    return true;\n} ","position":"org.easymock.internal.Results:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"status":-2},{"failures":[45],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass()","position":"org.easymock.internal.Injector:80","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:147","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"break","position":"org.easymock.Capture:107","type":"CtBreakImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:163","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:93","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:509","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","position":"org.easymock.internal.Injector:106","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"status":-2},{"failures":[46,46,47,47,48,49,50,51,52],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:163","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","position":"org.easymock.internal.matchers.Null:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:225","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \").append(org.easymock.internal.Invocation.toString())","position":"org.easymock.internal.MocksBehavior:120","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Field.getType()","position":"org.easymock.internal.InjectionTarget:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:268","type":"CtIfImpl"},"status":-2},{"failures":[53,54,27,28,29,55,2,30,3,9,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,11,72,73,74,75,32,13,14,33,34,15,16,20,76,77,78,22,79,80,23,24,81,25],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:95","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","position":"org.easymock.internal.Range:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MockInvocationHandler:41","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:328","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:191","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:878","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","position":"org.easymock.internal.ClassProxyFactory:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:171","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.matchers.Or:51","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ClassProxyFactory:194","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final net.sf.cglib.proxy.Enhancer net.sf.cglib.proxy.Enhancer = new net.sf.cglib.proxy.Enhancer() {\n    /** \n     * Filter all private constructors but do not check that there are\n     * some left\n     */\n@java.lang.SuppressWarnings(value = \"rawtypes\")\n    @java.lang.Override\n    protected void filterConstructors(final java.lang.Class sc, final java.util.List constructors) {\n        net.sf.cglib.core.CollectionUtils.net.sf.cglib.core.CollectionUtils.filter(java.util.List, new net.sf.cglib.core.VisibilityPredicate(java.lang.Class , true));\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:257","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","position":"org.easymock.ConstructorArgs:64","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:163","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String)","position":"org.easymock.internal.matchers.Find:37","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>)","position":"org.easymock.internal.AndroidClassProxyFactory:48","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} ","position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod())","position":"org.easymock.internal.ClassProxyFactory:117","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"expected"},"name":"add","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:43","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"status":-2},{"failures":[35],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:113","type":"mutation","status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.DefaultClassInstantiator:91","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:174","type":"CtInvocationImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:249","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","position":"org.easymock.internal.InjectionPlan:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ObjectMethodsFilter:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.Invocation:105","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Constructor<?>.getModifiers())) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:175","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.LogicalOperator:62","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int);\n}","position":"org.easymock.internal.Invocation:73","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1291","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n    if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n        java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:382","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","position":"org.easymock.internal.ReplayState:48","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:76","type":"CtReturnImpl"},"status":-2},{"failures":[82,83,84,85,86,87,88,89,90,76,91,92,93],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.add(org.easymock.internal.matchers.Captures<java.lang.Object>)","position":"org.easymock.internal.Invocation:163","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:125","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{"f":"f"},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.InjectionTarget(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:219","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injector.org.easymock.internal.Injector.shouldNotAssignTo(java.lang.reflect.Field)) {\n    return null;\n} ","position":"org.easymock.internal.Injector:216","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"break","position":"org.easymock.internal.MocksBehavior:157","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:422","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5699326678580460103L","position":"org.easymock.internal.Result:77","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:327","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","position":"org.easymock.internal.matchers.Matches:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:75","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"status":0},{"failures":[94,46,47,95,96,97,98,99,100,101,102,103,104,105,106,107,0,108,53,109,110,111,112,113,114,115,1,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,55,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,3,5,6,173,7,174,175,176,8,9,10,177,178,179,180,181,182,57,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,63,64,65,207,66,208,67,68,209,210,211,212,69,213,70,71,11,72,73,214,215,216,217,218,74,75,219,12,13,14,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,16,18,19,48,237,238,20,239,82,83,84,85,87,88,89,240,90,76,93,241,242,243,244,245,77,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,78,51,274,22,79,275,80,23,24,276,81,25,277,278,279],"variableMapping":{"shouldBeUsedInOneThread":"verified"},"name":"replace","transplant":{"sourceCode":"if (!boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:193","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:225","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","position":"org.easymock.internal.MockBuilder:104","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:62","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":-2},{"failures":[280,281,11,282,283],"variableMapping":{"delegateTo":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:34","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * This class was kept here for compabitility reason with frameworks using EasyMock\n * @deprecated Use org.easymock.MockType\n */\n@java.lang.Deprecated\npublic enum MockType {\nNICE(org.easymock.MockType.NICE), DEFAULT(org.easymock.MockType.DEFAULT), STRICT(org.easymock.MockType.STRICT);\n    public org.easymock.MockType realType;\n    MockType(final org.easymock.MockType realType) {\n        this.org.easymock.MockType = org.easymock.MockType;\n    }}","position":"org.easymock.internal.MocksControl:46","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"status":-2},{"failures":[284,285,286,287,288,289,290,48,291,52],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:181","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","position":"org.easymock.EasyMock:1802","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:786","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:323","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","position":"org.easymock.Capture:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.And:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:154","type":"CtInvocationImpl"},"status":0},{"failures":[292,293],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Results:60","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"f":"f"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.TestSubject != null) {\n    org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n    continue;\n} ","position":"org.easymock.internal.Injector:108","type":"CtIfImpl"},"status":0},{"failures":[293],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","position":"org.easymock.internal.RecordState:340","type":"CtInvocationImpl"},"status":-1},{"failures":[97,98,100,101,103,105,53,109,110,115,294,1,295,296,297,298,299,300,301,302,55,158,159,160,161,162,163,164,165,166,3,4,5,303,304,305,306,307,7,175,176,8,10,181,182,56,183,58,59,60,61,62,184,185,308,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,63,64,65,207,66,208,67,68,209,210,211,212,69,213,70,71,11,72,73,214,215,216,217,218,74,75,309,219,12,13,310,311,221,312,222,234,16,17,18,48,237,239,82,83,85,86,89,240,90,76,92,93,241,242,293,313,243,244,77,247,248,249,250,251,252,253,254,255,257,259,260,261,314,262,263,264,265,266,268,269,270,271,272,78,51,274,22,79,275,80,23,24,81,25,277,278],"variableMapping":{"answer":"value","state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","position":"org.easymock.internal.MocksControl:258","type":"CtInvocationImpl"},"status":-1},{"failures":[157,208,67,211,212,11,72,315,218,74,84,85,86,87,88,76,92],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"status":-1},{"failures":[316,317],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:320","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.ClassProxyFactory:208","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","position":"org.easymock.internal.MethodSerializationWrapper:68","type":"CtLocalVariableImpl"},"status":-2},{"failures":[318],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"status":-1},{"failures":[289],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.IOException java.io.IOException","position":"org.easymock.internal.AndroidClassProxyFactory:57","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:176","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.DefaultClassInstantiator:162","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","position":"org.easymock.EasyMock:1633","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","position":"org.easymock.EasyMock:1789","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:314","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Exception java.lang.Exception","position":"org.easymock.ConstructorArgs:71","type":"CtLocalVariableImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":58,"org.easymock.tests2.MockedExceptionTest.testRealException":226,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":266,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":172,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":143,"org.easymock.tests.UsageVarargTest.varargIntAccepted":150,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":115,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":289,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":63,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":51,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":94,"org.easymock.tests2.UsageConstraintsTest.testContains":69,"org.easymock.tests2.UsageConstraintsTest.testFind":66,"org.easymock.tests2.StubTest.stubWithReturnValue":78,"org.easymock.tests.UsageVarargTest.allKinds":157,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":87,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":114,"org.easymock.tests2.CaptureTest.testCaptureAll":83,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":181,"org.easymock.samples.ExampleTest.addAndChangeDocument":104,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":256,"org.easymock.tests.UsageVarargTest.varargCharAccepted":151,"org.easymock.tests2.CaptureTest.testCaptureFromStub":91,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":287,"org.easymock.tests.UsageVerifyTest.twoThrows":9,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":286,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":109,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":152,"org.easymock.tests2.DelegateToTest.testReturnException":233,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":14,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":52,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":11,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":278,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":35,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":236,"org.easymock.tests2.CaptureTest.testAnd":82,"org.easymock.tests.UsageStrictMockTest.testVerify":173,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":136,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":90,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":140,"org.easymock.tests2.UsageConstraintsTest.testMatches":71,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":316,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":304,"org.easymock.tests2.UsageConstraintsTest.testNull":208,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":247,"org.easymock.tests2.EasyMockSupportClassTest.testAll":269,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":23,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":144,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":200,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":239,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":290,"org.easymock.tests.UsageThrowableTest.throwError":56,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":108,"org.easymock.tests2.UsageConstraintsTest.greaterThan":72,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":148,"org.easymock.samples.SupportTest.addDocument":96,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":110,"org.easymock.tests2.StubTest.stub":273,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":38,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":165,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":306,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":81,"org.easymock.tests.UsageExpectAndReturnTest.object":197,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":206,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":307,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":156,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":19,"org.easymock.tests.UsageExpectAndThrowTest.object":138,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":293,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":124,"org.easymock.tests2.UsageTest.moreThanOneArgument":12,"org.easymock.tests.UsageVarargTest.varargByteAccepted":155,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":135,"org.easymock.tests.UsageTest.wrongArguments":27,"org.easymock.samples.ExampleTest.voteAgainstRemoval":101,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":120,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":61,"org.easymock.tests.UsageVarargTest.varargShortAccepted":153,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":139,"org.easymock.tests2.UsageTest.defaultResetToNice":220,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":280,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":282,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":225,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":164,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":95,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":313,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":260,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":243,"org.easymock.tests2.SerializationTest.testAllMockedMethod":238,"org.easymock.samples.ExampleTest.voteAgainstRemovals":98,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":15,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":175,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":54,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":302,"org.easymock.tests2.CaptureTest.testCapture1_2446744":86,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":312,"org.easymock.tests.LimitationsTest.mockNativeMethod":184,"org.easymock.tests2.DelegateToTest.testStubDelegate":234,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":299,"org.easymock.tests.UsageUnorderedTest.message":31,"org.easymock.samples.ExampleTest.answerVsDelegate":99,"org.easymock.samples.ExampleTest.voteForRemoval":100,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":196,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":180,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":245,"org.easymock.tests.UsageVerifyTest.twoReturns":10,"org.easymock.tests2.ThreadingTest.testChangeDefault":37,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":318,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":137,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":191,"org.easymock.tests2.DependencyTest.testInterfaceMocking":254,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":0,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":123,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":275,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":300,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":291,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":230,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":209,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":6,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":111,"org.easymock.tests2.CaptureTest.testCaptureRightOne":76,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":193,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":178,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":112,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":223,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":265,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":174,"org.easymock.tests2.UsageConstraintsTest.cmpTo":212,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":198,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":249,"org.easymock.tests2.MockedExceptionTest.testMockedException":224,"org.easymock.tests.UsageThrowableTest.throwCheckedException":59,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":147,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":169,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":217,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":8,"org.easymock.samples.PartialClassMockTest.testGetArea":105,"org.easymock.samples.ExampleTest.voteForRemovals":103,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":183,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":158,"org.easymock.samples.ConstructorCalledMockTest.testTax":46,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":70,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":125,"org.easymock.tests2.UsageTest.argumentsOrdered":34,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":264,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":294,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":246,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":192,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":117,"org.easymock.tests2.AnswerTest.answer":244,"org.easymock.tests.MockingTest.testNicePartialClassMocking":160,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":3,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":40,"org.easymock.tests2.UsageConstraintsTest.any":211,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":195,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":166,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":285,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":171,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":277,"org.easymock.tests.UsageExpectAndThrowTest.longType":131,"org.easymock.tests2.CallbackTest.callback":20,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":145,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":41,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":276,"org.easymock.tests.UsageTest.argumentsOrdered":29,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":207,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":259,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":213,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":205,"org.easymock.tests2.CaptureTest.testCaptureNone":240,"org.easymock.tests2.SerializationTest.test":237,"org.easymock.tests.UsageExpectAndReturnTest.longType":190,"org.easymock.tests2.SerializationTest.testClass":48,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":88,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":305,"org.easymock.tests2.CaptureTest.testCaptureFirst":93,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":215,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":106,"org.easymock.tests2.UsageTest.niceToStrict":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":122,"org.easymock.tests2.EasyMockSupportTest.testVerify":279,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":121,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":258,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":301,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":2,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":133,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":315,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":309,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":141,"org.easymock.tests2.UsageTest.strictResetToDefault":219,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":21,"org.easymock.tests.GenericTest.testBridgedEquals":36,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":204,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":268,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":128,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":210,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":194,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":251,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":227,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":73,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":149,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":263,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":261,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":127,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":161,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":281,"org.easymock.tests2.UsageConstraintsTest.testOr":68,"org.easymock.tests2.DelegateToTest.testDelegate":235,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":242,"org.easymock.tests2.UsageConstraintsTest.testNotNull":218,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":222,"org.easymock.tests2.CaptureTest.testCapture_2617107":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":43,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":292,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":62,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":182,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":199,"org.easymock.tests2.ThreadingTest.testThreadSafe":241,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":44,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":311,"org.easymock.tests.UsageThrowableTest.noUpperLimit":57,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":168,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":248,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":250,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":25,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":22,"org.easymock.tests.UsageExpectAndReturnTest.floatType":189,"org.easymock.tests2.UsageTest.wrongArguments":32,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":229,"org.easymock.tests2.UsageConstraintsTest.testSame":67,"org.easymock.tests2.UsageTest.resumeIfFailure":221,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":49,"org.easymock.tests.UsageOverloadedMethodTest.overloading":55,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":252,"org.easymock.tests.UsageRangeTest.combination":7,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":50,"org.easymock.samples.SupportTest.voteForRemovals":97,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":60,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":47,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":74,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":186,"org.easymock.tests.UsageTest.openCallCountByLastCall":295,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":134,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":176,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":216,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":167,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":16,"org.easymock.tests2.CaptureTest.testPrimitive":85,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":262,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":201,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":142,"org.easymock.samples.BasicClassMockTest.testPrintContent":107,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":113,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":162,"org.easymock.tests.UsageExpectAndThrowTest.floatType":130,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":267,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":39,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":202,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":231,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":314,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":177,"org.easymock.tests2.UsageStrictMockTest.differentMethods":18,"org.easymock.tests.UsageTest.exactCallCountByLastCall":297,"org.easymock.tests2.AnswerTest.stubAnswer":77,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":79,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":24,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":308,"org.easymock.tests2.CaptureTest.testCaptureLast":89,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":129,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":179,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":255,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":270,"org.easymock.tests.UsageStrictMockTest.range":4,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":296,"org.easymock.tests.UsageTest.unexpectedCallWithArray":26,"org.easymock.tests.MockingTest.testPartialClassMocking":159,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":203,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":33,"org.easymock.tests2.UsageConstraintsTest.constraints":65,"org.easymock.samples.ExampleTest.addDocument":102,"org.easymock.tests2.UsageConstraintsTest.lessThan":75,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":228,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":28,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":45,"org.easymock.tests.UsageVarargTest.varargLongAccepted":154,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":170,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":42,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":30,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":146,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":272,"org.easymock.tests2.UsageStrictMockTest.range":17,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":253,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":119,"org.easymock.tests.UsageTest.moreThanOneArgument":1,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":163,"org.easymock.tests2.UsageTest.openCallCountByLastCall":310,"org.easymock.tests.UsageStrictMockTest.differentMethods":5,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":80,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":288,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":64,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":116,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":257,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":303,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":132,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":298,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":187,"org.easymock.tests2.CaptureTest.testCapture2_2446744":92,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":126,"org.easymock.tests.GenericTest.testPackageScope":185}}]

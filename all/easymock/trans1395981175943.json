[{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","position":"org.easymock.internal.ReflectionUtils:150","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","position":"org.easymock.internal.RecordState:221","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ClassProxyFactory:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:113","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.LogicalOperator:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"delegateTo":"test"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","position":"org.easymock.internal.EasyMockStatement:42","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:104","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","position":"org.easymock.internal.RecordState:269","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:116","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"expected"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = new java.lang.Class[java.lang.String[].int]","position":"org.easymock.internal.MethodSerializationWrapper:65","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:314","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-9054190871232972342L","position":"org.easymock.internal.ClassProxyFactory:53","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:266","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:189","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":0},{"failures":[],"binaryOperator":"((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))","name":"math","position":"org.easymock.internal.Injector:224","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.AndroidSupport.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.MockBuilder:140","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"math","position":"org.easymock.internal.matchers.Matches:40","type":"mutation","status":-2},{"failures":[0],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String).matcher(((java.lang.String)(java.lang.Object))).find())","position":"org.easymock.internal.matchers.Find:37","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:65","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<T>.get(0)","position":"org.easymock.Capture:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","position":"org.easymock.internal.ErrorMessage:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:159","type":"CtInvocationImpl"},"status":-2},{"failures":[1,2,3,4],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return int < 0","position":"org.easymock.LogicalOperator:27","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:299","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.Invocation:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:411","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:119","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:632","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.AndroidClassProxyFactory.MockHandler.java.lang.reflect.InvocationHandler","position":"org.easymock.internal.AndroidClassProxyFactory:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments()","position":"org.easymock.internal.BridgeMethodResolver:319","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"status":-2},{"failures":[5,6,7,8,9],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"status":-1},{"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.Injection.setMatched()","position":"org.easymock.internal.InjectionTarget:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","position":"org.easymock.internal.InjectionPlan:53","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"position":"position"},"name":"replace","transplant":{"sourceCode":"int int = this.int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:127","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","position":"org.easymock.internal.MockBuilder:139","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper","position":"org.easymock.internal.MockInvocationHandler:45","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>(java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size())","position":"org.easymock.internal.UnorderedBehavior:83","type":"CtLocalVariableImpl"},"status":-2},{"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,5,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"binaryOperator":"org.easymock.internal.Result != null","name":"removeConditional","position":"org.easymock.internal.MocksBehavior:107","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:720","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:345","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:946","type":"CtReturnImpl"},"status":0},{"failures":[71,72],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.InjectionTarget:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:318","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Object java.lang.Object","position":"org.easymock.internal.Injector:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","position":"org.easymock.internal.Invocation:118","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.matchers.And:48","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-1726286682930686024L","position":"org.easymock.internal.ObjectMethodsFilter:29","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","position":"org.easymock.internal.MocksBehavior:98","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object","position":"org.easymock.internal.BridgeMethodResolver:223","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.easymock.internal.ArgumentToString:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"methodArgs":"org.easymock.internal.Invocation.NO_ARGS"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1747","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","position":"org.easymock.EasyMock:1847","type":"CtInvocationImpl"},"status":-2},{"failures":[73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","position":"org.easymock.internal.RecordState:152","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:45","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:371","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:44","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.Invocation:220","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object[][((java.lang.Object[].int) - 1)]) == null) {\n    return java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:124","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:231","type":"CtReturnImpl"},"status":-2},{"failures":[88,89],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:320","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:280","type":"CtForEachImpl"},"status":-2},{"failures":[90,91,92,93],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.AndroidClassProxyFactory:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","position":"org.easymock.internal.RecordState:221","type":"CtThrowImpl"},"status":-1},{"failures":[94],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:40","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","position":"org.easymock.internal.ReplayState:45","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:204","type":"CtReturnImpl"},"status":-2},{"failures":[95],"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","position":"org.easymock.internal.BridgeMethodResolver:321","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.get(java.lang.Class<?>)","position":"org.easymock.internal.RecordState:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.ClassProxyFactory:228","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","position":"org.easymock.internal.InjectionPlan:61","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.internal.Invocation:185","type":"mutation","return":"return false","status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.EasyMockProperties:129","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:253","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:48","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.ExpectedInvocation:109","type":"CtInvocationImpl"},"status":0},{"failures":[],"binaryOperator":"(\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))","name":"math","position":"org.easymock.internal.RecordState:270","type":"mutation","status":-2},{"failures":[96,97,98,99,100,101],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","position":"org.easymock.internal.EasyMockProperties:69","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","position":"org.easymock.internal.EasyMockProperties:64","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ObjectMethodsFilter:76","type":"CtAssignmentImpl"},"status":-2},{"failures":[102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,27,124,29,30,31,32,78,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,33,150,151,152,153,154,155,156,157,158,159,160,161,162,163,34,164,35,165,36,37,38,166,39,167,168,40,41,169,170,171,172,173,43,44,45,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,1,201,5,202,0,203,204,6,205,206,207,208,209,210,211,46,2,212,3,213,214,215,216,217,47,218,219,48,49,50,51,52,54,220,85,221,222,223,224,225,55,226,227,56,57,58,228,229,230,231,59,232,7,233,8,234,235,236,237,238,239,9,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,60,257,258,259,62,260,64,261,262,263,264,265,65,266,66,267,268,269,270,87,271,94,67,272,273,274,68,69,275,70,276,277,278,279,280,281,282],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:90","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:261","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","position":"org.easymock.internal.DefaultClassInstantiator:63","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:906","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:79","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:65","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","position":"org.easymock.internal.DefaultClassInstantiator:157","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"status":0},{"failures":[283,283,7,233,8,234,284,235,236,237,238,239,9,285,286,240],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","position":"org.easymock.internal.MockBuilder:68","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","position":"org.easymock.EasyMock:1815","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:826","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:267","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"-9054190871232972342L","position":"org.easymock.internal.ClassProxyFactory:53","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:999","type":"CtInvocationImpl"},"status":-2},{"failures":[229,230,231],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"break","position":"org.easymock.Capture:107","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n    java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n} catch (java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n}","position":"org.easymock.internal.AndroidClassProxyFactory:46","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory","position":"org.easymock.internal.ClassProxyFactory:225","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(java.lang.Object))","position":"org.easymock.internal.ClassProxyFactory:282","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Null:35","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:127","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","position":"org.easymock.EasyMock:1470","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"properties":"properties","key":"key"},"name":"replace","transplant":{"sourceCode":"return ((java.lang.String)(this.java.util.Properties.remove(java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:120","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"number":"number"},"name":"add","transplant":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[287,288,289,290,291,292,293,294,271,295,296],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.internal.MockBuilder:214","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"expected":"proxy"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]))","position":"org.easymock.internal.MockInvocationHandler:40","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:814","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))))","position":"org.easymock.internal.MocksBehavior:199","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.matchers.Any()","position":"org.easymock.internal.matchers.Any:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1555","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)","position":"org.easymock.internal.MethodSerializationWrapper:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","position":"org.easymock.internal.InjectionPlan:55","type":"CtInvocationImpl"},"status":-2},{"failures":[27,297,298,32,299,165,168,41,177,203,206,215,47,300,301,54,227,244],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:64","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:339","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.Invocation:209","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":72,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":96,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":19,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":36,"org.easymock.tests2.MockedExceptionTest.testRealException":86,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":265,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":164,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":140,"org.easymock.tests.UsageVarargTest.varargIntAccepted":147,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":123,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":1,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":102,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":271,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":99,"org.easymock.tests2.UsageConstraintsTest.testContains":208,"org.easymock.tests.UsageCallCountTest.tooManyCalls":44,"org.easymock.tests2.UsageConstraintsTest.testFind":0,"org.easymock.tests2.CompareToTest.testGreateThan":4,"org.easymock.tests2.StubTest.stubWithReturnValue":87,"org.easymock.tests.UsageVarargTest.allKinds":154,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":235,"org.easymock.tests2.CaptureTest.testCaptureAll":233,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":174,"org.easymock.samples.ExampleTest.addAndChangeDocument":112,"org.easymock.tests.UsageVarargTest.varargCharAccepted":148,"org.easymock.tests2.CaptureTest.testCaptureFromStub":285,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":25,"org.easymock.tests.UsageVerifyTest.twoThrows":40,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":119,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":149,"org.easymock.tests2.DelegateToTest.testReturnException":223,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":50,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":295,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":46,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":277,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":95,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":226,"org.easymock.tests2.CaptureTest.testAnd":7,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":82,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":133,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":239,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":137,"org.easymock.tests2.UsageConstraintsTest.testMatches":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":88,"org.easymock.tests2.UsageConstraintsTest.testNull":203,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":248,"org.easymock.tests2.EasyMockSupportClassTest.testAll":267,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":68,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":141,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":194,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":232,"org.easymock.tests.UsageThrowableTest.throwError":71,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":117,"org.easymock.tests2.UsageConstraintsTest.greaterThan":2,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":145,"org.easymock.samples.SupportTest.addDocument":104,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":122,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":162,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":118,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":14,"org.easymock.tests.UsageExpectAndReturnTest.object":191,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":200,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":275,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":153,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":228,"org.easymock.tests.UsageExpectAndThrowTest.object":135,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":76,"org.easymock.tests2.UsageTest.moreThanOneArgument":219,"org.easymock.tests.UsageVarargTest.varargByteAccepted":152,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":132,"org.easymock.tests.UsageTest.wrongArguments":29,"org.easymock.samples.ExampleTest.voteAgainstRemoval":109,"org.easymock.tests.CapturesMatcherTest.test":283,"org.easymock.tests.UsageVarargTest.varargShortAccepted":150,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":20,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":136,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":16,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":85,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":161,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":103,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":259,"org.easymock.tests2.MockBuilderTest.testCreateMock":61,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":243,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":18,"org.easymock.tests2.SerializationTest.testAllMockedMethod":231,"org.easymock.tests2.NameTest.nameForMocksControl":282,"org.easymock.samples.ExampleTest.voteAgainstRemovals":106,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":55,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":90,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":121,"org.easymock.tests2.CaptureTest.testCapture1_2446744":284,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":54,"org.easymock.tests.LimitationsTest.mockNativeMethod":178,"org.easymock.tests2.DelegateToTest.testStubDelegate":224,"org.easymock.tests.UsageUnorderedTest.message":45,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":91,"org.easymock.samples.ExampleTest.answerVsDelegate":107,"org.easymock.samples.ExampleTest.voteForRemoval":108,"org.easymock.tests.UsageCallCountTest.tooFewCalls":171,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":190,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":173,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":245,"org.easymock.tests.UsageVerifyTest.twoReturns":41,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":134,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":185,"org.easymock.tests2.DependencyTest.testInterfaceMocking":255,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":94,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":116,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":75,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":273,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":291,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":6,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":98,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":166,"org.easymock.tests2.CaptureTest.testCaptureRightOne":9,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":187,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":170,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":83,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":264,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":167,"org.easymock.tests2.UsageConstraintsTest.cmpTo":207,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":100,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":169,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":192,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":23,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":250,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":22,"org.easymock.tests2.MockedExceptionTest.testMockedException":84,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":144,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":214,"org.easymock.samples.PartialClassMockTest.testGetArea":113,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":168,"org.easymock.samples.ExampleTest.voteForRemovals":111,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":177,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":299,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":210,"org.easymock.samples.ConstructorCalledMockTest.testTax":287,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":77,"org.easymock.tests2.UsageTest.argumentsOrdered":52,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":263,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":27,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":247,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":186,"org.easymock.tests2.AnswerTest.answer":244,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":24,"org.easymock.tests.MockingTest.testNicePartialClassMocking":157,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":165,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":182,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":11,"org.easymock.tests2.UsageConstraintsTest.any":206,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":163,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":276,"org.easymock.tests.UsageExpectAndThrowTest.longType":128,"org.easymock.tests2.CallbackTest.callback":59,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":142,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":269,"org.easymock.tests2.NameTest.nameForMock":279,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":293,"org.easymock.tests.UsageTest.argumentsOrdered":31,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":202,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":258,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":209,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":199,"org.easymock.tests2.MockBuilderTest.testCreateMockString":63,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":120,"org.easymock.tests2.NameTest.nameForStrictMock":280,"org.easymock.tests2.CaptureTest.testCaptureNone":238,"org.easymock.tests2.SerializationTest.test":230,"org.easymock.tests.UsageExpectAndReturnTest.longType":184,"org.easymock.tests2.SerializationTest.testClass":229,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":236,"org.easymock.tests2.CaptureTest.testCaptureFirst":240,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":3,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":114,"org.easymock.tests2.UsageTest.niceToStrict":49,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":74,"org.easymock.tests2.EasyMockSupportTest.testVerify":278,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":21,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":34,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":130,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":47,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":138,"org.easymock.tests2.UsageTest.strictResetToDefault":218,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":62,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":198,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":266,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":73,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":125,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":205,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":188,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":252,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":146,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":262,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":260,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":79,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":158,"org.easymock.tests2.DelegateToTest.testDelegate":225,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":242,"org.easymock.tests2.UsageConstraintsTest.testNotNull":215,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":56,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":290,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":220,"org.easymock.tests2.CaptureTest.testCapture_2617107":8,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":10,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":13,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":175,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":193,"org.easymock.tests2.ThreadingTest.testThreadSafe":241,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":301,"org.easymock.tests.UsageThrowableTest.noUpperLimit":176,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":251,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":97,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":70,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":67,"org.easymock.tests.UsageExpectAndReturnTest.floatType":183,"org.easymock.tests2.UsageTest.wrongArguments":48,"org.easymock.tests2.UsageTest.resumeIfFailure":53,"org.easymock.tests2.UsageConstraintsTest.testSame":204,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":292,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":81,"org.easymock.tests.UsageOverloadedMethodTest.overloading":155,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":253,"org.easymock.tests.UsageRangeTest.combination":39,"org.easymock.samples.SupportTest.voteForRemovals":105,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":294,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":12,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":288,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":216,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":180,"org.easymock.tests.UsageTest.openCallCountByLastCall":297,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":131,"org.easymock.tests2.NameTest.nameForNiceMock":281,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":213,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":17,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":227,"org.easymock.tests2.CaptureTest.testPrimitive":234,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":261,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":195,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":139,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":80,"org.easymock.samples.BasicClassMockTest.testPrintContent":115,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":159,"org.easymock.tests.UsageExpectAndThrowTest.floatType":127,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":43,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":64,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":101,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":196,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":221,"org.easymock.tests2.UsageStrictMockTest.differentMethods":58,"org.easymock.tests.UsageTest.exactCallCountByLastCall":32,"org.easymock.tests2.AnswerTest.stubAnswer":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":272,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":69,"org.easymock.tests2.CaptureTest.testCaptureLast":237,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":42,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":126,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":172,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":256,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":268,"org.easymock.tests.UsageStrictMockTest.range":37,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":298,"org.easymock.tests.UsageTest.unexpectedCallWithArray":28,"org.easymock.tests.MockingTest.testPartialClassMocking":156,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":197,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":51,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.samples.ExampleTest.addDocument":110,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":26,"org.easymock.tests2.UsageConstraintsTest.lessThan":217,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":30,"org.easymock.tests.UsageVarargTest.varargLongAccepted":151,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":65,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":66,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":89,"org.easymock.tests2.MockBuilderTest.testWithConstructor":289,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":35,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":270,"org.easymock.tests2.UsageStrictMockTest.range":57,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":254,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":92,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":93,"org.easymock.tests.UsageTest.moreThanOneArgument":124,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":160,"org.easymock.tests2.UsageTest.openCallCountByLastCall":300,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":60,"org.easymock.tests.UsageStrictMockTest.differentMethods":38,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":15,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":274,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":201,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":257,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":129,"org.easymock.tests.UsageVarargTest.differentLength":33,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":181,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":78,"org.easymock.tests2.CaptureTest.testCapture2_2446744":286,"org.easymock.tests.GenericTest.testPackageScope":179}}]

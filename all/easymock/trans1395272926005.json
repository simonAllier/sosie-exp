[{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"clazz"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:325","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[2,3,4,5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[6,7],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[8,9,10,2,11,12,13,14,15,16,17,4,18,19,20],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[21,22,23,24],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[25,17,26],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.MockBuilder:201","failures":[27,28,28,29,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,6,53,54,55],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[28,28,29,29,56,49],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[57],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[58,59,60,61,62,27,30,63,64,65,0,66,67,68,69,70,71,72,32,33,34,73,36,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,21,97,98,99,25,22,100,101,102,103,104,105,106,107,108,109,23,110,2,3,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,38,41,42,43,46,131,132,133,134,135,136,137,138,139,50,51,57,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,53,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,4,5,199,200,20,201,202,203,204,205,206,207,208,209,210,211],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.MocksControl:128","sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[90,91,95,96,212,104,113,213,120],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[63,67,71,35,214,73,215,150,151,154,216,217,190,191,192,193,194,195,196,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,19,242,243,244,245,246,247,248,249],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[250,251,252,253,36,88,89,90,91,92,93,94,95,96,21,212,97,98,99,25,22,100,101,102,103,104,105,106,254,107,108,109,23,255,110,256,113,114,213,115,116,257,258,117,118,119,120,259,121,122,260,139,261,144,156,157,216,217,158,15,162,163,197,218,219,17,198,246,247,201,202,203,204,205,26,262],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:79","sourceCode":"return ((int) <= int) && (int <= (int))","type":"CtReturnImpl"},"failures":[65,8,0,263,9,10,69,251,76,80,81,84,89,90,92,94,95,99,100,101,103,109,255,110,2,264,265,46,150,152,12,13,14,174,178,179,181,184,266,223,227,228,230,233,267,268,198,4,269,199,200,19,20,206,207,208,209],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[270,271],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[272],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[36,74,273,274],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (this.int)) + \" and \") + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[65,8,9,10,110,2,3,275,276,277,278,152,12,13,14,15,17,198,4,5,200,19,20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"minimum","maximum":"maximum"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[54],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[31,279,280,126,130,281,282,283,284,56,285],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[286,287],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:573","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[113,213,115,116,257,258,117,119,288,120,259,122],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[289,290,27,28,28,29,29,30,291,72,32,33,34,73,36,273,124,125,126,127,129,130,37,292,38,39,41,293,42,43,294,46,295,47,133,134,136,137,138,48,139,261,50,51,57,296,146,297,159,160,161,164,298,53,54,55,299],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[286,287],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[111],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[77,84,21,97,25,101,103,104,105,106,107,46,197,206],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[90,91,93,95,96,212,104,108,113,213,120],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.Capture:134","failures":[300],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[301,302],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[303,304],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[305],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[306,307,308,309,310,311,312,313,314,165,271,166,315,316,317,318,319,320,321,167,168,169],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:63","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[173,179,186,187,322,205],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[88,102,107,323],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[71,35,214,73,215,313,218,242,243,244,245,246,247,324,248,249],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"prefix"}},{"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":91,"org.easymock.tests2.UsageTest.argumentsOrdered":10,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":151,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":85,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":271,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":263,"org.easymock.tests2.StubTest.stubWithReturnValue":71,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":284,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":107,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":179,"org.easymock.tests2.SerializationTest.testAllMockedMethod":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":243,"org.easymock.tests.MockingTest.testPartialClassMocking":159,"org.easymock.samples.SupportTest.voteForRemovals":62,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":6,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":321,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":231,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":52,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":274,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":219,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":32,"org.easymock.tests.UsageExpectAndThrowTest.object":229,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":105,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":132,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":162,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":163,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":21,"org.easymock.tests2.UsageTest.wrongArguments":8,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":156,"org.easymock.tests.UsageStrictMockTest.range":4,"org.easymock.samples.ConstructorCalledMockTest.testTax":28,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":82,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":55,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":124,"org.easymock.tests2.UsageConstraintsTest.testNull":93,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":230,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":136,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":84,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":42,"org.easymock.tests2.CaptureTest.testPrimitive":115,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":158,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":238,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests.UsageTest.moreThanOneArgument":152,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":135,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":211,"org.easymock.tests2.CaptureTest.testCaptureNone":118,"org.easymock.tests.UsageUnorderedTest.message":15,"org.easymock.tests.UsageVerifyTest.twoReturns":20,"org.easymock.tests2.ThreadingTest.testThreadSafe":141,"org.easymock.tests.UsageTest.argumentsOrdered":14,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":318,"org.easymock.tests2.CaptureTest.testCapture_2617107":213,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":201,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":37,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":217,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":167,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":293,"org.easymock.tests2.UsageConstraintsTest.any":97,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":308,"org.easymock.tests2.StubTest.stub":251,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":249,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":205,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":244,"org.easymock.tests.UsageExpectAndThrowTest.longType":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":168,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":256,"org.easymock.tests2.SerializationTest.testClass":36,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":123,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":140,"org.easymock.tests.LimitationsTest.mockNativeMethod":146,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":305,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":53,"org.easymock.tests2.AnswerTest.answer":111,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":189,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":212,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":319,"org.easymock.tests2.CaptureTest.testAnd":113,"org.easymock.tests2.UsageTest.strictResetToDefault":64,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":283,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":264,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":261,"org.easymock.tests2.NameTest.nameForMocksControl":278,"org.easymock.tests2.MockedExceptionTest.testMockedException":214,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":322,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":208,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":79,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":154,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":223,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":161,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":133,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":43,"org.easymock.tests.MockingTest.testNicePartialClassMocking":160,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":234,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":138,"org.easymock.tests2.CaptureTest.testCaptureLast":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":246,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":301,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":96,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":130,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":106,"org.easymock.tests.MockingTest.testTwoMocks":297,"org.easymock.tests2.CaptureTest.testCapture1_2446744":116,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":281,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":1,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":170,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":227,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":9,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":109,"org.easymock.tests.UsageThrowableTest.throwError":190,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":302,"org.easymock.tests.UsageStrictMockTest.differentMethods":5,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":143,"org.easymock.tests2.MockBuilderTest.testCreateMockString":47,"org.easymock.tests.UsageExpectAndThrowTest.floatType":221,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":101,"org.easymock.tests.UsageVerifyTest.twoThrows":19,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":33,"org.easymock.samples.PartialClassMockTest.testGetArea":27,"org.easymock.tests2.CompareToTest.testLessOrEqual":323,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":202,"org.easymock.samples.ExampleTest.voteAgainstRemoval":60,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":166,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":51,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":220,"org.easymock.tests2.UsageTest.niceToStrict":0,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":280,"org.easymock.tests2.UsageConstraintsTest.testNotNull":108,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":196,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":306,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":41,"org.easymock.tests2.MockBuilderTest.testCreateMock":294,"org.easymock.tests2.UsageTest.defaultResetToNice":68,"org.easymock.samples.ExampleTest.voteAgainstRemovals":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":315,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":185,"org.easymock.tests2.CallbackTest.callback":265,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":49,"org.easymock.tests.UsageTest.openCallCountByLastCall":153,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":228,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":80,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":88,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":240,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":216,"org.easymock.tests.UsageOverloadedMethodTest.overloading":149,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":241,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":22,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":127,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":148,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":181,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":303,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":25,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":119,"org.easymock.tests.UsageThrowableTest.throwCheckedException":193,"org.easymock.tests2.EasyMockSupportClassTest.testAll":72,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":298,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":236,"org.easymock.tests2.CaptureTest.testCaptureAll":114,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":218,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":129,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":126,"org.easymock.tests2.UsageConstraintsTest.testMatches":100,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":128,"org.easymock.tests2.CompareToTest.testGreateOrEqual":24,"org.easymock.samples.ExampleTest.voteForRemovals":61,"org.easymock.tests2.NameTest.nameForNiceMock":277,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":145,"org.easymock.tests.UsageVarargTest.allKinds":26,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":200,"org.easymock.tests2.DependencyTest.testInterfaceMocking":131,"org.easymock.samples.BasicClassMockTest.testPrintContent":290,"org.easymock.tests2.DelegateToTest.testStubDelegate":87,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":195,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":255,"org.easymock.tests2.AnswerTest.stubAnswer":112,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":247,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":198,"org.easymock.tests2.UsageConstraintsTest.greaterThan":102,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":44,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":207,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":57,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":269,"org.easymock.samples.ExampleTest.voteForRemoval":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":165,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":142,"org.easymock.tests.UsageExpectAndReturnTest.floatType":172,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":188,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":48,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":30,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":29,"org.easymock.tests.UsageThrowableTest.noUpperLimit":266,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":103,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":296,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":89,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":63,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":257,"org.easymock.tests2.SerializationTest.test":74,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":313,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":304,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":286,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":77,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":191,"org.easymock.tests2.UsageConstraintsTest.testSame":94,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":171,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":242,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":270,"org.easymock.tests2.CaptureTest.testCaptureFirst":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":312,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":78,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":70,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":18,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":177,"org.easymock.tests.GenericTest.testPackageScope":164,"org.easymock.tests2.UsageTest.moreThanOneArgument":65,"org.easymock.tests2.CaptureTest.testCapture2_2446744":121,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":320,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":310,"org.easymock.tests.GenericTest.testBridgedEquals":7,"org.easymock.tests2.NameTest.nameForMock":275,"org.easymock.tests.UsageExpectAndReturnTest.longType":173,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":75,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":295,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":237,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":182,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":254,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":285,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":235,"org.easymock.tests2.UsageStrictMockTest.differentMethods":3,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":248,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":174,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":233,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":209,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":267,"org.easymock.tests2.MockedExceptionTest.testRealException":215,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":316,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":224,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":110,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":194,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":157,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":125,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":292,"org.easymock.tests2.NameTest.nameForStrictMock":276,"org.easymock.tests2.UsageConstraintsTest.testContains":99,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":73,"org.easymock.tests2.UsageConstraintsTest.testFind":92,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":150,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":40,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":252,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":137,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":268,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":253,"org.easymock.tests.UsageExpectAndReturnTest.object":180,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":104,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":139,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":38,"org.easymock.tests2.UsageStrictMockTest.range":2,"org.easymock.tests2.UsageConstraintsTest.lessThan":23,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":83,"org.easymock.tests.UsageTest.exactCallCountByLastCall":155,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":314,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":76,"org.easymock.tests2.CaptureTest.testCaptureRightOne":120,"org.easymock.tests2.UsageConstraintsTest.testOr":95,"org.easymock.tests.UsageRangeTest.combination":206,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":31,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":186,"org.easymock.tests.UsageTest.wrongArguments":12,"org.easymock.tests2.MockBuilderTest.testWithConstructor":282,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":299,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":307,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":183,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":287,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":239,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":260,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":250,"org.easymock.tests2.UsageConstraintsTest.cmpTo":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":169,"org.easymock.tests2.UsageTest.openCallCountByLastCall":66,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":67,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":86,"org.easymock.tests2.CaptureTest.testCaptureFromStub":259,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":39,"org.easymock.tests.UsageTest.unexpectedCallWithArray":11,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":262,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":16,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":226,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":192,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":17,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":56,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":184,"org.easymock.tests2.CaptureTest.testCapture":288,"org.easymock.tests2.UsageConstraintsTest.constraints":90,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":50,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":225,"org.easymock.tests.CapturesMatcherTest.test":300,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":187,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":34,"org.easymock.tests2.CompareToTest.testGreateThan":272,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":258,"org.easymock.tests2.UsageTest.resumeIfFailure":69,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":291,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":203,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":54,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":204,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":81}}]

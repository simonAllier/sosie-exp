[{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[3,4,5,6],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"primitiveType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"failures":[8,9,3,10,11,12,13,14,15],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.InstanceOf:40","failures":[],"status":0,"binaryOperator":"((\"isA(\" + (java.lang.Class<?>.getName())) + \")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[16],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[17],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"methods":"methods","name":"name","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:88","sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResult:41","sourceCode":"return org.easymock.internal.Result","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[19,20,20,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,2,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.Capture:82","failures":[177,178,179,180,27,181,182,183,184,185,186,28,187],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[51,188,189,59],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"failures":[190],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"o"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[191],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[192,193,194,195,196,174],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[192,196],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"returnedType"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[179,186,49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[20,20,21,21,197,198,199,8,3,5,200,201,202,203,204,205,206,207,208,209,210,30,211,31,212,213,214,34,64,215,216,65,217,218,66,219,67,220,221,222,223,224,225,226,227,228,229,230,231,161,232],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[233],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[51,188,189,59],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":172,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":93,"org.easymock.tests2.StubTest.stubWithReturnValue":46,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":14,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":104,"org.easymock.tests2.SerializationTest.testAllMockedMethod":5,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":91,"org.easymock.tests.MockingTest.testPartialClassMocking":229,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":193,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":7,"org.easymock.tests.MockClassControlTest.testToString":162,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":135,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":6,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":221,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":127,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":10,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":153,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":154,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":149,"org.easymock.samples.ConstructorCalledMockTest.testTax":20,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":75,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":44,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":200,"org.easymock.tests2.UsageConstraintsTest.testNull":51,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":208,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":134,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":217,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":167,"org.easymock.tests2.CaptureTest.testPrimitive":180,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":151,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":123,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":141,"org.easymock.tests.UsageTest.moreThanOneArgument":173,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":74,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":194,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":157,"org.easymock.tests2.ThreadingTest.testThreadSafe":22,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":198,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":78,"org.easymock.tests2.CaptureTest.testCapture_2617107":179,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":64,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":65,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":120,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":82,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":92,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":119,"org.easymock.tests2.SerializationTest.testClass":3,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":36,"org.easymock.tests.LimitationsTest.mockNativeMethod":227,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":25,"org.easymock.tests.ReplayStateInvalidUsageTest.times":121,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":226,"org.easymock.tests2.AnswerTest.answer":17,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":112,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":188,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":41,"org.easymock.tests2.CaptureTest.testAnd":178,"org.easymock.tests2.UsageTest.strictResetToDefault":191,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":31,"org.easymock.tests2.MockedExceptionTest.testMockedException":33,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":156,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":170,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":176,"org.easymock.tests2.DelegateToTest.testDelegate":42,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":231,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":129,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":206,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":218,"org.easymock.tests.MockingTest.testNicePartialClassMocking":230,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":210,"org.easymock.tests2.CompareToTest.testNotComparable":16,"org.easymock.tests2.CaptureTest.testCaptureLast":183,"org.easymock.tests2.CompareToTest.testCompareEqual":190,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":94,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":83,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":205,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":148,"org.easymock.tests.MockingTest.testTwoMocks":228,"org.easymock.tests2.CaptureTest.testCapture1_2446744":27,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":98,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":136,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":39,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":132,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":60,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":115,"org.easymock.samples.ExampleTest.removeNonExistingDocument":19,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":117,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":24,"org.easymock.tests2.MockBuilderTest.testCreateMockString":67,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":160,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":159,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":222,"org.easymock.samples.PartialClassMockTest.testGetArea":197,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":116,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":79,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":213,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":128,"org.easymock.tests2.UsageConstraintsTest.testNotNull":59,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":32,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":216,"org.easymock.tests2.UsageTest.defaultResetToNice":71,"org.easymock.tests2.MockBuilderTest.testCreateMock":66,"org.easymock.tests.UsageTest.openCallCountByLastCall":175,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":192,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":133,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":47,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":73,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":55,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":203,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":105,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":233,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":184,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":76,"org.easymock.tests2.EasyMockSupportClassTest.testAll":220,"org.easymock.tests.MockClassControlTest.testEquals":166,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":225,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":195,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":139,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":40,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":146,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":204,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":143,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":202,"org.easymock.tests2.UsageConstraintsTest.testMatches":56,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":122,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":63,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":113,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":158,"org.easymock.tests.ObjectMethodsTest.testHashCode":88,"org.easymock.tests2.CompareToTest.testGreateOrEqual":0,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":77,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":12,"org.easymock.samples.BasicClassMockTest.testPrintContent":199,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":147,"org.easymock.tests2.DelegateToTest.testStubDelegate":2,"org.easymock.tests2.AnswerTest.stubAnswer":62,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":95,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":84,"org.easymock.tests2.UsageConstraintsTest.greaterThan":57,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":13,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":169,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":214,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":23,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":111,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":8,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":30,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":21,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":58,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":232,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":48,"org.easymock.tests2.SerializationTest.test":4,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":181,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":15,"org.easymock.tests2.UsageConstraintsTest.testSame":52,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":99,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":90,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":1,"org.easymock.tests2.CaptureTest.testCaptureFirst":187,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":118,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":126,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":102,"org.easymock.tests.GenericTest.testPackageScope":224,"org.easymock.tests2.UsageTest.moreThanOneArgument":68,"org.easymock.tests2.CaptureTest.testCapture2_2446744":29,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":219,"org.easymock.tests.GenericTest.testBridgedEquals":18,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":43,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":144,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":106,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":140,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":138,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":155,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":100,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":137,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":171,"org.easymock.tests2.MockedExceptionTest.testRealException":35,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":103,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":26,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":124,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":150,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":201,"org.easymock.tests2.UsageConstraintsTest.testContains":54,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":96,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":34,"org.easymock.tests2.UsageConstraintsTest.testFind":50,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":152,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":209,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":189,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":211,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":215,"org.easymock.tests2.UsageConstraintsTest.lessThan":61,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":11,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":89,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":142,"org.easymock.tests2.CaptureTest.testCaptureRightOne":186,"org.easymock.tests2.UsageConstraintsTest.testOr":53,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageRangeTest.combination":168,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":207,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":109,"org.easymock.tests.MockClassControlTest.testHashCode":165,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":161,"org.easymock.tests2.EasyMockSupportTest.testVerify":45,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":107,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":38,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":97,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":37,"org.easymock.tests2.CaptureTest.testCaptureMultiple":177,"org.easymock.tests2.UsageTest.openCallCountByLastCall":69,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":70,"org.easymock.tests.DefaultClassInstantiatorTest.object":86,"org.easymock.tests2.CaptureTest.testCaptureFromStub":28,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":114,"org.easymock.tests.UsageTest.unexpectedCallWithArray":174,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":87,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":131,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":196,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":108,"org.easymock.tests2.CaptureTest.testCapture":185,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":212,"org.easymock.tests2.UsageConstraintsTest.constraints":49,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":164,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":130,"org.easymock.tests.UsageStrictMockTest.testVerify":85,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":223,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":163,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":145,"org.easymock.tests2.UsageTest.resumeIfFailure":72,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":182,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":80,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":101,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":81}}]

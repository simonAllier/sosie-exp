[{"position":"org.easymock.Capture:82","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[13],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1816","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[14,15,16,17],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:274","failures":[33,34,35,36,37,38,39,40,41,42,43],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:190","failures":[44,20,45,46,47,48,49,50,51,52,53,54,55,56,10,57,58,59,25,26,60,61,62,63,64,65,66,31],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[67],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1708","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:772","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[50],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[68,69,70,71,72,73,74,14,75,76],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[77],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"regex"}},{"position":"org.easymock.internal.LastControl:48","failures":[78,33,79,80,81,82,83,84,85,85,86,86,68,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,34,35,14,15,106,107,108,45,109,110,111,112,113,114,46,47,115,116,117,118,119,120,121,122,123,48,77,124,125,126,49,50,51,127,128,52,129,130,131,132,133,53,54,55,56,134,135,136,137,21,138,36,37,38,39,40,41,1,139,3,4,7,140,8,10,11,141,12,42,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,57,158,159,160,161,162,163,58,164,165,166,167,168,169,170,171,172,173,174,59,175,176,177,178,179,180,181,182,183,184,185,26,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,60,61,216,62,63,64,65,66,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,29,249,43,250,251,252,253,31,32,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[123,48,124,126,49,281,53,134,1,2,10],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[9,282],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:305","failures":[78,33,79,80,81,83,84,68,87,88,89,90,91,92,93,94,95,97,98,99,100,101,104,14,15,106,107,108,45,109,110,111,112,113,114,46,47,116,117,118,120,121,122,123,48,77,124,125,126,49,50,51,127,128,52,129,130,131,132,133,53,54,55,283,56,134,135,136,137,21,138,36,40,41,1,139,2,3,4,7,140,8,10,141,12,284,42,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,57,158,159,160,161,162,163,58,164,165,166,167,168,169,170,172,174,59,175,176,177,178,179,180,181,182,185,26,186,187,188,189,190,191,285,193,194,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,60,216,62,63,64,65,66,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,248,29,249,43,250,251,252,253,31,32,258,260,261,262,263,264,265,266,267,268],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1901","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","type":"CtInvocationImpl"},"failures":[131],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:166","sourceCode":"java.lang.StringBuilder.append(\"\\n  Expectation failure on verify:\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[21,29,31,32,286],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1542","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","type":"CtInvocationImpl"},"failures":[48,49,53],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:920","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[287],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[85,86,97,121,122,77,124,125,126,128,129,130,132,133,134,135,136,137,11,181,182,185,189,190,288,289,290,291,292,217,218,219,220,221,222,248,260,261,262,263,264],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[293,294,295],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:108","failures":[97,175,184,60,62,63,64,65,66,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,251,31,258],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[293,295],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:89","sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","type":"CtTryImpl"},"failures":[296,297,298,299,300,301],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","failures":[89,18,19,20,137,21,138,302,303,304,305,177,23,24,25,26,28,248,29,249,252,253,31,32],"status":-1,"binaryOperator":"((org.easymock.internal.ExpectedInvocation.toString()) + \": \")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:346","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[306,276,279,280],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[123,48,124,126,49,281,53,134,1,2,10],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:159","failures":[85,86,307,308,309,310,311],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[69,70,71,72,312,313,75],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[82,89,34,35,120,121,129,132,136,139,7,140,12,42,166,167,175,177,26,314,194,196,202,208,212,214,315,224,230,236,240,242],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:212","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[78,33,79,80,316,81,82,317,83,318,319,320,84,321,68,87,88,89,18,90,44,91,92,19,20,94,95,96,97,98,99,100,101,104,34,35,14,15,16,106,107,108,45,109,110,111,113,114,46,47,322,116,117,118,120,121,122,123,48,77,124,125,126,49,50,51,127,128,52,129,130,131,132,133,53,54,55,283,56,134,135,136,323,137,324,21,138,325,36,39,40,1,139,2,3,4,5,6,7,140,8,10,141,12,42,142,143,144,145,146,147,148,149,151,152,153,155,156,157,57,158,159,160,161,162,58,165,166,167,168,169,170,171,172,174,59,175,176,177,23,178,179,24,25,180,181,182,183,184,185,26,186,187,188,189,190,191,326,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,60,61,216,62,63,64,65,66,222,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,247,327,328,329,330,331,332,28,248,333,29,249,334,43,250,251,252,253,31,32,258,260,261,262,263,264,265,267,268,277,278,335,336,337,338,339,340,341,342,343,344],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1581","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(boolean[]))","type":"CtInvocationImpl"},"failures":[52],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[34,345],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[78,33,79,80,316,81,346,82,317,83,318,319,320,84,85,85,86,86,321,68,87,88,89,18,90,44,91,92,93,19,20,94,95,96,97,98,99,100,101,102,103,104,105,34,35,14,15,16,106,107,108,45,109,110,111,112,113,114,46,47,322,116,117,118,120,121,122,123,48,77,124,125,126,49,50,51,127,128,52,129,130,131,132,133,53,54,55,283,56,134,135,136,347,323,137,324,21,138,325,302,303,304,305,36,39,40,41,1,139,2,3,4,5,6,7,140,8,10,11,141,12,284,348,349,350,42,142,143,144,145,146,147,148,149,351,150,151,352,152,153,353,154,354,155,156,157,57,158,159,160,161,355,162,356,163,58,164,165,166,167,168,169,170,171,172,357,358,359,360,361,362,363,364,365,174,59,175,176,177,22,23,178,179,24,25,180,181,182,183,184,185,26,186,187,188,189,190,191,326,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,366,367,368,369,370,371,372,373,315,374,375,376,60,61,216,62,63,64,65,66,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,377,378,247,327,328,329,379,330,331,380,332,28,248,333,29,249,334,381,43,250,251,252,30,253,31,32,296,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,335,336,337,338,339,382,340,341,342,343,344,383,384,385,386,387,388,389,390,391,392,393],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:321","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:217","failures":[87,95,137,36,180,216,248,31,32],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":48,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":176,"org.easymock.tests2.UsageTest.argumentsOrdered":20,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":46,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":44,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":318,"org.easymock.tests2.DelegateToTest.testReturnException":116,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":255,"org.easymock.tests.MockingTest.testPartialClassMocking":186,"org.easymock.tests.MockClassControlTest.testToString":388,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":173,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":292,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":99,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":224,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":156,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":70,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":50,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":181,"org.easymock.tests2.UsageTest.wrongArguments":18,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":359,"org.easymock.samples.ExampleTest.answerVsDelegate":33,"org.easymock.tests2.UsageConstraintsTest.testNull":124,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":159,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":393,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":114,"org.easymock.tests2.CaptureTest.testPrimitive":3,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":185,"org.easymock.tests.UsageTest.moreThanOneArgument":177,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":243,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":158,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":219,"org.easymock.tests.UsageTest.argumentsOrdered":25,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":276,"org.easymock.tests.UsageVarargTest.varargIntAccepted":337,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":260,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":313,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":351,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":352,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":264,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":165,"org.easymock.tests.ReplayStateInvalidUsageTest.times":315,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":287,"org.easymock.tests2.AnswerTest.answer":36,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":350,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.UsageTest.strictResetToDefault":88,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":356,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":109,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":267,"org.easymock.tests2.DelegateToTest.testDelegate":120,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":280,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":239,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":258,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":365,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":285,"org.easymock.tests2.CaptureTest.testCapture1_2446744":4,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":237,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":348,"org.easymock.tests.UsageThrowableTest.throwError":60,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":368,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":221,"org.easymock.samples.PartialClassMockTest.testGetArea":84,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":369,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":261,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":273,"org.easymock.tests2.UsageTest.niceToStrict":90,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":288,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":151,"org.easymock.tests2.MockBuilderTest.testCreateMock":353,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":233,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":110,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":246,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":377,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":357,"org.easymock.tests.UsageOverloadedMethodTest.overloading":59,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":129,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":251,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":174,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":207,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":52,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":294,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":8,"org.easymock.tests.MockClassControlTest.testEquals":392,"org.easymock.tests2.EasyMockSupportClassTest.testAll":98,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":326,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":241,"org.easymock.tests2.CaptureTest.testCaptureAll":139,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":309,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":349,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":363,"org.easymock.tests2.UsageConstraintsTest.testMatches":130,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":220,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":366,"org.easymock.samples.ExampleTest.voteForRemovals":81,"org.easymock.tests.UsageVarargTest.allKinds":344,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":253,"org.easymock.samples.BasicClassMockTest.testPrintContent":320,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":364,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":65,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":347,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":119,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":259,"org.easymock.tests2.UsageConstraintsTest.greaterThan":132,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":74,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":266,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":164,"org.easymock.samples.ExampleTest.voteForRemoval":79,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":301,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":167,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":355,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":171,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":87,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":76,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":108,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":216,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":254,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":115,"org.easymock.tests2.CaptureTest.testCaptureFirst":12,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":45,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":95,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":30,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":203,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":169,"org.easymock.tests2.CaptureTest.testCapture2_2446744":141,"org.easymock.tests2.UsageTest.moreThanOneArgument":89,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":154,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":343,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":330,"org.easymock.tests.UsageExpectAndReturnTest.longType":199,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":106,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":361,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":242,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":275,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":283,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":240,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":217,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":270,"org.easymock.tests.UsageCallCountTest.tooManyCalls":331,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":247,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":204,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":229,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":64,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":144,"org.easymock.tests2.UsageConstraintsTest.testContains":128,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":378,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":104,"org.easymock.tests2.UsageConstraintsTest.testFind":77,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":175,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":35,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":380,"org.easymock.tests.UsageExpectAndReturnTest.object":206,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":162,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":113,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":71,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":339,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":385,"org.easymock.tests.UsageTest.exactCallCountByLastCall":180,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":290,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":277,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":69,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":212,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":335,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":250,"org.easymock.tests.MockClassControlTest.testHashCode":391,"org.easymock.tests2.EasyMockSupportTest.testVerify":322,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":278,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":43,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":245,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":284,"org.easymock.tests.UsageVarargTest.varargCharAccepted":338,"org.easymock.tests2.CaptureTest.testCaptureMultiple":0,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":323,"org.easymock.tests2.UsageTest.openCallCountByLastCall":91,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":47,"org.easymock.tests.DefaultClassInstantiatorTest.object":296,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":244,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":383,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":27,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":231,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":62,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":390,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":163,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":230,"org.easymock.tests.CapturesMatcherTest.test":282,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":213,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":269,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":101,"org.easymock.tests2.UsageTest.resumeIfFailure":94,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":257,"org.easymock.tests2.StubTest.stubWithReturnValue":97,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":75,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":56,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":205,"org.easymock.tests2.SerializationTest.testAllMockedMethod":16,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":194,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":67,"org.easymock.samples.SupportTest.voteForRemovals":83,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":236,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":17,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":195,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":37,"org.easymock.tests.UsageExpectAndThrowTest.object":234,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":54,"org.easymock.tests2.DelegateToTest.testWrongClass":118,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":189,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":190,"org.easymock.tests.UsageStrictMockTest.range":29,"org.easymock.samples.ConstructorCalledMockTest.testTax":85,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":112,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":143,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":235,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":152,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":375,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":358,"org.easymock.tests2.CaptureTest.testCaptureNone":140,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":274,"org.easymock.tests.UsageUnorderedTest.message":26,"org.easymock.tests.UsageVerifyTest.twoReturns":32,"org.easymock.tests.UsageVarargTest.varargByteAccepted":342,"org.easymock.tests2.ThreadingTest.testThreadSafe":166,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":329,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":319,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":184,"org.easymock.tests2.UsageConstraintsTest.any":51,"org.easymock.tests2.StubTest.stub":96,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":373,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":271,"org.easymock.tests.UsageExpectAndThrowTest.longType":227,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":256,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":293,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":372,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":324,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":142,"org.easymock.tests2.SerializationTest.testClass":14,"org.easymock.tests.LimitationsTest.mockNativeMethod":172,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":192,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":215,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":325,"org.easymock.tests2.NameTest.nameForMocksControl":305,"org.easymock.tests2.MockedExceptionTest.testMockedException":103,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":179,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":188,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":228,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":345,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":157,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":153,"org.easymock.tests.MockingTest.testNicePartialClassMocking":187,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":161,"org.easymock.tests2.CaptureTest.testCaptureLast":7,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":193,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":149,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":49,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":55,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":196,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":232,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":19,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":135,"org.easymock.samples.ExampleTest.removeNonExistingDocument":346,"org.easymock.tests.UsageStrictMockTest.differentMethods":249,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":370,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":298,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":168,"org.easymock.tests2.MockBuilderTest.testCreateMockString":354,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":386,"org.easymock.tests.UsageExpectAndThrowTest.floatType":226,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":131,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":39,"org.easymock.tests.UsageVerifyTest.twoThrows":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":100,"org.easymock.samples.ExampleTest.voteAgainstRemoval":80,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":272,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":58,"org.easymock.tests2.UsageConstraintsTest.testNotNull":134,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":102,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":66,"org.easymock.tests2.UsageTest.defaultResetToNice":93,"org.easymock.samples.ExampleTest.voteAgainstRemovals":78,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":314,"org.easymock.tests.UsageVarargTest.differentLength":382,"org.easymock.tests2.CallbackTest.callback":42,"org.easymock.tests2.UsageConstraintsTest.equals":13,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":311,"org.easymock.tests.UsageTest.openCallCountByLastCall":178,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":121,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":183,"org.easymock.tests.UsageCallCountTest.tooFewCalls":327,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":146,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":360,"org.easymock.tests.UsageThrowableTest.throwCheckedException":63,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":148,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":223,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":145,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":374,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":147,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":41,"org.easymock.tests.ObjectMethodsTest.testHashCode":384,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":312,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":170,"org.easymock.tests2.NameTest.nameForNiceMock":304,"org.easymock.tests2.DependencyTest.testInterfaceMocking":155,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":72,"org.easymock.samples.ExampleTest.addDocument":316,"org.easymock.tests2.DelegateToTest.testStubDelegate":117,"org.easymock.tests2.AnswerTest.stubAnswer":40,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":248,"org.easymock.tests.UsageVarargTest.varargLongAccepted":341,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":334,"org.easymock.tests.UsageExpectAndReturnTest.floatType":198,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":214,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":68,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":86,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":133,"org.easymock.tests.UsageThrowableTest.noUpperLimit":61,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":122,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":5,"org.easymock.tests2.SerializationTest.test":15,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":295,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":297,"org.easymock.tests2.UsageConstraintsTest.testSame":125,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":197,"org.easymock.samples.SupportTest.addDocument":317,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":371,"org.easymock.tests.GenericTest.testPackageScope":191,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":289,"org.easymock.tests2.NameTest.nameForMock":302,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":208,"org.easymock.tests2.UsageStrictMockTest.differentMethods":138,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":310,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":200,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":238,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":268,"org.easymock.tests2.MockedExceptionTest.testRealException":105,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":291,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":137,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":182,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":376,"org.easymock.tests2.NameTest.nameForStrictMock":303,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":34,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":160,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":53,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":299,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":150,"org.easymock.tests2.UsageStrictMockTest.range":21,"org.easymock.tests2.UsageConstraintsTest.lessThan":136,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":107,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":306,"org.easymock.tests2.CaptureTest.testCaptureRightOne":10,"org.easymock.tests2.UsageConstraintsTest.testOr":126,"org.easymock.tests.UsageRangeTest.combination":265,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":57,"org.easymock.tests.UsageTest.wrongArguments":23,"org.easymock.tests2.MockBuilderTest.testWithConstructor":307,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":387,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":201,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":209,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":300,"org.easymock.tests.UsageVarargTest.varargShortAccepted":340,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":379,"org.easymock.tests2.UsageConstraintsTest.cmpTo":127,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":38,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":92,"org.easymock.tests2.CaptureTest.testCaptureFromStub":11,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":367,"org.easymock.tests.UsageTest.unexpectedCallWithArray":22,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":28,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":328,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":308,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":210,"org.easymock.tests2.CaptureTest.testCapture":9,"org.easymock.tests2.UsageConstraintsTest.constraints":123,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":333,"org.easymock.samples.ExampleTest.addAndChangeDocument":82,"org.easymock.tests.UsageStrictMockTest.testVerify":381,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":321,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":332,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":362,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":6,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":262,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":202,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":252,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":263,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":111,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":286,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":336}}]

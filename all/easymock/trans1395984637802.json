[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injection.getAnnotation()","position":"org.easymock.internal.InjectionPlan:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:65","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:121","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:231","type":"CtReturnImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1902","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.Number java.lang.Number = ((java.lang.Number)(java.lang.Object))","position":"org.easymock.internal.matchers.EqualsWithDelta:39","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-4859402739599754147L","position":"org.easymock.internal.matchers.Compare:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:226","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.InjectionTarget:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:197","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:93","type":"CtReturnImpl"},"status":-2},{"failures":[1],"binaryOperator":"((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","name":"conditionalBoundary","position":"org.easymock.internal.matchers.Contains:36","type":"mutation","status":-1},{"failures":[2],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int >= 0","position":"org.easymock.LogicalOperator:45","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:35","type":"CtNewClassImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"contains(\\\"\" + (java.lang.String))","name":"math","position":"org.easymock.internal.matchers.Contains:40","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:312","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:277","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>.getName(), java.lang.Boolean.java.lang.Class<java.lang.Boolean>)","position":"org.easymock.internal.MethodSerializationWrapper:33","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","position":"org.easymock.EasyMock:1939","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:416","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:707","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","position":"org.easymock.internal.RecordState:52","type":"CtInvocationImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16],"variableMapping":{"endPosition":"endPosition"},"name":"add","transplant":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; int++) {\n    final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation);\n    java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>);\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n        if (org.easymock.internal.ErrorMessage.isMatching()) {\n            int++;\n        } \n    }\n}","position":"org.easymock.internal.MocksBehavior:127","type":"CtForImpl"},"status":-1},{"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,1,43,44,45,46,47,48,49,2,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,4,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,5,143,144,145,146,147,6,7,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,8,238,239,9,10,240,241,242,243,244,245,246,247,248,11,12,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,13,273,274,275,14,276,277,15,16,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1408","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"genericType","bound":"genericType"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:267","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.DefaultClassInstantiator:62","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = org.easymock.internal.ExpectedInvocation.getMethod().getExceptionTypes()","position":"org.easymock.internal.RecordState:320","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","position":"org.easymock.EasyMock:759","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject)","position":"org.easymock.internal.Injector:107","type":"CtLocalVariableImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12,13,275,14,15,16],"variableMapping":{"result":"errorMessage","i":"matches"},"name":"replace","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"status":-1},{"failures":[36],"variableMapping":{"name":"suffix"},"name":"replace","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","position":"org.easymock.EasyMock:1815","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","position":"org.easymock.internal.Injector:116","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","position":"org.easymock.internal.RecordState:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","position":"org.easymock.internal.matchers.ArrayEquals:35","type":"CtLocalVariableImpl"},"status":-2},{"failures":[295],"variableMapping":{"methodName":"methodName"},"name":"replace","transplant":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","position":"org.easymock.internal.DefaultClassInstantiator:191","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:164","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.callLongMethod(java.lang.Class<?>, (org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.is1_3Specifications() ? \"computeSerialVersionUID\" : \"computeDefaultSUID\"))","position":"org.easymock.internal.DefaultClassInstantiator:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","position":"org.easymock.internal.DefaultClassInstantiator:155","type":"CtTryImpl"},"status":-2},{"failures":[284,294],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.AndroidClassProxyFactory:80","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isVarArgs()) {\n    int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1));\n} ","position":"org.easymock.internal.Invocation:136","type":"CtIfImpl"},"status":-1},{"failures":[296,297,298,299,300,301,17,302,303,18,19,20,304,305,306,21,307,308,22,309,310,311,312,313,314,0,315,316,23,317,318,319,320,321,24,322,323,25,324,325,26,27,326,28,29,30,327,31,328,32,33,34,35,36,37,38,329,39,40,41,42,1,43,330,44,45,46,47,48,49,2,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,4,64,65,66,67,68,69,70,71,331,72,332,333,73,74,75,76,334,335,77,336,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,337,338,339,340,341,342,96,97,98,99,100,101,102,103,104,105,106,107,108,109,343,344,345,346,347,110,348,349,350,351,352,353,111,354,112,113,114,115,116,117,118,119,120,355,356,357,358,359,121,360,361,362,363,364,365,366,367,122,123,124,368,125,369,370,371,126,127,128,372,129,373,374,130,131,375,132,133,134,135,136,376,137,138,139,377,378,379,380,381,382,140,141,142,5,143,144,145,146,147,6,7,148,149,150,151,152,153,154,155,156,157,383,158,159,160,161,162,163,164,165,384,385,386,387,388,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,389,390,391,392,393,394,395,396,198,199,397,200,201,398,399,202,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,203,204,205,206,207,208,209,210,211,212,213,427,428,429,214,215,430,216,431,432,433,217,218,434,435,436,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,437,438,235,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,236,237,8,238,239,9,10,240,454,241,242,243,244,245,455,456,457,458,459,460,461,462,246,247,248,11,12,463,464,465,466,467,468,469,470,471,249,250,251,252,472,473,474,475,476,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,477,478,479,13,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,273,274,275,14,276,277,15,16,278,279,511,280,281,512,282,283,513,514,284,285,286,515,287,288,289,290,291,292,293,294],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","position":"org.easymock.internal.EasyMockProperties:127","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:116","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n    java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n} catch (java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n}","position":"org.easymock.internal.AndroidClassProxyFactory:46","type":"CtTryImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","position":"org.easymock.internal.MethodSerializationWrapper:38","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T> com.google.dexmaker.stock.ProxyBuilder<T> = com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.forClass(java.lang.Class<T>).handler(org.easymock.internal.AndroidClassProxyFactory.MockHandler)","position":"org.easymock.internal.AndroidClassProxyFactory:40","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.Injector:190","type":"CtContinueImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.IMocksControl","position":"org.easymock.EasyMockSupport:510","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1747","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.validateCapture()","position":"org.easymock.internal.Invocation:168","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Exception java.lang.Exception","position":"org.easymock.ConstructorArgs:71","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"((java.util.Set<java.lang.reflect.Method>) != null)","name":"negateConditional","position":"org.easymock.internal.MockHandler:97","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.EasyMockSupport:480","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:172","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1595","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","position":"org.easymock.internal.RecordState:322","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ClassProxyFactory:200","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:56","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:1051","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()))","position":"org.easymock.internal.ClassProxyFactory:108","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:181","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Long java.lang.Long = org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializableUID(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:142","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","position":"org.easymock.internal.matchers.Matches:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl"},"status":-2},{"failures":[34],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"status":-1},{"failures":[38,50,62,3,4,65,75,76,85,89,92,117,126,132,379,380,381,382,142,5,144,145,6,7,388,167,172,8,238,9,10,454,248,11,12,13,503,274,14,15,16,279,290],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","position":"org.easymock.internal.Range:75","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.matchers.Equals.matches(java.lang.Object)","position":"org.easymock.internal.matchers.ArrayEquals:55","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.AndroidClassProxyFactory:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:88","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"status":-2},{"failures":[26,425],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.asStub()","position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = int ; int <= int ; int++) {\n    final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation);\n    java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>);\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n        if (org.easymock.internal.ErrorMessage.isMatching()) {\n            int++;\n        } \n    }\n}","position":"org.easymock.internal.MocksBehavior:127","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:163","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n} else {\n    try {\n        org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n        java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n    } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:42","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-1726286682930686024L","position":"org.easymock.internal.ObjectMethodsFilter:29","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ClassProxyFactory:120","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","position":"org.easymock.internal.EasyMockProperties:67","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?>[][int] = java.lang.Class<?>","position":"org.easymock.internal.MethodSerializationWrapper:70","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs)","position":"org.easymock.internal.MocksControl:114","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.Invocation:214","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:551","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.UnorderedBehavior:108","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1263","type":"CtReturnImpl"},"status":-2},{"failures":[411,472,475,476],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1332","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","position":"org.easymock.internal.ClassProxyFactory:214","type":"CtThrowImpl"},"status":-2},{"failures":[71,73,79,80,83,90,95,110,117,118,119,120,121,124,127,130,132,147,383,388,170,173,174,175,176,177,202,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,464,465,466,249,250,251,252,503,275],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","position":"org.easymock.internal.RecordState:115","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:84","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:382","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Or:49","type":"CtInvocationImpl"},"status":-2},{"failures":[378,516],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:201","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:36","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:260","type":"CtLocalVariableImpl"},"status":-2},{"failures":[27,140,146,201,400,401,402,406,203,205,206,207,208,209,210,213,228,11,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,277],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"status":-1},{"failures":[296,297,298,299,300,301,17,302,303,18,19,20,304,305,306,21,307,308,22,309,310,311,312,313,314,0,315,316,23,317,318,319,320,321,24,322,323,25,324,26,27,326,28,29,30,327,31,328,32,33,34,35,36,37,38,329,39,40,41,42,1,43,330,44,45,46,47,48,49,2,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,4,64,65,66,67,68,69,70,71,331,72,332,333,73,74,75,76,334,335,77,336,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,337,338,339,340,341,342,96,97,98,99,100,101,102,103,104,105,106,107,108,109,343,344,345,346,347,110,348,349,350,351,352,353,111,354,112,113,114,115,116,117,118,119,120,355,356,357,358,359,121,360,361,362,363,364,365,366,367,122,123,124,125,369,371,126,127,128,129,373,374,130,131,132,133,134,135,136,376,137,138,139,377,378,379,380,381,382,140,141,142,5,143,144,145,146,147,6,7,148,149,150,151,152,153,154,155,156,157,383,158,159,160,161,162,163,164,165,384,385,386,387,388,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,389,390,391,392,393,394,395,396,198,199,397,200,201,398,399,202,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,203,204,205,206,207,208,209,210,211,212,213,427,428,429,214,215,430,216,431,432,433,217,218,434,435,436,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,437,438,235,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,236,237,8,238,239,9,10,240,454,241,242,243,244,245,455,456,457,458,459,460,461,462,246,247,248,11,12,463,464,465,466,467,468,469,470,471,249,250,251,252,472,473,474,475,476,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,477,478,479,13,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,503,504,505,506,507,508,510,273,274,275,14,276,277,15,16,278,279,511,280,281,512,282,283,513,514,284,285,286,515,287,288,289,290,291,292,293,294],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","position":"org.easymock.internal.EasyMockProperties:49","type":"CtAssignmentImpl"},"status":-1},{"failures":[343,344,345,346,347,110,348,349,350,351,352,353,355,356,357,358,359,121,360,361,362,363,364,365,164,165],"variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"name","key":"name"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n    java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n} else {\n    java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n}","position":"org.easymock.internal.Injector:123","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:813","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","position":"org.easymock.internal.MethodSerializationWrapper:72","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return boolean","position":"org.easymock.internal.Injection:82","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Constructor<?>.getParameterTypes()","position":"org.easymock.internal.ReflectionUtils:179","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","position":"org.easymock.EasyMock:1901","type":"CtInvocationImpl"},"status":-2},{"failures":[392],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1709","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:71","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:317","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:105","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:184","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.Invocation:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:906","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.ReflectionUtils:120","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], 0, int)","position":"org.easymock.internal.Invocation:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createNiceControl()","position":"org.easymock.EasyMockSupport:530","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtLocalVariableImpl"},"status":-2},{"failures":[44,246],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:592","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:202","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:204","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:196","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.reflect.Array.java.lang.reflect.Array.getLength(java.lang.Object)]","position":"org.easymock.internal.Invocation:72","type":"CtLocalVariableImpl"},"status":-2},{"failures":[517],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Invocation:117","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","position":"org.easymock.EasyMock:1646","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:200","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:125","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)","position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage)","position":"org.easymock.internal.UnorderedBehavior:95","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.Result:86","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"status":-2},{"failures":[17,302,303,18,19,20,21,22,23,24,25,26,27,326,28,29,30,327,31,32,33,35,36,37,38,39,40,41,42,1,43,44,45,46,47,48,49,2,50,51,52,53,54,56,57,58,59,62,3,4,65,66,67,68,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,122,123,125,126,128,129,131,133,134,135,136,137,138,139,140,141,142,143,145,146,147,148,149,152,153,154,155,157,158,159,159,160,160,161,163,384,385,386,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,399,400,401,402,419,425,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,434,435,436,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,441,238,9,10,241,242,243,244,245,246,247,248,11,12,470,472,473,474,475,476,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,478,13,273,274,276,277,278,279,511,280,281,282,513],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","position":"org.easymock.internal.LastControl:48","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.this(java.lang.Class<T>, null)","position":"org.easymock.internal.MockBuilder:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n    if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n        org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n    } \n}","position":"org.easymock.internal.EasyMockProperties:45","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.easymock.internal.InjectionTarget(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:219","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:193","type":"CtIfImpl"},"status":-2},{"failures":[418,425,444],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:328","type":"CtThrowImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":206,"org.easymock.tests2.MockedExceptionTest.testRealException":82,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":309,"org.easymock.tests.UsageVarargTest.varargIntAccepted":286,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":488,"org.easymock.tests.LimitationsTest.mockFinalMethod":439,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":35,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":25,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":458,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":340,"org.easymock.tests.UsageCallCountTest.tooManyCalls":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":318,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":445,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":377,"org.easymock.tests2.StubTest.stubWithReturnValue":27,"org.easymock.tests.UsageVarargTest.allKinds":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":323,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":252,"org.easymock.tests2.CaptureTest.testCaptureAll":97,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":217,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":2,"org.easymock.tests2.CaptureTest.testAnd":96,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":325,"org.easymock.tests.UsageStrictMockTest.testVerify":454,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":261,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":200,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":389,"org.easymock.tests.MockClassControlTest.testToString":457,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":133,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":452,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":88,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":482,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":191,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":269,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":121,"org.easymock.tests.UsageThrowableTest.throwError":203,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":497,"org.easymock.samples.SupportTest.addDocument":162,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":234,"org.easymock.tests2.StubTest.stub":26,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":473,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":446,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":355,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":222,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":331,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":500,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":230,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":350,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":424,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":335,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":426,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":334,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":293,"org.easymock.tests.UsageExpectAndThrowTest.object":263,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":113,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":320,"org.easymock.tests2.UsageTest.moreThanOneArgument":142,"org.easymock.tests.UsageVarargTest.varargByteAccepted":292,"org.easymock.tests.MockClassControlTest.testEquals":461,"org.easymock.tests.UsageTest.wrongArguments":14,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":480,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":176,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":466,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":359,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":264,"org.easymock.tests2.UsageTest.defaultResetToNice":147,"org.easymock.tests.MockingTest.testNiceClassMocking":433,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":81,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":114,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":129,"org.easymock.tests2.MockBuilderTest.testCreateMock":130,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":115,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":442,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":447,"org.easymock.samples.ExampleTest.voteAgainstRemovals":152,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":60,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":358,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":397,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":280,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":211,"org.easymock.tests2.CaptureTest.testCapture1_2446744":100,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":327,"org.easymock.samples.ExampleTest.voteForRemoval":154,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":300,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":169,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":399,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":436,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":372,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":240,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":249,"org.easymock.tests2.CaptureTest.testCaptureRightOne":106,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":184,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":443,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":303,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":70,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":511,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":444,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":475,"org.easymock.tests2.UsageConstraintsTest.cmpTo":45,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":341,"org.easymock.tests.MockTypeTest.fromEasyMockClass":392,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":507,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":363,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":373,"org.easymock.tests2.MockedExceptionTest.testMockedException":80,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":56,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":243,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":272,"org.easymock.samples.PartialClassMockTest.testGetArea":161,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":410,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":213,"org.easymock.samples.ConstructorCalledMockTest.testTax":159,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":376,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":297,"org.easymock.tests2.UsageTest.argumentsOrdered":7,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":302,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":390,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":301,"org.easymock.samples.ExampleTest.removeNonExistingDocument":383,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":20,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":505,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":441,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":183,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":173,"org.easymock.tests2.AnswerTest.answer":17,"org.easymock.tests.MockingTest.testNicePartialClassMocking":215,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":364,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":238,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":223,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":245,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":474,"org.easymock.tests.UsageExpectAndThrowTest.longType":256,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":396,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":23,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":90,"org.easymock.tests.UsageTest.argumentsOrdered":16,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":38,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":128,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":196,"org.easymock.tests2.MockBuilderTest.testCreateMockString":132,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":232,"org.easymock.tests2.NameTest.nameForStrictMock":380,"org.easymock.tests2.CaptureTest.testCaptureNone":104,"org.easymock.tests2.SerializationTest.testClass":32,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":423,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":468,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":150,"org.easymock.tests.MockingTest.testInterfaceMocking":430,"org.easymock.tests2.EasyMockSupportTest.testVerify":95,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":464,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":361,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":127,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":258,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":432,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":55,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":140,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":131,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":195,"org.easymock.tests.GenericTest.testBridgedEquals":514,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":43,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":137,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":65,"org.easymock.tests2.UsageConstraintsTest.testOr":42,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":112,"org.easymock.tests.MockClassControlTest.testHashCode":460,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":344,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":378,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":190,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":210,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":218,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":394,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":242,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":134,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":322,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":338,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":307,"org.easymock.tests2.UsageConstraintsTest.testSame":41,"org.easymock.tests2.UsageTest.resumeIfFailure":148,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":483,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":385,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":138,"org.easymock.tests.UsageOverloadedMethodTest.overloading":212,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":332,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":395,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":347,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":314,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":402,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":160,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":313,"org.easymock.tests.UsageTest.openCallCountByLastCall":276,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":259,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":516,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":401,"org.easymock.tests2.NameTest.nameForNiceMock":381,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":449,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":360,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":281,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":241,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":487,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":67,"org.easymock.tests2.CaptureTest.testPrimitive":99,"org.easymock.samples.BasicClassMockTest.testPrintContent":151,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":384,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":219,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":73,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":77,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":171,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":388,"org.easymock.tests2.UsageStrictMockTest.differentMethods":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":0,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":85,"org.easymock.tests.MockingTest.testClassMocking":428,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":513,"org.easymock.tests2.CaptureTest.testCaptureLast":103,"org.easymock.tests2.UsageConstraintsTest.equals":329,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":170,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":254,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":168,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":123,"org.easymock.tests.UsageStrictMockTest.range":9,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":277,"org.easymock.tests.InvocationTest.testEquals":517,"org.easymock.tests.UsageTest.unexpectedCallWithArray":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":406,"org.easymock.samples.ExampleTest.addDocument":156,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":431,"org.easymock.tests2.UsageConstraintsTest.lessThan":59,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":202,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":199,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":472,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":415,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":296,"org.easymock.tests2.MockBuilderTest.testWithConstructor":368,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":510,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":139,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":175,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":408,"org.easymock.tests.UsageTest.moreThanOneArgument":274,"org.easymock.tests2.UsageTest.openCallCountByLastCall":145,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":125,"org.easymock.tests.UsageStrictMockTest.differentMethods":10,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":412,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":299,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":257,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":434,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":178,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":308,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":337,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":72,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":239,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":357,"org.easymock.tests2.DependencyTest.testClassMockingSupport":367,"org.easymock.tests.ReplayStateInvalidCallsTest.times":493,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":268,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":246,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":346,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":165,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":469,"org.easymock.tests2.UsageConstraintsTest.testContains":46,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":495,"org.easymock.tests2.UsageConstraintsTest.testFind":39,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":101,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":506,"org.easymock.samples.ExampleTest.addAndChangeDocument":158,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":124,"org.easymock.tests.UsageVarargTest.varargCharAccepted":287,"org.easymock.tests2.CaptureTest.testCaptureFromStub":107,"org.easymock.tests.UsageVerifyTest.twoThrows":11,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":365,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":391,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":231,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":288,"org.easymock.tests2.DelegateToTest.testReturnException":28,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":144,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":324,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":94,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":61,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":336,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":512,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":386,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":453,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":508,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":105,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":265,"org.easymock.tests2.UsageConstraintsTest.testMatches":49,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":174,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":414,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":425,"org.easymock.tests2.UsageConstraintsTest.testNull":40,"org.easymock.tests.LimitationsTest.abstractClass":437,"org.easymock.tests2.EasyMockSupportClassTest.testAll":21,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":509,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":198,"org.easymock.tests2.UsageConstraintsTest.greaterThan":50,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":284,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":448,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":91,"org.easymock.tests.UsageExpectAndReturnTest.object":188,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":64,"org.easymock.tests2.DelegateToTest.testWrongClass":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":405,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":494,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":260,"org.easymock.samples.ExampleTest.voteAgainstRemoval":155,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":209,"org.easymock.tests.UsageVarargTest.varargShortAccepted":290,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":476,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":467,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":352,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":221,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":306,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":455,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":356,"org.easymock.tests2.SerializationTest.testAllMockedMethod":34,"org.easymock.tests2.NameTest.nameForMocksControl":382,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":485,"org.easymock.tests.MockingTest.testStrictClassMocking":427,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":233,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":312,"org.easymock.tests2.DelegateToTest.testStubDelegate":29,"org.easymock.tests.LimitationsTest.mockNativeMethod":235,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":435,"org.easymock.tests.UsageUnorderedTest.message":13,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":398,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":417,"org.easymock.samples.ExampleTest.answerVsDelegate":153,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":471,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":499,"org.easymock.tests.UsageCallCountTest.tooFewCalls":167,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":187,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":18,"org.easymock.tests.UsageVerifyTest.twoReturns":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":319,"org.easymock.tests2.ThreadingTest.testChangeDefault":354,"org.easymock.tests2.DependencyTest.testInterfaceMocking":122,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":182,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":416,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":83,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":418,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":86,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":120,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":1,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":339,"org.easymock.tests.MockingTest.testTwoMocks":429,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":166,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":250,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":79,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":310,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":189,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":135,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":362,"org.easymock.tests.UsageThrowableTest.throwCheckedException":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":422,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":393,"org.easymock.samples.ExampleTest.voteForRemovals":157,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":205,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":48,"org.easymock.tests.ReplayStateInvalidUsageTest.times":450,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":501,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":201,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":311,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":69,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":403,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":179,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":298,"org.easymock.tests2.UsageConstraintsTest.any":44,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":404,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":407,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":93,"org.easymock.tests.LimitationsTest.privateConstructor":438,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":78,"org.easymock.tests2.CallbackTest.callback":116,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":490,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":496,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":375,"org.easymock.tests2.NameTest.nameForMock":379,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":411,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":47,"org.easymock.tests.MockNameTest.defaultName":440,"org.easymock.tests2.SerializationTest.test":33,"org.easymock.tests.UsageExpectAndReturnTest.longType":181,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":102,"org.easymock.tests2.CaptureTest.testCaptureFirst":109,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":489,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":53,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":479,"org.easymock.tests2.UsageTest.niceToStrict":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":224,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":177,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":470,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":236,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":502,"org.easymock.tests2.UsageTest.strictResetToDefault":141,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":304,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":75,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":247,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":253,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":185,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":117,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":71,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":371,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":51,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":68,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":285,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":229,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":216,"org.easymock.tests2.DelegateToTest.testDelegate":31,"org.easymock.tests2.UsageConstraintsTest.testNotNull":57,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":63,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":370,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":110,"org.easymock.tests2.CaptureTest.testCapture_2617107":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":420,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":451,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":349,"org.easymock.tests2.ThreadingTest.testThreadSafe":111,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":421,"org.easymock.tests.UsageThrowableTest.noUpperLimit":204,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":515,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":92,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":84,"org.easymock.tests.UsageExpectAndReturnTest.floatType":180,"org.easymock.tests2.UsageTest.wrongArguments":5,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":330,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":119,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":459,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":374,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":491,"org.easymock.samples.SupportTest.voteForRemovals":163,"org.easymock.tests.UsageRangeTest.combination":279,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":316,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":58,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":321,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":353,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":62,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":192,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":267,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":251,"org.easymock.tests.UsageExpectAndThrowTest.floatType":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":317,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":66,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":193,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":342,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":343,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":333,"org.easymock.tests.UsageTest.exactCallCountByLastCall":278,"org.easymock.tests2.AnswerTest.stubAnswer":19,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":89,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":481,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":492,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":22,"org.easymock.tests.MockingTest.testPartialClassMocking":214,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":194,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":6,"org.easymock.tests2.UsageConstraintsTest.constraints":37,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":118,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":328,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":486,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":244,"org.easymock.tests.UsageVarargTest.varargLongAccepted":291,"org.easymock.tests.ObjectMethodsTest.testHashCode":465,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":74,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":76,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":24,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":400,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":369,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":478,"org.easymock.tests2.DependencyTest.testClassMocking":366,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":220,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":462,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":463,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":351,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":87,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":36,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":456,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":126,"org.easymock.tests.DefaultClassInstantiatorTest.object":503,"org.easymock.tests.UsageVarargTest.differentLength":289,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":419,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":498,"org.easymock.tests2.CaptureTest.testCapture2_2446744":108,"org.easymock.tests.GenericTest.testPackageScope":282}}]

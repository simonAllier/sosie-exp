[{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[0,1,2,3,4,5],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1595","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:150","sourceCode":"return java.io.ByteArrayOutputStream.toByteArray()","type":"CtReturnImpl"},"failures":[6,7,8],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[9,10,11,12],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:60","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[13,14,15,16,17,18,19,20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:318","failures":[21,22],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[23,24],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[0,1,2,3,4,5],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,25,1,26,27,28,29,30,2,3,31,32,4,33,34,35,5],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[36,37,38,39,40,41,42,43,44,45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"parameterType"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:213","failures":[46,47],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[48,49,50,51],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1555","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"methods":"methods","name":"name","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[52,53,54,55,56],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"expected","this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:225","sourceCode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:436","sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[28,29,30,58,59,60,4,33,34,35,61,62,63,5,64],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[65,66,67,68,69,70,71,12,72,73,74],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[66,68],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:105","failures":[75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,9,92,10,93,94,65,66,95,96,67,97,68,69,98,70,99,100,101,57,102,103,104,24,105,71,106,107,11,108,12,109,110,111,112,113,114,72,115,73,116,117,118,119,120,121,122,74,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,27,28,150,151,152,153,154,29,30,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,52,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,58,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,53,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,59,282,283,284,285,286,287,288,289,290,32,4,33,291,292,34,35,293,294,295,296,297,298,299,300,301,302,303,61,304,305,306,307,308,309,21,310,311,22,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,54,334,335,336,337,338,339,55,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,56,356,357,358,359,360,361,362,363,364,365,366,48,367,368,369,370,371,372,373,374,375,376,377,378,379,380,62,63,381,382,383,384,385,386,387,388,389,390,391,392,393,5,394,395,64,396,397,398,49,50,51],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[199],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:61","failures":[9,10,93,94,65,66,96,67,97,68,69,98,70,99,100,101,57,102,103,104,24,105,71,106,107,11,108,12,109,110,72,115,73,116,117,118,119,120,121,122,74,123,124,125,399,130,160,205,61,307,308,352,353,354,355,56,356,361,362,363,364,365,378,390,391,5,394],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:322","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[36,400,401,402,403,37,16,17,404,405,183],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[67,70,71,12],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:315","failures":[132,133,134,135,148,153,181,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,279,290,292,308,311,314,315,318,355,56,374,375,376,377,378,379],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[65,104,406,407,408,409,410,411,412,148,28,150,151,29,30,155,156,159,185,189,190,193,203,206,58,207,413,414,415,60,286,290,4,33,34,35,293,61,347,62,63,387,388,389,392,5,395,64,396],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[416,58,207,64,396],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:88","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[65,66,67,68,69,70,71,12,72,73,74],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[96],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[28,29,30,58,59,60,4,33,34,35,61,62,63,5,64],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":66,"org.easymock.tests2.UsageTest.argumentsOrdered":30,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":290,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":194,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":329,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":151,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":83,"org.easymock.tests2.DelegateToTest.testReturnException":174,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":375,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":87,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":337,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":210,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":158,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":39,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":98,"org.easymock.tests2.UsageTest.wrongArguments":28,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":353,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":172,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":359,"org.easymock.samples.ExampleTest.answerVsDelegate":76,"org.easymock.tests2.UsageConstraintsTest.testNull":67,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":255,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":193,"org.easymock.tests2.CaptureTest.testPrimitive":116,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":356,"org.easymock.tests.UsageTest.moreThanOneArgument":32,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":229,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":126,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":269,"org.easymock.tests.UsageTest.argumentsOrdered":35,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":294,"org.easymock.tests.UsageVarargTest.varargIntAccepted":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":54,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":361,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":44,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":321,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":365,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":166,"org.easymock.tests.ReplayStateInvalidUsageTest.times":263,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":19,"org.easymock.tests2.AnswerTest.answer":197,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":335,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":114,"org.easymock.tests2.CaptureTest.testAnd":72,"org.easymock.tests2.UsageTest.strictResetToDefault":149,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":416,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":403,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":188,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":288,"org.easymock.tests2.DelegateToTest.testDelegate":178,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":298,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":225,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":378,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":303,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":282,"org.easymock.tests2.CaptureTest.testCapture1_2446744":117,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":223,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":112,"org.easymock.tests.UsageThrowableTest.throwError":21,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":53,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":273,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":414,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":147,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":271,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":18,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":400,"org.easymock.tests.MockingTest.testInterfaceMocking":253,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":258,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":362,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":50,"org.easymock.tests2.UsageTest.niceToStrict":150,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":211,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":319,"org.easymock.tests2.MockBuilderTest.testCreateMock":407,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":169,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":0,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":219,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":189,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":306,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":381,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":357,"org.easymock.tests.UsageOverloadedMethodTest.overloading":317,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":102,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":279,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":244,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":316,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":7,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":57,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":122,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":344,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":25,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":227,"org.easymock.tests2.CaptureTest.testCaptureAll":115,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":113,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":301,"org.easymock.tests.MockNameTest.defaultName":309,"org.easymock.tests2.UsageConstraintsTest.testMatches":103,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":256,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":270,"org.easymock.samples.ExampleTest.voteForRemovals":80,"org.easymock.tests.UsageVarargTest.allKinds":352,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":380,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":302,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":314,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":203,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":177,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":379,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":45,"org.easymock.tests2.UsageConstraintsTest.greaterThan":24,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":287,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":412,"org.easymock.samples.ExampleTest.voteForRemoval":77,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":128,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":274,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":326,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":186,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":311,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":374,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":173,"org.easymock.tests2.CaptureTest.testCaptureFirst":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":325,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":187,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":156,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":59,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":240,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":130,"org.easymock.tests2.CaptureTest.testCapture2_2446744":124,"org.easymock.tests2.UsageTest.moreThanOneArgument":27,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":408,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":336,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":351,"org.easymock.tests.GenericTest.testBridgedEquals":47,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":388,"org.easymock.tests.UsageExpectAndReturnTest.longType":236,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":299,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":228,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":11,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":285,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":226,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":231,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":267,"org.easymock.tests.UsageCallCountTest.tooManyCalls":389,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":383,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":241,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":171,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":215,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":313,"org.easymock.tests2.UsageConstraintsTest.testContains":101,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":382,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":134,"org.easymock.tests2.UsageConstraintsTest.testFind":96,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":318,"org.easymock.tests.MockTypeTest.fromEasyMockClass":272,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":392,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":10,"org.easymock.tests.UsageExpectAndReturnTest.object":243,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":399,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":170,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":192,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":40,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":346,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":371,"org.easymock.tests.UsageTest.exactCallCountByLastCall":293,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":324,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":295,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":366,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":31,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":36,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":249,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":341,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":278,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":137,"org.easymock.tests2.EasyMockSupportTest.testVerify":196,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":296,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":276,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":305,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":415,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":111,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":160,"org.easymock.tests.UsageVarargTest.varargCharAccepted":345,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":340,"org.easymock.tests2.UsageTest.openCallCountByLastCall":152,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":195,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":304,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":369,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":60,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":217,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":22,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":164,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":136,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":411,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":216,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":250,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":230,"org.easymock.tests2.UsageTest.resumeIfFailure":155,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":377,"org.easymock.tests2.StubTest.stubWithReturnValue":181,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":37,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":108,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":242,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":334,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":1,"org.easymock.samples.SupportTest.voteForRemovals":86,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":46,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":139,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":222,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":55,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":198,"org.easymock.tests.UsageExpectAndThrowTest.object":220,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":367,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":106,"org.easymock.tests2.DelegateToTest.testWrongClass":176,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":390,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":391,"org.easymock.samples.ConstructorCalledMockTest.testTax":13,"org.easymock.tests.UsageStrictMockTest.range":64,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":179,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":221,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":34,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":265,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":358,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":2,"org.easymock.tests2.CaptureTest.testCaptureNone":121,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":51,"org.easymock.tests.UsageUnorderedTest.message":61,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":413,"org.easymock.tests.UsageVerifyTest.twoReturns":63,"org.easymock.tests.UsageVarargTest.varargByteAccepted":350,"org.easymock.tests2.ThreadingTest.testThreadSafe":127,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":386,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":372,"org.easymock.tests2.CaptureTest.testCapture_2617107":73,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":26,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":284,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":338,"org.easymock.tests2.UsageConstraintsTest.any":99,"org.easymock.tests2.StubTest.stub":52,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":262,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":232,"org.easymock.tests.UsageExpectAndThrowTest.longType":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":339,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":376,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":6,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":261,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":206,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":141,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":252,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":163,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":208,"org.easymock.tests2.NameTest.nameForMocksControl":91,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":165,"org.easymock.tests2.MockedExceptionTest.testMockedException":133,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":292,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":92,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":214,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":161,"org.easymock.tests2.CaptureTest.testCaptureLast":120,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":283,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":405,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":69,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":107,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":183,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":233,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":218,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":29,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":109,"org.easymock.samples.ExampleTest.removeNonExistingDocument":81,"org.easymock.tests.UsageStrictMockTest.differentMethods":396,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":168,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":259,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":138,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":129,"org.easymock.tests2.MockBuilderTest.testCreateMockString":409,"org.easymock.tests.UsageExpectAndThrowTest.floatType":212,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":104,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":200,"org.easymock.tests.UsageVerifyTest.twoThrows":62,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":277,"org.easymock.samples.ExampleTest.voteAgainstRemoval":78,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":330,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":401,"org.easymock.tests2.UsageConstraintsTest.testNotNull":12,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":132,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":315,"org.easymock.tests2.UsageTest.defaultResetToNice":154,"org.easymock.samples.ExampleTest.voteAgainstRemovals":75,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":331,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":162,"org.easymock.tests.UsageVarargTest.differentLength":347,"org.easymock.tests2.CallbackTest.callback":159,"org.easymock.tests2.UsageConstraintsTest.equals":95,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":20,"org.easymock.tests.UsageTest.openCallCountByLastCall":291,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":93,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":355,"org.easymock.tests.UsageCallCountTest.tooFewCalls":384,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":360,"org.easymock.tests.UsageThrowableTest.throwCheckedException":312,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":3,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":308,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":404,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":167,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":264,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":182,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":202,"org.easymock.tests.ObjectMethodsTest.testHashCode":370,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":43,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":131,"org.easymock.tests2.NameTest.nameForNiceMock":90,"org.easymock.tests2.DependencyTest.testInterfaceMocking":157,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":41,"org.easymock.samples.ExampleTest.addDocument":79,"org.easymock.tests2.DelegateToTest.testStubDelegate":175,"org.easymock.tests2.AnswerTest.stubAnswer":201,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":394,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":15,"org.easymock.tests.UsageVarargTest.varargLongAccepted":349,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":328,"org.easymock.tests.UsageExpectAndReturnTest.floatType":235,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":251,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":14,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":145,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":105,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":280,"org.easymock.tests.UsageThrowableTest.noUpperLimit":310,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":94,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":118,"org.easymock.tests2.SerializationTest.test":209,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":8,"org.easymock.tests2.UsageConstraintsTest.testSame":97,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":234,"org.easymock.samples.SupportTest.addDocument":85,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":260,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":323,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":144,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":254,"org.easymock.tests2.NameTest.nameForMock":88,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":245,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":17,"org.easymock.tests2.UsageStrictMockTest.differentMethods":207,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":237,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":224,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":368,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":289,"org.easymock.tests2.MockedExceptionTest.testRealException":135,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":275,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":180,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":333,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":38,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":332,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":266,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":354,"org.easymock.tests2.NameTest.nameForStrictMock":89,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":9,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":71,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":406,"org.easymock.tests2.UsageStrictMockTest.range":58,"org.easymock.tests2.UsageConstraintsTest.lessThan":110,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":140,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":185,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":327,"org.easymock.tests2.CaptureTest.testCaptureRightOne":74,"org.easymock.tests2.UsageConstraintsTest.testOr":68,"org.easymock.tests.UsageRangeTest.combination":286,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":410,"org.easymock.tests.UsageTest.wrongArguments":33,"org.easymock.tests2.MockBuilderTest.testWithConstructor":402,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":246,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":320,"org.easymock.tests.UsageVarargTest.varargShortAccepted":348,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":387,"org.easymock.tests2.UsageConstraintsTest.cmpTo":100,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":199,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":322,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":153,"org.easymock.tests2.CaptureTest.testCaptureFromStub":123,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":257,"org.easymock.tests.UsageTest.unexpectedCallWithArray":4,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":385,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":16,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":247,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":395,"org.easymock.tests2.UsageConstraintsTest.constraints":65,"org.easymock.samples.ExampleTest.addAndChangeDocument":82,"org.easymock.tests.UsageStrictMockTest.testVerify":398,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":84,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":393,"org.easymock.tests2.CompareToTest.testGreateThan":23,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":300,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":119,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":363,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":239,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":364,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":190,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":342}}]

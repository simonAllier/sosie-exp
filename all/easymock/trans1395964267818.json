[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:197","type":"CtReturnImpl"},"status":-2},{"failures":[0],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1444","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:231","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ReflectionUtils:227","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().expectedCount()","position":"org.easymock.internal.Results:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.RecordState:61","type":"CtInvocationImpl"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"or(\")","position":"org.easymock.internal.matchers.Or:47","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"status":-1},{"failures":[27],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:392","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:371","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:231","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","position":"org.easymock.internal.ReflectionUtils:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:840","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:65","type":"CtIfImpl"},"status":-2},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,1,73,2,74,75,3,4,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,5,6,170,7,8,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,9,10,11,237,238,239,240,241,242,243,244,245,246,247,248,12,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,0,329,330,331,332,333,334,335,336,337,16,17,338,339,340,341,342,18,19,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,20,376,21,22,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,27,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,23,24,25,26,505],"variableMapping":{"in":"in","propertyFileName":"propertyFileName","properties":"properties"},"name":"replace","transplant":{"sourceCode":"try {\n    this.java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","position":"org.easymock.internal.EasyMockProperties:64","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","position":"org.easymock.internal.EasyMockProperties:62","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"answer":"answer"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:274","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:116","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","position":"org.easymock.internal.DefaultClassInstantiator:63","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:360","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[35,47,369,370,371,373],"variableMapping":{"value":"value"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments())","position":"org.easymock.internal.Result:84","type":"CtReturnImpl"},"status":-1},{"failures":[489,490],"variableMapping":{"constructorArgs":"constructorArgs"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:168","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"status":-2},{"failures":[163,249,283,285,299,300],"variableMapping":{"number":"number"},"name":"replace","transplant":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.floatValue()","position":"org.easymock.internal.RecordState:203","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.AndroidClassProxyFactory.MockHandler org.easymock.internal.AndroidClassProxyFactory.MockHandler = new org.easymock.internal.AndroidClassProxyFactory.MockHandler(java.lang.reflect.InvocationHandler , java.lang.reflect.Method[])","position":"org.easymock.internal.AndroidClassProxyFactory:38","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.MockType.DEFAULT":"org.easymock.MockType.DEFAULT"},"name":"add","transplant":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:48","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:201","type":"CtAssignmentImpl"},"status":-2},{"failures":[506],"variableMapping":{"constructor":"constructor"},"name":"replace","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:747","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:161","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.UnorderedBehavior:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"bridgeMethod"},"name":"add","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","position":"org.easymock.internal.BridgeMethodResolver:237","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","position":"org.easymock.internal.ReflectionUtils:72","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:415","type":"CtForEachImpl"},"status":-2},{"failures":[507,378,379,380],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"status":-1},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,47,48,52,53,54,55,56,57,70,71,72,1,74,75,76,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,127,128,130,131,133,134,135,136,137,138,139,140,144,145,147,158,159,160,161,162,163,164,165,166,167,169,6,170,7,8,171,233,235,236,9,10,11,242,243,244,245,247,248,12,249,250,251,252,253,254,255,256,257,258,261,264,265,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,308,309,310,311,313,314,315,316,317,318,320,321,322,323,324,325,326,327,328,0,329,330,331,332,333,334,335,336,337,16,338,339,340,341,343,344,350,357,358,359,360,365,367,369,370,371,373,375,20,376,21,22,377,378,379,380,381,387,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,410,411,412,413,414,417,418,419,420,421,422,423,425,426,427,431,432,437,439,440,446,27,447,448,449,450,453,458,465,468,478,484,487,488,489,491,492,493,494,495,496,497,499,500,501,502,503],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.ExpectedInvocation:98","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1519","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:268","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:773","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:148","type":"CtInvocationImpl"},"status":-2},{"failures":[428],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-1},{"failures":[],"binaryOperator":"((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")","name":"math","position":"org.easymock.internal.RecordState:222","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:281","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.DefaultClassInstantiator:190","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"length"},"name":"replace","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[].int) != (java.util.List<org.easymock.IArgumentMatcher>.size())) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:90","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.easymock.internal.ArgumentToString:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:194","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.matchers.Or:48","type":"CtForImpl"},"status":-2},{"failures":[350,440,445,489,491],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:602","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:155","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:125","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"status":-2},{"failures":[508,509,510,511,512,513,490],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ReflectionUtils:184","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > (int)) {\n    int += 1;\n    return java.util.List<org.easymock.internal.Result>.get(int);\n} ","position":"org.easymock.internal.Results:72","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:170","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (int > (int)) {\n    return true;\n} ","position":"org.easymock.internal.Results:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Same:42","type":"CtInvocationImpl"},"status":-2},{"failures":[123],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:42","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:76","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"support":"support"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:602","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","position":"org.easymock.internal.BridgeMethodResolver:353","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:172","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>))","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1205","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"status":-2},{"failures":[409,411],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))))","position":"org.easymock.internal.MocksBehavior:199","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","position":"org.easymock.internal.MockBuilder:79","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"or(\")","position":"org.easymock.internal.matchers.Or:47","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:81","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:520","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:190","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0)","position":"org.easymock.internal.MocksBehavior:169","type":"CtInvocationImpl"},"status":-2},{"failures":[29,30,33,34,35,36,37,39,42,45,47,48,53,54,55,56,57,66,67,68,69,70,71,72,1,74,75,76,85,86,87,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,138,139,140,144,145,147,158,159,160,161,162,163,164,165,166,167,6,7,8,233,235,236,9,10,11,249,250,251,253,254,255,256,257,258,261,264,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,308,309,310,311,313,314,315,316,317,318,320,321,322,323,324,325,326,327,328,0,329,330,332,333,334,335,336,337,16,338,340,341,342,343,344,350,357,358,359,360,361,362,363,364,365,367,369,370,371,373,20,21,22,378,379,381,387,394,395,397,398,401,402,403,404,405,406,407,408,410,411,412,413,414,417,418,419,420,421,422,423,425,426,427,431,432,433,437,438,439,440,446,27,447,448,449,450,451,453,456,458,465,468,478,484,488,489,491,492,493,494,495,496,497,498,499,500,501,502],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Result:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IAnswer<?>.answer()","position":"org.easymock.internal.Result:106","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:1051","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:311","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","position":"org.easymock.EasyMock:1646","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Long java.lang.Long = org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializableUID(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:142","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-332797751209289222L","position":"org.easymock.internal.Result:43","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","position":"org.easymock.internal.ExpectedInvocation:107","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1361","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.Invocation:210","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3743894206806704049L","position":"org.easymock.internal.matchers.Any:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[319,320],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","position":"org.easymock.internal.LastControl:92","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:373","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","position":"org.easymock.internal.matchers.Matches:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"status":-2},{"failures":[311,313],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1276","type":"CtInvocationImpl"},"status":-1},{"failures":[55,71,97,98,99,100,101,102,357,358,359,360,488],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","position":"org.easymock.internal.RecordState:262","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","position":"org.easymock.internal.RecordState:156","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","position":"org.easymock.internal.DefaultClassInstantiator:196","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.Or:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1080","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1373","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"name":"key"},"name":"add","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:602","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1726","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"support":"support"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:325","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n        return false;\n    } \n}","position":"org.easymock.internal.matchers.And:38","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:57","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.io.ObjectInputStream.readObject()","position":"org.easymock.internal.DefaultClassInstantiator:203","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"genericInterface","bound":"genericInterface","this":"this"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"status":-2},{"failures":[465,498],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.IMocksControl.verify()","position":"org.easymock.EasyMockSupport:562","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToNice()","position":"org.easymock.EasyMockSupport:573","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1204","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Double>(org.easymock.Capture<java.lang.Double>))","position":"org.easymock.EasyMock:1975","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","position":"org.easymock.internal.MocksControl:142","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n} catch (final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException) {\n    net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader());\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n}","position":"org.easymock.internal.ClassProxyFactory:174","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:986","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:328","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","position":"org.easymock.internal.ReflectionUtils:189","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{"arg":"returnValue"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","position":"org.easymock.internal.RecordState:256","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:117","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1121","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:124","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:666","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:392","type":"CtReturnImpl"},"status":-2},{"failures":[310,311,313,314,315,316,317,318,319,320,0,329,333,334,394,395,396,397,404,405],"variableMapping":{"stack":"stack","count":"count","this":"this"},"name":"add","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:80","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","position":"org.easymock.internal.LastControl:92","type":"CtInvocationImpl"},"status":-1},{"failures":[444,461],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:231","type":"CtReturnImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":254,"org.easymock.tests2.MockedExceptionTest.testRealException":360,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":469,"org.easymock.tests.UsageVarargTest.varargIntAccepted":128,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":512,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":219,"org.easymock.tests.LimitationsTest.mockFinalMethod":262,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":308,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":80,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":489,"org.easymock.tests.UsageCallCountTest.tooManyCalls":248,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":480,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":428,"org.easymock.tests.UsageVarargTest.allKinds":137,"org.easymock.tests2.StubTest.stubWithReturnValue":488,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":486,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":69,"org.easymock.tests2.CaptureTest.testCaptureAll":395,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":249,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":509,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":326,"org.easymock.tests2.CaptureTest.testAnd":394,"org.easymock.tests.UsageStrictMockTest.testVerify":172,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":111,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":47,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":58,"org.easymock.tests.MockClassControlTest.testToString":79,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":420,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":278,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":496,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":213,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":119,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":294,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":387,"org.easymock.tests.UsageThrowableTest.throwError":251,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":228,"org.easymock.samples.SupportTest.addDocument":32,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":57,"org.easymock.tests2.StubTest.stub":487,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":204,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":272,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":382,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":161,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":452,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":231,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":200,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":353,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":300,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":461,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":202,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":460,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":136,"org.easymock.tests.UsageExpectAndThrowTest.object":113,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":411,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":482,"org.easymock.tests2.UsageTest.moreThanOneArgument":16,"org.easymock.tests.UsageVarargTest.varargByteAccepted":135,"org.easymock.tests.MockClassControlTest.testEquals":83,"org.easymock.tests.UsageTest.wrongArguments":2,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":211,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":88,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":176,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":386,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":114,"org.easymock.tests2.UsageTest.defaultResetToNice":342,"org.easymock.tests.MockingTest.testNiceClassMocking":150,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":359,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":412,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":440,"org.easymock.tests2.MockBuilderTest.testCreateMock":443,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":413,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":268,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":273,"org.easymock.samples.ExampleTest.voteAgainstRemovals":34,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":374,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":46,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":385,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":235,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":138,"org.easymock.tests2.CaptureTest.testCapture1_2446744":398,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":372,"org.easymock.samples.ExampleTest.voteForRemoval":36,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":305,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":245,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":50,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":92,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":513,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":66,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":171,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":14,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":287,"org.easymock.tests2.CaptureTest.testCaptureRightOne":404,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":269,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":416,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":450,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":234,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":206,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":270,"org.easymock.tests2.UsageConstraintsTest.cmpTo":321,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":505,"org.easymock.tests.MockTypeTest.fromEasyMockClass":61,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":155,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":391,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":441,"org.easymock.tests2.MockedExceptionTest.testMockedException":358,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":122,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":165,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":332,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":9,"org.easymock.samples.PartialClassMockTest.testGetArea":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":186,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":140,"org.easymock.samples.ConstructorCalledMockTest.testTax":29,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":424,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":302,"org.easymock.tests2.UsageTest.argumentsOrdered":19,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":59,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":415,"org.easymock.samples.ExampleTest.removeNonExistingDocument":40,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":306,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":153,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":419,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":96,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":286,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":85,"org.easymock.tests2.AnswerTest.answer":414,"org.easymock.tests.MockingTest.testNicePartialClassMocking":145,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":392,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":6,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":162,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":508,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":167,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":205,"org.easymock.tests.UsageExpectAndThrowTest.longType":106,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":65,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":478,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":498,"org.easymock.tests.UsageTest.argumentsOrdered":4,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":311,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":439,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":299,"org.easymock.tests2.NameTest.nameForStrictMock":24,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":55,"org.easymock.tests2.MockBuilderTest.testCreateMockString":445,"org.easymock.tests2.CaptureTest.testCaptureNone":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":185,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":199,"org.easymock.tests2.SerializationTest.testClass":378,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":178,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":43,"org.easymock.tests.MockingTest.testInterfaceMocking":146,"org.easymock.tests2.EasyMockSupportTest.testVerify":503,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":174,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":389,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":438,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":108,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":149,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":331,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":336,"org.easymock.tests.GenericTest.testBridgedEquals":267,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":298,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":444,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":318,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":425,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":446,"org.easymock.tests2.UsageConstraintsTest.testOr":316,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":410,"org.easymock.tests.MockClassControlTest.testHashCode":82,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":346,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":504,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":63,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":250,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":258,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":293,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":164,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":421,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":485,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":466,"org.easymock.tests2.UsageConstraintsTest.testSame":315,"org.easymock.tests2.UsageTest.resumeIfFailure":343,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":214,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":238,"org.easymock.tests.UsageOverloadedMethodTest.overloading":139,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":426,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":64,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":454,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":349,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":474,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":210,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":30,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":473,"org.easymock.tests.UsageTest.openCallCountByLastCall":74,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":109,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":209,"org.easymock.tests2.NameTest.nameForNiceMock":25,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":275,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":388,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":236,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":163,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":218,"org.easymock.tests2.CaptureTest.testPrimitive":397,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":447,"org.easymock.samples.BasicClassMockTest.testPrintContent":44,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":237,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":158,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":15,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":456,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":247,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":365,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":241,"org.easymock.tests2.UsageStrictMockTest.differentMethods":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":475,"org.easymock.tests.MockingTest.testClassMocking":142,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":493,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":266,"org.easymock.tests2.CaptureTest.testCaptureLast":401,"org.easymock.tests2.UsageConstraintsTest.equals":312,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":104,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":246,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":244,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":432,"org.easymock.tests.UsageStrictMockTest.range":7,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":75,"org.easymock.tests.UsageTest.unexpectedCallWithArray":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":182,"org.easymock.samples.ExampleTest.addDocument":38,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":148,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":51,"org.easymock.tests2.UsageConstraintsTest.lessThan":335,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":3,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":45,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":203,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":191,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":301,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":157,"org.easymock.tests2.UsageStrictMockTest.range":21,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":427,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":87,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":184,"org.easymock.tests.UsageTest.moreThanOneArgument":1,"org.easymock.tests2.UsageTest.openCallCountByLastCall":340,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":434,"org.easymock.tests.UsageStrictMockTest.differentMethods":8,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":188,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":304,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":107,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":90,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":281,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":467,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":170,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":384,"org.easymock.tests2.DependencyTest.testClassMockingSupport":430,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":453,"org.easymock.tests.ReplayStateInvalidCallsTest.times":224,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":118,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":70,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":348,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":28,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":93,"org.easymock.tests2.UsageConstraintsTest.testContains":322,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":226,"org.easymock.tests2.UsageConstraintsTest.testFind":313,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":399,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":154,"org.easymock.samples.ExampleTest.addAndChangeDocument":41,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":433,"org.easymock.tests.UsageVarargTest.varargCharAccepted":130,"org.easymock.tests2.CaptureTest.testCaptureFromStub":405,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":510,"org.easymock.tests.UsageVerifyTest.twoThrows":10,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":60,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":393,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":54,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":131,"org.easymock.tests2.DelegateToTest.testReturnException":369,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":339,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":490,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":502,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":263,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":366,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":375,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":239,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":156,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":279,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":403,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":115,"org.easymock.tests2.UsageConstraintsTest.testMatches":325,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":189,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":190,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":201,"org.easymock.tests.LimitationsTest.abstractClass":259,"org.easymock.tests2.UsageConstraintsTest.testNull":314,"org.easymock.tests2.EasyMockSupportClassTest.testAll":465,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":52,"org.easymock.tests2.UsageConstraintsTest.greaterThan":327,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":126,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":274,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":0,"org.easymock.tests.UsageExpectAndReturnTest.object":291,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":499,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":377,"org.easymock.tests2.DelegateToTest.testWrongClass":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":181,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":225,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":110,"org.easymock.samples.ExampleTest.voteAgainstRemoval":37,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":257,"org.easymock.tests.UsageVarargTest.varargShortAccepted":133,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":207,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":177,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":355,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":160,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":464,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":77,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":383,"org.easymock.tests2.NameTest.nameForMocksControl":26,"org.easymock.tests2.SerializationTest.testAllMockedMethod":380,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":216,"org.easymock.tests.MockingTest.testStrictClassMocking":141,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":56,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":472,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":91,"org.easymock.tests.LimitationsTest.mockNativeMethod":261,"org.easymock.tests2.DelegateToTest.testStubDelegate":370,"org.easymock.tests.UsageUnorderedTest.message":12,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":193,"org.easymock.samples.ExampleTest.answerVsDelegate":35,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":95,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":230,"org.easymock.tests.UsageCallCountTest.tooFewCalls":243,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":290,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":417,"org.easymock.tests.UsageVerifyTest.twoReturns":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":481,"org.easymock.tests2.ThreadingTest.testChangeDefault":409,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":192,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":285,"org.easymock.tests2.DependencyTest.testInterfaceMocking":431,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":491,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":194,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":494,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":364,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":317,"org.easymock.tests.MockingTest.testTwoMocks":143,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":242,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":67,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":357,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":470,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":292,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":422,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":390,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":198,"org.easymock.tests.UsageThrowableTest.throwCheckedException":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":463,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":62,"org.easymock.samples.ExampleTest.voteForRemovals":39,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":253,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":324,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":232,"org.easymock.tests.ReplayStateInvalidUsageTest.times":276,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":48,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":471,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":449,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":179,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":282,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":180,"org.easymock.tests2.UsageConstraintsTest.any":320,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":347,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":183,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":501,"org.easymock.tests.LimitationsTest.privateConstructor":260,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":221,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":367,"org.easymock.tests2.CallbackTest.callback":381,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":227,"org.easymock.tests2.NameTest.nameForMock":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":187,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":323,"org.easymock.tests.MockNameTest.defaultName":280,"org.easymock.tests2.SerializationTest.test":379,"org.easymock.tests.UsageExpectAndReturnTest.longType":284,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":400,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":220,"org.easymock.tests2.CaptureTest.testCaptureFirst":407,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":125,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":329,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":97,"org.easymock.tests2.UsageTest.niceToStrict":338,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":89,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":94,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":168,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":116,"org.easymock.tests2.UsageTest.strictResetToDefault":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":462,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":458,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":71,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":103,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":288,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":361,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":436,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":451,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":127,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":328,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":448,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":102,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":147,"org.easymock.tests2.DelegateToTest.testDelegate":373,"org.easymock.tests2.UsageConstraintsTest.testNotNull":333,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":376,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":506,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":350,"org.easymock.tests2.CaptureTest.testCapture_2617107":396,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":196,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":277,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":352,"org.easymock.tests2.ThreadingTest.testThreadSafe":408,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":197,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":341,"org.easymock.tests.UsageThrowableTest.noUpperLimit":252,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":129,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":500,"org.easymock.tests.UsageExpectAndReturnTest.floatType":283,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":492,"org.easymock.tests2.UsageTest.wrongArguments":17,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":319,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":363,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":81,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":442,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":222,"org.easymock.samples.SupportTest.voteForRemovals":33,"org.easymock.tests.UsageRangeTest.combination":233,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":477,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":334,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":483,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":356,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":20,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":295,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":117,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":68,"org.easymock.tests.UsageExpectAndThrowTest.floatType":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":479,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":27,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":296,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":345,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":455,"org.easymock.tests.UsageTest.exactCallCountByLastCall":76,"org.easymock.tests2.AnswerTest.stubAnswer":418,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":497,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":212,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":223,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":468,"org.easymock.tests.MockingTest.testPartialClassMocking":144,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":297,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests2.UsageConstraintsTest.constraints":310,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":13,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":362,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":307,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":217,"org.easymock.tests.UsageVarargTest.varargLongAccepted":134,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":166,"org.easymock.tests.ObjectMethodsTest.testHashCode":175,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":457,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":459,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":121,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":484,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":124,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":435,"org.easymock.tests2.DependencyTest.testClassMocking":429,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":84,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":159,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":173,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":354,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":495,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":511,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":78,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":309,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":437,"org.easymock.tests.DefaultClassInstantiatorTest.object":151,"org.easymock.tests.UsageVarargTest.differentLength":132,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":195,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":507,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":229,"org.easymock.tests2.CaptureTest.testCapture2_2446744":406,"org.easymock.tests.GenericTest.testPackageScope":264}}]

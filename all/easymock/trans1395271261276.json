[{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.matchers.Same:37","failures":[23],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[5,6,7,9,10,24,25,26,27,28,12,13,14,29,17,18,19,21,22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1725","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[30,31,32,33,34,35,36,37,23,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,4,5,109,110,111,112,113,6,7,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,8,156,9,10,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,11,28,12,236,237,13,14,238,239,240,241,242,243,244,245,246,247,248,249,250,29,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,16,17,18,310,311,312,313,314,315,316,317,318,319,320,321,322,19,20,323,21,22,324,325,326],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[34,35,37,38,39,41,51,56,72,74,82],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"cls"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"failures":[327,328,329],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:210","failures":[330,330,331,331,332,333,334,335,336,158],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[99,100],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[34,48,64,69,70,71,87,95,97,107,5,109,110,6,7,114,115,116,132,136,137,140,154,156,9,10,24,25,26,27,231,235,28,12,13,14,238,29,272,17,18,316,317,318,321,19,323,21,22],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[333,337,338,339,340,341],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[342],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[250,343,344,345,346,347],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:52","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[348,349,350,351,352,353,354,355,356,357,358,0,1,2,3,30,31,32,33,34,35,36,37,23,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,98,99,100,101,359,102,103,104,105,106,360,107,108,4,5,109,110,111,112,113,6,7,114,115,361,362,116,117,363,364,118,119,120,365,121,122,123,128,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,151,152,153,154,155,8,156,9,10,157,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,366,367,368,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,217,218,219,220,221,369,370,371,372,222,223,224,225,226,227,228,229,230,373,231,232,233,234,235,11,28,12,236,237,13,14,238,240,241,242,243,244,245,246,247,248,249,29,374,375,376,251,252,377,253,254,255,256,257,258,259,260,261,264,265,266,378,379,267,268,269,270,271,272,273,274,275,276,277,278,287,288,289,290,291,292,293,294,295,296,297,298,299,300,380,301,381,304,305,306,307,308,309,16,17,18,310,312,313,314,315,316,317,318,319,320,321,322,19,20,323,21,22,324,325,326,382,383],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:262","failures":[102,103,104,105,107,112,123,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,366,367,368,225,235,237,374,375,376,252,253,255,256,257,258,259,260,266,289,290,304,305,306,307,308,309,17],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:61","failures":[30,31,32,33,34,35,36,37,23,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,93,101,384,8,29,251,252,277,287,288,289,290,291,296,297,298,299,300,308,319,320,19,20],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:355","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[242,385],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[102,103,104,105,123,252,289,304,305,306,307,308,309],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[384,117],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[386,387],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"type"}},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:245","sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","type":"CtInvocationImpl"},"failures":[388,389,390,63,64,391,392,65,66,67,68,69,70,71,86,87,89,90,91,92,93,393,94,95,96,97,394,395,98,102,103,104,396,124,125,127,129,144,145,146,147,160,397,398,201,202,203,204,399,400,401,239,261,262,263,278,279,280,281,282,283,284,285,286],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[348,349,350,351,352,353,402,354,332,0,1,2,3,30,31,32,33,34,35,36,37,23,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,359,102,103,104,105,107,108,4,5,109,110,111,112,113,6,7,114,115,361,116,117,118,119,120,121,122,123,125,126,129,130,148,151,152,153,154,155,8,156,9,10,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,227,228,230,231,232,233,234,235,11,28,12,236,237,13,14,238,239,245,246,247,248,249,250,29,251,252,253,254,255,256,257,258,259,260,261,262,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,16,17,18,310,311,312,313,314,315,316,317,318,319,320,321,322,19,20,323,21,22,324,325],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:227","sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[348,349,350,351,352,353,354,355,356,357,358,0,1,2,3,30,31,32,33,34,35,36,37,23,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,98,99,100,101,359,102,103,104,105,106,360,107,108,4,5,109,110,111,112,113,6,7,114,115,361,362,116,117,363,364,118,119,120,365,121,122,123,128,131,132,133,134,135,136,137,138,139,140,141,142,143,403,404,148,149,150,151,152,153,154,155,8,156,9,10,157,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,366,367,368,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,217,218,219,220,221,369,370,371,372,222,223,224,225,226,227,228,229,230,373,231,232,233,234,235,11,28,12,236,237,13,14,238,240,241,242,243,244,245,246,247,248,249,29,374,375,376,251,252,377,253,254,255,256,257,258,259,260,261,264,265,266,378,379,267,268,269,270,271,272,273,274,275,276,277,278,287,288,289,290,291,292,293,294,295,296,297,298,299,300,380,405,301,302,303,381,304,305,306,307,308,309,16,17,18,310,312,313,314,315,316,317,318,319,320,321,322,19,20,323,21,22,324,325,326,382,383],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[388,348,350,351,353,358,332,32,33,34,35,36,37,23,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,67,68,70,72,73,74,75,76,79,80,81,82,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,101,359,104,106,107,108,4,109,111,112,113,114,115,361,362,117,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,152,8,9,10,158,159,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,203,204,227,231,232,233,234,235,11,236,237,238,251,252,253,255,256,257,258,259,260,261,264,265,266,286,287,288,291,292,296,297,298,299,300,16,18,319,320,321,20,21,22],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[387],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[51],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[388,330,330,331,331,389,390,332,63,406,64,391,65,66,67,68,69,70,407,71,86,87,89,90,91,92,93,94,95,96,97,104,124,125,126,127,129,130,408,144,145,146,147,158,160,201,202,203,204,400,401,239,261,262,263,279,286],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[409],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[5,6,7,9,228,27,28,12,13,14,29,17,18,19,21],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:67","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:118","sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:57","sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"arguments":"initArgs","i":"i"}},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[87],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[388,330,330,331,331,348,349,350,351,352,353,354,355,389,390,356,357,358,332,0,1,2,3,30,31,32,33,34,35,36,37,23,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,64,65,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,359,102,103,104,105,106,107,108,4,5,109,110,111,112,113,6,7,114,115,361,362,116,117,364,118,119,120,365,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,8,156,9,10,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,366,367,368,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,217,218,219,220,221,222,223,224,225,226,227,229,230,373,231,232,233,234,235,11,12,236,237,13,14,238,239,240,241,242,243,244,29,374,375,376,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,378,379,267,268,269,270,271,272,273,274,275,276,277,278,286,287,288,289,290,291,292,296,297,298,299,300,380,304,305,306,307,308,309,16,17,18,310,312,313,314,315,317,318,319,320,321,322,19,20,323,21,22,324,325,326,382,383],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[410,32,49,55],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[94],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":35,"org.easymock.tests2.UsageTest.argumentsOrdered":7,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":235,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":141,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":360,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":110,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":355,"org.easymock.tests2.DelegateToTest.testReturnException":118,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":305,"org.easymock.tests.MockingTest.testPartialClassMocking":202,"org.easymock.tests.MockClassControlTest.testToString":280,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":380,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":409,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":395,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":161,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":145,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":15,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":362,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":338,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":40,"org.easymock.tests2.UsageTest.wrongArguments":5,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":287,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":294,"org.easymock.samples.ExampleTest.answerVsDelegate":349,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":401,"org.easymock.tests2.UsageConstraintsTest.testNull":37,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":89,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":140,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":285,"org.easymock.tests2.CaptureTest.testPrimitive":75,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":291,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":180,"org.easymock.tests.UsageTest.moreThanOneArgument":11,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":88,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":219,"org.easymock.tests.UsageTest.argumentsOrdered":14,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":240,"org.easymock.tests.UsageVarargTest.varargIntAccepted":269,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":404,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":296,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":63,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":66,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":300,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":117,"org.easymock.tests.ReplayStateInvalidUsageTest.times":213,"org.easymock.tests2.AnswerTest.answer":148,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":41,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":62,"org.easymock.tests2.CaptureTest.testAnd":72,"org.easymock.tests2.UsageTest.strictResetToDefault":108,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":94,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":135,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":233,"org.easymock.tests2.DelegateToTest.testDelegate":121,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":244,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":176,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":308,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":249,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":229,"org.easymock.tests2.CaptureTest.testCapture1_2446744":76,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":174,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":60,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":207,"org.easymock.tests.UsageThrowableTest.throwError":253,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":370,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":25,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":221,"org.easymock.samples.PartialClassMockTest.testGetArea":388,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":208,"org.easymock.tests2.CompareToTest.testLessOrEqual":410,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":297,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":382,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":162,"org.easymock.tests2.UsageTest.niceToStrict":109,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":65,"org.easymock.tests2.MockBuilderTest.testCreateMock":69,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":170,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":136,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":376,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":310,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":292,"org.easymock.tests.UsageOverloadedMethodTest.overloading":265,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":46,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":225,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":192,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":264,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":45,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":81,"org.easymock.tests2.EasyMockSupportClassTest.testAll":144,"org.easymock.tests.MockClassControlTest.testEquals":284,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":262,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":178,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":329,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":61,"org.easymock.tests2.CaptureTest.testCaptureAll":73,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":247,"org.easymock.tests.MockNameTest.defaultName":377,"org.easymock.tests2.UsageConstraintsTest.testMatches":47,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":205,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":220,"org.easymock.samples.ExampleTest.voteForRemovals":353,"org.easymock.tests.UsageVarargTest.allKinds":277,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":16,"org.easymock.samples.BasicClassMockTest.testPrintContent":390,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":248,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":259,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":154,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":309,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":365,"org.easymock.tests2.UsageConstraintsTest.greaterThan":49,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":341,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":232,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":97,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":347,"org.easymock.samples.ExampleTest.voteForRemoval":350,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":394,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":99,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":371,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":92,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":107,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":239,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":335,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":133,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":255,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":304,"org.easymock.tests2.CaptureTest.testCaptureFirst":85,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":364,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":134,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":115,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":228,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":188,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":101,"org.easymock.tests2.UsageTest.moreThanOneArgument":4,"org.easymock.tests2.CaptureTest.testCapture2_2446744":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":385,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":70,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":276,"org.easymock.tests.GenericTest.testBridgedEquals":387,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":317,"org.easymock.tests.UsageExpectAndReturnTest.longType":184,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":131,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":245,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":407,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":179,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":54,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":373,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":177,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":217,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":367,"org.easymock.tests.UsageCallCountTest.tooManyCalls":318,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":312,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":189,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":166,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":258,"org.easymock.tests.MockingTest.testNiceClassMocking":399,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":125,"org.easymock.tests.MockingTest.testClassMocking":398,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":406,"org.easymock.tests2.UsageConstraintsTest.testContains":44,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":311,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":104,"org.easymock.tests2.UsageConstraintsTest.testFind":36,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":266,"org.easymock.tests.MockTypeTest.fromEasyMockClass":369,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":31,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":321,"org.easymock.tests.UsageExpectAndReturnTest.object":191,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":93,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":139,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":271,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":339,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":303,"org.easymock.tests.UsageTest.exactCallCountByLastCall":238,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":251,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":241,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":333,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":197,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":267,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":224,"org.easymock.tests.MockClassControlTest.testHashCode":283,"org.easymock.tests2.EasyMockSupportTest.testVerify":143,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":327,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":242,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":222,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":375,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":26,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":59,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":384,"org.easymock.tests.UsageVarargTest.varargCharAccepted":270,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_Found":403,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":155,"org.easymock.tests2.UsageTest.openCallCountByLastCall":111,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":142,"org.easymock.tests.DefaultClassInstantiatorTest.object":250,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":374,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":301,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":27,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":168,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":256,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":95,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":282,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":167,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":198,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":147,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":281,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":328,"org.easymock.tests2.UsageTest.resumeIfFailure":114,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":400,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":307,"org.easymock.tests2.StubTest.stubWithReturnValue":123,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":337,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":190,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":55,"org.easymock.tests2.SerializationTest.testAllMockedMethod":160,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":378,"org.easymock.samples.SupportTest.voteForRemovals":358,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":386,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":173,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":379,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":149,"org.easymock.tests.UsageExpectAndThrowTest.object":171,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":52,"org.easymock.tests2.DelegateToTest.testWrongClass":120,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":319,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":320,"org.easymock.tests.UsageStrictMockTest.range":21,"org.easymock.samples.ConstructorCalledMockTest.testTax":330,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":138,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":124,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":172,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":67,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":215,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":293,"org.easymock.tests2.CaptureTest.testCaptureNone":80,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":383,"org.easymock.tests.UsageUnorderedTest.message":29,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":24,"org.easymock.tests.UsageVerifyTest.twoReturns":18,"org.easymock.tests.UsageVarargTest.varargByteAccepted":275,"org.easymock.tests2.ThreadingTest.testThreadSafe":98,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":315,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":389,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":381,"org.easymock.tests2.CaptureTest.testCapture_2617107":74,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":290,"org.easymock.tests2.UsageConstraintsTest.any":42,"org.easymock.tests2.StubTest.stub":122,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":212,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":368,"org.easymock.tests.UsageExpectAndThrowTest.longType":164,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":306,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":211,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":156,"org.easymock.tests2.SerializationTest.testClass":158,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":106,"org.easymock.tests.LimitationsTest.mockNativeMethod":286,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":200,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":263,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":157,"org.easymock.tests2.NameTest.nameForMocksControl":3,"org.easymock.tests2.MockedExceptionTest.testMockedException":103,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":237,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":165,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":204,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":86,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":68,"org.easymock.tests.MockingTest.testNicePartialClassMocking":203,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":91,"org.easymock.tests2.CaptureTest.testCaptureLast":79,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":230,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":130,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":39,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":53,"org.easymock.tests.MockingTest.testTwoMocks":201,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":181,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":169,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":6,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":57,"org.easymock.samples.ExampleTest.removeNonExistingDocument":402,"org.easymock.tests.UsageStrictMockTest.differentMethods":22,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":209,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":344,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":100,"org.easymock.tests2.MockBuilderTest.testCreateMockString":71,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":278,"org.easymock.tests.UsageExpectAndThrowTest.floatType":163,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":48,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":151,"org.easymock.tests.UsageVerifyTest.twoThrows":17,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":146,"org.easymock.samples.ExampleTest.voteAgainstRemoval":351,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":326,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":96,"org.easymock.tests2.UsageConstraintsTest.testNotNull":56,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":102,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":260,"org.easymock.tests2.UsageTest.defaultResetToNice":113,"org.easymock.samples.ExampleTest.voteAgainstRemovals":348,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":196,"org.easymock.tests.UsageVarargTest.differentLength":272,"org.easymock.tests2.CallbackTest.callback":116,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":336,"org.easymock.tests.UsageTest.openCallCountByLastCall":236,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":32,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":289,"org.easymock.tests.UsageCallCountTest.tooFewCalls":313,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":127,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":295,"org.easymock.tests.UsageThrowableTest.throwCheckedException":257,"org.easymock.tests.MockingTest.testStrictClassMocking":397,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":129,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":252,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":126,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":363,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":214,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":128,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":153,"org.easymock.tests.ObjectMethodsTest.testHashCode":302,"org.easymock.tests2.NameTest.nameForNiceMock":2,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":359,"org.easymock.tests2.DependencyTest.testInterfaceMocking":361,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":340,"org.easymock.samples.ExampleTest.addDocument":352,"org.easymock.tests2.DelegateToTest.testStubDelegate":119,"org.easymock.tests2.AnswerTest.stubAnswer":152,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":20,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":334,"org.easymock.tests.UsageVarargTest.varargLongAccepted":274,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":324,"org.easymock.tests.UsageExpectAndReturnTest.floatType":183,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":199,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":332,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":331,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":50,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":226,"org.easymock.tests.UsageThrowableTest.noUpperLimit":254,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":33,"org.easymock.tests2.SerializationTest.test":159,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":77,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":343,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":182,"org.easymock.tests2.UsageConstraintsTest.testSame":23,"org.easymock.samples.SupportTest.addDocument":357,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":210,"org.easymock.tests.GenericTest.testPackageScope":261,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":243,"org.easymock.tests2.NameTest.nameForMock":0,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":193,"org.easymock.tests2.UsageStrictMockTest.differentMethods":10,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":393,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":175,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":405,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":234,"org.easymock.tests2.MockedExceptionTest.testRealException":105,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":372,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":8,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":216,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":288,"org.easymock.tests2.NameTest.nameForStrictMock":1,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":392,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":30,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":90,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":396,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":51,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":345,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":64,"org.easymock.tests2.UsageStrictMockTest.range":9,"org.easymock.tests2.UsageConstraintsTest.lessThan":58,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":132,"org.easymock.tests2.CaptureTest.testCaptureRightOne":82,"org.easymock.tests2.UsageConstraintsTest.testOr":38,"org.easymock.tests.UsageRangeTest.combination":231,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":87,"org.easymock.tests.UsageTest.wrongArguments":12,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":279,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":186,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":194,"org.easymock.tests.UsageVarargTest.varargShortAccepted":273,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":346,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":316,"org.easymock.tests2.UsageConstraintsTest.cmpTo":43,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":150,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":112,"org.easymock.tests2.CaptureTest.testCaptureFromStub":83,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":206,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":391,"org.easymock.tests.UsageTest.unexpectedCallWithArray":28,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":19,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":314,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":342,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":195,"org.easymock.tests2.UsageConstraintsTest.constraints":34,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":323,"org.easymock.samples.ExampleTest.addAndChangeDocument":354,"org.easymock.tests.UsageStrictMockTest.testVerify":325,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":356,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":322,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":246,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":78,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":408,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":298,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":187,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":227,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":299,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":137,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":268}}]

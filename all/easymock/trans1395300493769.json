[{"position":"org.easymock.internal.MocksControl:105","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[367],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,368,369,370,17,18,371,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,372,59,60,61,62,63,64,65,66,67,68,69,70,373,374,375,376,377,71,378,72,73,379,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,380,381,382,383,384,133,134,135,136,137,138,385,386,387,388,139,140,141,142,143,144,145,146,147,148,149,150,389,390,391,392,393,394,395,396,397,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,398,399,400,401,402,403,404,405,406,205,206,207,208,209,210,407,211,212,213,214,215,216,217,218,219,408,409,410,411,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,412,413,414,415,416,417,418,419,420,421,422,367,423,424,425,426,427,428,429,235,236,430,431,237,432,433,434,435,436,437,438,439,440,441,442,443,444,445,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,446,308,447,448,449,450,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,451,452,453,454,455,327,328,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,481,482,483,484,485,351,486,487,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[204],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:153","failures":[70,94,133,134,135,136,137,138,277,278,279,280],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[285,286],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:226","sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[5,7,8,11,12,13,488,489,53,65,66,67,74,91,98,99,185,187,189,190,191,490,398,222,225,226,227,231,232,233,234,414,424,425,427,431,441,443,240,256,289,310,314,315,318,341,344,345,346],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[394,491,492],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,372,59,60,61,62,63,64,65,66,67,69,70,376,377,378,74,75,76,77,78,79,80,81,83,84,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,381,382,133,134,135,136,137,138,387,139,140,141,142,143,144,145,146,147,148,149,150,390,175,176,177,178,180,181,182,185,186,187,188,189,190,191,192,193,194,195,399,400,401,402,403,404,405,406,205,206,207,208,209,212,213,214,215,216,217,218,219,222,223,224,225,226,227,228,229,230,231,232,233,234,412,414,418,419,424,425,427,235,430,431,237,432,433,434,435,437,440,441,442,443,238,239,240,241,243,244,245,246,247,248,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,270,271,272,273,274,275,276,277,278,279,280,281,283,284,285,286,287,288,289,303,304,305,307,446,308,447,448,323,324,325,326,341,342,343,344,345,346,347,348,349,481,482,483,486,487,353,354,355,356,357,358,359,360,361,362,363,364,365,366],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[5,10,27,28,31,33,34,35,36,38,39,40,41,43,44,45,46,87,95,98,137,154,222,229,349],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[80,213,303,305,307],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[240,241,246,247,249,259,353,355,363],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[391,395],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1361","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[240,241,244,246,247,249,259,264,353,355,363],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:332","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[227,433,256],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[7,493,494,187,495,496],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,368,17,18,371,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,372,59,60,61,62,63,64,65,66,67,68,69,70,373,374,375,71,72,73,379,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,380,381,382,383,384,133,134,135,136,137,138,385,386,387,388,139,140,141,142,143,144,145,146,147,148,149,150,389,390,391,392,393,394,395,396,397,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,399,400,401,402,403,404,405,406,205,206,207,208,209,210,407,211,212,213,214,215,216,217,218,219,410,411,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,412,414,415,417,418,419,420,422,424,425,427,428,429,235,236,430,431,237,432,433,434,435,436,437,439,440,441,442,443,444,445,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,447,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,451,455,327,328,456,457,459,461,462,463,464,467,470,472,473,474,475,476,477,478,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,481,482,484,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[187,188,190,191,193,343,345,346],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.ConstructorArgs:54","failures":[408,409,413,416,421,423,497,426,498,499,446,448,449,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,483,487,352],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,368,369,370,17,18,371,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,372,59,60,61,62,63,64,65,66,67,68,69,70,373,374,375,376,377,71,378,72,73,379,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,380,381,382,383,384,133,134,135,136,137,138,385,386,387,388,139,140,141,142,143,144,145,146,147,148,149,150,389,390,391,392,393,394,395,396,397,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,398,399,400,401,402,403,404,405,406,205,206,207,208,209,210,407,211,212,213,214,215,216,217,218,219,408,409,410,411,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,412,413,414,415,416,417,418,419,420,421,422,367,423,424,425,426,427,428,429,235,236,430,431,237,432,433,434,435,436,437,438,439,440,441,442,443,444,445,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,446,308,447,448,449,450,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,451,452,453,454,455,327,328,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,481,482,483,484,485,351,486,487,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:206","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[374,376,377,71,73,379,74,185,190,191,226,425,440,289,310,314,315,318,341,345,346,485],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:693","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","type":"CtReturnImpl"},"failures":[250],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[253],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[240,241,243,244,245,246,247,248,249,250,259,260,264,265,353,354,355,356,363,364],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[226],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"cls"}},{"position":"org.easymock.internal.matchers.Find:41","failures":[500],"status":-1,"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,368,369,370,17,18,371,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,372,59,60,61,62,63,64,65,66,67,68,69,70,373,374,375,376,377,71,378,72,73,379,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,380,381,382,383,384,133,134,135,136,137,138,385,386,387,388,139,140,141,142,143,144,145,146,147,148,149,150,389,390,391,392,393,394,395,396,397,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,398,399,400,401,402,403,404,405,406,205,206,207,208,209,210,407,211,212,213,214,215,216,217,218,219,408,409,410,411,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,412,413,414,415,416,417,418,419,420,421,422,367,423,424,425,426,427,428,429,235,236,430,431,237,432,433,434,435,436,437,438,439,440,441,442,443,444,445,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,446,308,447,448,449,450,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,451,452,453,454,455,327,328,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,481,482,483,484,485,351,486,487,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[499],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":241,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":5,"org.easymock.tests2.UsageTest.argumentsOrdered":232,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":319,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":161,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":227,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":211,"org.easymock.tests2.DelegateToTest.testReturnException":303,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":134,"org.easymock.tests.MockingTest.testPartialClassMocking":376,"org.easymock.tests.MockClassControlTest.testToString":401,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":322,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":15,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":445,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":466,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":462,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":27,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":236,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":248,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":92,"org.easymock.tests2.UsageTest.wrongArguments":225,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":340,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":177,"org.easymock.samples.ExampleTest.answerVsDelegate":213,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":371,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":73,"org.easymock.tests2.UsageConstraintsTest.testNull":244,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":432,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":406,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":318,"org.easymock.tests2.CaptureTest.testPrimitive":356,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":96,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":46,"org.easymock.tests.UsageTest.moreThanOneArgument":6,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":237,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":2,"org.easymock.tests.UsageTest.argumentsOrdered":12,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":200,"org.easymock.tests.UsageVarargTest.varargIntAccepted":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":166,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":205,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":412,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":453,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":300,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":419,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":153,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":209,"org.easymock.tests.ReplayStateInvalidUsageTest.times":147,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":334,"org.easymock.tests2.DependencyTest.testClassMocking":428,"org.easymock.tests2.AnswerTest.answer":267,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":249,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":168,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":276,"org.easymock.tests2.CaptureTest.testAnd":353,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":370,"org.easymock.tests2.UsageTest.strictResetToDefault":223,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":440,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":416,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":1,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":76,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":313,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":204,"org.easymock.tests2.DelegateToTest.testDelegate":307,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":42,"org.easymock.tests.LimitationsTest.mockFinalMethod":388,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":132,"org.easymock.tests2.DependencyTest.testClassMockingSupport":429,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":88,"org.easymock.tests2.CaptureTest.testCapture1_2446744":357,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":436,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":40,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":274,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":141,"org.easymock.tests.UsageThrowableTest.throwError":120,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":18,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":398,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":301,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":4,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":498,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":480,"org.easymock.samples.PartialClassMockTest.testGetArea":407,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":142,"org.easymock.tests.MockingTest.testInterfaceMocking":71,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":206,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":467,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":184,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":28,"org.easymock.tests2.UsageTest.niceToStrict":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":151,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":418,"org.easymock.tests2.MockBuilderTest.testCreateMock":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":475,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":337,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":495,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":36,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":314,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":369,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":26,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":59,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":175,"org.easymock.tests.UsageOverloadedMethodTest.overloading":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":477,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":471,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":81,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":254,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":111,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":85,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":491,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":253,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":362,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":50,"org.easymock.tests2.EasyMockSupportClassTest.testAll":459,"org.easymock.tests.MockClassControlTest.testEquals":405,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":382,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":44,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":130,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":275,"org.easymock.tests2.CaptureTest.testCaptureAll":354,"org.easymock.tests.MockNameTest.defaultName":68,"org.easymock.tests2.UsageConstraintsTest.testMatches":255,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":139,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":3,"org.easymock.samples.ExampleTest.voteForRemovals":217,"org.easymock.tests.UsageVarargTest.allKinds":58,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":97,"org.easymock.samples.BasicClassMockTest.testPrintContent":411,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":131,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":126,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":341,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":138,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":297,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":306,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":396,"org.easymock.tests2.UsageConstraintsTest.greaterThan":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":460,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":75,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":443,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":397,"org.easymock.samples.ExampleTest.voteForRemoval":214,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":444,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":285,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":19,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":454,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":435,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":222,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":372,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":423,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":158,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":311,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":457,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":133,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":302,"org.easymock.tests2.CaptureTest.testCaptureFirst":366,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":157,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":312,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":234,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":84,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":107,"org.easymock.tests2.UsageTest.moreThanOneArgument":224,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":287,"org.easymock.tests2.CaptureTest.testCapture2_2446744":365,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":425,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":169,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":57,"org.easymock.tests.GenericTest.testBridgedEquals":384,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":66,"org.easymock.tests.UsageExpectAndReturnTest.longType":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":128,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":309,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":45,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":199,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":262,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":43,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":0,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":22,"org.easymock.tests.UsageCallCountTest.tooManyCalls":67,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":476,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":108,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":339,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":32,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":125,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":482,"org.easymock.tests.MockingTest.testNiceClassMocking":379,"org.easymock.tests.MockingTest.testClassMocking":374,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":60,"org.easymock.tests2.UsageConstraintsTest.testContains":252,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":279,"org.easymock.tests2.UsageConstraintsTest.testFind":243,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":87,"org.easymock.tests.MockTypeTest.fromEasyMockClass":17,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":185,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":283,"org.easymock.tests.UsageExpectAndReturnTest.object":110,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":437,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":338,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":317,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":52,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":182,"org.easymock.tests.UsageTest.exactCallCountByLastCall":13,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":69,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":156,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":14,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":201,"org.easymock.tests2.ConstraintsToStringTest.findToString":500,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":449,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":116,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":47,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":80,"org.easymock.tests.MockClassControlTest.testHashCode":404,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":291,"org.easymock.tests2.EasyMockSupportTest.testVerify":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":469,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":202,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":25,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":78,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":488,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":273,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":350,"org.easymock.tests.UsageVarargTest.varargCharAccepted":51,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":389,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":342,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":174,"org.easymock.tests2.UsageTest.openCallCountByLastCall":228,"org.easymock.tests.DefaultClassInstantiatorTest.object":390,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":320,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":24,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":180,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":489,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":470,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":34,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":123,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":332,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":290,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":441,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":403,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":33,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":117,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":478,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":402,"org.easymock.tests2.UsageTest.resumeIfFailure":233,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":368,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":452,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":136,"org.easymock.tests2.StubTest.stubWithReturnValue":349,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":421,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":109,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":263,"org.easymock.tests2.SerializationTest.testAllMockedMethod":447,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":167,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":496,"org.easymock.samples.SupportTest.voteForRemovals":221,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":380,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":293,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":39,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":173,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":268,"org.easymock.tests.UsageExpectAndThrowTest.object":37,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":16,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":260,"org.easymock.tests2.DelegateToTest.testWrongClass":305,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":194,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":195,"org.easymock.samples.ConstructorCalledMockTest.testTax":408,"org.easymock.tests.UsageStrictMockTest.range":190,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":327,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":316,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":481,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":38,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":420,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":456,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":149,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":11,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":176,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":493,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":198,"org.easymock.tests2.CaptureTest.testCaptureNone":361,"org.easymock.tests.UsageUnorderedTest.message":91,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":490,"org.easymock.tests.UsageVerifyTest.twoReturns":99,"org.easymock.tests.UsageVarargTest.varargByteAccepted":56,"org.easymock.tests2.ThreadingTest.testThreadSafe":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":473,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":64,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":410,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":183,"org.easymock.tests2.CaptureTest.testCapture_2617107":355,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":171,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":95,"org.easymock.tests2.UsageConstraintsTest.any":250,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":146,"org.easymock.tests2.StubTest.stub":348,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":172,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":135,"org.easymock.tests.UsageExpectAndThrowTest.longType":30,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":394,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":145,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":344,"org.easymock.tests2.SerializationTest.testClass":446,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":295,"org.easymock.tests.LimitationsTest.mockNativeMethod":387,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":119,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":383,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":331,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":347,"org.easymock.tests2.NameTest.nameForMocksControl":326,"org.easymock.tests2.MockedExceptionTest.testMockedException":278,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":461,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":10,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":31,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":282,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":378,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":430,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":422,"org.easymock.tests.MockingTest.testNicePartialClassMocking":377,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":434,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":329,"org.easymock.tests2.CaptureTest.testCaptureLast":360,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":89,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":487,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":247,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":261,"org.easymock.tests.MockingTest.testTwoMocks":375,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":352,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":100,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":35,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":231,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":265,"org.easymock.samples.ExampleTest.removeNonExistingDocument":218,"org.easymock.tests.UsageStrictMockTest.differentMethods":191,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":143,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":336,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":292,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":392,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":286,"org.easymock.tests2.MockBuilderTest.testCreateMockString":427,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":399,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":463,"org.easymock.tests.UsageExpectAndThrowTest.floatType":29,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":458,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":270,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":450,"org.easymock.tests.UsageVerifyTest.twoThrows":98,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":472,"org.easymock.samples.ExampleTest.voteAgainstRemoval":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":162,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":196,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":442,"org.easymock.tests.LimitationsTest.privateConstructor":386,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":499,"org.easymock.tests2.UsageConstraintsTest.testNotNull":264,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":127,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":277,"org.easymock.tests2.UsageTest.defaultResetToNice":230,"org.easymock.samples.ExampleTest.voteAgainstRemovals":212,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":163,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":115,"org.easymock.tests.UsageVarargTest.differentLength":53,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":330,"org.easymock.tests2.CallbackTest.callback":289,"org.easymock.tests2.UsageConstraintsTest.equals":242,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":438,"org.easymock.tests.UsageTest.openCallCountByLastCall":9,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":238,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":94,"org.easymock.tests.UsageCallCountTest.tooFewCalls":62,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":484,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":178,"org.easymock.tests.UsageThrowableTest.throwCheckedException":124,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":494,"org.easymock.tests.MockingTest.testStrictClassMocking":373,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":486,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":70,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":483,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":335,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":148,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":351,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":272,"org.easymock.tests.ObjectMethodsTest.testHashCode":181,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":288,"org.easymock.tests2.NameTest.nameForNiceMock":325,"org.easymock.tests2.DependencyTest.testInterfaceMocking":235,"org.easymock.samples.ExampleTest.addDocument":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":474,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":479,"org.easymock.tests2.DelegateToTest.testStubDelegate":304,"org.easymock.tests2.AnswerTest.stubAnswer":271,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":188,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":367,"org.easymock.tests.UsageVarargTest.varargLongAccepted":55,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":192,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":160,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":118,"org.easymock.tests.UsageExpectAndReturnTest.floatType":102,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":448,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":409,"org.easymock.tests.UsageThrowableTest.noUpperLimit":121,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":82,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":258,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":299,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":239,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":451,"org.easymock.tests2.SerializationTest.test":308,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":358,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":492,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":391,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":101,"org.easymock.tests2.UsageConstraintsTest.testSame":245,"org.easymock.samples.SupportTest.addDocument":220,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":485,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":464,"org.easymock.tests.GenericTest.testPackageScope":381,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":155,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":298,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":72,"org.easymock.tests2.NameTest.nameForMock":323,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":112,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":426,"org.easymock.tests2.UsageStrictMockTest.differentMethods":346,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":439,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":104,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":41,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":179,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":77,"org.easymock.tests2.MockedExceptionTest.testRealException":280,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":165,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":164,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":343,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":150,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":93,"org.easymock.tests2.NameTest.nameForStrictMock":324,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":417,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":281,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":433,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":455,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":393,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":259,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":414,"org.easymock.tests2.UsageStrictMockTest.range":345,"org.easymock.tests2.UsageConstraintsTest.lessThan":266,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":159,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":468,"org.easymock.tests2.CaptureTest.testCaptureRightOne":363,"org.easymock.tests2.UsageConstraintsTest.testOr":246,"org.easymock.tests.UsageRangeTest.combination":74,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":431,"org.easymock.tests.UsageTest.wrongArguments":8,"org.easymock.tests2.MockBuilderTest.testWithConstructor":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":465,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":400,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":105,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":152,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":113,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":395,"org.easymock.tests.UsageVarargTest.varargShortAccepted":54,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":65,"org.easymock.tests2.UsageConstraintsTest.cmpTo":251,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":269,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":154,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":229,"org.easymock.tests2.CaptureTest.testCaptureFromStub":364,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":140,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":415,"org.easymock.tests.UsageTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":187,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":63,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":497,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":114,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":189,"org.easymock.tests2.UsageConstraintsTest.constraints":240,"org.easymock.samples.ExampleTest.addAndChangeDocument":219,"org.easymock.tests.UsageStrictMockTest.testVerify":193,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":210,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":186,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":129,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":359,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":207,"org.easymock.tests.LimitationsTest.abstractClass":385,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":106,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":208,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":48,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":315}}]

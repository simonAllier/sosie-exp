[{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[0,0,1,1,2],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:163","failures":[0,1,3,4,5],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:354","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:47","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short.valueOf(((short)(0))))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[6,7,8,9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:42","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[12,13,14,15,16,17],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"failures":[16,18],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,12,13,14,39,15,40,41,17,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[140,141],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[142,143,144,145,146,147,148,149,150,151],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"parameterType"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[12,13,14,15,16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[152],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnValue":"arg","returnedType":"paramType"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[6,7,8,9,10,11],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:206","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[53,84],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[61,153,72,77],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[19,20,21,22,23,24,25,0,0,1,1,26,154,155,156,157,158,159,160,161,162,163,27,29,30,31,32,33,164,165,34,166,167,168,169,170,171,172,173,35,36,37,38,12,13,14,39,15,40,174,41,17,42,43,175,176,44,177,178,179,180,45,46,47,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,48,49,50,51,52,199,53,54,200,201,55,56,57,202,58,203,204,205,59,60,61,62,206,63,64,153,65,66,207,67,68,208,69,70,71,72,73,74,75,76,77,209,210,211,78,212,213,214,2,215,216,79,217,80,218,219,220,221,81,222,82,83,223,224,84,85,86,87,225,88,89,226,90,227,228,229,230,231,232,233,234,235,236,237,238,91,92,93,239,240,241,242,243,244,245,246,94,95,96,97,98,99,100,101,102,10,104,105,106,107,108,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,113,114,316,115,116,317,318,117,118,319,320,321,322,323,324,325,119,120,326,327,328,121,122,132,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,133,351,352,353,134,354,11,355,135,136,137,138,139],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[356,357,358],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"f":"targetField"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[6,7,8,9,10,11],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[59],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[44,69,85],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:169","sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n    java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n} ","type":"CtIfImpl"},"failures":[359,360,361,362,363,364,365,366,367,368],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[19,20,21,22,23,24,25,0,0,1,1,26,154,155,156,157,158,159,161,162,163,29,31,32,164,165,34,166,167,168,169,170,171,172,173,35,37,38,14,39,15,40,174,41,17,42,43,175,176,44,177,179,45,46,47,182,183,184,185,186,187,188,194,195,196,197,198,48,49,50,51,52,199,53,54,200,201,55,56,57,202,58,203,204,205,59,60,61,62,206,63,64,65,66,207,67,68,208,69,70,71,72,73,74,76,77,209,210,78,212,213,214,2,215,79,80,219,220,81,82,83,223,84,86,87,225,226,90,227,228,229,230,231,232,233,234,91,92,93,239,240,241,242,243,369,244,370,246,94,95,96,97,98,99,100,101,104,106,107,247,248,249,254,255,256,257,258,259,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,291,292,294,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,113,114,316,115,116,317,318,117,118,325,119,120,326,327,328,121,122,329,330,331,332,333,334,335,337,338,339,345,346,347,348,349,350,133,351,352,353,134,354,135,136,139],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[0,0,1,1,3,371],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[156],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.Capture:134","failures":[18],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"cached"}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"failures":[163,142,164,143,144,145,146,149,150,372],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[61,153,72,77],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[202],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":59,"org.easymock.tests2.UsageTest.argumentsOrdered":89,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":134,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":56,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":257,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":189,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":85,"org.easymock.tests2.StubTest.stubWithReturnValue":58,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":150,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":278,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":76,"org.easymock.tests2.DelegateToTest.testReturnException":195,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":349,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":255,"org.easymock.tests.MockingTest.testPartialClassMocking":337,"org.easymock.samples.SupportTest.voteForRemovals":19,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":7,"org.easymock.tests.MockClassControlTest.testToString":341,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":244,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":308,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":181,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":350,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":296,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":228,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":212,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":370,"org.easymock.tests.UsageExpectAndThrowTest.object":306,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":73,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":162,"org.easymock.tests2.DelegateToTest.testWrongClass":197,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":143,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":329,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":330,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":64,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":325,"org.easymock.tests2.UsageTest.wrongArguments":224,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":363,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests.UsageStrictMockTest.range":106,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":237,"org.easymock.samples.ExampleTest.answerVsDelegate":21,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":200,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":263,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":166,"org.easymock.tests2.UsageConstraintsTest.testNull":61,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":307,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":176,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":219,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":55,"org.easymock.tests2.CaptureTest.testPrimitive":37,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":327,"org.easymock.tests.UsageTest.moreThanOneArgument":354,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":315,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":137,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":236,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":175,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":333,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":8,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":234,"org.easymock.tests2.CaptureTest.testCaptureNone":39,"org.easymock.tests.UsageUnorderedTest.message":113,"org.easymock.tests.UsageVerifyTest.twoReturns":93,"org.easymock.tests.UsageVarargTest.varargByteAccepted":130,"org.easymock.tests2.ThreadingTest.testThreadSafe":154,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":316,"org.easymock.tests.UsageTest.argumentsOrdered":138,"org.easymock.tests.UsageVarargTest.varargIntAccepted":125,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":111,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":252,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":239,"org.easymock.tests2.CaptureTest.testCapture_2617107":36,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":216,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":148,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":326,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":218,"org.easymock.tests2.UsageConstraintsTest.any":65,"org.easymock.tests2.StubTest.stub":202,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":249,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":243,"org.easymock.tests.UsageExpectAndThrowTest.longType":299,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":256,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":356,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":30,"org.easymock.tests2.SerializationTest.testClass":164,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":188,"org.easymock.tests.LimitationsTest.mockNativeMethod":114,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":159,"org.easymock.tests2.DependencyTest.testClassMocking":140,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":288,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":268,"org.easymock.tests2.AnswerTest.answer":78,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":153,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":193,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":360,"org.easymock.tests2.CaptureTest.testAnd":173,"org.easymock.tests2.UsageTest.strictResetToDefault":83,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":33,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":180,"org.easymock.tests2.MockedExceptionTest.testMockedException":185,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":332,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":352,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":199,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":136,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":318,"org.easymock.tests2.DelegateToTest.testDelegate":48,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":339,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":300,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":42,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":220,"org.easymock.tests.MockingTest.testNicePartialClassMocking":338,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":311,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":177,"org.easymock.tests2.CaptureTest.testCaptureLast":14,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":258,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":246,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":63,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":172,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":324,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":74,"org.easymock.tests.MockingTest.testTwoMocks":336,"org.easymock.tests2.DependencyTest.testClassMockingSupport":141,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":245,"org.easymock.tests2.CaptureTest.testCapture1_2446744":38,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":269,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":309,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":304,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":191,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":88,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":209,"org.easymock.tests.UsageThrowableTest.throwError":94,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":361,"org.easymock.tests.UsageStrictMockTest.differentMethods":107,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":365,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":262,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":156,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":368,"org.easymock.tests2.MockBuilderTest.testCreateMockString":222,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":340,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":335,"org.easymock.tests.UsageExpectAndThrowTest.floatType":298,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":69,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":214,"org.easymock.tests.UsageVerifyTest.twoThrows":92,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":229,"org.easymock.samples.PartialClassMockTest.testGetArea":26,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":240,"org.easymock.samples.ExampleTest.voteAgainstRemoval":23,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":233,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":232,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":46,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":297,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":253,"org.easymock.tests2.UsageTest.niceToStrict":84,"org.easymock.tests2.UsageConstraintsTest.testNotNull":77,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":101,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":184,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":152,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":80,"org.easymock.tests2.UsageTest.defaultResetToNice":225,"org.easymock.tests2.MockBuilderTest.testCreateMock":221,"org.easymock.samples.ExampleTest.voteAgainstRemovals":20,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":284,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":359,"org.easymock.tests2.CallbackTest.callback":34,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":362,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":3,"org.easymock.tests.UsageTest.openCallCountByLastCall":135,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":305,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":6,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":53,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":203,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":348,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":235,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":120,"org.easymock.tests.UsageCallCountTest.tooFewCalls":110,"org.easymock.tests.UsageOverloadedMethodTest.overloading":121,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":292,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":68,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":328,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":280,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":169,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":357,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":67,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":15,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":238,"org.easymock.tests.UsageThrowableTest.throwCheckedException":98,"org.easymock.tests2.EasyMockSupportClassTest.testAll":227,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":313,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":9,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":322,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":192,"org.easymock.tests2.CaptureTest.testCaptureAll":35,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":118,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":171,"org.easymock.tests.MockNameTest.defaultName":319,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":160,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":168,"org.easymock.tests2.UsageConstraintsTest.testMatches":208,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":170,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":215,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":334,"org.easymock.tests.ObjectMethodsTest.testHashCode":251,"org.easymock.samples.ExampleTest.voteForRemovals":24,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":147,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":158,"org.easymock.tests.UsageVarargTest.allKinds":132,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":91,"org.easymock.tests2.DependencyTest.testInterfaceMocking":161,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":145,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":323,"org.easymock.tests2.DelegateToTest.testStubDelegate":196,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":100,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":27,"org.easymock.tests2.AnswerTest.stubAnswer":2,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":366,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":259,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":198,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":104,"org.easymock.tests2.UsageConstraintsTest.greaterThan":70,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":149,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":351,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":47,"org.easymock.tests.UsageVarargTest.varargLongAccepted":129,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":108,"org.easymock.samples.ExampleTest.voteForRemoval":22,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":155,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":287,"org.easymock.tests.UsageExpectAndReturnTest.floatType":271,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":264,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":163,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":178,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":293,"org.easymock.tests.UsageThrowableTest.noUpperLimit":95,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":71,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":345,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":204,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":82,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":12,"org.easymock.tests2.SerializationTest.test":165,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":372,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":358,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":51,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":96,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":270,"org.easymock.tests2.UsageConstraintsTest.testSame":62,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":254,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":194,"org.easymock.tests2.CaptureTest.testCaptureFirst":17,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":52,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":90,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":295,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":276,"org.easymock.tests.GenericTest.testPackageScope":267,"org.easymock.tests2.UsageTest.moreThanOneArgument":223,"org.easymock.tests2.CaptureTest.testCapture2_2446744":41,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":157,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":317,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":81,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":367,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":131,"org.easymock.tests2.NameTest.nameForMock":211,"org.easymock.tests.UsageExpectAndReturnTest.longType":272,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":320,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":49,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":314,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":281,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":231,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":75,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":312,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":5,"org.easymock.tests2.UsageStrictMockTest.differentMethods":32,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":331,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":248,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":273,"org.easymock.tests.UsageCallCountTest.tooManyCalls":112,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":310,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":353,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":266,"org.easymock.tests2.MockedExceptionTest.testRealException":187,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":277,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":265,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":151,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":301,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":99,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":119,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":167,"org.easymock.tests2.UsageConstraintsTest.testContains":207,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":186,"org.easymock.tests2.UsageConstraintsTest.testFind":60,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":122,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":182,"org.easymock.tests.MockTypeTest.fromEasyMockClass":261,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":44,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":102,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":183,"org.easymock.tests.UsageExpectAndReturnTest.object":279,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":72,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":179,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":79,"org.easymock.tests2.UsageStrictMockTest.range":31,"org.easymock.tests2.UsageConstraintsTest.lessThan":210,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":201,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":127,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":144,"org.easymock.tests.UsageTest.exactCallCountByLastCall":139,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":117,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":50,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":146,"org.easymock.tests2.CaptureTest.testCaptureRightOne":40,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":369,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":115,"org.easymock.tests2.UsageConstraintsTest.testOr":206,"org.easymock.tests.UsageRangeTest.combination":133,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":142,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":285,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":43,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":123,"org.easymock.tests.UsageTest.wrongArguments":355,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":291,"org.easymock.tests2.MockBuilderTest.testWithConstructor":4,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":364,"org.easymock.tests.MockClassControlTest.testHashCode":344,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":274,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":282,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":116,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":347,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":289,"org.easymock.tests.UsageVarargTest.varargShortAccepted":128,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":190,"org.easymock.tests2.UsageConstraintsTest.cmpTo":66,"org.easymock.tests.UsageVarargTest.varargCharAccepted":126,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":213,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":28,"org.easymock.tests2.UsageTest.openCallCountByLastCall":86,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":87,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":57,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":346,"org.easymock.tests2.CaptureTest.testCaptureFromStub":174,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":217,"org.easymock.tests.UsageTest.unexpectedCallWithArray":11,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":250,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":303,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":10,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":97,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":371,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":283,"org.easymock.tests2.CaptureTest.testCapture":16,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":343,"org.easymock.tests2.UsageConstraintsTest.constraints":205,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":45,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":105,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":302,"org.easymock.samples.ExampleTest.addAndChangeDocument":25,"org.easymock.tests.CapturesMatcherTest.test":18,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":286,"org.easymock.tests.UsageStrictMockTest.testVerify":109,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":247,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":230,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":321,"org.easymock.tests2.UsageTest.resumeIfFailure":226,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":13,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":241,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":275,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":260,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":294,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":242,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":54,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":124}}]

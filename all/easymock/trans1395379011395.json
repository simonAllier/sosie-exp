[{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[0,1],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"failures":[2,3,4,5,6,7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:116","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,0,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,6,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,288,289,290,291,292,293,294,7,295,296,297,298,299,300],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:51","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[10,11,12,13,14,16,17,18,18,19,19,21,25,26,27,28,29,30,31,32,33,36,38,39,0,41,43,44,45,46,47,48,49,50,51,52,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,72,74,75,76,77,78,79,80,81,82,83,301,88,89,90,302,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,303,304,135,136,137,139,140,142,143,145,147,148,149,151,153,154,155,158,159,160,161,162,163,305,306,307,308,168,169,170,171,172,173,174,175,309,310,176,177,178,179,180,181,182,183,186,188,189,311,312,313,191,192,193,194,195,196,197,204,314,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,315,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,316,317,318,319,320,252,253,259,260,261,262,263,264,265,266,278,279,280,281,282,283,284,285,286,287,289,321,322,323,324,325,290,326,291,292,293,294,296,297,300],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[36,38,39,327,2,328,329,330,331,149,168,169,170,5,332,333,334,310,186,188,189,335,336,315,229,250,294],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:43","sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:55","sourceCode":"return org.easymock.internal.matchers.Equals.matches(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[110,111],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[337,338],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[2,6],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[339,116,121,133],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[79,80,81,82,106,191,192,193,194,195,196,253,261],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[340],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"parameterType","type":"parameterType"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[341],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[28,342,343,344],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[345,346,347],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:127","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[0,41,42],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stream":"stream"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[108],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"suffix"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[110,114,348],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:94","sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","type":"CtReturnImpl"},"failures":[10,11,12,13,14,16,17,18,18,19,19,21,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,0,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,301,88,89,90,302,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,348,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,349,134,303,304,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,305,306,307,308,164,165,166,167,168,169,170,171,172,173,174,175,309,334,310,176,177,178,179,180,181,182,183,184,6,186,187,188,189,190,311,312,313,191,192,193,194,195,196,197,204,314,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,335,227,228,336,315,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,316,317,318,319,320,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,277,278,279,280,281,282,283,284,350,285,286,287,289,321,322,323,324,325,290,326,291,292,293,294,7,295,296,297,298,299,300],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:233","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[334,310,324],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[9,10,11,13,14,15,16,17,20,22,23,24,34,35,36,37,38,39,40,42,43,52,53,56,57,58,59,64,65,77,78,95,101,102,103,104,105,348,117,129,130,349,351,352,353,135,139,140,145,150,152,156,157,177,184,185,6,186,187,188,189,190,354,355,197,198,199,200,202,203,205,250,317,318,261,262,267,268,269,270,271,272,273,274,275,276,277,278,289,356,357,358,359,360,295,298,299],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:37","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:41","sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[328],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[2,3,4,5,6,7],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[2,3,123,5,361],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:290","sourceCode":"return ","type":"CtReturnImpl"},"failures":[9,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,0,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,74,75,76,77,78,81,83,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,348,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,349,351,352,353,134,135,136,137,139,140,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,6,186,187,188,189,190,354,195,355,197,198,199,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,315,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,317,318,252,253,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,285,286,287,289,290,326,291,292,293,294,295,296,297,298,299,300],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[301],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:52","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[9,10,11,12,13,14,15,16,17,20,24,25,26,27,28,29,30,362,31,32,33,34,35,36,37,38,39,40,41,43,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,77,78,79,80,81,82,83,363,84,85,86,87,301,88,89,90,302,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,348,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,349,351,352,353,134,303,304,135,136,137,138,147,148,149,150,151,152,153,154,155,156,157,158,159,305,306,307,308,164,165,166,167,168,169,170,171,172,173,174,175,309,334,310,176,177,178,179,180,181,182,183,184,185,6,186,187,188,189,190,354,311,312,313,364,365,191,192,193,194,195,196,366,367,368,369,355,197,198,199,200,201,202,203,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,335,227,228,336,315,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,316,317,318,319,320,252,253,370,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,350,321,322,323,324,325,290,326,291,292,293,294,7,295,296,297,298,299,300],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[18,18,19,19,21,22,23,33,0,42,44,45,46,47,49,50,65,66,68,69,70,71,72,73,74,75,76,371,81,138,139,372,140,141,142,143,144,145,146,160,161,162,163,373,374,375,204,205,314,251,350,285,286,287,376,377,378,379,289],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:337","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[358,324],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":110,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":293,"org.easymock.tests2.UsageTest.argumentsOrdered":157,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":102,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":363,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":194,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":152,"org.easymock.tests2.StubTest.stubWithReturnValue":106,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":215,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":20,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":130,"org.easymock.tests2.SerializationTest.testAllMockedMethod":42,"org.easymock.tests2.DelegateToTest.testReturnException":88,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":324,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":192,"org.easymock.tests.MockingTest.testPartialClassMocking":285,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":3,"org.easymock.samples.SupportTest.voteForRemovals":10,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":337,"org.easymock.tests.MockClassControlTest.testToString":377,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":309,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":371,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":242,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":325,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":230,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":161,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":303,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":343,"org.easymock.tests.UsageExpectAndThrowTest.object":240,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":32,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":127,"org.easymock.tests2.DelegateToTest.testWrongClass":90,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":278,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":279,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":116,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":259,"org.easymock.tests2.UsageTest.wrongArguments":150,"org.easymock.samples.ConstructorCalledMockTest.testTax":18,"org.easymock.tests.UsageStrictMockTest.range":188,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":166,"org.easymock.samples.ExampleTest.answerVsDelegate":12,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":99,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":375,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":44,"org.easymock.tests2.UsageConstraintsTest.testNull":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":241,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":68,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":101,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":142,"org.easymock.tests2.CaptureTest.testPrimitive":54,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":263,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":298,"org.easymock.tests.UsageTest.moreThanOneArgument":294,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":249,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":67,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":165,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":282,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":4,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":308,"org.easymock.tests2.CaptureTest.testCaptureNone":59,"org.easymock.tests.UsageUnorderedTest.message":250,"org.easymock.tests.UsageVerifyTest.twoReturns":170,"org.easymock.tests.UsageVarargTest.varargByteAccepted":275,"org.easymock.tests2.ThreadingTest.testThreadSafe":25,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":316,"org.easymock.tests.UsageTest.argumentsOrdered":299,"org.easymock.tests.UsageVarargTest.varargIntAccepted":269,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":200,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":365,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":22,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":331,"org.easymock.tests2.CaptureTest.testCapture_2617107":53,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":171,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":138,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":262,"org.easymock.tests2.UsageConstraintsTest.any":117,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":141,"org.easymock.tests2.StubTest.stub":105,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":313,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":175,"org.easymock.tests.UsageExpectAndThrowTest.longType":233,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":193,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":346,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":37,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":83,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests.LimitationsTest.mockNativeMethod":251,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":30,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":314,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":225,"org.easymock.tests2.AnswerTest.answer":134,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":359,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":87,"org.easymock.tests2.CaptureTest.testAnd":51,"org.easymock.tests2.UsageTest.strictResetToDefault":148,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":73,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":40,"org.easymock.tests2.NameTest.nameForMocksControl":353,"org.easymock.tests2.MockedExceptionTest.testMockedException":80,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":281,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":291,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":96,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":297,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":320,"org.easymock.tests2.DelegateToTest.testDelegate":91,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":341,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":287,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":234,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":65,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":143,"org.easymock.tests.MockingTest.testNicePartialClassMocking":286,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":245,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":70,"org.easymock.tests2.CaptureTest.testCaptureLast":58,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":195,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":310,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":50,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":115,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":258,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":128,"org.easymock.tests.MockingTest.testTwoMocks":350,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":334,"org.easymock.tests2.CaptureTest.testCapture1_2446744":55,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":206,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":243,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":238,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":85,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":156,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":132,"org.easymock.tests.UsageThrowableTest.throwError":176,"org.easymock.tests.UsageStrictMockTest.differentMethods":189,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":367,"org.easymock.tests2.ConstraintsToStringTest.andToString":330,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":27,"org.easymock.tests2.MockBuilderTest.testCreateMockString":146,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":284,"org.easymock.tests.UsageExpectAndThrowTest.floatType":232,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":123,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":135,"org.easymock.tests.UsageVerifyTest.twoThrows":169,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":162,"org.easymock.samples.PartialClassMockTest.testGetArea":21,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":172,"org.easymock.samples.ExampleTest.voteAgainstRemoval":14,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":307,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":306,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":75,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":373,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":231,"org.easymock.tests2.UsageTest.niceToStrict":151,"org.easymock.tests2.UsageConstraintsTest.testNotNull":131,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":79,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":183,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":140,"org.easymock.tests2.MockBuilderTest.testCreateMock":144,"org.easymock.tests2.UsageTest.defaultResetToNice":155,"org.easymock.samples.ExampleTest.voteAgainstRemovals":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":358,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":221,"org.easymock.tests.UsageVarargTest.differentLength":272,"org.easymock.tests2.CallbackTest.callback":43,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":361,"org.easymock.tests.UsageTest.openCallCountByLastCall":296,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":239,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":2,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":97,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":107,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":323,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":355,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":261,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":164,"org.easymock.tests.UsageCallCountTest.tooFewCalls":198,"org.easymock.tests.UsageOverloadedMethodTest.overloading":265,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":228,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":121,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":264,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":217,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":47,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":120,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":60,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":167,"org.easymock.tests.UsageThrowableTest.throwCheckedException":180,"org.easymock.tests2.EasyMockSupportClassTest.testAll":160,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":205,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":247,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":5,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":256,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":86,"org.easymock.tests2.CaptureTest.testCaptureAll":52,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":253,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":49,"org.easymock.tests.MockNameTest.defaultName":370,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":362,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":46,"org.easymock.tests2.UsageConstraintsTest.testMatches":122,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":48,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":137,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":283,"org.easymock.tests2.CompareToTest.testGreateOrEqual":339,"org.easymock.samples.ExampleTest.voteForRemovals":16,"org.easymock.tests2.NameTest.nameForNiceMock":352,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":29,"org.easymock.tests.UsageVarargTest.allKinds":277,"org.easymock.tests2.ConstraintsToStringTest.notNullToString":8,"org.easymock.tests2.DependencyTest.testInterfaceMocking":31,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":257,"org.easymock.samples.BasicClassMockTest.testPrintContent":23,"org.easymock.samples.ExampleTest.addDocument":15,"org.easymock.tests2.DelegateToTest.testStubDelegate":89,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":182,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":34,"org.easymock.tests2.AnswerTest.stubAnswer":136,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":302,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":196,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":186,"org.easymock.tests2.UsageConstraintsTest.greaterThan":124,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":326,"org.easymock.tests.UsageVarargTest.varargLongAccepted":274,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":76,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":190,"org.easymock.samples.ExampleTest.voteForRemoval":13,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":26,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":224,"org.easymock.tests.UsageExpectAndReturnTest.floatType":208,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":368,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":71,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":33,"org.easymock.tests2.ConstraintsToStringTest.orToString":327,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":19,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":336,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":125,"org.easymock.tests.UsageThrowableTest.noUpperLimit":177,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":289,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":108,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":147,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":56,"org.easymock.tests2.SerializationTest.test":41,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":1,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":94,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":178,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":207,"org.easymock.tests2.UsageConstraintsTest.testSame":113,"org.easymock.samples.SupportTest.addDocument":9,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":191,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":301,"org.easymock.tests2.CaptureTest.testCaptureFirst":64,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":95,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":159,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":344,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":229,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":213,"org.easymock.tests.GenericTest.testPackageScope":204,"org.easymock.tests2.CaptureTest.testCapture2_2446744":63,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":28,"org.easymock.tests2.UsageTest.moreThanOneArgument":149,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":360,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":145,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":276,"org.easymock.tests.GenericTest.testBridgedEquals":338,"org.easymock.tests2.NameTest.nameForMock":349,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":202,"org.easymock.tests.UsageExpectAndReturnTest.longType":209,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":254,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":92,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":248,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":218,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":305,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":129,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":246,"org.easymock.tests2.UsageStrictMockTest.differentMethods":39,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":312,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":280,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":210,"org.easymock.tests.UsageCallCountTest.tooManyCalls":203,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":347,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":244,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":292,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":197,"org.easymock.tests2.MockedExceptionTest.testRealException":82,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":369,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":214,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":332,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":235,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":260,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":181,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":45,"org.easymock.tests2.NameTest.nameForStrictMock":351,"org.easymock.tests2.UsageConstraintsTest.testContains":119,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":81,"org.easymock.tests2.UsageConstraintsTest.testFind":111,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":266,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":77,"org.easymock.tests.MockTypeTest.fromEasyMockClass":366,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":69,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":78,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":184,"org.easymock.tests.UsageExpectAndReturnTest.object":216,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":126,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":72,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":139,"org.easymock.tests2.UsageStrictMockTest.range":38,"org.easymock.tests2.UsageConstraintsTest.lessThan":133,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":100,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":271,"org.easymock.tests.UsageTest.exactCallCountByLastCall":300,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":357,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":93,"org.easymock.tests2.CaptureTest.testCaptureRightOne":61,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":342,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":317,"org.easymock.tests2.UsageConstraintsTest.testOr":114,"org.easymock.tests.UsageRangeTest.combination":290,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":267,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":222,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":66,"org.easymock.tests.UsageTest.wrongArguments":295,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":227,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":376,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":211,"org.easymock.tests2.EasyMockSupportTest.testVerify":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":356,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":219,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":345,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":318,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":322,"org.easymock.tests.UsageVarargTest.varargShortAccepted":273,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":226,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":201,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":84,"org.easymock.tests2.UsageConstraintsTest.cmpTo":118,"org.easymock.tests.UsageVarargTest.varargCharAccepted":270,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":304,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":35,"org.easymock.tests2.UsageTest.openCallCountByLastCall":153,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":154,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":103,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":321,"org.easymock.tests2.CaptureTest.testCaptureFromStub":62,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":372,"org.easymock.tests.UsageTest.unexpectedCallWithArray":7,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":364,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":333,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":237,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":179,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":199,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":340,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":220,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":379,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":74,"org.easymock.tests2.UsageConstraintsTest.constraints":109,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":187,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":236,"org.easymock.samples.ExampleTest.addAndChangeDocument":17,"org.easymock.tests2.ConstraintsToStringTest.notToString":328,"org.easymock.tests.CapturesMatcherTest.test":288,"org.easymock.tests.UsageStrictMockTest.testVerify":354,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":223,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":311,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":24,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":378,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":163,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":185,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":255,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":57,"org.easymock.tests2.UsageTest.resumeIfFailure":158,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":173,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":374,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":212,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":315,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":174,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":98}}]

[{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:85","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"replace","transplant":{"sourceCode":"return new java.lang.Class[]{ java.lang.Class<?> }","position":"org.easymock.internal.BridgeMethodResolver:378","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isInterface()) {\n    return new java.lang.Class[]{ java.lang.Class<?> };\n} ","position":"org.easymock.internal.BridgeMethodResolver:377","type":"CtIfImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:89","type":"CtInvocationImpl"},"status":-2},{"failures":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:91","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"stack":"stack"},"name":"add","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1318","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>))","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"method","equalsMethod":"result"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","position":"org.easymock.internal.ClassProxyFactory:189","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl"},"status":-2},{"failures":[68,69,70,71,72,73,33,74,75,76,77,78,79,80],"variableMapping":{"errorMessage":"result","matches":"i"},"name":"replace","transplant":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","position":"org.easymock.EasyMock:1482","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","position":"org.easymock.internal.matchers.InstanceOf:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"status":-2},{"failures":[81,82],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:198","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","position":"org.easymock.internal.ObjectMethodsFilter:83","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1433","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:254","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:746","type":"CtInvocationImpl"},"status":-2},{"failures":[70,83,84,85,86,33,74,75,87,78,88],"binaryOperator":"(this.java.lang.Object[].int) != (java.lang.Object[].int)","name":"removeConditional","position":"org.easymock.internal.Invocation:114","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"count":"result","maximum":"result","minimum":"result"},"name":"add","transplant":{"sourceCode":"return (int <= int) && (int <= int)","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.LogicalOperator:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"proxy":"proxy"},"name":"add","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:190","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"cls":"mockClass","type":"mockClass"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:184","type":"CtAssignmentImpl"},"status":-2},{"failures":[89],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    if (org.easymock.internal.Injection != null) {\n        throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n    } \n    org.easymock.internal.Injection = org.easymock.internal.Injection;\n} ","position":"org.easymock.internal.Injector:231","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.EasyMockSupport:530","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"args":"args","org.easymock.internal.Invocation.NO_ARGS":"args"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[][((java.lang.Object[].int) - 1)]) == null) {\n    return java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:56","type":"CtIfImpl"},"status":-2},{"failures":[90,90,91,91,92,93,94,95,96],"variableMapping":{"constructorArgs":"constructorArgs"},"name":"add","transplant":{"sourceCode":"if ((this.org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:163","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = (java.util.Set<java.lang.reflect.Method>) == null ? new java.lang.reflect.Method[0] : java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.MockBuilder:201","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"args":"newArgs","org.easymock.internal.Invocation.NO_ARGS":"newArgs"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:65","type":"CtReturnImpl"},"status":0},{"failures":[],"binaryOperator":"(\"ObjectStreamClass.\" + java.lang.String)","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:183","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:252","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getAllDeclaredMethods(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:78","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer)","position":"org.easymock.internal.RecordState:62","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:326","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"actual","o":"actual"},"name":"replace","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Equals:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Null:35","type":"CtReturnImpl"},"status":-2},{"failures":[54],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"status":-1},{"failures":[97,98,99,100,101,102,103,104,105],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:261","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField())","position":"org.easymock.internal.Injector:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:46","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1928","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"int < (java.lang.Class<?>.getInterfaces().int)","name":"conditionalBoundary","position":"org.easymock.internal.BridgeMethodResolver:382","type":"mutation","status":0},{"failures":[106,107,108,109],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","position":"org.easymock.internal.RecordState:220","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"args":"args","proxy":"proxy","this":"this"},"name":"replace","transplant":{"sourceCode":"return java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","position":"org.easymock.internal.ObjectMethodsFilter:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:82","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","position":"org.easymock.internal.MocksControl:232","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1433","type":"CtReturnImpl"},"status":-2},{"failures":[110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,129,130,131,132,133,134,135,136,137,138,139,32,140,141,142,143,144,145,146,147,148,149,73,150,151,152,153,154,86,33,74,155,156,157,158,159,160,35,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,48,49,50,51,52,53,54,55,57,186,187,188,189,190,191,192,193,58,59,194,195,60,61,196,197,198,199,200,201,45,202,203,204,205,206,207,208,80,209,92,210,211,212,213,62,63,64,65,214,215,216,217,218,66,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,47,95,251,252,253,254,255,256,257,258,259,260,261,262],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:79","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{"value":"obj"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n    return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:88","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"name","key":"name"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:117","type":"CtThrowImpl"},"status":-2},{"failures":[263],"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","position":"org.easymock.internal.BridgeMethodResolver:409","type":"mutation","status":-1},{"failures":[99],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:174","type":"CtInvocationImpl"},"status":0},{"failures":[57],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"parameterTypes":"paramTypes","i":"i"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.ConstructorArgs:56","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.Results:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (this.org.easymock.internal.Invocation.equals(org.easymock.internal.ExpectedInvocation.org.easymock.internal.Invocation)) && ((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","position":"org.easymock.internal.ExpectedInvocation:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"isA(\" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.matchers.InstanceOf:40","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:206","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.Mock","position":"org.easymock.internal.Injection:59","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"support":"support"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1988","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1725","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","mock":"mock"},"name":"add","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).reset()","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","position":"org.easymock.EasyMock:2067","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return boolean","position":"org.easymock.internal.ErrorMessage:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredField(java.lang.String);\n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n    return null;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return null;\n}","position":"org.easymock.internal.Injector:204","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getDeclaredField(java.lang.String)","position":"org.easymock.internal.Injector:205","type":"CtReturnImpl"},"status":-2},{"failures":[90,91,121,140,141,142,263,43,228,229,232,233,264,265,245],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.DefaultClassInstantiator:162","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]))","position":"org.easymock.internal.ClassProxyFactory:101","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"binaryOperator":"(java.lang.Object instanceof long[])","name":"removeConditional","position":"org.easymock.internal.matchers.ArrayEquals:48","type":"mutation","status":0},{"failures":[266],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","position":"org.easymock.internal.matchers.Or:49","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:365","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","position":"org.easymock.internal.matchers.Or:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","position":"org.easymock.EasyMock:1939","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.IAnswer<?>.answer()","position":"org.easymock.internal.Result:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new (\"<=\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int <= 0;\n    }\n}","position":"org.easymock.LogicalOperator:30","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","position":"org.easymock.internal.LastControl:104","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.matchers.Compare:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","position":"org.easymock.internal.Injector:70","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.Injector:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1647","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1052","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:185","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1803","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.Invocation:210","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-5701204283180444317L","position":"org.easymock.internal.matchers.Or:29","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1235","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"bridgeMethod"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:73","type":"CtReturnImpl"},"status":0},{"failures":[245],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResults>()","position":"org.easymock.internal.UnorderedBehavior:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1790","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"\" + (int)","position":"org.easymock.internal.Range:66","type":"CtReturnImpl"},"status":-2},{"failures":[188],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:41","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","position":"org.easymock.internal.RecordState:310","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType();\n    if (java.lang.Class<?>.isPrimitive()) {\n        throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n    } \n    return ;\n} ","position":"org.easymock.internal.RecordState:243","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.Invocation:212","type":"CtLocalVariableImpl"},"status":-2},{"failures":[267,73,150,151,191,198,199,268,80,209,212,269,252,256,257,259],"variableMapping":{"endPosition":"position","behaviorLists":"behaviorLists"},"name":"replace","transplant":{"sourceCode":"if (int == (this.java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:91","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:85","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:88","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"status":-2},{"failures":[68,72,270,271,272,273],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-1},{"failures":[49],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1318","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException)","position":"org.easymock.internal.DefaultClassInstantiator:47","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:309","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1384","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":36,"org.easymock.tests2.MockedExceptionTest.testRealException":46,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":149,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":244,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":148,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":27,"org.easymock.tests.UsageVarargTest.varargIntAccepted":131,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":128,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":184,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":95,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":110,"org.easymock.tests2.UsageConstraintsTest.testContains":187,"org.easymock.tests2.UsageConstraintsTest.testFind":50,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":89,"org.easymock.tests2.StubTest.stubWithReturnValue":47,"org.easymock.tests.UsageVarargTest.allKinds":138,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":214,"org.easymock.tests2.CaptureTest.testCaptureAll":63,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":158,"org.easymock.samples.ExampleTest.addAndChangeDocument":120,"org.easymock.tests.UsageVarargTest.varargCharAccepted":132,"org.easymock.tests2.CaptureTest.testCaptureFromStub":67,"org.easymock.tests.UsageVerifyTest.twoThrows":33,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":126,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":133,"org.easymock.tests2.DelegateToTest.testReturnException":204,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":96,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":199,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":191,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":261,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":207,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":263,"org.easymock.tests2.CaptureTest.testAnd":62,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":20,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":218,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":24,"org.easymock.tests2.UsageConstraintsTest.testMatches":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":102,"org.easymock.tests2.UsageConstraintsTest.testNull":51,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":227,"org.easymock.tests2.EasyMockSupportClassTest.testAll":246,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":256,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":28,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":177,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":213,"org.easymock.tests.UsageThrowableTest.throwError":34,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":124,"org.easymock.tests2.UsageConstraintsTest.greaterThan":192,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":129,"org.easymock.samples.SupportTest.addDocument":112,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":127,"org.easymock.tests2.StubTest.stub":250,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":84,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":146,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":104,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":58,"org.easymock.tests.UsageExpectAndReturnTest.object":174,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":183,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":105,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":137,"org.easymock.tests.UsageExpectAndThrowTest.object":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":8,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":270,"org.easymock.tests.UsageVarargTest.varargByteAccepted":136,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":19,"org.easymock.tests.UsageTest.wrongArguments":69,"org.easymock.samples.ExampleTest.voteAgainstRemoval":117,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":39,"org.easymock.tests.UsageVarargTest.varargShortAccepted":134,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":23,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":271,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":272,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":45,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":145,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":111,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":238,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":81,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":222,"org.easymock.tests2.SerializationTest.testAllMockedMethod":211,"org.easymock.samples.ExampleTest.voteAgainstRemovals":114,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":268,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":106,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":153,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":2,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":98,"org.easymock.tests.LimitationsTest.mockNativeMethod":161,"org.easymock.tests2.DelegateToTest.testStubDelegate":205,"org.easymock.tests.UsageUnorderedTest.message":75,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":107,"org.easymock.samples.ExampleTest.answerVsDelegate":115,"org.easymock.samples.ExampleTest.voteForRemoval":116,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":173,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":157,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":224,"org.easymock.tests.UsageVerifyTest.twoReturns":74,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":21,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":168,"org.easymock.tests2.DependencyTest.testInterfaceMocking":234,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":251,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":7,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":99,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":254,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":54,"org.easymock.tests2.CaptureTest.testCaptureRightOne":66,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":170,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":155,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":43,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":243,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":152,"org.easymock.tests2.UsageConstraintsTest.cmpTo":186,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":175,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":229,"org.easymock.tests2.MockedExceptionTest.testMockedException":44,"org.easymock.tests.UsageThrowableTest.throwCheckedException":37,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":31,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":195,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":86,"org.easymock.samples.PartialClassMockTest.testGetArea":121,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":35,"org.easymock.samples.ExampleTest.voteForRemovals":119,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":32,"org.easymock.samples.ConstructorCalledMockTest.testTax":90,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":189,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":0,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":9,"org.easymock.tests2.UsageTest.argumentsOrdered":79,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":242,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":4,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":226,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":169,"org.easymock.tests2.AnswerTest.answer":223,"org.easymock.tests.MockingTest.testNicePartialClassMocking":141,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":83,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":165,"org.easymock.tests2.UsageConstraintsTest.any":57,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":172,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":147,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":85,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":260,"org.easymock.tests.UsageExpectAndThrowTest.longType":15,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":29,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":203,"org.easymock.tests2.CallbackTest.callback":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":248,"org.easymock.tests.UsageTest.argumentsOrdered":71,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":49,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":237,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":188,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":182,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":1,"org.easymock.tests2.CaptureTest.testCaptureNone":217,"org.easymock.tests2.SerializationTest.test":210,"org.easymock.tests.UsageExpectAndReturnTest.longType":167,"org.easymock.tests2.SerializationTest.testClass":92,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":103,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":215,"org.easymock.tests2.CaptureTest.testCaptureFirst":219,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":59,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":122,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":6,"org.easymock.tests2.UsageTest.niceToStrict":198,"org.easymock.tests2.EasyMockSupportTest.testVerify":262,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":100,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":267,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":17,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":41,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":25,"org.easymock.tests2.UsageTest.strictResetToDefault":197,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":76,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":181,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":245,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":269,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":3,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":12,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":55,"org.easymock.tests2.ConstraintsToStringTest.orToString":266,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":171,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":231,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":264,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":130,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":193,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":241,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":239,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":11,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":142,"org.easymock.tests2.UsageConstraintsTest.testOr":53,"org.easymock.tests2.DelegateToTest.testDelegate":206,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":221,"org.easymock.tests2.UsageConstraintsTest.testNotNull":60,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":208,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":201,"org.easymock.tests2.CaptureTest.testCapture_2617107":64,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":40,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":159,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":176,"org.easymock.tests2.ThreadingTest.testThreadSafe":220,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":42,"org.easymock.tests.UsageThrowableTest.noUpperLimit":160,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":228,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":230,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":259,"org.easymock.tests.UsageExpectAndReturnTest.floatType":166,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":252,"org.easymock.tests2.UsageTest.wrongArguments":77,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":56,"org.easymock.tests2.UsageConstraintsTest.testSame":52,"org.easymock.tests2.UsageTest.resumeIfFailure":200,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":93,"org.easymock.tests.UsageOverloadedMethodTest.overloading":139,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":232,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":94,"org.easymock.samples.SupportTest.voteForRemovals":113,"org.easymock.tests.UsageRangeTest.combination":151,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":38,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":91,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":61,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":163,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":18,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":154,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":194,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":88,"org.easymock.tests2.CaptureTest.testPrimitive":65,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":240,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":178,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":26,"org.easymock.samples.BasicClassMockTest.testPrintContent":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":143,"org.easymock.tests.UsageExpectAndThrowTest.floatType":14,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":179,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":202,"org.easymock.tests2.UsageStrictMockTest.differentMethods":209,"org.easymock.tests2.AnswerTest.stubAnswer":225,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":253,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":257,"org.easymock.tests2.CaptureTest.testCaptureLast":216,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":82,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":13,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":156,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":235,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":247,"org.easymock.tests.UsageStrictMockTest.range":73,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":5,"org.easymock.tests.InvocationTest.testEquals":87,"org.easymock.tests.UsageTest.unexpectedCallWithArray":68,"org.easymock.tests.MockingTest.testPartialClassMocking":140,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":180,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":78,"org.easymock.tests2.UsageConstraintsTest.constraints":48,"org.easymock.samples.ExampleTest.addDocument":118,"org.easymock.tests2.UsageConstraintsTest.lessThan":196,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":70,"org.easymock.tests.UsageVarargTest.varargLongAccepted":135,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":265,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":72,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":30,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":249,"org.easymock.tests2.UsageStrictMockTest.range":80,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":233,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":108,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":109,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":144,"org.easymock.tests.UsageStrictMockTest.differentMethods":150,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":255,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":185,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":236,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":101,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":16,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":97,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":164,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":10,"org.easymock.tests.GenericTest.testPackageScope":162}}]

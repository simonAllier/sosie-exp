[{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((java.util.Comparator<? super T>) + \"(\") + (T))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[57,58,0,59],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mockedMethods":"mockedMethods"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[60,61],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:40","failures":[62],"status":-1,"binaryOperator":"(int >= 0)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[63,64,65,66],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[67,68,69,70,71,72,73,74,75,76,77],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[78],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1672","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[79,80,81,82,83,84,85,86,87,88,89,90,91,92],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[93],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[94,95,64,96,97,72,98,73,99,100,101,65,102,77,103,104,105,106,106,107,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,92],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"this.org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[67,130,68,131,132,133,134,135,136,69,95,137,138,139],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"capture"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[140,65],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:94","sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.addAll(java.util.Stack<org.easymock.IArgumentMatcher>.subList(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int), java.util.Stack<org.easymock.IArgumentMatcher>.size()))","type":"CtInvocationImpl"},"failures":[67,68,69,70,71,72,98,73,75,76,77,103],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[141,142,143,144],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"propertyFileName"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[144,145],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[57,58,0,59],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"failures":[98],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[1,146,147,148,149,150,47,48,49,151],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[152,26,27,153,154,155,156,157,158,159,160,161],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.MocksControl:223","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"failures":[139],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:54","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[162,163,164],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:135","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","type":"CtLocalVariableImpl"},"failures":[57,0,165,166,1,167,168,2,3,169,146,4,147,170,171,172,5,173,174,6,175,7,176,8,9,177,178,10,179,180,11,181,182,12,13,183,184,14,185,186,187,188,189,190,191,192,193,148,194,195,196,197,198,15,16,17,18,19,199,20,200,21,22,201,202,23,24,25,152,26,27,106,106,107,107,203,28,29,204,149,30,31,32,33,34,35,36,37,38,39,40,41,205,42,43,206,44,45,46,47,48,49,50,51,52,53,54,55,207,208,209,56],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[210],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"position":"org.easymock.ConstructorArgs:50","failures":[57,146,170,93,171,172,5,173,174,6,175,7,176,8,9,177,178,10,179,180,11,181,182,12,13,183,184,14,185,186,187,211,212,213,195,214,215,216,217,106,107],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:60","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:171","sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[1,146,147,148,149,150,47,48,49,151],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[71,73,75],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[79,80,81,88,89,91],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[218],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[79,80,81,88,89,91],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[219,220,221,222],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[223,224,225,226,227,228,229,230,231,232,233,234,235,189,196,197,198,16,201,23,70,236,237,238,239,240,241,81,82,85,86,87,242,243,244,245,246,247,248,249,250,151,251,252,90,253,91,254,255,256],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[257,220],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[258,259],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1177","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[260,105,239,240,261,245,262,263,78,264,265,247,248,92,255,256],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":71,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":241,"org.easymock.tests2.UsageTest.argumentsOrdered":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":159,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":226,"org.easymock.tests2.StubTest.stubWithReturnValue":94,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":213,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":66,"org.easymock.tests2.SerializationTest.testAllMockedMethod":0,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":157,"org.easymock.tests.MockingTest.testPartialClassMocking":207,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":80,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":205,"org.easymock.tests.MockClassControlTest.testToString":47,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":178,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":59,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":176,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":60,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":262,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":118,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":119,"org.easymock.tests2.UsageTest.wrongArguments":224,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":110,"org.easymock.tests.UsageStrictMockTest.range":255,"org.easymock.samples.ConstructorCalledMockTest.testTax":106,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":3,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":149,"org.easymock.tests2.UsageConstraintsTest.testNull":72,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":17,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":234,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":52,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":148,"org.easymock.tests2.CaptureTest.testPrimitive":131,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":112,"org.easymock.tests.UsageTest.moreThanOneArgument":261,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":5,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":88,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":127,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":142,"org.easymock.tests.UsageUnorderedTest.message":245,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":250,"org.easymock.tests.UsageVerifyTest.twoReturns":248,"org.easymock.tests.UsageTest.argumentsOrdered":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":12,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":28,"org.easymock.tests2.CaptureTest.testCapture_2617107":68,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":113,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":188,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":168,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":193,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":158,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":35,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":163,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":238,"org.easymock.tests2.SerializationTest.testClass":57,"org.easymock.tests.LimitationsTest.mockNativeMethod":40,"org.easymock.tests2.DependencyTest.testClassMocking":165,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":206,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":75,"org.easymock.tests2.CaptureTest.testAnd":67,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":212,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":22,"org.easymock.tests2.MockedExceptionTest.testMockedException":26,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":7,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":84,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":218,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":209,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":15,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":194,"org.easymock.tests.MockingTest.testNicePartialClassMocking":208,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":19,"org.easymock.tests.LimitationsTest.mockFinalMethod":41,"org.easymock.tests2.CaptureTest.testCaptureLast":135,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":160,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":220,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":74,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":170,"org.easymock.tests.MockingTest.testTwoMocks":55,"org.easymock.tests2.DependencyTest.testClassMockingSupport":166,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":219,"org.easymock.tests2.CaptureTest.testCapture1_2446744":132,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":93,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":227,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":103,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":144,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":257,"org.easymock.tests.UsageStrictMockTest.differentMethods":256,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":33,"org.easymock.tests2.MockBuilderTest.testCreateMockString":198,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":151,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":8,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":129,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":174,"org.easymock.tests.UsageVerifyTest.twoThrows":247,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":221,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":182,"org.easymock.samples.PartialClassMockTest.testGetArea":203,"org.easymock.tests2.CompareToTest.testLessOrEqual":63,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":114,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":210,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":202,"org.easymock.tests2.UsageTest.niceToStrict":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":10,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":150,"org.easymock.tests.LimitationsTest.privateConstructor":39,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":217,"org.easymock.tests2.ThreadingTest.testChangeDefault":145,"org.easymock.tests2.UsageConstraintsTest.testNotNull":77,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":120,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":192,"org.easymock.tests2.MockBuilderTest.testCreateMock":196,"org.easymock.tests.UsageVarargTest.differentLength":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":183,"org.easymock.tests2.CallbackTest.callback":235,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":200,"org.easymock.tests.UsageTest.openCallCountByLastCall":83,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":79,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":232,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":64,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":181,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":100,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":4,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":136,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":143,"org.easymock.tests.MockClassControlTest.testEquals":51,"org.easymock.tests2.EasyMockSupportClassTest.testAll":6,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":43,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":89,"org.easymock.tests.MockingTest.testStrictClassMocking":53,"org.easymock.tests2.CaptureTest.testCaptureAll":130,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":147,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":154,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":146,"org.easymock.tests2.UsageConstraintsTest.testMatches":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":128,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":265,"org.easymock.samples.BasicClassMockTest.testPrintContent":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":186,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":237,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":259,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":161,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":92,"org.easymock.tests2.UsageConstraintsTest.greaterThan":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":175,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":23,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":37,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":24,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":199,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":171,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":107,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":222,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":102,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":223,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":30,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":96,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":1,"org.easymock.tests2.SerializationTest.test":58,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":133,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":195,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":32,"org.easymock.tests2.UsageConstraintsTest.testSame":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":173,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":156,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":258,"org.easymock.tests2.CaptureTest.testCaptureFirst":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":61,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":230,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":9,"org.easymock.tests.GenericTest.testPackageScope":42,"org.easymock.tests2.UsageTest.moreThanOneArgument":260,"org.easymock.tests2.CaptureTest.testCapture2_2446744":137,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":62,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":121,"org.easymock.tests.GenericTest.testBridgedEquals":44,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":243,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":109,"org.easymock.tests2.UsageStrictMockTest.differentMethods":240,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":215,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":125,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":21,"org.easymock.tests.UsageCallCountTest.tooManyCalls":244,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":164,"org.easymock.tests2.MockedExceptionTest.testRealException":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":123,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":105,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":111,"org.easymock.tests.MockingTest.testNiceClassMocking":56,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":169,"org.easymock.tests.MockingTest.testClassMocking":54,"org.easymock.tests2.UsageConstraintsTest.testContains":99,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":27,"org.easymock.tests2.UsageConstraintsTest.testFind":97,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":191,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":18,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":253,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":2,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":263,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":76,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":34,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":20,"org.easymock.tests.ErrorMessageTest.testGetters":78,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":189,"org.easymock.tests2.UsageStrictMockTest.range":239,"org.easymock.tests2.UsageConstraintsTest.lessThan":104,"org.easymock.tests.UsageTest.exactCallCountByLastCall":87,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":122,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":231,"org.easymock.tests2.CaptureTest.testCaptureRightOne":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":179,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":141,"org.easymock.tests2.UsageConstraintsTest.testOr":73,"org.easymock.tests.UsageRangeTest.combination":90,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":172,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":16,"org.easymock.tests.UsageTest.wrongArguments":82,"org.easymock.tests2.MockBuilderTest.testWithConstructor":211,"org.easymock.tests.MockClassControlTest.testHashCode":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":177,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":180,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":162,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":36,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":251,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":242,"org.easymock.tests.DefaultClassInstantiatorTest.object":31,"org.easymock.tests2.CaptureTest.testCaptureFromStub":95,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":190,"org.easymock.tests.UsageTest.unexpectedCallWithArray":81,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":11,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":91,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":214,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":254,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":201,"org.easymock.tests2.UsageConstraintsTest.constraints":70,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":49,"org.easymock.tests.CapturesMatcherTest.test":139,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":185,"org.easymock.tests2.CompareToTest.testGreateThan":140,"org.easymock.tests2.UsageTest.resumeIfFailure":229,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":134,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":115,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":204,"org.easymock.tests.LimitationsTest.abstractClass":38,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":116,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":264,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":233,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":167}}]

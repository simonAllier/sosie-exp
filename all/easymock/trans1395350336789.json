[{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1595","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AssertionErrorWrapper:32","sourceCode":"return java.lang.AssertionError","type":"CtReturnImpl"},"failures":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,0,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,15,93,94,95,96,97,98,99,100],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[101,101,102,102,103,104,105,106,107,108,51,109,110,111,112,113,114,115,116,52,117,53,118,119,120,121,122,123,59,124,125,126,127,128,129,130,60,61,131,62,2,3,4,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:319","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1263","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:87","sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:67","sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[49,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[220],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"this.java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[221,215,222,223,224],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:199","sourceCode":"java.util.List<java.lang.reflect.Field>.addAll(java.util.Arrays.java.util.Arrays.asList(java.lang.Class<?>.getDeclaredFields()))","type":"CtInvocationImpl"},"failures":[225,226,227,228,229,230,231,232,233,132],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[234],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[103,112,122,123,59,124,126,127,128,129,60,61,131,62,138,165,169,186,187],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[235,236,237,238],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[138,239,139],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[53,119,72],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[240,241,242,243,244],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[121,245,246,247,248,249,250,251,134,137,252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"paramType"}},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:140","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Any:36","sourceCode":"return true","type":"CtReturnImpl"},"failures":[44,205,209,215,253,254,223,78,11,255,13,256,257,258,259,260,261,262,17,18,263,264,265,100],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[266],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:85","failures":[],"status":0,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[46,47,116,80,81],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[130,241,138],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[214,215,216,217,267,268,269,253,270,218,219,222,223,224],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Results:56","sourceCode":"if (int > int) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"currentPosition":"result","callCount":"result"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":201,"org.easymock.tests2.UsageTest.argumentsOrdered":68,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":15,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":233,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":10,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":66,"org.easymock.tests2.StubTest.stubWithReturnValue":6,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":247,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":226,"org.easymock.tests2.SerializationTest.testAllMockedMethod":139,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":8,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":241,"org.easymock.tests.MockingTest.testPartialClassMocking":181,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":166,"org.easymock.tests.MockClassControlTest.testToString":194,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":31,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":150,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":19,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":146,"org.easymock.tests.UsageExpectAndThrowTest.object":29,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":211,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":264,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":265,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":207,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":261,"org.easymock.tests2.UsageTest.wrongArguments":64,"org.easymock.tests.UsageStrictMockTest.range":80,"org.easymock.samples.ConstructorCalledMockTest.testTax":101,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":132,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":187,"org.easymock.tests2.UsageConstraintsTest.testNull":203,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":30,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":109,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":199,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":58,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":128,"org.easymock.tests2.CaptureTest.testPrimitive":217,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":263,"org.easymock.tests.UsageTest.moreThanOneArgument":93,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":38,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":140,"org.easymock.tests2.CaptureTest.testCaptureNone":254,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":236,"org.easymock.tests.UsageUnorderedTest.message":100,"org.easymock.tests.UsageVerifyTest.twoReturns":86,"org.easymock.tests.UsageTest.argumentsOrdered":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":157,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":104,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":256,"org.easymock.tests2.CaptureTest.testCapture_2617107":216,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":244,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":122,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":18,"org.easymock.tests2.UsageConstraintsTest.any":209,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":127,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":260,"org.easymock.tests.UsageExpectAndThrowTest.longType":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":9,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":175,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":45,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":232,"org.easymock.tests2.SerializationTest.testClass":138,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":228,"org.easymock.tests.LimitationsTest.mockNativeMethod":190,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":169,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":208,"org.easymock.tests2.CaptureTest.testAnd":214,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":246,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":48,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":116,"org.easymock.tests2.NameTest.nameForMocksControl":74,"org.easymock.tests2.MockedExceptionTest.testMockedException":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":145,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":16,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":23,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":183,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":108,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":129,"org.easymock.tests.MockingTest.testNicePartialClassMocking":182,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":34,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":111,"org.easymock.tests.LimitationsTest.mockFinalMethod":191,"org.easymock.tests2.CaptureTest.testCaptureLast":253,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":242,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":227,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":11,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":206,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":137,"org.easymock.tests.MockingTest.testTwoMocks":180,"org.easymock.tests2.CaptureTest.testCapture1_2446744":267,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":252,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":32,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":27,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":67,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":213,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":238,"org.easymock.tests.UsageStrictMockTest.differentMethods":81,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":173,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":54,"org.easymock.tests2.MockBuilderTest.testCreateMockString":62,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":192,"org.easymock.tests.UsageExpectAndThrowTest.floatType":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":147,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":142,"org.easymock.tests.UsageVerifyTest.twoThrows":85,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":156,"org.easymock.samples.PartialClassMockTest.testGetArea":103,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":257,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":117,"org.easymock.tests2.UsageTest.niceToStrict":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":151,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":185,"org.easymock.tests.LimitationsTest.privateConstructor":189,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":251,"org.easymock.tests2.UsageConstraintsTest.testNotNull":212,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":2,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":41,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":126,"org.easymock.tests2.MockBuilderTest.testCreateMock":60,"org.easymock.tests.UsageVarargTest.differentLength":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":159,"org.easymock.tests2.CallbackTest.callback":75,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":114,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":28,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":56,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":230,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":87,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":17,"org.easymock.tests.UsageCallCountTest.tooFewCalls":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":161,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":42,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":135,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":270,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":237,"org.easymock.tests.MockClassControlTest.testEquals":198,"org.easymock.tests2.EasyMockSupportClassTest.testAll":143,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":168,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":36,"org.easymock.tests.MockingTest.testStrictClassMocking":178,"org.easymock.tests2.CaptureTest.testCaptureAll":215,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":13,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":136,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":229,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":134,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":243,"org.easymock.tests2.NameTest.nameForNiceMock":73,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":84,"org.easymock.samples.BasicClassMockTest.testPrintContent":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":163,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":40,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":43,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":12,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":144,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":53,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":82,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":177,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":118,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":266,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":112,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":120,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":102,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":200,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":0,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":106,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":268,"org.easymock.tests2.SerializationTest.test":239,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":130,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":234,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":172,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":39,"org.easymock.tests2.UsageConstraintsTest.testSame":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":141,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":7,"org.easymock.tests2.CaptureTest.testCaptureFirst":223,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":148,"org.easymock.tests.GenericTest.testPackageScope":167,"org.easymock.tests2.CaptureTest.testCapture2_2446744":222,"org.easymock.tests2.UsageTest.moreThanOneArgument":63,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":61,"org.easymock.tests.GenericTest.testBridgedEquals":170,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":91,"org.easymock.tests2.NameTest.nameForMock":71,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":37,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":131,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":249,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":35,"org.easymock.tests2.UsageStrictMockTest.differentMethods":47,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":115,"org.easymock.tests.UsageCallCountTest.tooManyCalls":92,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":33,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":88,"org.easymock.tests2.MockedExceptionTest.testRealException":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":160,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":240,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":24,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":44,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":262,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":133,"org.easymock.tests.MockingTest.testNiceClassMocking":184,"org.easymock.tests.MockingTest.testClassMocking":179,"org.easymock.tests2.NameTest.nameForStrictMock":72,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":123,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":4,"org.easymock.tests2.UsageConstraintsTest.testFind":202,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":14,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":125,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":110,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":76,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":107,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":210,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":174,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":113,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":59,"org.easymock.tests2.UsageStrictMockTest.range":46,"org.easymock.tests.UsageTest.exactCallCountByLastCall":98,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":255,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":55,"org.easymock.tests2.CaptureTest.testCaptureRightOne":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":152,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":235,"org.easymock.tests2.UsageConstraintsTest.testOr":205,"org.easymock.tests.UsageRangeTest.combination":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":121,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":51,"org.easymock.tests.UsageTest.wrongArguments":95,"org.easymock.tests2.MockBuilderTest.testWithConstructor":245,"org.easymock.tests.MockClassControlTest.testHashCode":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":149,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":153,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":176,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":90,"org.easymock.tests2.CaptureTest.testCaptureMultiple":221,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":1,"org.easymock.tests.DefaultClassInstantiatorTest.object":171,"org.easymock.tests2.CaptureTest.testCaptureFromStub":219,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":124,"org.easymock.tests.UsageTest.unexpectedCallWithArray":94,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":154,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":77,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":248,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":231,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":196,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":79,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":52,"org.easymock.tests2.UsageConstraintsTest.constraints":49,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":25,"org.easymock.tests.CapturesMatcherTest.test":224,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":225,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":162,"org.easymock.tests2.CompareToTest.testGreateThan":220,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":269,"org.easymock.tests2.UsageTest.resumeIfFailure":69,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":258,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":165,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":186,"org.easymock.tests.LimitationsTest.abstractClass":188,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":259,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":57}}]

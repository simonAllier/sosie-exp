[{"transplantationPoint":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:814","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[1,2],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[3,4],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:108","sourceCode":"org.easymock.internal.Invocation.validateCaptures()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2124","sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","type":"CtIfImpl"},"failures":[6],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"result"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[7,8,9,10,11,12,13],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[14,15,16,17,18,19],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:120","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[20,21,22,23,24,25,26,27,28,29],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[30],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[31,32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[33,34],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[35,7,8,36,37,38,39,40,41,42,43,44,33,45,46,47,48,3,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,1,87,88,2,89,90,91,92,93,94,95,96,97,98,99,100],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[14,15,16,17,18,19],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[35,101,102,103,104,105,106,107,108,36,37,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,0,125,126,127,128,129,130,131,132,133,134,135,136,137,5,138,139,140,141,142,143,144,145,146,147,148,149,20,150,21,22,23,24,25,26,151,27,29,152,153,38,39,154,40,41,42,44,46,47,48,155,156,4,157,158,52,159,160,161,162,163,34,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,55,56,57,58,182,59,60,183,184,185,186,187,188,189,190,191,192,193,194,195,62,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,71,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,75,76,77,252,253,32,254,255,256,257,258,259,260,261,262,263,264,265,266,79,267,268,269,270,271,272,273,274,275,276,277,278,279,87,88,280,281,282,283,284,285,286,287,288,289,290,291,292,293,89,99,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,19,320,321,322,323,324,325],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[117,118,119,120,121,122,123,124,0,125,126,127,128,129,130,131,132,133,134,135,136,137,5,138,139,140,141,142,143,144,326,20,150,21,22,23,24,25,26,151,27,29,327,152,153,44,45,157,328,175,205,206,269,329,270,271,272,293,89,294,295,296,297,298,300,301,302,303,304,305,330,316,317,19,320],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[331,332,333,334,335,336],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[210,211,71,337],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[338,121,127,133,144],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[339,130,44],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[210,211,71,337],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[340],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[30,341],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:112","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:127","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:122","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[210,211,71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stream":"stream"}},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[14,15,113,16,17,255,18,261,262,263,264,265,266,79,19,320],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl() : org.easymock.EasyMockSupport.createNiceControl()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[35,101,103,104,106,111,112,119,120,121,122,123,124,0,125,126,127,129,130,131,132,133,134,135,136,137,5,138,139,141,142,143,144,145,146,147,148,149,20,150,22,23,26,151,27,29,152,153,38,39,154,40,41,42,44,46,47,48,155,156,4,157,158,52,159,160,161,162,34,165,166,167,170,171,172,173,175,177,181,55,56,57,58,182,59,60,183,184,185,186,187,188,189,190,191,192,193,194,62,196,197,198,199,201,205,207,208,210,211,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,75,76,77,254,255,256,257,258,259,260,262,263,266,270,272,274,275,276,277,278,279,87,342,280,281,282,343,344,345,346,347,99,294,295,298,300,301,302,303,304,348,306,308,316,317,320,322,323,349,350],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[161],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[121,122,124,125,126,128,5,142,20,21,29],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:173","failures":[177],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:51","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[101,102,103,104,105,106,107,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,0,125,126,127,128,129,130,131,132,133,134,135,136,137,5,138,139,140,141,142,143,144,326,351,352,353,20,150,21,22,23,24,25,26,151,27,29,327,152,153,38,154,155,156,4,157,158,50,51,52,31,159,354,160,161,162,163,34,164,165,166,167,168,169,170,171,172,173,174,175,355,356,176,177,178,357,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,199,30,341,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,358,359,360,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,361,362,363,364,365,366,367,368,369,252,370,253,32,371,254,372,373,374,375,255,256,257,258,259,260,18,261,262,263,264,265,266,376,267,268,377,378,379,380,381,382,383,269,329,384,385,270,271,386,272,273,274,275,276,277,278,279,87,280,281,282,387,388,283,284,285,286,287,288,289,290,291,292,293,89,294,295,296,297,298,299,389,390,391,300,301,302,303,304,348,392,393,394,395,396,397,398,305,330,306,307,308,309,310,311,312,313,399,314,315,316,317,318,319,19,320,321,322,323,324,325,400,349,350],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[7,8,9,10,12,13],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:223","failures":[401,402,43,49,50,196],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[35,7,8,101,102,103,104,105,106,403,107,108,36,37,109,110,111,112,331,404,405,113,114,115,116,117,6,118,119,120,121,122,406,123,124,0,125,126,127,128,129,130,131,132,133,134,135,136,137,5,138,139,140,141,142,143,144,326,351,352,353,401,9,145,407,408,409,146,402,147,332,148,410,411,412,149,12,413,20,150,21,22,23,24,25,26,151,27,29,327,152,153,38,39,154,40,41,42,43,414,44,13,33,45,46,47,48,3,49,155,156,4,157,158,50,51,52,31,415,416,417,418,419,159,354,420,421,422,423,424,160,161,162,163,34,164,165,166,167,168,169,170,171,425,426,172,173,174,328,427,428,429,430,431,175,355,432,433,434,435,436,356,176,177,178,357,179,53,437,438,439,54,440,441,180,181,55,56,57,58,442,182,59,60,443,183,184,185,186,187,188,189,190,191,192,193,194,195,61,444,445,62,446,63,196,64,65,447,448,66,449,450,67,451,197,68,69,452,453,70,198,454,455,199,30,341,200,201,202,203,204,205,206,207,208,209,210,211,71,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,358,359,360,456,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,72,73,74,75,76,457,77,458,459,78,460,461,462,463,464,465,466,467,468,469,470,471,361,362,363,364,365,472,473,474,366,367,475,368,369,252,370,253,32,371,254,372,373,374,476,375,255,256,257,258,259,260,18,261,262,263,264,265,266,79,376,267,268,377,378,379,380,381,382,383,477,80,81,82,83,84,85,478,86,269,329,384,385,270,271,386,272,273,274,275,276,277,278,279,1,87,88,342,2,280,281,282,479,480,481,482,483,484,485,486,487,343,488,344,489,490,491,492,387,493,494,495,345,346,388,347,283,284,285,496,286,287,288,289,290,291,292,293,89,90,91,92,93,94,95,96,97,98,99,100,294,295,296,297,298,299,389,390,391,300,301,302,303,304,497,348,498,499,392,393,500,394,501,395,396,397,398,305,330,306,307,308,309,502,310,311,312,313,399,314,315,316,317,318,319,19,320,321,322,323,324,325,400,349,350],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:760","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[162,205,207,208,260,503,504,505,506,269,306,307,308,320,322,323],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[132],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[375],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[35,7,7,8,8,101,102,103,104,105,106,107,108,36,37,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,0,125,126,127,129,130,131,132,133,134,135,136,137,5,138,139,141,142,143,144,326,351,352,353,401,146,402,147,148,149,413,20,150,21,22,23,24,25,26,151,27,29,327,152,153,38,39,154,40,41,42,44,45,47,155,156,4,157,158,50,51,52,31,159,160,161,162,163,34,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,55,56,57,58,182,59,60,183,184,185,186,187,188,189,190,191,192,193,194,195,62,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,71,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,75,76,77,461,463,464,466,469,471,361,362,363,364,365,254,255,256,257,258,259,260,18,261,262,263,264,265,266,79,379,380,381,382,383,269,270,271,272,273,274,275,276,277,278,279,87,88,281,282,283,284,285,286,287,289,290,291,292,293,90,99,294,295,296,297,298,299,389,390,391,300,301,302,303,304,395,396,397,398,305,330,306,307,308,309,502,310,311,312,313,316,317,318,319,19,320,321,322,323,324,325],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.Capture:134","failures":[507],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"failures":[35,7,8,101,102,103,104,105,106,107,108,36,37,109,110,111,112,117,118,119,120,121,122,123,124,0,125,126,127,129,130,131,132,133,134,135,136,137,5,138,139,140,141,142,143,144,326,351,352,353,401,145,146,402,147,148,412,149,413,20,150,21,22,23,24,25,26,151,27,29,327,152,153,38,39,154,40,41,42,43,44,45,46,47,48,155,156,4,157,158,50,51,52,31,159,160,161,162,163,34,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,55,56,57,58,182,59,60,183,184,185,186,187,188,189,190,191,192,193,194,195,62,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,71,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,75,76,77,361,362,363,364,365,252,253,32,372,255,257,258,259,260,18,261,262,263,264,265,266,79,379,380,381,382,383,269,270,271,272,273,274,275,276,277,278,279,87,88,280,281,282,283,284,285,286,287,288,289,290,291,292,293,507,507,99,294,295,296,297,298,299,389,390,391,300,301,302,303,304,395,396,397,398,305,330,306,307,308,310,311,312,313,399,314,315,316,317,318,319,19,320,321,322,323,324],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[508,20,150,21,22,23,24,25,26,27,28,29,327,152,153,507],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":122,"org.easymock.tests2.UsageTest.argumentsOrdered":169,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":259,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":193,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":488,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":164,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":108,"org.easymock.tests2.DelegateToTest.testReturnException":176,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":396,"org.easymock.tests.MockingTest.testPartialClassMocking":75,"org.easymock.tests.MockClassControlTest.testToString":91,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":405,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":495,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":448,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":196,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":212,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":503,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":173,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":333,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":127,"org.easymock.tests2.UsageTest.wrongArguments":163,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":294,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":436,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":390,"org.easymock.samples.ExampleTest.answerVsDelegate":102,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":475,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":459,"org.easymock.tests2.UsageConstraintsTest.testNull":124,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":40,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":96,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":192,"org.easymock.tests2.CaptureTest.testPrimitive":22,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":298,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":231,"org.easymock.tests.UsageTest.moreThanOneArgument":260,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":154,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":363,"org.easymock.tests.UsageTest.argumentsOrdered":265,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":376,"org.easymock.tests.UsageVarargTest.varargIntAccepted":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":492,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":300,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":401,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":438,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":423,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":481,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":304,"org.easymock.tests.ReplayStateInvalidUsageTest.times":468,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":175,"org.easymock.tests2.DependencyTest.testClassMocking":425,"org.easymock.tests2.AnswerTest.answer":199,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":493,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":353,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":474,"org.easymock.tests2.CaptureTest.testAnd":20,"org.easymock.tests2.UsageTest.strictResetToDefault":161,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":408,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":45,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":187,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":257,"org.easymock.tests2.DelegateToTest.testDelegate":179,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":378,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":227,"org.easymock.tests.LimitationsTest.mockFinalMethod":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":305,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":383,"org.easymock.tests2.DependencyTest.testClassMockingSupport":426,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":373,"org.easymock.tests2.CaptureTest.testCapture1_2446744":23,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":414,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":225,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":351,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":462,"org.easymock.tests.UsageThrowableTest.throwError":272,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":367,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":456,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":424,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":455,"org.easymock.samples.PartialClassMockTest.testGetArea":35,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":463,"org.easymock.tests.MockingTest.testInterfaceMocking":457,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":301,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":349,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":501,"org.easymock.tests2.UsageTest.niceToStrict":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":66,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":479,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":146,"org.easymock.tests2.MockBuilderTest.testCreateMock":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":452,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":433,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":14,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":221,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":188,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":473,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":385,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":309,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":299,"org.easymock.tests.UsageOverloadedMethodTest.overloading":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":70,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":133,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":32,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":243,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":280,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":132,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":27,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":496,"org.easymock.tests2.EasyMockSupportClassTest.testAll":62,"org.easymock.tests.MockClassControlTest.testEquals":95,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":88,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":229,"org.easymock.tests2.CaptureTest.testCaptureAll":150,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":11,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":352,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":381,"org.easymock.tests.MockNameTest.defaultName":386,"org.easymock.tests2.UsageConstraintsTest.testMatches":134,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":460,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":364,"org.easymock.samples.ExampleTest.voteForRemovals":106,"org.easymock.tests.UsageVarargTest.allKinds":293,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":306,"org.easymock.samples.BasicClassMockTest.testPrintContent":37,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":382,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":278,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":203,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":420,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":330,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":357,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":478,"org.easymock.tests2.UsageConstraintsTest.greaterThan":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":446,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":256,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":48,"org.easymock.samples.ExampleTest.voteForRemoval":103,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":86,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":156,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":3,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":368,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":439,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":43,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":160,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":79,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":411,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":486,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":185,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":444,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":395,"org.easymock.tests2.CaptureTest.testCaptureFirst":153,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":356,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":485,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":186,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":171,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":372,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":239,"org.easymock.tests2.UsageTest.moreThanOneArgument":162,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":157,"org.easymock.tests2.CaptureTest.testCapture2_2446744":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":494,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":149,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":292,"org.easymock.tests.GenericTest.testBridgedEquals":2,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":314,"org.easymock.tests.UsageExpectAndReturnTest.longType":235,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":183,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":379,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":230,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":140,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":375,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":228,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":359,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":361,"org.easymock.tests.UsageCallCountTest.tooManyCalls":315,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":453,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":240,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":435,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":217,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":277,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":56,"org.easymock.tests.MockingTest.testNiceClassMocking":78,"org.easymock.tests.MockingTest.testClassMocking":73,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":502,"org.easymock.tests2.UsageConstraintsTest.testContains":131,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":52,"org.easymock.tests2.UsageConstraintsTest.testFind":123,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":282,"org.easymock.tests.MockTypeTest.fromEasyMockClass":366,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":118,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":318,"org.easymock.tests.UsageExpectAndReturnTest.object":242,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":44,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":434,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":191,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":287,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":334,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":500,"org.easymock.tests.UsageTest.exactCallCountByLastCall":266,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":484,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":497,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":267,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":331,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":248,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":283,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":253,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":416,"org.easymock.tests.MockClassControlTest.testHashCode":94,"org.easymock.tests2.EasyMockSupportTest.testVerify":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":450,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":268,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":384,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":252,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":326,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":328,"org.easymock.tests.UsageVarargTest.varargCharAccepted":286,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":477,"org.easymock.tests2.CaptureTest.testCaptureMultiple":508,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":347,"org.easymock.tests2.UsageTest.openCallCountByLastCall":165,"org.easymock.tests.DefaultClassInstantiatorTest.object":80,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":194,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":329,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":67,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":219,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":275,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":430,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":415,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":46,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":93,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":218,"org.easymock.tests.CapturesMatcherTest.test":507,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":249,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":358,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":198,"org.easymock.tests2.UsageTest.resumeIfFailure":170,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":472,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":437,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":398,"org.easymock.tests2.StubTest.stubWithReturnValue":181,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":332,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":141,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":241,"org.easymock.tests2.SerializationTest.testAllMockedMethod":71,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":387,"org.easymock.samples.SupportTest.voteForRemovals":111,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":15,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":1,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":418,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":224,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":337,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":388,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":30,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":498,"org.easymock.tests.UsageExpectAndThrowTest.object":222,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":138,"org.easymock.tests2.DelegateToTest.testWrongClass":178,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":316,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":317,"org.easymock.samples.ConstructorCalledMockTest.testTax":7,"org.easymock.tests.UsageStrictMockTest.range":322,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":440,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":190,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":55,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":340,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":223,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":147,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":470,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":61,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":264,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":389,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":16,"org.easymock.tests2.CaptureTest.testCaptureNone":151,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":350,"org.easymock.tests.UsageUnorderedTest.message":269,"org.easymock.tests.UsageVerifyTest.twoReturns":308,"org.easymock.tests.UsageVarargTest.varargByteAccepted":291,"org.easymock.tests2.ThreadingTest.testThreadSafe":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":68,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":313,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":394,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":36,"org.easymock.tests2.CaptureTest.testCapture_2617107":21,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":476,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":345,"org.easymock.tests2.UsageConstraintsTest.any":129,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":467,"org.easymock.tests2.StubTest.stub":180,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":360,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":397,"org.easymock.tests.UsageExpectAndThrowTest.longType":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":346,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":84,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":466,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":206,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":159,"org.easymock.tests2.SerializationTest.testClass":210,"org.easymock.tests.LimitationsTest.mockNativeMethod":99,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":251,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":342,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":429,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":209,"org.easymock.tests2.NameTest.nameForMocksControl":116,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":431,"org.easymock.tests2.MockedExceptionTest.testMockedException":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":63,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":263,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":6,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":77,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":216,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":38,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":148,"org.easymock.tests.MockingTest.testNicePartialClassMocking":76,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":42,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":427,"org.easymock.tests2.CaptureTest.testCaptureLast":26,"org.easymock.tests2.CompareToTest.testCompareEqual":339,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":374,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":126,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":60,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":139,"org.easymock.tests.MockingTest.testTwoMocks":74,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":443,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":220,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":168,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":143,"org.easymock.samples.ExampleTest.removeNonExistingDocument":403,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":464,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":432,"org.easymock.tests.UsageStrictMockTest.differentMethods":323,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":417,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":82,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":4,"org.easymock.tests2.MockBuilderTest.testCreateMockString":413,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":64,"org.easymock.tests.UsageExpectAndThrowTest.floatType":214,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":445,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":200,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":404,"org.easymock.tests.UsageVerifyTest.twoThrows":307,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":197,"org.easymock.samples.ExampleTest.voteAgainstRemoval":104,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":344,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":47,"org.easymock.tests.LimitationsTest.privateConstructor":98,"org.easymock.tests2.UsageConstraintsTest.testNotNull":142,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":50,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":279,"org.easymock.tests2.UsageTest.defaultResetToNice":167,"org.easymock.samples.ExampleTest.voteAgainstRemovals":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":489,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":247,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":428,"org.easymock.tests.UsageVarargTest.differentLength":288,"org.easymock.tests2.CallbackTest.callback":174,"org.easymock.tests2.UsageConstraintsTest.equals":406,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":13,"org.easymock.tests.UsageTest.openCallCountByLastCall":262,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":119,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":296,"org.easymock.tests.UsageCallCountTest.tooFewCalls":311,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":58,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":391,"org.easymock.tests.UsageThrowableTest.throwCheckedException":276,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":17,"org.easymock.tests.MockingTest.testStrictClassMocking":72,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":59,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":271,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":57,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":355,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":469,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":182,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":202,"org.easymock.tests.ObjectMethodsTest.testHashCode":393,"org.easymock.tests2.CompareToTest.testGreateOrEqual":338,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":158,"org.easymock.tests2.NameTest.nameForNiceMock":115,"org.easymock.tests2.DependencyTest.testInterfaceMocking":172,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":335,"org.easymock.samples.ExampleTest.addDocument":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":454,"org.easymock.tests2.DelegateToTest.testStubDelegate":177,"org.easymock.tests2.AnswerTest.stubAnswer":201,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":320,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":410,"org.easymock.tests.UsageVarargTest.varargLongAccepted":290,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":343,"org.easymock.tests.UsageExpectAndReturnTest.floatType":234,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":250,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":112,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":8,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":422,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":137,"org.easymock.tests.UsageThrowableTest.noUpperLimit":273,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":371,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":120,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":53,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":24,"org.easymock.tests2.SerializationTest.test":211,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":81,"org.easymock.tests2.UsageConstraintsTest.testSame":0,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":233,"org.easymock.samples.SupportTest.addDocument":110,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":442,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":465,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":65,"org.easymock.tests.GenericTest.testPackageScope":87,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":483,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":421,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":458,"org.easymock.tests2.NameTest.nameForMock":113,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":244,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":12,"org.easymock.tests2.UsageStrictMockTest.differentMethods":208,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":33,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":236,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":226,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":499,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":258,"org.easymock.tests2.MockedExceptionTest.testRealException":31,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":491,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":490,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":205,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":471,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":295,"org.easymock.tests2.NameTest.nameForStrictMock":114,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":409,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":117,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":41,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":54,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":504,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":5,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":83,"org.easymock.tests.ErrorMessageTest.testGetters":505,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":145,"org.easymock.tests2.UsageStrictMockTest.range":207,"org.easymock.tests2.UsageConstraintsTest.lessThan":144,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":419,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":487,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":449,"org.easymock.tests2.CaptureTest.testCaptureRightOne":29,"org.easymock.tests2.UsageConstraintsTest.testOr":125,"org.easymock.tests.UsageRangeTest.combination":255,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":39,"org.easymock.tests.UsageTest.wrongArguments":261,"org.easymock.tests2.MockBuilderTest.testWithConstructor":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":447,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":90,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":480,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":245,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":85,"org.easymock.tests.UsageVarargTest.varargShortAccepted":289,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":399,"org.easymock.tests2.UsageConstraintsTest.cmpTo":130,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":341,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":482,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":166,"org.easymock.tests2.CaptureTest.testCaptureFromStub":327,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":461,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":407,"org.easymock.tests.UsageTest.unexpectedCallWithArray":18,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":19,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":312,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":10,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":246,"org.easymock.tests2.CaptureTest.testCapture":28,"org.easymock.tests2.UsageConstraintsTest.constraints":121,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":321,"org.easymock.samples.ExampleTest.addAndChangeDocument":107,"org.easymock.tests.UsageStrictMockTest.testVerify":325,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":109,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":319,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":380,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":25,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":302,"org.easymock.tests.LimitationsTest.abstractClass":97,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":238,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":254,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":303,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":506,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":189,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":284}}]

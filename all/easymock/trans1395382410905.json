[{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:97","sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[175,176],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:228","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[177],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[178,179,180,181,182,183],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:814","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[0,184,1,2,185,3,186,187,188,188,189,189,190,4,191,192,5,193,194,195,196,6,7,197,198,199,200,201,202,203,204,205,8,206,9,10,207,208,209,210,211,212,213,214,215,216,11,217,218,219,220,221,222,12,13,14,15,223,16,17,18,19,20,21,224,22,23,24,25,26,27,28,29,30,31,32,33,225,34,35,36,37,38,39,226,40,41,227,228,42,43,44,45,229,46,47,48,175,230,231,49,232,50,51,52,53,54,55,233,234,56,235,236,237,57,58,59,238,239,60,240,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,241,242,78,243,244,79,245,80,81,246,247,82,248,83,84,85,249,86,250,87,88,89,251,252,90,91,253,254,92,255,256,257,258,259,260,93,261,262,263,264,265,266,94,95,96,97,98,99,100,101,102,267,268,269,270,103,271,272,104,273,274,275,276,277,278,279,280,281,105,282,283,284,285,286,106,287,288,289,290,291,292,293,294,295,107,296,297,298,299,300,108,301,302,303,304,305,109,306,110,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,180,111,322,112,113,323,324,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,325,326,327,328,329,330,134,135,136,137,331,138,332,139,333,140,141,334,335,336,337,338,339,340,341,342,343,176,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,142,143,364,144,365,366,367,145,146,147,148,149,150,368,369,370,371,372,373,374,375,376,377,378,379,380,381,151,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,152,153,183,415,154,155,416,417,156,418,419,420,421,422,423,424,425,426,427,428,429,157,158,159,160,161,430,431,432,162,163,433,434,164,165,166,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,167,461,168,169,170,171,172,173,462,463,464,465,466,467,468,469,470,471,472,473,474,174,475],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.matchers.Compare:53","failures":[28],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[0,184,1,2,185,3,187,188,189,190,4,191,192,5,193,194,6,7,201,203,204,205,8,206,9,10,207,208,209,210,211,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,225,34,35,36,37,38,39,226,40,41,227,228,42,43,44,45,229,46,47,48,231,49,232,50,51,52,53,54,55,233,56,237,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,241,242,78,79,245,80,81,247,82,248,83,84,85,249,86,250,87,88,89,251,252,90,91,253,254,92,255,93,94,95,96,97,98,99,100,101,102,267,103,104,105,106,295,107,296,298,299,300,108,301,302,303,304,109,306,308,309,310,311,312,320,321,180,111,322,112,113,323,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,325,326,327,328,329,330,134,136,137,139,333,140,141,334,142,143,144,476,476,148,149,150,151,385,386,387,388,389,390,391,152,153,183,415,154,155,416,417,156,418,419,420,422,423,424,425,426,427,428,429,157,158,159,160,161,432,162,163,433,434,164,165,166,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,167,461,168,169,170,171,172,173,470,472,473,475],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[477],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:182","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1581","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(boolean[]))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[237,239,292],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[15],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[305,307],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[305],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"actualTypeArgument","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[188,189,4,193,194,197,198,50,51,53,54,55,233,56,235,236,237,57,58,59,238,239,60,240,478,242,479,78,243,477,244,79,245,80,480,81,246,247,82,481,248,253,254,92,94,95,96,97,99,100,101,267,268,269,103,272,104,273,274,275,277,278,279,280,105,282,283,284,285,286,106,305,109,306,110,307,313,314,315,316,317,318,319,361,362,363,142,143,144,367,374,377,380,381,151,382,404,405,406,407,408,409,410,411,432],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[482],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1482","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[205,8,206,9,10,207,208,15,29,51,52,58,59,68,72,75,84,85,249,250,251,252,253,483,178,484,485,486,487,488,489,179,490,491,101,300,321,180,111,112,113,323,324,139,333,140,335,336,181,492,182,493,494,495,496,392,153,183,415,154,416,417,418,419,425,460,167,471,472,473,474,174,475],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[101,102,267,497],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"primitiveType"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"bridgeMethod","equalsMethod":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[341,434],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[498],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[0,184,1,2,185,3,186,187,188,189,190,4,191,192,5,193,194,195,196,6,7,197,499,500,501,198,199,200,201,202,203,204,205,8,206,9,10,207,208,209,210,211,212,213,214,215,216,11,217,218,219,220,221,222,12,13,14,15,223,16,17,18,19,20,21,224,22,23,24,25,26,27,28,29,30,31,32,33,225,34,35,36,37,38,39,226,40,41,227,228,42,43,44,45,229,46,47,48,175,230,231,49,232,502,50,51,52,53,54,55,233,234,56,235,236,237,57,58,59,238,239,60,240,478,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,241,242,479,78,243,477,244,79,245,80,480,81,482,246,247,82,481,248,83,84,85,249,86,250,87,88,89,251,252,90,91,253,254,92,255,256,257,258,259,260,93,261,262,263,264,265,266,94,95,96,97,503,98,99,100,504,101,102,267,268,269,270,103,271,272,104,273,274,275,276,277,278,279,280,281,105,282,283,284,285,286,106,287,288,289,290,291,292,293,294,295,107,296,297,298,299,300,108,301,302,303,304,305,109,306,110,307,308,309,310,311,312,505,313,314,315,316,317,318,506,319,320,321,180,111,322,112,113,323,324,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,325,326,327,328,329,330,134,135,136,137,331,138,332,139,333,140,141,334,335,336,337,338,339,340,341,342,343,176,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,142,143,364,144,365,366,367,145,146,147,507,148,149,150,368,369,370,371,372,373,374,508,509,375,376,377,378,379,380,381,151,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,152,153,183,415,154,155,416,417,156,418,419,420,421,422,423,424,425,426,427,428,429,157,158,159,160,161,430,431,432,162,163,433,434,164,165,166,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,167,461,168,169,170,171,172,173,462,463,464,465,466,467,468,469,470,471,472,473,474,174,475],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[101,102,267],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[197,80,96,99,507,373,377,406,407,408],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[14,226,45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0,184,1,2,185,3,187,190,4,191,192,5,193,194,6,7,201,203,205,8,206,9,10,207,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,225,34,35,36,37,38,39,226,40,41,227,228,42,43,44,45,46,47,48,231,49,50,51,52,53,54,55,56,58,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,241,79,80,81,83,84,85,249,86,250,87,88,251,252,90,91,92,93,94,95,96,97,98,99,100,101,102,267,103,104,105,106,295,107,296,298,299,300,108,109,306,321,180,111,322,112,113,323,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,329,134,136,137,139,333,140,141,142,143,144,148,149,150,151,385,386,387,388,390,391,152,153,415,154,155,416,417,156,418,419,420,422,423,425,426,427,428,429,157,158,159,160,161,432,162,163,433,434,164,165,166,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,167,461,168,169,170,171,172,173,463,464,470,472,473,174],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:105","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[79,510],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":15,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":152,"org.easymock.tests2.UsageTest.argumentsOrdered":252,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":76,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":347,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":250,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":191,"org.easymock.tests2.DelegateToTest.testReturnException":295,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":326,"org.easymock.tests.MockingTest.testPartialClassMocking":142,"org.easymock.tests.MockClassControlTest.testToString":406,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":289,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":138,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":356,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":276,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":440,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":104,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":7,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":21,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":162,"org.easymock.tests2.UsageTest.wrongArguments":249,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":222,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":303,"org.easymock.samples.ExampleTest.answerVsDelegate":184,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":377,"org.easymock.tests2.UsageConstraintsTest.testNull":17,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":366,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":53,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":411,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":75,"org.easymock.tests2.CaptureTest.testPrimitive":40,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":164,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":459,"org.easymock.tests.UsageTest.moreThanOneArgument":153,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":52,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":310,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":462,"org.easymock.tests.UsageTest.argumentsOrdered":417,"org.easymock.tests.UsageVarargTest.varargIntAccepted":420,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":352,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":157,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":242,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":500,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":265,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":340,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":161,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":486,"org.easymock.tests.ReplayStateInvalidUsageTest.times":400,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":11,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":498,"org.easymock.tests2.DependencyTest.testClassMocking":195,"org.easymock.tests2.AnswerTest.answer":48,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":354,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":211,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":509,"org.easymock.tests2.CaptureTest.testAnd":38,"org.easymock.tests2.UsageTest.strictResetToDefault":84,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":477,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":237,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":309,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":136,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":70,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":466,"org.easymock.tests2.DelegateToTest.testDelegate":298,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":455,"org.easymock.tests.LimitationsTest.mockFinalMethod":382,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":329,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":439,"org.easymock.tests2.DependencyTest.testClassMockingSupport":196,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":335,"org.easymock.tests2.CaptureTest.testCapture1_2446744":41,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":234,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":453,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":209,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":394,"org.easymock.tests.UsageThrowableTest.throwError":167,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":376,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":507,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":266,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":288,"org.easymock.samples.PartialClassMockTest.testGetArea":4,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":395,"org.easymock.tests.MockingTest.testInterfaceMocking":364,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":158,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":146,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":441,"org.easymock.tests2.UsageTest.niceToStrict":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":277,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":338,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":79,"org.easymock.tests2.MockBuilderTest.testCreateMock":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":284,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":219,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":449,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":178,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":71,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":508,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":469,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":383,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":301,"org.easymock.tests.UsageOverloadedMethodTest.overloading":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":286,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":473,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":26,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":148,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":125,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":25,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":44,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":421,"org.easymock.tests.MockClassControlTest.testEquals":410,"org.easymock.tests2.EasyMockSupportClassTest.testAll":103,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":306,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":488,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":457,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":437,"org.easymock.tests2.CaptureTest.testCaptureAll":39,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":210,"org.easymock.tests.MockNameTest.defaultName":431,"org.easymock.tests2.UsageConstraintsTest.testMatches":27,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":392,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":311,"org.easymock.samples.ExampleTest.voteForRemovals":3,"org.easymock.tests.UsageVarargTest.allKinds":429,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":139,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":438,"org.easymock.samples.BasicClassMockTest.testPrintContent":194,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":172,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":204,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":262,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":297,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":330,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":506,"org.easymock.tests2.UsageConstraintsTest.greaterThan":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":271,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":135,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":59,"org.easymock.samples.ExampleTest.voteForRemoval":1,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":319,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":62,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":238,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":378,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":501,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":233,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":432,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":83,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":246,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":344,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":68,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":269,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":325,"org.easymock.tests2.CaptureTest.testCaptureFirst":47,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":176,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":69,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":91,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":475,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":121,"org.easymock.tests2.CaptureTest.testCapture2_2446744":46,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":64,"org.easymock.tests2.UsageTest.moreThanOneArgument":85,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":355,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":428,"org.easymock.tests.GenericTest.testBridgedEquals":307,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":390,"org.easymock.tests.UsageExpectAndReturnTest.longType":117,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":435,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":66,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":510,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":458,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":430,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":225,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":456,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":413,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":308,"org.easymock.tests.UsageCallCountTest.tooManyCalls":391,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":492,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":285,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":122,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":221,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":445,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":171,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":95,"org.easymock.tests.MockingTest.testNiceClassMocking":367,"org.easymock.tests.MockingTest.testClassMocking":362,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":384,"org.easymock.tests2.UsageConstraintsTest.testContains":24,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":92,"org.easymock.tests2.UsageConstraintsTest.testFind":16,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":150,"org.easymock.tests.MockTypeTest.fromEasyMockClass":375,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":203,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":320,"org.easymock.tests.UsageExpectAndReturnTest.object":124,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":56,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":220,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":74,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":423,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":371,"org.easymock.tests.UsageTest.exactCallCountByLastCall":156,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":141,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":343,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":463,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":331,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":495,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":240,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":418,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":130,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":472,"org.easymock.tests.MockClassControlTest.testHashCode":409,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":257,"org.easymock.tests2.EasyMockSupportTest.testVerify":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":279,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":485,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":464,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":470,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":468,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":208,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":502,"org.easymock.tests.UsageVarargTest.varargCharAccepted":422,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":505,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":360,"org.easymock.tests2.UsageTest.openCallCountByLastCall":87,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":77,"org.easymock.tests.DefaultClassInstantiatorTest.object":313,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":467,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":369,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":496,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":447,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":280,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":169,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":215,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":256,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":408,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":57,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":446,"org.easymock.tests.CapturesMatcherTest.test":476,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":131,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":412,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":487,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":407,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":106,"org.easymock.tests2.UsageTest.resumeIfFailure":90,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":374,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":499,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":328,"org.easymock.tests2.StubTest.stubWithReturnValue":108,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":480,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":123,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":34,"org.easymock.tests2.SerializationTest.testAllMockedMethod":267,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":353,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":179,"org.easymock.samples.SupportTest.voteForRemovals":5,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":305,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":259,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":452,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":497,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":359,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":175,"org.easymock.tests.UsageExpectAndThrowTest.object":450,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":332,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":32,"org.easymock.tests2.DelegateToTest.testWrongClass":296,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":165,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":166,"org.easymock.samples.ConstructorCalledMockTest.testTax":188,"org.easymock.tests.UsageStrictMockTest.range":112,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":199,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":73,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":94,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":451,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":80,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":416,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":268,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":302,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":181,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":147,"org.easymock.tests2.CaptureTest.testCaptureNone":43,"org.easymock.tests.UsageUnorderedTest.message":460,"org.easymock.tests.UsageVerifyTest.twoReturns":140,"org.easymock.tests.UsageVarargTest.varargByteAccepted":427,"org.easymock.tests2.ThreadingTest.testThreadSafe":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":282,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":388,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":193,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":372,"org.easymock.tests2.CaptureTest.testCapture_2617107":226,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":491,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":337,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":434,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":357,"org.easymock.tests2.UsageConstraintsTest.any":22,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":399,"org.easymock.tests2.StubTest.stub":300,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":414,"org.easymock.tests.UsageExpectAndThrowTest.longType":443,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":358,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":317,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":398,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":206,"org.easymock.tests2.SerializationTest.testClass":101,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":93,"org.easymock.tests.LimitationsTest.mockNativeMethod":151,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":133,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":110,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":214,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":207,"org.easymock.tests2.NameTest.nameForMocksControl":293,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":216,"org.easymock.tests2.MockedExceptionTest.testMockedException":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":272,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":155,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":444,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":144,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":202,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":50,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":81,"org.easymock.tests.MockingTest.testNicePartialClassMocking":143,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":55,"org.easymock.tests2.CompareToTest.testNotComparable":177,"org.easymock.tests2.CaptureTest.testCaptureLast":42,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":212,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":336,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":100,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":20,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":33,"org.easymock.tests.MockingTest.testTwoMocks":363,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":504,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":114,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":448,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":251,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":36,"org.easymock.samples.ExampleTest.removeNonExistingDocument":186,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":396,"org.easymock.tests.UsageStrictMockTest.differentMethods":113,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":218,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":258,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":315,"org.easymock.tests2.ConstraintsToStringTest.andToString":489,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":63,"org.easymock.tests2.MockBuilderTest.testCreateMockString":248,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":404,"org.easymock.tests.UsageExpectAndThrowTest.floatType":442,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":273,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":270,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":231,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":478,"org.easymock.tests.UsageVerifyTest.twoThrows":333,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":471,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":105,"org.easymock.samples.ExampleTest.voteAgainstRemoval":2,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":145,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":348,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":58,"org.easymock.tests.LimitationsTest.privateConstructor":381,"org.easymock.tests2.UsageConstraintsTest.testNotNull":35,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":173,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":253,"org.easymock.tests2.UsageTest.defaultResetToNice":89,"org.easymock.samples.ExampleTest.voteAgainstRemovals":0,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":349,"org.easymock.tests.UsageVarargTest.differentLength":424,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":213,"org.easymock.tests2.CallbackTest.callback":299,"org.easymock.tests2.UsageConstraintsTest.equals":223,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":493,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":235,"org.easymock.tests.UsageTest.openCallCountByLastCall":154,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":12,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":433,"org.easymock.tests.UsageCallCountTest.tooFewCalls":386,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":97,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":304,"org.easymock.tests.UsageThrowableTest.throwCheckedException":170,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":182,"org.easymock.tests.MockingTest.testStrictClassMocking":361,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":99,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":334,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":96,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":217,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":401,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":98,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":232,"org.easymock.tests.ObjectMethodsTest.testHashCode":370,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":65,"org.easymock.tests2.NameTest.nameForNiceMock":292,"org.easymock.tests2.DependencyTest.testInterfaceMocking":6,"org.easymock.samples.ExampleTest.addDocument":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":283,"org.easymock.tests2.DelegateToTest.testStubDelegate":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":287,"org.easymock.tests2.AnswerTest.stubAnswer":49,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":111,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":482,"org.easymock.tests.UsageVarargTest.varargLongAccepted":426,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":346,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":132,"org.easymock.tests.UsageExpectAndReturnTest.floatType":116,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":60,"org.easymock.tests2.ConstraintsToStringTest.orToString":483,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":189,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":474,"org.easymock.tests.UsageThrowableTest.noUpperLimit":461,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":30,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":264,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":13,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":197,"org.easymock.tests2.SerializationTest.test":102,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":227,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":314,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":115,"org.easymock.tests2.UsageConstraintsTest.testSame":18,"org.easymock.samples.SupportTest.addDocument":192,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":503,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":397,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":274,"org.easymock.tests.GenericTest.testPackageScope":109,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":465,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":342,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":263,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":365,"org.easymock.tests2.NameTest.nameForMock":290,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":126,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":481,"org.easymock.tests2.UsageStrictMockTest.differentMethods":10,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":236,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":118,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":454,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":368,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":137,"org.easymock.tests2.MockedExceptionTest.testRealException":255,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":379,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":351,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":494,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":350,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":403,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":163,"org.easymock.tests2.NameTest.nameForStrictMock":291,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":244,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":201,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":54,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":198,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":31,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":316,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":78,"org.easymock.tests2.UsageStrictMockTest.range":9,"org.easymock.tests2.UsageConstraintsTest.lessThan":37,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":260,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":345,"org.easymock.tests2.CaptureTest.testCaptureRightOne":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":278,"org.easymock.tests2.UsageConstraintsTest.testOr":19,"org.easymock.tests.UsageRangeTest.combination":134,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":51,"org.easymock.tests.UsageTest.wrongArguments":415,"org.easymock.tests2.MockBuilderTest.testWithConstructor":479,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":275,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":405,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":119,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":127,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":339,"org.easymock.tests.UsageVarargTest.varargShortAccepted":425,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":318,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":389,"org.easymock.tests2.UsageConstraintsTest.cmpTo":23,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":341,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":88,"org.easymock.tests2.CaptureTest.testCaptureFromStub":229,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":393,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":243,"org.easymock.tests.UsageTest.unexpectedCallWithArray":183,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":180,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":387,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":128,"org.easymock.tests2.UsageConstraintsTest.constraints":14,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":322,"org.easymock.samples.ExampleTest.addAndChangeDocument":187,"org.easymock.tests2.ConstraintsToStringTest.notToString":484,"org.easymock.tests.UsageStrictMockTest.testVerify":324,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":190,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":321,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":436,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":228,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":159,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":120,"org.easymock.tests.LimitationsTest.abstractClass":380,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":174,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":160,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":419,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":72}}]

[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:127","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,69,70,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ObjectMethodsFilter:55","type":"CtTryImpl"},"status":-1},{"failures":[27,28,107,29,108,57,109,110,111,112,113,114,115,116,117,118],"variableMapping":{"toMock":"clazz","constructor":"ret","this":"this"},"name":"replace","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:127","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","position":"org.easymock.internal.ReflectionUtils:148","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.RecordState:61","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:125","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:268","type":"CtReturnImpl"},"status":-2},{"failures":[30],"variableMapping":{"stream":"stream"},"name":"add","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.Invocation:220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","position":"org.easymock.internal.RecordState:166","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ClassProxyFactory:200","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"type"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:130","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.AndroidSupport:28","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","position":"org.easymock.EasyMock:1672","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.matchers.NotNull()","position":"org.easymock.internal.matchers.NotNull:29","type":"CtNewClassImpl"},"status":-2},{"failures":[28,119,120,121,122,108,123,124,63,66,125],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.InjectionTarget:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","position":"org.easymock.ConstructorArgs:64","type":"CtTryImpl"},"status":-1},{"failures":[],"binaryOperator":"int < (java.util.List<java.lang.reflect.Method>.size())","name":"conditionalBoundary","position":"org.easymock.internal.BridgeMethodResolver:113","type":"mutation","status":0},{"failures":[],"variableMapping":{"arg":"host"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"status":-2},{"failures":[126],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"org.easymock.internal.MocksControl.classProxyFactory":"org.easymock.internal.MocksControl.classProxyFactory"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","position":"org.easymock.internal.MocksControl:147","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","position":"org.easymock.internal.MocksControl:142","type":"CtReturnImpl"},"status":-2},{"failures":[127],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:681","type":"CtInvocationImpl"},"status":-1},{"failures":[128],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:241","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.io.ByteArrayOutputStream.toByteArray()","position":"org.easymock.internal.DefaultClassInstantiator:150","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:280","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.Invocation:209","type":"CtInvocationImpl"},"status":-2},{"failures":[5,8,18,24,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,55,56,67,68,69,70,71,145,146,147,148],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToNice()","position":"org.easymock.EasyMockSupport:573","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.verify()","position":"org.easymock.EasyMockSupport:562","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n        boolean = false;\n        break;\n    } \n}","position":"org.easymock.internal.MocksBehavior:154","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.validateCapture()","position":"org.easymock.internal.Invocation:168","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:336","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.ClassProxyFactory:77","type":"CtReturnImpl"},"status":-2},{"failures":[149,150,151,152,153,154],"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","position":"org.easymock.internal.ArgumentToString:46","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"o":"actual"},"name":"add","transplant":{"sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","position":"org.easymock.internal.Invocation:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"status":-2},{"failures":[155,156,157,158,159],"variableMapping":{"minimum":"minimum"},"name":"replace","transplant":{"sourceCode":"return \"\" + (this.int)","position":"org.easymock.internal.Range:66","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"at least \" + (int)","position":"org.easymock.internal.Range:68","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.List<java.lang.reflect.Field>","position":"org.easymock.internal.InjectionPlan:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:434","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:231","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"number":"number"},"name":"replace","transplant":{"sourceCode":"return java.lang.Number.shortValue()","position":"org.easymock.internal.RecordState:197","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:200","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","position":"org.easymock.EasyMock:2189","type":"CtReturnImpl"},"status":-2},{"failures":[160],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","position":"org.easymock.Capture:83","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","position":"org.easymock.internal.MockBuilder:72","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","position":"org.easymock.internal.ClassProxyFactory:207","type":"CtAssignmentImpl"},"status":-2},{"failures":[28,108,112,113,114,116,117],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ReflectionUtils:184","type":"mutation","status":-1},{"failures":[],"variableMapping":{"actual":"actual"},"name":"add","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:41","type":"CtReturnImpl"},"status":-2},{"failures":[161],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:174","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-551735356674347591L","position":"org.easymock.internal.matchers.InstanceOf:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","position":"org.easymock.internal.ClassProxyFactory:214","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.Result:46","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","position":"org.easymock.internal.LastControl:102","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,162,163,29,164,165,166,167,168,169,57],"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","position":"org.easymock.ConstructorArgs:54","type":"mutation","status":-1},{"failures":[],"binaryOperator":"(java.lang.reflect.Method != null)","name":"negateConditional","position":"org.easymock.internal.BridgeMethodResolver:170","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:92","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:323","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","position":"org.easymock.internal.RecordState:310","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:986","type":"CtInvocationImpl"},"status":-2},{"failures":[170],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1519","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,69,70,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],"variableMapping":{"result":"toStringMethod","bridgeMethod":"toStringMethod"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ObjectMethodsFilter:55","type":"CtTryImpl"},"status":-1},{"failures":[171,172],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:373","type":"CtThrowImpl"},"status":-1},{"failures":[173,34,174],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","position":"org.easymock.internal.MocksControl:232","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.UnorderedBehavior:67","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:299","type":"CtReturnImpl"},"status":-2},{"failures":[175],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.InjectionPlan org.easymock.internal.InjectionPlan = new org.easymock.internal.InjectionPlan()","position":"org.easymock.internal.Injector:62","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer returning \" + java.lang.Object","position":"org.easymock.internal.Result:68","type":"CtReturnImpl"},"status":-2},{"failures":[176,177,178,179,180,181,182,183,184,185,186,187,188],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","position":"org.easymock.internal.RecordState:52","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1790","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","position":"org.easymock.internal.Invocation:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl() : org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.EasyMockSupport:480","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:172","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"status":-2},{"failures":[189,190,191,192],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","position":"org.easymock.internal.InjectionPlan:36","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","position":"org.easymock.internal.LastControl:51","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.matchers.Any()","position":"org.easymock.internal.matchers.Any:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"CtThrowImpl"},"status":0},{"failures":[149,150,151,152,153,154],"binaryOperator":"int > 0","name":"negateConditional","position":"org.easymock.internal.ArgumentToString:47","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","position":"org.easymock.internal.BridgeMethodResolver:351","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:198","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.RecordState:61","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"status":-2},{"failures":[36,41,42,46,62,63,65,66,69,70,71,78,79,80,102],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","position":"org.easymock.internal.ClassProxyFactory:169","type":"CtInvocationImpl"},"status":-1},{"failures":[173],"binaryOperator":"int >= 0","name":"removeConditional","position":"org.easymock.:45","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"status":-2},{"failures":[193,194,195,128],"variableMapping":{"stack":"stack"},"name":"add","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","position":"org.easymock.internal.LastControl:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:509","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.easymock.internal.RecordState:79","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","position":"org.easymock.internal.RecordState:181","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:136","type":"CtIfImpl"},"status":0},{"failures":[196,197,198,199],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.MocksControl:310","type":"CtInvocationImpl"},"status":-1},{"failures":[200,156,201,202,203,204,205,158,206,159,207,208,209],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(boolean)) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:193","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"expected":"obj"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:90","type":"CtReturnImpl"},"status":0},{"failures":[210],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"status":-1},{"failures":[211],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1276","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:131","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n} else {\n    try {\n        org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n        java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n    } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:42","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","position":"org.easymock.internal.MethodSerializationWrapper:68","type":"CtLocalVariableImpl"},"status":-2},{"failures":[212],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.Or:50","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injection.getAnnotation()","position":"org.easymock.internal.InjectionPlan:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","position":"org.easymock.internal.MocksControl:258","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = new java.lang.Class[java.lang.String[].int]","position":"org.easymock.internal.MethodSerializationWrapper:65","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","position":"org.easymock.internal.ClassProxyFactory:205","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","position":"org.easymock.internal.MockBuilder:139","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","position":"org.easymock.internal.RecordState:107","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[213,214,215],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n        return false;\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:93","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[].int) != (java.util.List<org.easymock.IArgumentMatcher>.size())) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:90","type":"CtIfImpl"},"status":-1},{"failures":[216,171,217,218],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:370","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","position":"org.easymock.EasyMock:1092","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ExpectedInvocationAndResult.getExpectedInvocation().matches(org.easymock.internal.Invocation)) {\n    return org.easymock.internal.ExpectedInvocationAndResult.getResult();\n} ","position":"org.easymock.internal.MocksBehavior:66","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injection = org.easymock.internal.Injection","position":"org.easymock.internal.Injector:237","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.ClassProxyFactory.MockMethodInterceptor)(net.sf.cglib.proxy.Factory.getCallback(0))).java.lang.reflect.InvocationHandler","position":"org.easymock.internal.ClassProxyFactory:283","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.internal.matchers.Any()","position":"org.easymock.internal.matchers.Any:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:133","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{"args":"org.easymock.internal.Invocation.NO_ARGS","org.easymock.internal.Invocation.NO_ARGS":"args"},"name":"add","transplant":{"sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"status":-2},{"failures":[219,220,221,222,193,223,224,225,226,227,228,229,128,230,231,200,214,69,70,232,181,233,234,235,236,237,238,239,240,205,241,242,243,183,244,245],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:249","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":9,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":188,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":245,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":117,"org.easymock.tests.LimitationsTest.mockFinalMethod":85,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":220,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":27,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":89,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":148,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":191,"org.easymock.tests2.UsageConstraintsTest.testContains":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":20,"org.easymock.tests2.UsageConstraintsTest.testFind":222,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":125,"org.easymock.tests2.CompareToTest.testGreateThan":170,"org.easymock.tests2.StubTest.stubWithReturnValue":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":26,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":123,"org.easymock.tests2.CaptureTest.testCaptureAll":213,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":98,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":232,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":49,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":114,"org.easymock.tests2.CaptureTest.testCaptureFromStub":214,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":113,"org.easymock.tests.UsageVerifyTest.twoThrows":207,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":164,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":239,"org.easymock.tests2.CompareToTest.testLessOrEqual":175,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":165,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":28,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":174,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":173,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":140,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":102,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":107,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":100,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":187,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":72,"org.easymock.tests2.UsageConstraintsTest.testMatches":227,"org.easymock.tests.MockClassControlTest.testToString":88,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":161,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":126,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":61,"org.easymock.tests.LimitationsTest.abstractClass":82,"org.easymock.tests2.UsageConstraintsTest.testNull":193,"org.easymock.tests2.EasyMockSupportClassTest.testAll":5,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":163,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":134,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":143,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":118,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":74,"org.easymock.tests2.UsageConstraintsTest.greaterThan":228,"org.easymock.samples.SupportTest.addDocument":145,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":240,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":236,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":238,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":137,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":45,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":44,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":119,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":201,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":22,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":151,"org.easymock.tests2.UsageTest.moreThanOneArgument":203,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":168,"org.easymock.tests.MockClassControlTest.testEquals":92,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":152,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":149,"org.easymock.tests.MockingTest.testNiceClassMocking":81,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":48,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":235,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":147,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":4,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":56,"org.easymock.tests2.MockBuilderTest.testCreateMock":58,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":86,"org.easymock.tests2.SerializationTest.testAllMockedMethod":30,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":190,"org.easymock.tests.MockingTest.testStrictClassMocking":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":12,"org.easymock.tests.LimitationsTest.mockNativeMethod":84,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":21,"org.easymock.tests.UsageVerifyTest.twoReturns":208,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":115,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":162,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":129,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":204,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":132,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":108,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":206,"org.easymock.tests.MockingTest.testTwoMocks":77,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":46,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":35,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":10,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":99,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":63,"org.easymock.tests2.MockedExceptionTest.testMockedException":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":3,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":243,"org.easymock.samples.PartialClassMockTest.testGetArea":71,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":159,"org.easymock.samples.ConstructorCalledMockTest.testTax":69,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":11,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":34,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":196,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":109,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":97,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":198,"org.easymock.tests2.CaptureTest.testCaptureMultiple":160,"org.easymock.tests.MockingTest.testNicePartialClassMocking":79,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":169,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":205,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":178,"org.easymock.tests2.UsageConstraintsTest.any":127,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":179,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":112,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":237,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":244,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":139,"org.easymock.tests.LimitationsTest.privateConstructor":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":18,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":124,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":136,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":55,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":211,"org.easymock.tests2.MockBuilderTest.testCreateMockString":60,"org.easymock.tests2.SerializationTest.testClass":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":199,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":94,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":67,"org.easymock.tests2.EasyMockSupportTest.testVerify":141,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":2,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":42,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":59,"org.easymock.tests.GenericTest.testBridgedEquals":106,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":185,"org.easymock.tests2.ConstraintsToStringTest.orToString":212,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":36,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":52,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":33,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":229,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":31,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":182,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":80,"org.easymock.tests2.UsageConstraintsTest.testOr":224,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":202,"org.easymock.tests2.UsageConstraintsTest.testNotNull":128,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":122,"org.easymock.tests.MockClassControlTest.testHashCode":91,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":171,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":73,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":181,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":111,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":25,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":62,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":64,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":138,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":130,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":6,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":176,"org.easymock.tests2.UsageTest.resumeIfFailure":216,"org.easymock.tests2.UsageConstraintsTest.testSame":223,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":90,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":57,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":65,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":38,"org.easymock.samples.SupportTest.voteForRemovals":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":14,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":70,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":167,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":13,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":104,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":172,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":23,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":110,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":241,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":200,"org.easymock.samples.BasicClassMockTest.testPrintContent":68,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":184,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":233,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":19,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":32,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":180,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":39,"org.easymock.tests2.UsageStrictMockTest.differentMethods":156,"org.easymock.tests2.AnswerTest.stubAnswer":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":15,"org.easymock.tests.MockingTest.testClassMocking":76,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":131,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":105,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":135,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":186,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":8,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":144,"org.easymock.tests.UsageStrictMockTest.range":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":16,"org.easymock.tests.UsageTest.unexpectedCallWithArray":154,"org.easymock.tests.MockingTest.testPartialClassMocking":78,"org.easymock.tests2.UsageConstraintsTest.lessThan":231,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":183,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":41,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":166,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":43,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":0,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":101,"org.easymock.tests2.MockBuilderTest.testWithConstructor":121,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":153,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":24,"org.easymock.tests2.UsageStrictMockTest.range":155,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":66,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":51,"org.easymock.tests.UsageTest.moreThanOneArgument":209,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":93,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":234,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":50,"org.easymock.tests.UsageStrictMockTest.differentMethods":158,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":96,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":116,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":133,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":87,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":221,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":53,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":1,"org.easymock.tests.DefaultClassInstantiatorTest.object":95,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":177,"org.easymock.tests2.CaptureTest.testCapture2_2446744":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":7,"org.easymock.tests.GenericTest.testPackageScope":103,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":120}}]

[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:218","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.EasyMock:1305","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:324","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","position":"org.easymock.internal.DefaultClassInstantiator:40","type":"CtIfImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"status":-1},{"failures":[1,2,3,4,5,6,7],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ReflectionUtils:184","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.MocksBehavior:89","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:76","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:64","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1039","type":"CtReturnImpl"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18],"variableMapping":{"actual":"o"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"status":-1},{"failures":[],"binaryOperator":"((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \")","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:58","type":"mutation","status":-2},{"failures":[19],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:25","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1543","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"clazz":"type"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"status":0},{"failures":[20,21],"variableMapping":{"type":"type"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"status":-2},{"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,19,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,8,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,0,9,160,161,162,163,164,165,166,167,168,169,170,171,172,173,173,174,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,10,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,12,13,14,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,17,315,316,317,318,319,320,321,18,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340],"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","position":"org.easymock.internal.RecordState:85","type":"mutation","status":-1},{"failures":[],"variableMapping":{"paramTypes":"paramTypes","name":"name","clazz":"searchType"},"name":"add","transplant":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"status":-2},{"failures":[152,159,222,13,316,321],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:109","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:986","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:281","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"status":-2},{"failures":[341,342,343,344,22,345,346,23,24,25,347,348,349,26,350,351,27,352,353,354,355,356,357,358,359,360,28,361,362,363,364,365,29,366,367,30,1,31,32,368,33,34,35,369,36,38,39,40,41,42,43,44,370,45,46,47,48,49,50,371,51,52,53,19,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,8,69,70,71,72,73,74,75,76,77,78,79,372,80,373,374,81,82,83,84,375,376,85,377,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,378,379,380,381,382,118,383,384,385,386,387,388,119,120,121,122,123,124,125,126,127,128,389,390,391,392,393,129,394,395,396,397,398,399,400,401,130,131,132,133,402,403,134,135,136,137,404,138,139,140,141,142,143,144,145,146,147,405,148,149,150,151,152,153,154,155,156,157,158,159,0,9,160,161,162,163,164,165,166,167,168,169,170,171,172,173,173,174,174,175,176,177,178,179,406,407,408,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,409,410,411,412,413,414,214,215,415,216,217,416,218,219,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,220,221,222,223,224,225,226,227,228,229,230,444,445,446,231,232,447,233,448,449,450,234,235,451,452,453,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,454,455,252,456,457,458,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,10,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,12,13,14,459,288,289,290,460,461,462,463,464,291,292,293,294,465,15,16,466,467,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,468,469,470,17,315,471,472,473,474,475,476,316,317,318,319,320,321,18,322,323,324,325,326,327,20,328,329,477,21,330,331,332,478,333,334,335,336,337,338,339,340],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.asStub()","position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:97","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n    return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:67","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator","position":"org.easymock.internal.ClassInstantiatorFactory:61","type":"CtReturnImpl"},"status":-2},{"failures":[479],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"actual":"actual"},"name":"add","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String).matcher(((java.lang.String)(java.lang.Object))).find())","position":"org.easymock.internal.matchers.Find:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1304","type":"CtInvocationImpl"},"status":-2},{"failures":[26,27,28,29,91,92,93,94,95,96,97,98,99,100,101,102,103,118,129,131,136,137,163,164,173,174,175,176,177,178,179],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"status":-1},{"failures":[480,481,482,483,267,318],"binaryOperator":"int > 0","name":"conditionalBoundary","position":"org.easymock.internal.ArgumentToString:47","type":"mutation","status":-1},{"failures":[],"variableMapping":{"delegateTo":"test"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","position":"org.easymock.internal.EasyMockStatement:42","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.easymock.internal.ArgumentToString:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:231","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:361","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:438","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \")","name":"math","position":"org.easymock.internal.ClassProxyFactory:230","type":"mutation","status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.JavaProxyFactory()","position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl"},"status":-2},{"failures":[379,380,382,384,385,388,390,391,393,395,396,399],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.Mock.java.lang.String()","position":"org.easymock.internal.Injection:67","type":"CtReturnImpl"},"status":-1},{"failures":[474,484,485],"variableMapping":{"data":"data"},"name":"replace","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","position":"org.easymock.internal.DefaultClassInstantiator:144","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"actual":"actual","expected":"actual"},"name":"add","transplant":{"sourceCode":"return java.lang.Object == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"bridgeMethod","this":"this","candidateMethod":"bridgeMethod","typeParameterMap":"typeParameterMap"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.Injector:134","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:176","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.Results:77","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:163","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Same:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:54","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"status":-2},{"failures":[486,121],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))))","position":"org.easymock.internal.MocksBehavior:199","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:81","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","position":"org.easymock.Capture:131","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:814","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1555","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"endsWith(\\\"\" + (java.lang.String))","name":"math","position":"org.easymock.internal.matchers.EndsWith:40","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":-2},{"failures":[40],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ClassProxyFactory:127","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:319","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl() : org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"behavior":"behavior"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int","position":"org.easymock.EasyMock:1305","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:127","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","position":"org.easymock.internal.MockBuilder:139","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n    org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n}","position":"org.easymock.internal.MocksBehavior:168","type":"CtForEachImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1507","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"replace","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n    java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n} catch (java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n}","position":"org.easymock.internal.AndroidClassProxyFactory:46","type":"CtTryImpl"},"status":-2},{"failures":[8,71,72,154,218,10,270,271,12,13,14,470,317],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:221","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","position":"org.easymock.internal.Injector:70","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field)","position":"org.easymock.internal.InjectionPlan:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:112","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.callLongMethod(java.lang.Class<?>, (org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.is1_3Specifications() ? \"computeSerialVersionUID\" : \"computeDefaultSUID\"))","position":"org.easymock.internal.DefaultClassInstantiator:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short.valueOf(((short)(0))))","position":"org.easymock.internal.RecordState:47","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"int = java.lang.Integer.int","position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[42,43,45,47,48,53,55,58,65,182,221,230,12,324],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:68","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.ExpectedInvocation","position":"org.easymock.internal.ExpectedInvocationAndResult:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.LastControl:71","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.MockBuilder:201","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.ErrorMessage>","position":"org.easymock.internal.UnorderedBehavior:97","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue()))","name":"conditionalBoundary","position":"org.easymock.internal.matchers.EqualsWithDelta:40","type":"mutation","status":0},{"failures":[20,21],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:209","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","position":"org.easymock.Capture:131","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n    boolean = false;\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:155","type":"CtIfImpl"},"status":-2},{"failures":[487],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","position":"org.easymock.internal.ReplayState:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:416","type":"CtReturnImpl"},"status":-2},{"failures":[42],"variableMapping":{"actual":"actual","expected":"actual"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","position":"org.easymock.internal.matchers.EndsWith:36","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","position":"org.easymock.EasyMock:1802","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:164","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:325","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","position":"org.easymock.internal.ReflectionUtils:150","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.ErrorMessage:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.UnorderedBehavior:108","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IAnswer<?>.toString()","position":"org.easymock.internal.Result:115","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:315","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:435","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:75","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock))","position":"org.easymock.internal.Injector:138","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","position":"org.easymock.internal.InjectionPlan:34","type":"CtNewClassImpl"},"status":-2},{"failures":[8,70,71,148,149,150,151,154,155,9,160,267,10,269,270,12,13,14,468,469,17,317,319,18,322],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"(\")","position":"org.easymock.internal.ExpectedInvocation:105","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.DefaultClassInstantiator:59","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:85","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:76","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:249","type":"CtInvocationImpl"},"status":-2},{"failures":[480,481,482,483,267,318],"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","position":"org.easymock.internal.ArgumentToString:46","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:317","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","position":"org.easymock.internal.Range:75","type":"CtReturnImpl"},"status":-2},{"failures":[43,49,104,106,114],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","position":"org.easymock.internal.Injector:70","type":"CtForEachImpl"},"status":-2},{"failures":[26,96],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.IMocksControl.verify()","position":"org.easymock.EasyMockSupport:562","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToStrict()","position":"org.easymock.EasyMockSupport:595","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1519","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":0},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":223,"org.easymock.tests2.MockedExceptionTest.testRealException":90,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":352,"org.easymock.tests.UsageVarargTest.varargIntAccepted":332,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":7,"org.easymock.tests.LimitationsTest.mockFinalMethod":456,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":41,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":30,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":281,"org.easymock.tests.UsageCallCountTest.tooManyCalls":188,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":362,"org.easymock.tests2.StubTest.stubWithReturnValue":32,"org.easymock.tests.UsageVarargTest.allKinds":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":367,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":294,"org.easymock.tests2.CaptureTest.testCaptureAll":105,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":234,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":4,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":56,"org.easymock.tests2.CaptureTest.testAnd":104,"org.easymock.tests.UsageStrictMockTest.testVerify":272,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":303,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":216,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":409,"org.easymock.tests.MockClassControlTest.testToString":280,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":141,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":263,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":96,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":207,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":311,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":129,"org.easymock.tests.UsageThrowableTest.throwError":220,"org.easymock.samples.SupportTest.addDocument":176,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":251,"org.easymock.tests2.StubTest.stub":31,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":15,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":257,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":389,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":239,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":372,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":247,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":441,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":213,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":376,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":443,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":375,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":339,"org.easymock.tests.UsageExpectAndThrowTest.object":305,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":121,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":364,"org.easymock.tests2.UsageTest.moreThanOneArgument":154,"org.easymock.tests.UsageVarargTest.varargByteAccepted":338,"org.easymock.tests.MockClassControlTest.testEquals":284,"org.easymock.tests.UsageTest.wrongArguments":319,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":192,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":290,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":393,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":306,"org.easymock.tests2.UsageTest.defaultResetToNice":0,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":483,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":480,"org.easymock.tests.MockingTest.testNiceClassMocking":450,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":89,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":122,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":137,"org.easymock.tests2.MockBuilderTest.testCreateMock":138,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":123,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":253,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":258,"org.easymock.samples.ExampleTest.voteAgainstRemovals":165,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":67,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":392,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":415,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":326,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":228,"org.easymock.tests2.CaptureTest.testCapture1_2446744":108,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":369,"org.easymock.samples.ExampleTest.voteForRemoval":167,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":343,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":185,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":218,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":453,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":2,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":271,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":291,"org.easymock.tests2.CaptureTest.testCaptureRightOne":114,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":200,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":254,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":346,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":78,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":325,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":255,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":466,"org.easymock.tests2.UsageConstraintsTest.cmpTo":52,"org.easymock.tests.MockTypeTest.fromEasyMockClass":410,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":474,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":397,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":487,"org.easymock.tests2.MockedExceptionTest.testMockedException":88,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":63,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":275,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":314,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":12,"org.easymock.samples.PartialClassMockTest.testGetArea":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":427,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":230,"org.easymock.samples.ConstructorCalledMockTest.testTax":173,"org.easymock.tests2.UsageTest.argumentsOrdered":160,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":345,"org.easymock.samples.ExampleTest.removeNonExistingDocument":171,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":344,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":25,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":472,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":458,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":199,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":189,"org.easymock.tests2.AnswerTest.answer":22,"org.easymock.tests.MockingTest.testNicePartialClassMocking":232,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":398,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":10,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":3,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":240,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":16,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":277,"org.easymock.tests.UsageExpectAndThrowTest.longType":298,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":414,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":28,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":98,"org.easymock.tests.UsageTest.argumentsOrdered":322,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":44,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":136,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":212,"org.easymock.tests2.MockBuilderTest.testCreateMockString":140,"org.easymock.tests2.NameTest.nameForStrictMock":149,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":249,"org.easymock.tests2.CaptureTest.testCaptureNone":112,"org.easymock.tests2.SerializationTest.testClass":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":440,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":461,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":163,"org.easymock.tests.MockingTest.testInterfaceMocking":447,"org.easymock.tests2.EasyMockSupportTest.testVerify":103,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":288,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":395,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":135,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":300,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":449,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":62,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":152,"org.easymock.tests.GenericTest.testBridgedEquals":21,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":139,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":211,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":50,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":145,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":73,"org.easymock.tests2.UsageConstraintsTest.testOr":48,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":120,"org.easymock.tests.MockClassControlTest.testHashCode":283,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":379,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":405,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":206,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":227,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":235,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":412,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":484,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":274,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":142,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":350,"org.easymock.tests2.UsageConstraintsTest.testSame":47,"org.easymock.tests2.UsageTest.resumeIfFailure":161,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":407,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":146,"org.easymock.tests.UsageOverloadedMethodTest.overloading":229,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":373,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":413,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":382,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":357,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":419,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":174,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":356,"org.easymock.tests.UsageTest.openCallCountByLastCall":320,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":301,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":418,"org.easymock.tests2.NameTest.nameForNiceMock":150,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":260,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":394,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":327,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":273,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":75,"org.easymock.tests2.CaptureTest.testPrimitive":107,"org.easymock.samples.BasicClassMockTest.testPrintContent":164,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":406,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":236,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":81,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":85,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":187,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":181,"org.easymock.tests2.UsageStrictMockTest.differentMethods":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":358,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":93,"org.easymock.tests.MockingTest.testClassMocking":445,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":477,"org.easymock.tests2.CaptureTest.testCaptureLast":111,"org.easymock.tests2.UsageConstraintsTest.equals":370,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":186,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":296,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":184,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":131,"org.easymock.tests.UsageStrictMockTest.range":269,"org.easymock.tests.InvocationTest.testEquals":11,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":321,"org.easymock.tests.UsageTest.unexpectedCallWithArray":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":423,"org.easymock.samples.ExampleTest.addDocument":169,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":448,"org.easymock.tests2.UsageConstraintsTest.lessThan":66,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":219,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":215,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":465,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":485,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":432,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":341,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":476,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":481,"org.easymock.tests2.UsageStrictMockTest.range":70,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":147,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":191,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":468,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":425,"org.easymock.tests.UsageTest.moreThanOneArgument":317,"org.easymock.tests2.UsageTest.openCallCountByLastCall":158,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":133,"org.easymock.tests.UsageStrictMockTest.differentMethods":270,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":429,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":342,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":299,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":451,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":194,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":351,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":80,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":268,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":391,"org.easymock.tests2.DependencyTest.testClassMockingSupport":401,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":310,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":286,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":381,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":179,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":462,"org.easymock.tests2.UsageConstraintsTest.testContains":53,"org.easymock.tests2.UsageConstraintsTest.testFind":45,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":109,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":473,"org.easymock.samples.ExampleTest.addAndChangeDocument":172,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":132,"org.easymock.tests.UsageVarargTest.varargCharAccepted":333,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":5,"org.easymock.tests2.CaptureTest.testCaptureFromStub":115,"org.easymock.tests.UsageVerifyTest.twoThrows":13,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":399,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":248,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":334,"org.easymock.tests2.DelegateToTest.testReturnException":33,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":1,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":157,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":102,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":20,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":68,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":377,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":408,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":264,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":475,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":113,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":307,"org.easymock.tests2.UsageConstraintsTest.testMatches":55,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":430,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":431,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":442,"org.easymock.tests2.UsageConstraintsTest.testNull":46,"org.easymock.tests.LimitationsTest.abstractClass":454,"org.easymock.tests2.EasyMockSupportClassTest.testAll":26,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":214,"org.easymock.tests2.UsageConstraintsTest.greaterThan":57,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":330,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":259,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":59,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":99,"org.easymock.tests.UsageExpectAndReturnTest.object":204,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":72,"org.easymock.tests2.DelegateToTest.testWrongClass":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":422,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":482,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":302,"org.easymock.samples.ExampleTest.voteAgainstRemoval":168,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":226,"org.easymock.tests.UsageVarargTest.varargShortAccepted":336,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":467,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":460,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":387,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":238,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":349,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":278,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":390,"org.easymock.tests2.SerializationTest.testAllMockedMethod":40,"org.easymock.tests2.NameTest.nameForMocksControl":151,"org.easymock.tests.MockingTest.testStrictClassMocking":444,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":250,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":355,"org.easymock.tests2.DelegateToTest.testStubDelegate":34,"org.easymock.tests.LimitationsTest.mockNativeMethod":252,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":452,"org.easymock.tests.UsageUnorderedTest.message":17,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":416,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":434,"org.easymock.samples.ExampleTest.answerVsDelegate":166,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":464,"org.easymock.tests.UsageCallCountTest.tooFewCalls":183,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":203,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":23,"org.easymock.tests.UsageVerifyTest.twoReturns":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":363,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":479,"org.easymock.tests2.ThreadingTest.testChangeDefault":486,"org.easymock.tests2.DependencyTest.testInterfaceMocking":130,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":198,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":433,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":91,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":435,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":94,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":128,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":49,"org.easymock.tests.MockingTest.testTwoMocks":446,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":182,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":292,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":87,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":353,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":205,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":143,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":396,"org.easymock.tests.UsageThrowableTest.throwCheckedException":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":439,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":411,"org.easymock.samples.ExampleTest.voteForRemovals":170,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":222,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":54,"org.easymock.tests.ReplayStateInvalidUsageTest.times":261,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":217,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":354,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":77,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":316,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":420,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":195,"org.easymock.tests2.UsageConstraintsTest.any":51,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":380,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":421,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":424,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":101,"org.easymock.tests.LimitationsTest.privateConstructor":455,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":86,"org.easymock.tests2.CallbackTest.callback":124,"org.easymock.tests2.NameTest.nameForMock":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":428,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":19,"org.easymock.tests.MockNameTest.defaultName":457,"org.easymock.tests2.SerializationTest.test":39,"org.easymock.tests.UsageExpectAndReturnTest.longType":197,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":110,"org.easymock.tests2.CaptureTest.testCaptureFirst":117,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":60,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":470,"org.easymock.tests2.UsageTest.niceToStrict":156,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":241,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":193,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":463,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":265,"org.easymock.tests2.UsageTest.strictResetToDefault":153,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":347,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":83,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":287,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":295,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":201,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":125,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":79,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":403,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":58,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":76,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":331,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":246,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":233,"org.easymock.tests2.DelegateToTest.testDelegate":36,"org.easymock.tests2.UsageConstraintsTest.testNotNull":64,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":69,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":118,"org.easymock.tests2.CaptureTest.testCapture_2617107":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":437,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":262,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":384,"org.easymock.tests2.ThreadingTest.testThreadSafe":119,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":438,"org.easymock.tests.UsageThrowableTest.noUpperLimit":221,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":478,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":100,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":92,"org.easymock.tests.UsageExpectAndReturnTest.floatType":196,"org.easymock.tests2.UsageTest.wrongArguments":155,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":371,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":127,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":282,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":404,"org.easymock.samples.SupportTest.voteForRemovals":177,"org.easymock.tests.UsageRangeTest.combination":324,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":360,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":65,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":365,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":388,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":8,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":208,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":309,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":293,"org.easymock.tests.UsageExpectAndThrowTest.floatType":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":361,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":74,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":209,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":378,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":374,"org.easymock.tests.UsageTest.exactCallCountByLastCall":323,"org.easymock.tests2.AnswerTest.stubAnswer":24,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":97,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":27,"org.easymock.tests.MockingTest.testPartialClassMocking":231,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":210,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":9,"org.easymock.tests2.UsageConstraintsTest.constraints":43,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":126,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":37,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":276,"org.easymock.tests.UsageVarargTest.varargLongAccepted":337,"org.easymock.tests.ObjectMethodsTest.testHashCode":289,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":82,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":84,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":267,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":29,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":417,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":402,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":469,"org.easymock.tests2.DependencyTest.testClassMocking":400,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":237,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":285,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":459,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":386,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":6,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":95,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":42,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":279,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":134,"org.easymock.tests.DefaultClassInstantiatorTest.object":315,"org.easymock.tests.UsageVarargTest.differentLength":335,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":436,"org.easymock.tests2.CaptureTest.testCapture2_2446744":116,"org.easymock.tests.GenericTest.testPackageScope":328}}]

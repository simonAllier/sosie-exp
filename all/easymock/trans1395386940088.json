[{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[0,1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[46,47,48,49,50,51],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[4,4,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[47,52],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[53,54],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[4,5,55,56,57,58],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[59,60,61,62,63,64,65,66,67,68,69,70,7,71,72,73],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[74,75,76,77],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[47,78,79,80],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[81],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[60,62,70,76],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[82,83,84,85,86,87,88,89,90,91,92,93,94,95,46,6,96,97,47,78,98,99,100,101,102,103,104,60,61,63,64,67,105,68,70,71,72,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,8,9,10,74,75,11,12,13,14,76,77,131,132,15,133,16,17,134,18,19,135,136,137,138,20,21,22,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,24,25,26,27,28,161,162,163,164,165,166,167,29,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,30,31,32,33,194,195,196,34,35,197,198,199,200,201,202,203,204,205,206,207,208],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[82,83,84,85,86,87,88,89,90,91,92,93,94,95,46,6,96,97,47,78,98,99,100,101,102,103,104,60,61,63,64,67,105,68,70,71,72,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,8,9,10,74,75,11,12,13,14,76,77,131,132,15,133,16,17,134,18,19,135,136,137,138,20,21,22,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,209,210,159,160,24,25,26,27,28,211,161,162,163,164,165,166,167,29,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,30,31,32,33,194,195,196,34,35,197,198,199,212,213,214,215,216,200,201,202,203,204,205,206,207,208],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:125","sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","type":"CtAssignmentImpl"},"failures":[217,82,83,218,84,85,219,86,220,4,5,221,87,222,223,224,88,89,90,91,92,93,94,95,46,225,226,6,227,96,97,228,47,78,79,229,98,99,100,101,102,103,104,60,61,62,63,64,65,66,67,105,68,70,7,71,72,106,107,108,109,110,111,230,112,231,113,114,115,232,233,234,235,116,236,117,237,238,239,240,241,118,242,243,119,120,121,122,123,124,125,126,127,128,129,130,244,245,8,9,10,74,75,11,12,13,14,76,77,131,132,15,133,16,17,134,18,19,135,136,137,246,138,20,21,22,139,247,140,248,249,141,142,250,143,144,251,145,252,146,147,148,253,149,254,150,151,152,255,256,153,154,155,156,157,158,257,258,259,260,159,261,160,24,25,26,27,28,161,262,162,163,164,165,166,167,263,264,265,29,266,168,169,267,268,269,270,271,272,273,274,275,276,277,278,279,280,170,281,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,193,30,307,308,309,310,311,312,31,32,313,314,33,194,195,196,315,316,317,318,319,320,321,322,323,324,325,34,35,36,37,38,39,40,197,198,199,73,73,326,200,202,203,204,205,327,328,206,207,329,330,208],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[81],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[47,78,79,80],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"key","properties":"properties","key":"key"}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[96,331,261,160,168],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[107],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:356","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[332,333,334],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[335],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[217,82,83,218,84,85,219,86,220,4,5,221,87,222,223,224,88,89,90,91,92,93,94,95,46,225,226,6,227,96,97,228,47,78,79,229,98,99,100,101,102,103,104,60,61,62,63,64,65,66,67,105,68,70,7,71,72,106,107,108,109,110,111,230,112,231,113,114,115,232,336,233,234,235,116,236,117,237,238,239,240,241,118,242,243,119,120,121,122,123,124,125,126,127,128,129,130,244,245,8,9,10,74,75,11,12,13,14,76,77,131,132,15,133,16,17,134,18,19,135,136,137,246,138,20,21,22,139,247,140,248,249,141,142,250,143,144,251,145,252,146,147,148,253,149,254,150,151,152,255,256,153,154,155,156,157,158,257,258,259,260,159,261,160,24,25,26,27,28,161,262,162,163,164,165,166,167,263,264,265,29,266,168,169,267,268,269,270,271,272,273,274,275,276,277,278,279,280,170,281,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,193,30,307,308,309,310,311,312,31,32,313,314,33,194,195,196,315,316,317,318,319,320,321,322,323,324,325,34,35,36,37,38,39,40,197,198,199,326,200,202,203,204,205,327,328,206,207,329,330,208],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[337],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[56],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"returnedType","type":"returnedType"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[338,339,340],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":75,"org.easymock.tests2.UsageTest.argumentsOrdered":256,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":204,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":271,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":254,"org.easymock.tests2.StubTest.stubWithReturnValue":8,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":221,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":138,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":181,"org.easymock.tests2.SerializationTest.testAllMockedMethod":79,"org.easymock.tests2.DelegateToTest.testReturnException":241,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":269,"org.easymock.tests.MockingTest.testPartialClassMocking":197,"org.easymock.samples.SupportTest.voteForRemovals":82,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":335,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":337,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":211,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":45,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":286,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":156,"org.easymock.tests.UsageExpectAndThrowTest.object":296,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":95,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":136,"org.easymock.tests2.DelegateToTest.testWrongClass":242,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":34,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":35,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":77,"org.easymock.tests2.UsageTest.wrongArguments":253,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":31,"org.easymock.samples.ConstructorCalledMockTest.testTax":4,"org.easymock.tests.UsageStrictMockTest.range":168,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":259,"org.easymock.samples.ExampleTest.answerVsDelegate":218,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":126,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":98,"org.easymock.tests2.UsageConstraintsTest.testNull":12,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":297,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":109,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":128,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":143,"org.easymock.tests2.CaptureTest.testPrimitive":63,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":33,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":329,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":305,"org.easymock.tests.UsageTest.moreThanOneArgument":205,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":258,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":108,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":38,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":210,"org.easymock.tests2.CaptureTest.testCaptureNone":105,"org.easymock.tests.UsageUnorderedTest.message":306,"org.easymock.tests.UsageVerifyTest.twoReturns":160,"org.easymock.tests.UsageVarargTest.varargByteAccepted":323,"org.easymock.tests2.ThreadingTest.testThreadSafe":88,"org.easymock.tests.UsageTest.argumentsOrdered":330,"org.easymock.tests.UsageVarargTest.varargIntAccepted":317,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":277,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":222,"org.easymock.tests2.CaptureTest.testCapture_2617107":62,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":24,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":249,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":314,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":214,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":250,"org.easymock.tests2.UsageConstraintsTest.any":131,"org.easymock.tests2.StubTest.stub":245,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":28,"org.easymock.tests.UsageExpectAndThrowTest.longType":289,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":215,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":227,"org.easymock.tests2.SerializationTest.testClass":47,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":117,"org.easymock.tests.LimitationsTest.mockNativeMethod":193,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":93,"org.easymock.tests2.AnswerTest.answer":139,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":171,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":191,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":240,"org.easymock.tests2.CaptureTest.testAnd":60,"org.easymock.tests2.UsageTest.strictResetToDefault":147,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":231,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":228,"org.easymock.tests2.MockedExceptionTest.testMockedException":235,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":37,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":202,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":123,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":207,"org.easymock.tests2.DelegateToTest.testDelegate":243,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":336,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":290,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":199,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":106,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":144,"org.easymock.tests.MockingTest.testNicePartialClassMocking":198,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":301,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":111,"org.easymock.tests2.CaptureTest.testCaptureLast":67,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":272,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":1,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":76,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":104,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":312,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":137,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":0,"org.easymock.tests2.CaptureTest.testCapture1_2446744":64,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":172,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":299,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":294,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":238,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":255,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":21,"org.easymock.tests.UsageThrowableTest.throwError":161,"org.easymock.tests.UsageStrictMockTest.differentMethods":169,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":54,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":90,"org.easymock.tests2.MockBuilderTest.testCreateMockString":252,"org.easymock.tests.UsageExpectAndThrowTest.floatType":288,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":40,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":134,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":247,"org.easymock.tests.UsageVerifyTest.twoThrows":261,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":58,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":157,"org.easymock.samples.PartialClassMockTest.testGetArea":87,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":25,"org.easymock.samples.ExampleTest.voteAgainstRemoval":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":213,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":209,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":114,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":287,"org.easymock.tests2.UsageTest.niceToStrict":149,"org.easymock.tests2.UsageConstraintsTest.testNotNull":20,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":234,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":167,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":41,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":142,"org.easymock.tests2.MockBuilderTest.testCreateMock":251,"org.easymock.tests2.UsageTest.defaultResetToNice":152,"org.easymock.samples.ExampleTest.voteAgainstRemovals":83,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":187,"org.easymock.tests.UsageVarargTest.differentLength":320,"org.easymock.tests2.CallbackTest.callback":229,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":55,"org.easymock.tests.UsageTest.openCallCountByLastCall":206,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":295,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":124,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":9,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":313,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":257,"org.easymock.tests.UsageCallCountTest.tooFewCalls":275,"org.easymock.tests.UsageOverloadedMethodTest.overloading":195,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":284,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":16,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":194,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":183,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":133,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":68,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":260,"org.easymock.tests.UsageThrowableTest.throwCheckedException":164,"org.easymock.tests2.EasyMockSupportClassTest.testAll":155,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":281,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":334,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":303,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":310,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":239,"org.easymock.tests2.CaptureTest.testCaptureAll":61,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":307,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":103,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":100,"org.easymock.tests2.UsageConstraintsTest.testMatches":17,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":102,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":248,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":39,"org.easymock.samples.ExampleTest.voteForRemovals":86,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":92,"org.easymock.tests.UsageVarargTest.allKinds":325,"org.easymock.tests2.DependencyTest.testInterfaceMocking":94,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":159,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":49,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":311,"org.easymock.samples.BasicClassMockTest.testPrintContent":223,"org.easymock.samples.ExampleTest.addDocument":219,"org.easymock.tests2.DelegateToTest.testStubDelegate":118,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":166,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":225,"org.easymock.tests2.AnswerTest.stubAnswer":140,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":273,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":29,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":51,"org.easymock.tests2.UsageConstraintsTest.greaterThan":18,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":81,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":201,"org.easymock.tests.UsageVarargTest.varargLongAccepted":322,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":115,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":267,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":212,"org.easymock.samples.ExampleTest.voteForRemoval":84,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":89,"org.easymock.tests.UsageExpectAndReturnTest.floatType":174,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":190,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":230,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":46,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":5,"org.easymock.tests.UsageThrowableTest.noUpperLimit":262,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":19,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":3,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":326,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":10,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":146,"org.easymock.tests2.SerializationTest.test":78,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":65,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":121,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":162,"org.easymock.tests2.UsageConstraintsTest.testSame":13,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":173,"org.easymock.samples.SupportTest.addDocument":217,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":268,"org.easymock.tests2.CaptureTest.testCaptureFirst":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":122,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":154,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":285,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":179,"org.easymock.tests.GenericTest.testPackageScope":170,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":91,"org.easymock.tests2.CaptureTest.testCapture2_2446744":71,"org.easymock.tests2.UsageTest.moreThanOneArgument":148,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":145,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":42,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":324,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":279,"org.easymock.tests.UsageExpectAndReturnTest.longType":175,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":308,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":119,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":304,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":184,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":246,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":23,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":302,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":57,"org.easymock.tests2.UsageStrictMockTest.differentMethods":97,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":36,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":176,"org.easymock.tests.UsageCallCountTest.tooManyCalls":280,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":300,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":203,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":274,"org.easymock.tests2.MockedExceptionTest.testRealException":236,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":180,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":44,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":291,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":6,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":32,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":165,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":99,"org.easymock.tests2.UsageConstraintsTest.testContains":15,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":116,"org.easymock.tests2.UsageConstraintsTest.testFind":11,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":196,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":339,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":232,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":110,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":263,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":233,"org.easymock.tests.UsageExpectAndReturnTest.object":182,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":135,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":112,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":141,"org.easymock.tests2.UsageStrictMockTest.range":96,"org.easymock.tests2.UsageConstraintsTest.lessThan":22,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":127,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":319,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":48,"org.easymock.tests.UsageTest.exactCallCountByLastCall":208,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":43,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":50,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":120,"org.easymock.tests2.CaptureTest.testCaptureRightOne":70,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":53,"org.easymock.tests2.UsageConstraintsTest.testOr":14,"org.easymock.tests.UsageRangeTest.combination":200,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":315,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":107,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":188,"org.easymock.tests.UsageTest.wrongArguments":328,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":283,"org.easymock.tests2.EasyMockSupportTest.testVerify":244,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":177,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":185,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":332,"org.easymock.tests.UsageVarargTest.varargShortAccepted":321,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":282,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":278,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":237,"org.easymock.tests2.UsageConstraintsTest.cmpTo":132,"org.easymock.tests.UsageVarargTest.varargCharAccepted":318,"org.easymock.tests2.CaptureTest.testCaptureMultiple":59,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":216,"org.easymock.tests2.UsageTest.openCallCountByLastCall":150,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":151,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":338,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":130,"org.easymock.tests2.CaptureTest.testCaptureFromStub":7,"org.easymock.tests.UsageTest.unexpectedCallWithArray":327,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":293,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":265,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":163,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":276,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":56,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":186,"org.easymock.tests2.CaptureTest.testCapture":69,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":266,"org.easymock.tests2.UsageConstraintsTest.constraints":74,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":113,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":292,"org.easymock.samples.ExampleTest.addAndChangeDocument":220,"org.easymock.tests.CapturesMatcherTest.test":73,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":189,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":224,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":333,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":158,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":309,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":66,"org.easymock.tests2.UsageTest.resumeIfFailure":153,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":26,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":178,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":192,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":27,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":331,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":316,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":125}}]

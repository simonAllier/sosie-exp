[{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"failures":[0,1],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[2,3,4,5,6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[7,8,9,10,11],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[12,7,13,14,10,11],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:166","sourceCode":"java.lang.StringBuilder.append(\"\\n  Expectation failure on verify:\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[15,16],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:157","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Method.getDeclaringClass().getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"failures":[17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[2,2,3,3,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"threadSafe"}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,51],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[65,66,67,68,69],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:986","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[70],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"failures":[97,98],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:58","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","type":"CtInvocationImpl"},"failures":[21,99,100,101,102,103,104,105,106,30,35,107,108,109,110,111,112,113,114,115,116,117,52,118,119],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[120,121,122,123,124,125,126,127,128,111,129,130,131,132,133,134,135,136,137],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,53,54,55,56,57,58,153,154,155,156,157,158,159,19,20,21,22,23,160,161,162,24,163,164,165,166,167,168,169,170,171,172,99,173,174,175,176,177,100,101,102,178,179,180,181,182,183,25,26,27,28,29,184,185,186,187,188,189,190,191,192,193,194,195,196,197,103,104,105,106,30,31,32,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,33,34,219,220,221,222,223,224,35,108,225,226,61,62,63,64,36,37,227,228,38,39,40,41,229,230,231,232,42,233,43,44,9,45,46,234,235,70,236,47,48,49,237,238,239,240,241,242,243,244,245,246,247,248,249,250,109,124,251,252,253,254,255,256,257,258,259,125,111,129,260,261,262,263,264,265,4,266,267,268,269,270,271,272,273,274,113,275,114,276,116,277,278,279,280,281,51,282,283,284,285,286,287,52,119,288],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[120,289,290,71,72,291,292,138,139,140,141,142,143,293,145,146,147,148,149,150,151,152,154,157,158,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,159,309,160,13,310,311,312,313,314,163,164,315,316,317,318,319,320,165,166,167,170,171,99,177,179,185,186,187,188,189,190,191,192,193,194,195,196,321,197,322,323,324,325,326,327,328,329,201,202,204,209,214,330,331,332,219,333,220,221,222,223,224,14,334,225,226,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,61,62,63,228,229,230,231,232,233,9,234,235,70,351,236,78,352,239,90,240,241,242,243,244,245,246,247,248,249,250,109,110,124,251,252,253,353,256,257,258,259,125,111,129,130,131,132,135,354,260,355,262,263,264,356,357,358,4,266,267,272,112,273,274,113,275,137,114,276,116,359,277,278,360,361,279,280,287,362,288,363,364,365,366],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"failures":[76,88],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1542","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","type":"CtInvocationImpl"},"failures":[228,229,234],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[264],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:173","sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder.toString()))","type":"CtThrowImpl"},"failures":[153,155,156,162,184,185,186,35,108,225,261,283,284,285,286,52,119,288],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:28","sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"methodArgs","args":"methodArgs"}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[367],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:622","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1646","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[368,369,370,313,184,186,35,354,371,372,358,266,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[373],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[374],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[16,375,162,13,310,311,312,184,185,186,322,323,324,376,329,122,377,378,123,379,380,14,35,107,108,335,381,382,341,344,346,78,79,90,91,125,128,130,131,133,135,261,355,356,357,112,276,117,383,277,278,279,280,283,284,285,286,52,118,119],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[2,2,3,3,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,234,47,48,49,50,51,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":228,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":368,"org.easymock.tests2.UsageTest.argumentsOrdered":357,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":348,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":79,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":56,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":263,"org.easymock.tests2.StubTest.stubWithReturnValue":51,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":236,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":71,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":176,"org.easymock.tests2.SerializationTest.testAllMockedMethod":252,"org.easymock.tests2.DelegateToTest.testReturnException":253,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":54,"org.easymock.tests.MockingTest.testPartialClassMocking":165,"org.easymock.samples.SupportTest.voteForRemovals":292,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":11,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":17,"org.easymock.tests.MockClassControlTest.testToString":322,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":76,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":383,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":211,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":364,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":199,"org.easymock.tests.UsageExpectAndThrowTest.object":209,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":235,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":110,"org.easymock.tests2.DelegateToTest.testWrongClass":353,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":33,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":34,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":230,"org.easymock.tests2.UsageTest.wrongArguments":355,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":30,"org.easymock.samples.ConstructorCalledMockTest.testTax":2,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":96,"org.easymock.tests.UsageStrictMockTest.range":107,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":222,"org.easymock.samples.ExampleTest.answerVsDelegate":139,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":345,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":359,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":123,"org.easymock.tests2.UsageConstraintsTest.testNull":39,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":274,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":210,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":347,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":327,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":130,"org.easymock.tests2.CaptureTest.testPrimitive":243,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":32,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":311,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":307,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":218,"org.easymock.tests.UsageTest.moreThanOneArgument":162,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":273,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":221,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":21,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":12,"org.easymock.tests2.CaptureTest.testCaptureNone":247,"org.easymock.tests.UsageUnorderedTest.message":16,"org.easymock.tests.UsageVerifyTest.twoReturns":186,"org.easymock.tests.UsageVarargTest.varargByteAccepted":194,"org.easymock.tests2.ThreadingTest.testThreadSafe":237,"org.easymock.tests.UsageTest.argumentsOrdered":312,"org.easymock.tests.UsageVarargTest.varargIntAccepted":189,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":158,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":381,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":289,"org.easymock.tests2.CaptureTest.testCapture_2617107":242,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":25,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":125,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":198,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":328,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":83,"org.easymock.tests2.UsageConstraintsTest.any":231,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":129,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":304,"org.easymock.tests2.StubTest.stub":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":29,"org.easymock.tests.UsageExpectAndThrowTest.longType":202,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":55,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":303,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":362,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":78,"org.easymock.tests2.SerializationTest.testClass":124,"org.easymock.tests.ReplayStateInvalidUsageTest.times":305,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":90,"org.easymock.tests.LimitationsTest.mockNativeMethod":152,"org.easymock.tests2.AnswerTest.answer":266,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":121,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":183,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":259,"org.easymock.tests2.CaptureTest.testAnd":240,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":87,"org.easymock.tests2.UsageTest.strictResetToDefault":260,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":288,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":276,"org.easymock.tests2.NameTest.nameForMocksControl":286,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":89,"org.easymock.tests2.MockedExceptionTest.testMockedException":62,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":20,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":342,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":105,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":370,"org.easymock.tests2.DelegateToTest.testDelegate":255,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":203,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":167,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":272,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":131,"org.easymock.tests.MockingTest.testNicePartialClassMocking":166,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":214,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":275,"org.easymock.tests2.CaptureTest.testCaptureLast":246,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":85,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":57,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":329,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":280,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":229,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":70,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":149,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":376,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":168,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":212,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":257,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":207,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":356,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":48,"org.easymock.tests.UsageThrowableTest.throwError":314,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":299,"org.easymock.samples.ExampleTest.removeNonExistingDocument":293,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":301,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":92,"org.easymock.tests.UsageStrictMockTest.differentMethods":108,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":378,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":75,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":66,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":84,"org.easymock.tests2.MockBuilderTest.testCreateMockString":135,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":321,"org.easymock.tests.UsageExpectAndThrowTest.floatType":201,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":23,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":9,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":267,"org.easymock.tests.UsageVerifyTest.twoThrows":185,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":365,"org.easymock.samples.PartialClassMockTest.testGetArea":120,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":300,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":26,"org.easymock.samples.ExampleTest.voteAgainstRemoval":141,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":116,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":382,"org.easymock.tests2.UsageTest.niceToStrict":262,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":200,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":6,"org.easymock.tests2.UsageConstraintsTest.testNotNull":47,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":319,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":61,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":367,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":111,"org.easymock.tests2.UsageTest.defaultResetToNice":264,"org.easymock.tests2.MockBuilderTest.testCreateMock":132,"org.easymock.samples.ExampleTest.voteAgainstRemovals":138,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":179,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":86,"org.easymock.tests2.CallbackTest.callback":282,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":93,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":8,"org.easymock.tests.UsageTest.openCallCountByLastCall":369,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":208,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":10,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":343,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":36,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":153,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":220,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":60,"org.easymock.tests.UsageCallCountTest.tooFewCalls":156,"org.easymock.tests.UsageOverloadedMethodTest.overloading":160,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":332,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":43,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":360,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":309,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":100,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":233,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":248,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":223,"org.easymock.tests.UsageThrowableTest.throwCheckedException":316,"org.easymock.tests2.EasyMockSupportClassTest.testAll":363,"org.easymock.tests.MockClassControlTest.testEquals":326,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":151,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":216,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":7,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":258,"org.easymock.tests2.CaptureTest.testCaptureAll":241,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":147,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":279,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":59,"org.easymock.tests.MockNameTest.defaultName":375,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":278,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":91,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":306,"org.easymock.tests2.UsageConstraintsTest.testMatches":44,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":361,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":269,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":297,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":22,"org.easymock.tests.ObjectMethodsTest.testHashCode":336,"org.easymock.samples.ExampleTest.voteForRemovals":143,"org.easymock.tests2.NameTest.nameForNiceMock":285,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":239,"org.easymock.tests.UsageVarargTest.allKinds":196,"org.easymock.tests2.DependencyTest.testInterfaceMocking":109,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":184,"org.easymock.samples.BasicClassMockTest.testPrintContent":290,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":148,"org.easymock.samples.ExampleTest.addDocument":142,"org.easymock.tests2.DelegateToTest.testStubDelegate":254,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":318,"org.easymock.tests2.AnswerTest.stubAnswer":268,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":80,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":58,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":98,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":35,"org.easymock.tests2.UsageConstraintsTest.greaterThan":45,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":104,"org.easymock.tests.UsageVarargTest.varargLongAccepted":193,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":117,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":225,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":69,"org.easymock.samples.ExampleTest.voteForRemoval":140,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":238,"org.easymock.tests.UsageExpectAndReturnTest.floatType":170,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":182,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":379,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":4,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":137,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":3,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":82,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":46,"org.easymock.tests.UsageThrowableTest.noUpperLimit":163,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":354,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":37,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":159,"org.easymock.tests2.SerializationTest.test":251,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":244,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":340,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":65,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":164,"org.easymock.tests2.UsageConstraintsTest.testSame":40,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":169,"org.easymock.samples.SupportTest.addDocument":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":53,"org.easymock.tests2.CaptureTest.testCaptureFirst":250,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":97,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":341,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":358,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":333,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":302,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":174,"org.easymock.tests.GenericTest.testPackageScope":150,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":352,"org.easymock.tests2.UsageTest.moreThanOneArgument":261,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":373,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":133,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":81,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":195,"org.easymock.tests.GenericTest.testBridgedEquals":18,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":295,"org.easymock.tests2.NameTest.nameForMock":283,"org.easymock.tests.UsageExpectAndReturnTest.longType":171,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":338,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":145,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":217,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":101,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":134,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":351,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":215,"org.easymock.tests2.UsageStrictMockTest.differentMethods":119,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":19,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":172,"org.easymock.tests.UsageCallCountTest.tooManyCalls":296,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":213,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":106,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":155,"org.easymock.tests2.MockedExceptionTest.testRealException":64,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":380,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":175,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":95,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":204,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":52,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":317,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":308,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":277,"org.easymock.tests2.NameTest.nameForStrictMock":284,"org.easymock.tests2.UsageConstraintsTest.testContains":42,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":126,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":154,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":63,"org.easymock.tests2.UsageConstraintsTest.testFind":38,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":161,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":270,"org.easymock.tests.MockTypeTest.fromEasyMockClass":377,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":113,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":271,"org.easymock.tests.UsageExpectAndReturnTest.object":177,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":234,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":67,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":15,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":114,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":127,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":94,"org.easymock.tests2.UsageStrictMockTest.range":118,"org.easymock.tests2.UsageConstraintsTest.lessThan":49,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":346,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":191,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":77,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":337,"org.easymock.tests.UsageTest.exactCallCountByLastCall":313,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":24,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":339,"org.easymock.tests2.CaptureTest.testCaptureRightOne":249,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":0,"org.easymock.tests2.UsageConstraintsTest.testOr":41,"org.easymock.tests.UsageRangeTest.combination":103,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":112,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":180,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":187,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":331,"org.easymock.tests.UsageTest.wrongArguments":310,"org.easymock.tests.MockClassControlTest.testHashCode":325,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":74,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":197,"org.easymock.tests2.EasyMockSupportTest.testVerify":350,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":99,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":102,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":1,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":330,"org.easymock.tests.UsageVarargTest.varargShortAccepted":192,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":68,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":294,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":256,"org.easymock.tests2.UsageConstraintsTest.cmpTo":232,"org.easymock.tests.UsageVarargTest.varargCharAccepted":190,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":287,"org.easymock.tests2.UsageTest.openCallCountByLastCall":371,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":372,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":349,"org.easymock.tests.DefaultClassInstantiatorTest.object":320,"org.easymock.tests2.CaptureTest.testCaptureFromStub":50,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":298,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":128,"org.easymock.tests.UsageTest.unexpectedCallWithArray":13,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":335,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":206,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":315,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":14,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":157,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":88,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":73,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":178,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":334,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":324,"org.easymock.tests2.UsageConstraintsTest.constraints":227,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":115,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":205,"org.easymock.samples.ExampleTest.addAndChangeDocument":144,"org.easymock.tests.UsageStrictMockTest.testVerify":226,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":181,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":366,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":323,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":224,"org.easymock.tests2.CompareToTest.testGreateThan":374,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":146,"org.easymock.tests2.UsageTest.resumeIfFailure":265,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":245,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":27,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":136,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":122,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":173,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":219,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":28,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":344,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":188}}]

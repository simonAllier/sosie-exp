[{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[0,1,2,3,4,5],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[23,24,25,26,27,28,10,29,30,31,32,33,34,35,36,37,38,39],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[40,41],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:32","sourceCode":"new java.util.concurrent.locks.ReentrantLock()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[42],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[43],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:114","sourceCode":"return this","type":"CtReturnImpl"},"failures":[44],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[45,46,47,48,49,6,23,0,50,51,52,53,54,7,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,25,26,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,8,110,111,9,27,28,10,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,3,29,160,16,30,31,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,17,184,32,185,186,187,188,189,190,191,192,193,18,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,19,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,20,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,37,291,21,38,39,292,22,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[314,315,316,317,318,319,320,267,321],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[0,1,2,3,4,5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mockedMethods":"mockedMethods"}},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[178,179,44,322,314,315,323,324,325,326,327,328,267,270,321],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.matchers.StartsWith:40","failures":[329],"status":-1,"binaryOperator":"((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[213],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[330,331,332,333,334,335],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[336,337,338,339],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[42,43],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:920","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[340,341,342,94,110,147,148,149,150,151,152,343,251,252,253,254,22],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[344,267,268,269],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:124","failures":[45,46,47,48,49,6,23,0,50,51,52,53,54,7,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,25,26,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,8,110,111,9,27,28,10,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,3,29,160,16,30,31,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,17,184,32,185,186,187,188,189,190,191,192,193,18,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,19,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,20,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,37,291,21,38,39,292,22,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[218],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"suffix","key":"suffix"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[0,1,2,3,4,5],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[6,23,0,50,53,54,7,345,346,347,348,349,350,81,24,25,26,90,91,92,351,98,352,353,354,104,355,356,108,27,28,10,357,358,359,158,3,29,160,16,30,31,360,361,362,17,32,185,186,187,191,192,193,18,194,195,363,198,199,200,201,202,206,213,216,364,219,233,365,262,263,366,272,274,276,277,279,280,33,34,35,36,288,367,289,37,291,21,38,39,294,295,298,299],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[368,369,370],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if (org.easymock.ConstructorArgs == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[44,322,314,323,324,371,372,373,321,295,299,374],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:290","sourceCode":"return ","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[375,376],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:311","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[6,23,51,52,7,336,93,94,95,96,97,98,377,99,100,354,105,106,107,109,8,9,27,10,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,145,153,11,12,13,14,15,29,16,30,161,162,337,338,339,163,164,165,166,167,169,171,173,174,176,183,17,184,32,186,188,189,190,193,18,195,196,198,199,201,203,204,205,206,207,208,209,210,212,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,19,253,257,258,259,260,261,263,20,267,268,270,271,272,273,274,275,276,277,278,279,280,281,282,284,285,286,287,288,37,21,38,22,293,294,295,296,297,298,299,300,301,302,303,304,307,308,309,310,312,313],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1764","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:220","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"failures":[42,43],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[209,233],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:207","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:105","sourceCode":"if ((java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)) {\n    throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\");\n} ","type":"CtIfImpl"},"failures":[378,379],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[380],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:86","sourceCode":"return org.easymock.internal.Results.getMainInterval().expectedCount()","type":"CtReturnImpl"},"failures":[23,50,53,54,108,27,28,10,3,29,16,30,32,185,191,192,33,34,35,36,37,21,38],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[219,220,222,224,225,381,236,241,300,302,310],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[344,267,268,269],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":220,"org.easymock.tests2.UsageTest.argumentsOrdered":192,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":6,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":281,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":366,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":150,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":187,"org.easymock.tests2.StubTest.stubWithReturnValue":22,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":314,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":240,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":121,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":170,"org.easymock.tests2.SerializationTest.testAllMockedMethod":269,"org.easymock.tests2.DelegateToTest.testReturnException":264,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":148,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":327,"org.easymock.tests.MockingTest.testPartialClassMocking":95,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":5,"org.easymock.samples.SupportTest.voteForRemovals":183,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":42,"org.easymock.tests.MockClassControlTest.testToString":360,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":336,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":364,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":68,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":344,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":380,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":285,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":56,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":376,"org.easymock.tests.UsageExpectAndThrowTest.object":66,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":237,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":204,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":316,"org.easymock.tests2.DelegateToTest.testWrongClass":265,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":161,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":162,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":226,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":109,"org.easymock.tests2.UsageTest.wrongArguments":185,"org.easymock.tests.UsageStrictMockTest.range":16,"org.easymock.samples.ConstructorCalledMockTest.testTax":178,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":156,"org.easymock.samples.ExampleTest.answerVsDelegate":172,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":278,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":348,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":293,"org.easymock.tests2.UsageConstraintsTest.testNull":222,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":208,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":67,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":280,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":198,"org.easymock.tests2.CaptureTest.testPrimitive":303,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":9,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":75,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":53,"org.easymock.tests.UsageTest.moreThanOneArgument":23,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":207,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":155,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":1,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":47,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":339,"org.easymock.tests2.CaptureTest.testCaptureNone":308,"org.easymock.tests.UsageUnorderedTest.message":108,"org.easymock.tests.UsageVerifyTest.twoReturns":10,"org.easymock.tests.UsageVarargTest.varargByteAccepted":84,"org.easymock.tests2.ThreadingTest.testThreadSafe":257,"org.easymock.tests.UsageTest.argumentsOrdered":54,"org.easymock.tests.UsageVarargTest.varargIntAccepted":78,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":89,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":358,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":180,"org.easymock.tests2.CaptureTest.testCapture_2617107":302,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":163,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":320,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":13,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":111,"org.easymock.tests2.UsageConstraintsTest.any":227,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":197,"org.easymock.tests2.StubTest.stub":292,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":342,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":167,"org.easymock.tests.UsageExpectAndThrowTest.longType":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":14,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":149,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":291,"org.easymock.tests2.SerializationTest.testClass":267,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":263,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":288,"org.easymock.tests.LimitationsTest.mockNativeMethod":153,"org.easymock.tests2.AnswerTest.answer":244,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":131,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":381,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":250,"org.easymock.tests2.CaptureTest.testAnd":300,"org.easymock.tests2.UsageTest.strictResetToDefault":184,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":322,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":213,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":39,"org.easymock.tests2.NameTest.nameForMocksControl":36,"org.easymock.tests2.MockedExceptionTest.testMockedException":252,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":46,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":275,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":99,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":52,"org.easymock.tests2.DelegateToTest.testDelegate":266,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":365,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":60,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":97,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":205,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":199,"org.easymock.tests.MockingTest.testNicePartialClassMocking":96,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":71,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":210,"org.easymock.tests2.CaptureTest.testCaptureLast":307,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":151,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":356,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":299,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":225,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":238,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":144,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":355,"org.easymock.tests2.CaptureTest.testCapture1_2446744":304,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":374,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":69,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":248,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":64,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":191,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":242,"org.easymock.tests.UsageThrowableTest.throwError":132,"org.easymock.tests.UsageStrictMockTest.differentMethods":30,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":347,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":332,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":259,"org.easymock.tests2.MockBuilderTest.testCreateMockString":202,"org.easymock.tests.UsageExpectAndThrowTest.floatType":58,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":49,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":233,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":245,"org.easymock.tests.UsageVerifyTest.twoThrows":28,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":352,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":325,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":286,"org.easymock.samples.PartialClassMockTest.testGetArea":169,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":164,"org.easymock.samples.ExampleTest.voteAgainstRemoval":174,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":338,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":337,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":12,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":215,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":359,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":57,"org.easymock.tests2.UsageTest.niceToStrict":186,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":372,"org.easymock.tests2.UsageConstraintsTest.testNotNull":241,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":251,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":139,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":368,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":196,"org.easymock.tests2.MockBuilderTest.testCreateMock":200,"org.easymock.tests2.UsageTest.defaultResetToNice":190,"org.easymock.samples.ExampleTest.voteAgainstRemovals":171,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":127,"org.easymock.tests.UsageVarargTest.differentLength":81,"org.easymock.tests2.CallbackTest.callback":262,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":328,"org.easymock.tests.UsageTest.openCallCountByLastCall":51,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":65,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":4,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":276,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":329,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":217,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":24,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":110,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":154,"org.easymock.tests.UsageCallCountTest.tooFewCalls":26,"org.easymock.tests.UsageOverloadedMethodTest.overloading":106,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":231,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":103,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":296,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":123,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":230,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":309,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":157,"org.easymock.tests.UsageThrowableTest.throwCheckedException":136,"org.easymock.tests2.EasyMockSupportClassTest.testAll":284,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":146,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":73,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":2,"org.easymock.tests2.CaptureTest.testCaptureAll":301,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":249,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":142,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":298,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":94,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":367,"org.easymock.tests.MockNameTest.defaultName":351,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":295,"org.easymock.tests2.UsageConstraintsTest.testMatches":232,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":297,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":246,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":48,"org.easymock.samples.ExampleTest.voteForRemovals":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":319,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":261,"org.easymock.tests2.NameTest.nameForNiceMock":35,"org.easymock.tests.UsageVarargTest.allKinds":86,"org.easymock.tests2.DependencyTest.testInterfaceMocking":203,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":27,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":318,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":143,"org.easymock.samples.BasicClassMockTest.testPrintContent":181,"org.easymock.samples.ExampleTest.addDocument":175,"org.easymock.tests2.DelegateToTest.testStubDelegate":20,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":138,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":289,"org.easymock.tests2.AnswerTest.stubAnswer":19,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":152,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":29,"org.easymock.tests2.UsageConstraintsTest.greaterThan":234,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":377,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":216,"org.easymock.tests.UsageVarargTest.varargLongAccepted":83,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":31,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":335,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":11,"org.easymock.samples.ExampleTest.voteForRemoval":173,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":258,"org.easymock.tests.UsageExpectAndReturnTest.floatType":114,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":130,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":349,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":270,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":211,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":179,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":353,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":235,"org.easymock.tests.UsageThrowableTest.noUpperLimit":133,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":218,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":87,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":17,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":305,"org.easymock.tests2.SerializationTest.test":268,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":343,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":331,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":273,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":134,"org.easymock.tests2.UsageConstraintsTest.testSame":223,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":113,"org.easymock.samples.SupportTest.addDocument":182,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":147,"org.easymock.tests2.CaptureTest.testCaptureFirst":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":375,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":274,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":18,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":104,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":119,"org.easymock.tests.GenericTest.testPackageScope":145,"org.easymock.tests2.CaptureTest.testCapture2_2446744":312,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":260,"org.easymock.tests2.UsageTest.moreThanOneArgument":32,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":201,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":85,"org.easymock.tests.GenericTest.testBridgedEquals":43,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":373,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":91,"org.easymock.tests2.NameTest.nameForMock":33,"org.easymock.tests.UsageExpectAndReturnTest.longType":115,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":271,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":140,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":74,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":124,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":239,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":324,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":72,"org.easymock.tests2.UsageStrictMockTest.differentMethods":38,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":341,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":45,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":116,"org.easymock.tests.UsageCallCountTest.tooManyCalls":92,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":70,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":100,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":25,"org.easymock.tests2.MockedExceptionTest.testRealException":254,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":350,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":120,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":326,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":61,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":37,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":379,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":8,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":137,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":294,"org.easymock.tests2.UsageConstraintsTest.testContains":229,"org.easymock.tests2.NameTest.nameForStrictMock":34,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":253,"org.easymock.tests2.UsageConstraintsTest.testFind":221,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":107,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":370,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":255,"org.easymock.tests.MockTypeTest.fromEasyMockClass":346,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":209,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":256,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":158,"org.easymock.tests.UsageExpectAndReturnTest.object":122,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":333,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":236,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":212,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":195,"org.easymock.tests2.UsageStrictMockTest.range":21,"org.easymock.tests2.UsageConstraintsTest.lessThan":243,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":279,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":317,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":80,"org.easymock.tests.UsageTest.exactCallCountByLastCall":7,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":93,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":272,"org.easymock.tests2.CaptureTest.testCaptureRightOne":310,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":41,"org.easymock.tests2.UsageConstraintsTest.testOr":224,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":321,"org.easymock.tests.UsageRangeTest.combination":98,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":206,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":76,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":128,"org.easymock.tests.UsageTest.wrongArguments":50,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":102,"org.easymock.tests2.MockBuilderTest.testWithConstructor":44,"org.easymock.tests2.EasyMockSupportTest.testVerify":283,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":40,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":125,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":334,"org.easymock.tests.UsageVarargTest.varargShortAccepted":82,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":101,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":247,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":90,"org.easymock.tests2.UsageConstraintsTest.cmpTo":228,"org.easymock.tests.UsageVarargTest.varargCharAccepted":79,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":15,"org.easymock.tests2.UsageTest.openCallCountByLastCall":188,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":189,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":369,"org.easymock.tests.DefaultClassInstantiatorTest.object":330,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":282,"org.easymock.tests2.CaptureTest.testCaptureFromStub":311,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":378,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":363,"org.easymock.tests.UsageTest.unexpectedCallWithArray":0,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":357,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":63,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":3,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":135,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":88,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":323,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":126,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":362,"org.easymock.tests2.UsageConstraintsTest.constraints":219,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":214,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":160,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":62,"org.easymock.samples.ExampleTest.addAndChangeDocument":177,"org.easymock.tests.CapturesMatcherTest.test":55,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":129,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":340,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":168,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":287,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":159,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":141,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":306,"org.easymock.tests2.UsageTest.resumeIfFailure":193,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":165,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":345,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":118,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":354,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":166,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":277,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":77}}]

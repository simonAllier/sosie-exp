[{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:56","sourceCode":"if (int > int) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[25,26,27,28,29,30,31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"currentPosition":"i","callCount":"i"}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,0,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,1,121,122,123,124,2,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,21,181,182,183,184,185,186,187,188,189,190,191,192,193,23,194,195,24,196],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[197,32,33,198,34,35,199,36,200,201,37,202,203,204,38,39,40,41,42,43,44,45,46,205,206,47,207,48,49,208,50,51,209,210,52,53,54,55,56,57,58,59,60,211,61,62,212,213,63,64,65,66,67,68,69,70,71,72,73,74,75,214,76,215,216,217,218,77,219,78,220,221,79,80,81,82,83,84,85,222,86,87,88,89,223,224,0,90,91,92,93,94,95,96,97,98,99,225,100,101,102,103,104,105,106,107,108,109,110,111,226,112,113,114,115,227,228,229,230,116,231,117,232,233,118,119,120,234,1,121,122,235,123,236,124,2,237,238,239,125,126,127,128,129,130,134,3,135,136,137,138,139,140,142,240,143,144,145,146,147,148,241,242,243,149,244,150,151,245,246,4,247,248,249,250,251,252,253,152,254,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,255,256,257,258,5,6,259,260,7,261,8,9,10,11,262,12,13,14,15,263,16,17,18,19,264,174,265,266,175,267,176,177,268,20,178,179,180,21,269,270,271,272,273,274,275,276,277,278,279,181,182,183,184,185,280,281,191,282,192,193,23,194,283,195,24,284,285,196],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[286,287,288],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[224],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[224,20,289,290],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:120","sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[291,264],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[197,32,33,198,34,35,199,36,200,292,293,201,37,202,203,204,38,39,40,41,42,43,44,45,46,205,206,47,207,48,49,208,50,51,209,210,52,53,54,55,56,57,58,59,60,211,61,62,212,213,63,64,65,66,294,67,68,69,70,71,72,73,74,295,75,296,214,76,215,216,217,297,298,218,299,77,300,301,302,303,219,78,220,221,79,80,81,82,83,84,85,222,86,87,88,89,223,224,0,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,226,112,113,114,115,116,231,117,232,304,233,118,305,119,120,306,234,307,1,121,122,235,123,236,124,2,237,238,239,125,126,127,128,129,130,308,309,310,311,134,3,135,136,137,138,139,140,142,240,143,144,145,146,147,148,241,242,243,149,244,150,151,245,312,313,314,315,4,316,248,249,250,251,317,252,253,152,254,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,255,256,257,318,5,6,259,260,7,261,8,9,10,11,262,12,13,14,15,263,16,17,18,19,264,174,175,267,319,320,321,322,323,176,177,268,20,178,179,180,21,269,270,271,272,273,274,275,276,277,278,279,181,182,324,325,326,327,328,183,184,185,280,191,192,193,23,194,329,283,195,24,284,285,196],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:92","failures":[59,211,66,92,93,95,97,98,225,109,113],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[330],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"m","equalsMethod":"m"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[331,332,330],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"clazz"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:82","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","type":"CtIfImpl"},"failures":[32,33,198,34,35,36,200,292,292,293,293,37,38,39,40,41,42,43,333,44,45,46,205,47,207,48,49,208,50,51,210,52,53,54,55,56,57,58,59,60,211,61,62,212,213,63,64,65,66,294,67,68,69,70,71,72,73,74,295,75,296,214,76,215,334,216,217,297,298,218,299,77,335,300,301,302,303,336,219,78,220,337,221,79,80,81,82,83,84,85,222,86,87,88,89,224,0,90,91,92,93,94,95,96,97,98,99,225,100,101,102,103,104,105,106,107,108,109,110,111,226,112,113,114,115,227,116,338,339,231,117,232,304,233,340,118,305,119,120,306,234,307,1,121,122,235,123,236,124,2,237,238,239,125,126,127,128,129,130,341,131,132,133,308,309,310,311,134,3,135,136,137,138,139,140,141,342,343,142,240,143,144,145,146,147,148,241,243,149,244,150,151,245,286,287,288,344,345,346,347,348,349,312,313,314,315,4,316,350,351,352,353,354,355,248,152,153,356,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,255,357,256,257,358,258,318,5,6,259,260,7,261,8,9,10,11,262,12,13,14,15,263,16,17,18,19,264,174,359,265,266,360,361,175,267,362,319,320,321,322,323,176,177,268,20,178,179,180,21,279,181,182,324,325,326,327,328,363,183,184,185,364,365,366,367,368,369,370,280,371,372,373,281,290,191,282,192,193,23,194,329,283,195,24,284,285,196],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[336,374],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[375,376,377,378,243,329],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[46,25,379,50,380,26,27,28,381,29,30,382,31,383,384,385],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"clazz","this":"this","constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[375,376,377,378,243,329],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:270","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[371,372,373,22],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1277","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[47,59,60,211,61,62,212,213,63,64,65,66,294,67,68,75,216,217,386,90,91,92,93,94,95,96,97,98,99,225,100,101,102,103,104,105,106,107,108,109,110,111,226,112,113,114,115,136,137,138,139,140,243,149,4,264,175,267,176,177,268,20,178,279,181,182],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":93,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":23,"org.easymock.tests2.UsageTest.argumentsOrdered":239,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":88,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":335,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":374,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":236,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":201,"org.easymock.tests2.DelegateToTest.testReturnException":219,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":313,"org.easymock.tests.MockingTest.testPartialClassMocking":183,"org.easymock.tests.MockClassControlTest.testToString":365,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":141,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":334,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":128,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":5,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":45,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":26,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":99,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":176,"org.easymock.tests2.UsageTest.wrongArguments":235,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":310,"org.easymock.samples.ExampleTest.answerVsDelegate":198,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":353,"org.easymock.tests2.UsageConstraintsTest.testNull":95,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":72,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":87,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":370,"org.easymock.tests2.CaptureTest.testPrimitive":61,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":178,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":19,"org.easymock.tests.UsageTest.moreThanOneArgument":194,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":71,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":326,"org.easymock.tests.UsageTest.argumentsOrdered":285,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":359,"org.easymock.tests.UsageVarargTest.varargIntAccepted":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":289,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":30,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":304,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":305,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":140,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":43,"org.easymock.tests2.AnswerTest.answer":116,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":225,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":303,"org.easymock.tests2.CaptureTest.testAnd":59,"org.easymock.tests2.UsageTest.strictResetToDefault":121,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":296,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":325,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":83,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":192,"org.easymock.tests2.DelegateToTest.testDelegate":221,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":361,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":323,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":342,"org.easymock.tests2.CaptureTest.testCapture1_2446744":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":14,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":301,"org.easymock.tests.UsageThrowableTest.throwError":142,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":352,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":328,"org.easymock.samples.PartialClassMockTest.testGetArea":37,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":137,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":132,"org.easymock.tests2.UsageTest.niceToStrict":123,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":6,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":349,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":118,"org.easymock.tests2.MockBuilderTest.testCreateMock":306,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":11,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":375,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":84,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":373,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":247,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":308,"org.easymock.tests.UsageOverloadedMethodTest.overloading":180,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":104,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":257,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":179,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":165,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":103,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":332,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":65,"org.easymock.tests2.EasyMockSupportClassTest.testAll":127,"org.easymock.tests.MockClassControlTest.testEquals":369,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":254,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":17,"org.easymock.tests2.CaptureTest.testCaptureAll":60,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":302,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":321,"org.easymock.tests.MockNameTest.defaultName":362,"org.easymock.tests2.UsageConstraintsTest.testMatches":105,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":327,"org.easymock.samples.ExampleTest.voteForRemovals":36,"org.easymock.tests.UsageVarargTest.allKinds":279,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":134,"org.easymock.samples.BasicClassMockTest.testPrintContent":203,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":322,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":147,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":205,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":316,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":337,"org.easymock.tests2.UsageConstraintsTest.greaterThan":107,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":382,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":282,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":215,"org.easymock.samples.ExampleTest.voteForRemoval":34,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":39,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":354,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":295,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":1,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":280,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":383,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":81,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":312,"org.easymock.tests2.CaptureTest.testCaptureFirst":68,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":336,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":82,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":126,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":318,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":161,"org.easymock.tests2.UsageTest.moreThanOneArgument":122,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":41,"org.easymock.tests2.CaptureTest.testCapture2_2446744":67,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":234,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":278,"org.easymock.tests.GenericTest.testBridgedEquals":356,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":252,"org.easymock.tests.UsageExpectAndReturnTest.longType":157,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":79,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":319,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":18,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":226,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":341,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":16,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":287,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":324,"org.easymock.tests.UsageCallCountTest.tooManyCalls":253,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":248,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":162,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":261,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":146,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":53,"org.easymock.tests2.UsageConstraintsTest.testContains":102,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":218,"org.easymock.tests2.UsageConstraintsTest.testFind":94,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":21,"org.easymock.tests.MockTypeTest.fromEasyMockClass":351,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":217,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":241,"org.easymock.tests.UsageExpectAndReturnTest.object":164,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":75,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":86,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":27,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":273,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":347,"org.easymock.tests.UsageTest.exactCallCountByLastCall":196,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":175,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":265,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":25,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":170,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":269,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":256,"org.easymock.tests.MockClassControlTest.testHashCode":368,"org.easymock.tests2.EasyMockSupportTest.testVerify":223,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":266,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":255,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":372,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":300,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":386,"org.easymock.tests.UsageVarargTest.varargCharAccepted":272,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":190,"org.easymock.tests2.UsageTest.openCallCountByLastCall":124,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":89,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":371,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":345,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":9,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":144,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":214,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":367,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":8,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":171,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":130,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":366,"org.easymock.tests2.UsageTest.resumeIfFailure":125,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":350,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":315,"org.easymock.tests2.StubTest.stubWithReturnValue":0,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":31,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":163,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":112,"org.easymock.tests2.SerializationTest.testAllMockedMethod":209,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":281,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":385,"org.easymock.samples.SupportTest.voteForRemovals":32,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":376,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":13,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":290,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":338,"org.easymock.tests.UsageExpectAndThrowTest.object":262,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":110,"org.easymock.tests2.DelegateToTest.testWrongClass":220,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":181,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":182,"org.easymock.tests.UsageStrictMockTest.range":150,"org.easymock.samples.ConstructorCalledMockTest.testTax":292,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":222,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":52,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":12,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":119,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":284,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":309,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":377,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":133,"org.easymock.tests2.CaptureTest.testCaptureNone":64,"org.easymock.tests.UsageUnorderedTest.message":264,"org.easymock.tests.UsageVerifyTest.twoReturns":135,"org.easymock.tests.UsageVarargTest.varargByteAccepted":277,"org.easymock.tests2.ThreadingTest.testThreadSafe":38,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":251,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":202,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":348,"org.easymock.tests2.CaptureTest.testCapture_2617107":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":188,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":20,"org.easymock.tests2.UsageConstraintsTest.any":100,"org.easymock.tests2.StubTest.stub":224,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":288,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":189,"org.easymock.tests.UsageExpectAndThrowTest.longType":260,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":314,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":331,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":207,"org.easymock.tests2.SerializationTest.testClass":50,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":77,"org.easymock.tests.LimitationsTest.mockNativeMethod":174,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":173,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":153,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":208,"org.easymock.tests2.NameTest.nameForMocksControl":230,"org.easymock.tests2.MockedExceptionTest.testMockedException":298,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":24,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":185,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":7,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":69,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":120,"org.easymock.tests.MockingTest.testNicePartialClassMocking":184,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":74,"org.easymock.tests2.CaptureTest.testCaptureLast":63,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":380,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":343,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":98,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":58,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":111,"org.easymock.tests.MockingTest.testTwoMocks":363,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":154,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":10,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":238,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":114,"org.easymock.tests.UsageStrictMockTest.differentMethods":151,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":40,"org.easymock.tests2.MockBuilderTest.testCreateMockString":307,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":364,"org.easymock.tests.UsageExpectAndThrowTest.floatType":259,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":106,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":231,"org.easymock.tests.UsageVerifyTest.twoThrows":3,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":379,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":129,"org.easymock.samples.ExampleTest.voteAgainstRemoval":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":187,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":131,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":76,"org.easymock.tests2.UsageConstraintsTest.testNotNull":113,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":148,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":297,"org.easymock.tests2.UsageTest.defaultResetToNice":237,"org.easymock.samples.ExampleTest.voteAgainstRemovals":33,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":169,"org.easymock.tests.UsageVarargTest.differentLength":274,"org.easymock.tests2.CallbackTest.callback":210,"org.easymock.tests.UsageTest.openCallCountByLastCall":195,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":90,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":268,"org.easymock.tests.UsageCallCountTest.tooFewCalls":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":55,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":311,"org.easymock.tests.UsageThrowableTest.throwCheckedException":145,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":378,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":57,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":267,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":54,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":333,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":56,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":232,"org.easymock.tests.ObjectMethodsTest.testHashCode":346,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":29,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":42,"org.easymock.tests2.NameTest.nameForNiceMock":229,"org.easymock.tests2.DependencyTest.testInterfaceMocking":44,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":28,"org.easymock.samples.ExampleTest.addDocument":199,"org.easymock.tests2.DelegateToTest.testStubDelegate":78,"org.easymock.tests2.AnswerTest.stubAnswer":117,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":149,"org.easymock.tests.UsageVarargTest.varargLongAccepted":276,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":186,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":172,"org.easymock.tests.UsageExpectAndReturnTest.floatType":156,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":46,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":293,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":108,"org.easymock.tests.UsageThrowableTest.noUpperLimit":240,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":358,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":91,"org.easymock.tests2.SerializationTest.test":51,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":212,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":330,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":155,"org.easymock.tests2.UsageConstraintsTest.testSame":96,"org.easymock.samples.SupportTest.addDocument":197,"org.easymock.tests.GenericTest.testPackageScope":152,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":360,"org.easymock.tests2.NameTest.nameForMock":227,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":166,"org.easymock.tests2.UsageStrictMockTest.differentMethods":49,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":158,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":15,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":344,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":193,"org.easymock.tests2.MockedExceptionTest.testRealException":299,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":355,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":384,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":47,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":177,"org.easymock.tests2.NameTest.nameForStrictMock":228,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":216,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":73,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":109,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":291,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":233,"org.easymock.tests2.UsageStrictMockTest.range":48,"org.easymock.tests2.UsageConstraintsTest.lessThan":115,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":80,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":381,"org.easymock.tests2.CaptureTest.testCaptureRightOne":66,"org.easymock.tests2.UsageConstraintsTest.testOr":97,"org.easymock.tests.UsageRangeTest.combination":191,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":70,"org.easymock.tests.UsageTest.wrongArguments":283,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":159,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":167,"org.easymock.tests.UsageVarargTest.varargShortAccepted":275,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":317,"org.easymock.tests2.UsageConstraintsTest.cmpTo":101,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":22,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":2,"org.easymock.tests2.CaptureTest.testCaptureFromStub":294,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":340,"org.easymock.tests.UsageTest.unexpectedCallWithArray":329,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":243,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":250,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":168,"org.easymock.tests2.UsageConstraintsTest.constraints":92,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":244,"org.easymock.samples.ExampleTest.addAndChangeDocument":200,"org.easymock.tests.UsageStrictMockTest.testVerify":246,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":204,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":242,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":320,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":213,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":138,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":139,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":258,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":85,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":270}}]

[{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.Or:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(org.easymock.internal.Invocation.getMockAndMethodName())","position":"org.easymock.internal.ExpectedInvocation:104","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1191","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMockSupport:519","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"variableMapping":{"currentCaptures":"currentCaptures"},"name":"replace","transplant":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : this.java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.setPotentialValue(null);\n}","position":"org.easymock.internal.Invocation:173","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.validateCapture();\n}","position":"org.easymock.internal.Invocation:167","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:91","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:130","type":"CtThrowImpl"},"status":-2},{"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:83","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.matchers.Equals.matches(java.lang.Object)","position":"org.easymock.internal.matchers.ArrayEquals:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>))","position":"org.easymock.internal.DefaultClassInstantiator:42","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"exception":"candidateParameter","throwableClass":"candidateParameter"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:323","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1507","type":"CtReturnImpl"},"status":-2},{"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"variableMapping":{"errorMessage":"buffer","m":"this","matches":"matches"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","position":"org.easymock.internal.ErrorMessage:50","type":"CtIfImpl"},"status":-1},{"failures":[31,49,50,51,52,53,32,54,55,34,56,57,58,59,60,61,41,42,62,63,64,44,65,66,67,48],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:76","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n        org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n    }\n}","position":"org.easymock.internal.MocksBehavior:167","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = org.easymock.internal.ExpectedInvocation.getMethod().getExceptionTypes()","position":"org.easymock.internal.RecordState:320","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.UnorderedBehavior:67","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"failMessage":"methodName"},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","position":"org.easymock.internal.DefaultClassInstantiator:183","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Properties.load(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:538","type":"CtReturnImpl"},"status":-2},{"failures":[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,31,84,85,86,87,88,89,90,91,92,93,94,95,96,0,1,2,3,4,5,6,7,97,8,9,11,12,98,99,100,101,102,49,103,104,105,50,51,106,52,107,108,109,110,111,112,113,114,115,32,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,33,34,56,57,142,143,144,145,146,147,148,149,150,151,35,152,58,59,60,153,36,154,155,156,157,158,159,160,161,162,163,164,165,166,167,37,38,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,41,42,227,228,229,230,43,44,65,66,45,231,232,233,234,235,236,237,238,239,240,241,46,67,47,48,242,243,244,245,246,247,248,249,250,29,251,252,253,30,254,255],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:50","type":"mutation","status":-1},{"failures":[],"binaryOperator":"((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","name":"math","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:201","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","position":"org.easymock.internal.ClassProxyFactory:226","type":"CtTryImpl"},"status":-2},{"failures":[34,56,256,172,176,177,179,182,206,210,211,213,216,44,65,257,258,259],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","position":"org.easymock.internal.MocksControl:343","type":"CtInvocationImpl"},"status":-1},{"failures":[260],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((int) <= int) && (int <= (int))","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.easymock.internal.ArgumentToString:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"status":-2},{"failures":[96,102,49,103,104,105,50,51,261,106,52,107,108,109,111,112,134,135,136,137,138,143,29,262,262,263,263,251,252,253,30,254,255],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"status":-1},{"failures":[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,31,84,85,86,87,88,90,91,92,93,94,95,96,0,1,3,4,7,97,8,9,10,11,12,98,264,265,99,100,101,102,49,103,104,105,50,51,261,106,52,107,108,266,110,111,112,53,113,114,32,116,117,118,119,120,121,122,123,124,125,126,127,267,128,129,130,268,131,132,133,134,135,136,137,138,139,140,55,34,56,269,270,142,271,143,144,145,146,147,148,149,150,272,151,260,35,152,58,59,273,274,275,153,36,276,277,154,155,156,157,158,159,160,161,162,163,164,165,278,279,280,281,282,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,283,190,284,191,192,193,194,195,196,197,198,199,200,285,286,287,288,289,201,290,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,61,41,42,291,292,293,294,295,296,227,228,229,62,297,298,299,64,44,65,300,301,302,303,45,231,304,305,306,307,46,67,308,309,47,48,310,242,243,244,245,246,247,249,250,262,262,263,263,251,253],"variableMapping":{"this":"lastControl"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","position":"org.easymock.EasyMock:557","type":"CtIfImpl"},"status":-1},{"failures":[311,266,312,110,111,112,53,313,113,117,118,121,122,135,136,137,145,314,315,272,151,260,316,160,161,162,283,317,318,251],"variableMapping":{"mockedMethods":"mockedMethods"},"name":"replace","transplant":{"sourceCode":"this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","position":"org.easymock.internal.MockBuilder:72","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]))","position":"org.easymock.internal.ClassProxyFactory:101","type":"CtAssignmentImpl"},"status":-1},{"failures":[315],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:471","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"-2722051869610289637L","position":"org.easymock.internal.Results:28","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"o"},"name":"add","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","position":"org.easymock.internal.Invocation:180","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"int int = int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:632","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.CompareEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:1877","type":"CtInvocationImpl"},"status":-2},{"failures":[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,31,84,85,86,87,88,90,91,92,93,94,95,0,1,2,3,4,5,6,7,97,8,9,10,11,12,98,99,100,101,319,320,321,322,323,324,325,326,311,110,327,53,313,113,114,115,32,117,118,121,122,123,124,125,126,127,128,129,130,131,132,133,328,138,139,140,54,141,55,33,34,56,57,269,270,142,271,144,145,146,147,148,149,150,315,151,35,152,58,329,59,60,273,274,275,330,331,153,36,154,155,156,157,158,159,332,160,161,162,163,164,333,334,335,336,337,338,165,339,166,167,278,279,280,281,282,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,200,285,286,287,288,289,201,290,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,61,41,42,340,341,342,343,344,62,63,230,345,64,43,44,65,66,346,347,303,45,231,304,232,233,234,235,236,237,238,239,240,241,46,67,348,349,308,309,350,351,47,48,310,242,243,244,245,246,247,248,249,250],"variableMapping":{"this":"this","mocks":"mocks"},"name":"replace","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"status":-1},{"failures":[55,34,56,58,352,39,353,40,61,41,42,64,44,65,45,67],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:603","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:88","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.Result:88","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.MocksBehavior:124","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1647","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:707","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1688","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:919","type":"CtInvocationImpl"},"status":-2},{"failures":[354,1,10,11,355],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<T>.add(T)","position":"org.easymock.Capture:109","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"matches":"callCount"},"name":"replace","transplant":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:73","type":"CtOperatorAssignmentImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-9054190871232972342L","position":"org.easymock.internal.ClassProxyFactory:53","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.Invocation:214","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.TestSubject != null) {\n    org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n    continue;\n} ","position":"org.easymock.internal.Injector:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.ClassInstantiatorFactory.instantiator":"i"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:180","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"bound","bound":"result","this":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:358","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","position":"org.easymock.EasyMock:1494","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.Method.getGenericParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:188","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((int) <= int) && (int <= (int))","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"status":-2},{"failures":[259],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:422","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:45","type":"CtInvocationImpl"},"status":-2},{"failures":[356,275],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","position":"org.easymock.EasyMock:2079","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:69","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.internal.Result:80","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","position":"org.easymock.internal.matchers.EndsWith:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0)","position":"org.easymock.internal.MocksBehavior:169","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","position":"org.easymock.internal.ClassInstantiatorFactory:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:878","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.ConstructorArgs:56","type":"CtLocalVariableImpl"},"status":-2},{"failures":[357],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"status":-1},{"failures":[],"binaryOperator":"((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\")","name":"math","position":"org.easymock.internal.ClassProxyFactory:230","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor });\n    if (org.easymock.ConstructorArgs != null) {\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n        try {\n            java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n        } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n            throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n        }\n        T T;\n        try {\n            java.lang.reflect.Constructor<?>.setAccessible(true);\n            T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n        } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n        } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n        }\n        return T;\n    } else {\n        net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n        try {\n            net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n        }\n        net.sf.cglib.proxy.Factory.getCallback(0);\n        return ((T)(net.sf.cglib.proxy.Factory));\n    }\n} finally {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null);\n}","position":"org.easymock.internal.ClassProxyFactory:188","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n    java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n}","position":"org.easymock.internal.ClassProxyFactory:136","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"status":-2},{"failures":[39,45],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","position":"org.easymock.internal.ErrorMessage:53","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"bridgeMethod","bridgeMethod":"bridgeMethod"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:87","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","position":"org.easymock.internal.ErrorMessage:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:175","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","position":"org.easymock.EasyMock:1530","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)++","position":"org.easymock.internal.MocksBehavior:94","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","position":"org.easymock.internal.DefaultClassInstantiator:155","type":"CtTryImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Method not found (or private): \" + java.lang.String)","name":"math","position":"org.easymock.internal.MockBuilder:90","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:174","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:42","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"status":-2},{"failures":[131],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:127","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","position":"org.easymock.internal.RecordState:262","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","position":"org.easymock.internal.ClassProxyFactory:269","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:58","type":"CtContinueImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:161","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.setPotentialValue(null);\n}","position":"org.easymock.internal.Invocation:173","type":"CtForEachImpl"},"status":-2},{"failures":[68,69,70,71,72,73,74,75,76,77,358,78,79,80,81,82,83,31,84,85,86,87,88,89,90,91,92,93,94,95,96,0,1,2,3,4,5,6,7,97,8,9,11,12,98,99,100,101,102,49,103,104,105,50,51,261,106,52,107,108,109,319,320,321,322,266,110,111,112,53,113,114,115,32,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,54,141,55,33,34,56,57,142,143,144,145,146,147,148,149,150,272,151,260,35,152,58,329,59,60,273,274,275,330,331,153,36,154,155,156,157,158,159,359,160,161,162,163,164,360,337,165,339,166,167,37,38,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,285,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,61,41,42,227,228,229,62,63,230,345,64,43,44,65,66,346,301,302,45,231,304,232,233,234,235,236,361,237,238,239,240,241,46,67,349,308,309,350,351,47,48,310,242,243,244,245,246,247,248,249,250,29,251,252,253,30,254,255],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:290","type":"CtReturnImpl"},"status":-1},{"failures":[319,320,321,322,55,34,56,58,329,330,331,41,42,345,64,44,65,45,67,349,350,351],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:90","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.AndroidClassProxyFactory:80","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","position":"org.easymock.ConstructorArgs:64","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:363","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod()))","name":"math","position":"org.easymock.internal.DelegatingAnswer:86","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:124","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Proxy.((T)(java.lang.reflect.Proxy.newProxyInstance(java.lang.Class<T>.getClassLoader(), new java.lang.Class[]{ java.lang.Class<T> }, java.lang.reflect.InvocationHandler)))","position":"org.easymock.internal.JavaProxyFactory:30","type":"CtReturnImpl"},"status":-2},{"failures":[362,363,364],"variableMapping":{"data":"data"},"name":"replace","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:149","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","position":"org.easymock.internal.ReflectionUtils:148","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<T>","position":"org.easymock.Capture:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.MocksBehavior:161","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","position":"org.easymock.internal.InjectionTarget:46","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"expected":"obj"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n    return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:88","type":"CtIfImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":194,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":23,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":43,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":150,"org.easymock.tests2.MockedExceptionTest.testRealException":271,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":230,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":217,"org.easymock.tests.UsageVarargTest.varargIntAccepted":234,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":231,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":68,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":29,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":94,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":297,"org.easymock.tests2.UsageConstraintsTest.testContains":80,"org.easymock.tests.UsageCallCountTest.tooManyCalls":38,"org.easymock.tests2.UsageConstraintsTest.testFind":72,"org.easymock.tests2.StubTest.stubWithReturnValue":140,"org.easymock.tests.UsageVarargTest.allKinds":241,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":5,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":336,"org.easymock.tests2.CaptureTest.testCaptureAll":1,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":163,"org.easymock.samples.ExampleTest.addAndChangeDocument":250,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":311,"org.easymock.tests.UsageVarargTest.varargCharAccepted":235,"org.easymock.tests2.CaptureTest.testCaptureFromStub":10,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":28,"org.easymock.tests.UsageVerifyTest.twoThrows":41,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":223,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":236,"org.easymock.tests2.DelegateToTest.testReturnException":128,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":60,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":31,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":108,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":141,"org.easymock.tests2.CaptureTest.testAnd":0,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":293,"org.easymock.tests.UsageStrictMockTest.testVerify":346,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":210,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":8,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":228,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":214,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":317,"org.easymock.tests2.UsageConstraintsTest.testMatches":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":341,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":277,"org.easymock.tests2.UsageConstraintsTest.testNull":73,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":116,"org.easymock.tests2.EasyMockSupportClassTest.testAll":134,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":50,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":181,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":218,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":143,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":190,"org.easymock.tests.UsageThrowableTest.throwError":191,"org.easymock.tests2.UsageConstraintsTest.greaterThan":84,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":232,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":226,"org.easymock.samples.SupportTest.addDocument":252,"org.easymock.tests2.StubTest.stub":139,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":301,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":347,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":21,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":158,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":222,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":19,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":86,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":106,"org.easymock.tests.UsageExpectAndReturnTest.object":178,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":187,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":316,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":240,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":57,"org.easymock.tests.UsageExpectAndThrowTest.object":212,"org.easymock.tests2.DelegateToTest.testWrongClass":130,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":125,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":288,"org.easymock.tests2.UsageTest.moreThanOneArgument":58,"org.easymock.tests.UsageVarargTest.varargByteAccepted":239,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":209,"org.easymock.samples.ExampleTest.voteAgainstRemoval":247,"org.easymock.tests.UsageTest.wrongArguments":349,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":343,"org.easymock.tests.CapturesMatcherTest.test":355,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":197,"org.easymock.tests.UsageVarargTest.varargShortAccepted":237,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":24,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":259,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":213,"org.easymock.tests2.UsageTest.defaultResetToNice":275,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":142,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":157,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":30,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":126,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":112,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":359,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":127,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":22,"org.easymock.tests2.SerializationTest.testAllMockedMethod":115,"org.easymock.tests2.NameTest.nameForMocksControl":322,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":300,"org.easymock.samples.ExampleTest.voteAgainstRemovals":244,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":54,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":242,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":225,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":199,"org.easymock.tests2.CaptureTest.testCapture1_2446744":4,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":36,"org.easymock.tests.ErrorMessageTest.testGetters":353,"org.easymock.tests2.DelegateToTest.testStubDelegate":129,"org.easymock.tests.LimitationsTest.mockNativeMethod":154,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":306,"org.easymock.tests.UsageUnorderedTest.message":45,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":268,"org.easymock.samples.ExampleTest.answerVsDelegate":245,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":299,"org.easymock.samples.ExampleTest.voteForRemoval":246,"org.easymock.tests.UsageCallCountTest.tooFewCalls":339,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":177,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":99,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":167,"org.easymock.tests.UsageVerifyTest.twoReturns":42,"org.easymock.tests2.DependencyTest.testInterfaceMocking":95,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":172,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":211,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":62,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":102,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":287,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":104,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":307,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":326,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":76,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":66,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":333,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":39,"org.easymock.tests2.CaptureTest.testCaptureRightOne":9,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":174,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":165,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":334,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":269,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":265,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":149,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":310,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":258,"org.easymock.tests2.UsageConstraintsTest.cmpTo":79,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":337,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":179,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":362,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":118,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":27,"org.easymock.tests2.MockedExceptionTest.testMockedException":270,"org.easymock.tests.UsageThrowableTest.throwCheckedException":195,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":90,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":221,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":280,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":61,"org.easymock.samples.PartialClassMockTest.testGetArea":251,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":193,"org.easymock.samples.ExampleTest.voteForRemovals":249,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":285,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":82,"org.easymock.samples.ConstructorCalledMockTest.testTax":262,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":229,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":289,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":148,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":264,"org.easymock.tests2.UsageTest.argumentsOrdered":331,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":46,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":101,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":284,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":173,"org.easymock.tests2.CaptureTest.testCaptureMultiple":354,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":340,"org.easymock.tests2.AnswerTest.answer":98,"org.easymock.tests.MockingTest.testNicePartialClassMocking":161,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":64,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":169,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":15,"org.easymock.tests2.UsageConstraintsTest.any":78,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":159,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":282,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":302,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":107,"org.easymock.tests.UsageExpectAndThrowTest.longType":205,"org.easymock.tests2.CallbackTest.callback":32,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":133,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":256,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":261,"org.easymock.tests2.NameTest.nameForMock":319,"org.easymock.tests.UsageTest.argumentsOrdered":351,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":71,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":111,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":81,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":186,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":224,"org.easymock.tests2.MockBuilderTest.testCreateMockString":313,"org.easymock.tests2.NameTest.nameForStrictMock":320,"org.easymock.tests2.CaptureTest.testCaptureNone":97,"org.easymock.tests2.SerializationTest.test":114,"org.easymock.tests.UsageExpectAndReturnTest.longType":171,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":6,"org.easymock.tests2.SerializationTest.testClass":113,"org.easymock.tests2.CaptureTest.testCaptureFirst":12,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":87,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":254,"org.easymock.tests2.UsageTest.niceToStrict":59,"org.easymock.tests2.EasyMockSupportTest.testVerify":109,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":286,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":26,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":344,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":298,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":327,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":63,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":207,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":89,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":35,"org.easymock.tests2.UsageTest.strictResetToDefault":152,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":215,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":53,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":151,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":185,"org.easymock.tests.GenericTest.testBridgedEquals":357,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":304,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":202,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":77,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":120,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":175,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":323,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":314,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":85,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":147,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":233,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":144,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":290,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":162,"org.easymock.tests2.UsageConstraintsTest.testOr":75,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":124,"org.easymock.tests2.DelegateToTest.testDelegate":131,"org.easymock.tests2.UsageConstraintsTest.testNotNull":91,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":33,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":138,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":14,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":18,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":164,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":180,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":198,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":318,"org.easymock.tests2.ThreadingTest.testThreadSafe":123,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":274,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":363,"org.easymock.tests.UsageThrowableTest.noUpperLimit":192,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":279,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":117,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":119,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":52,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":49,"org.easymock.tests.UsageExpectAndReturnTest.floatType":170,"org.easymock.tests2.UsageTest.wrongArguments":329,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":358,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":325,"org.easymock.tests2.UsageConstraintsTest.testSame":74,"org.easymock.tests2.UsageTest.resumeIfFailure":153,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":292,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":121,"org.easymock.tests.UsageOverloadedMethodTest.overloading":200,"org.easymock.tests.UsageRangeTest.combination":48,"org.easymock.samples.SupportTest.voteForRemovals":253,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":196,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":16,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":17,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":296,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":263,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":92,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":189,"org.easymock.tests.UsageTest.openCallCountByLastCall":308,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":208,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":295,"org.easymock.tests2.NameTest.nameForNiceMock":321,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":25,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":243,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":88,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":20,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":278,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":55,"org.easymock.tests2.CaptureTest.testPrimitive":3,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":146,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":182,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":216,"org.easymock.samples.BasicClassMockTest.testPrintContent":255,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":291,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":335,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":155,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":40,"org.easymock.tests.UsageExpectAndThrowTest.floatType":204,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":315,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":37,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":132,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":145,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":183,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":13,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":338,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":356,"org.easymock.tests2.UsageStrictMockTest.differentMethods":56,"org.easymock.tests.UsageTest.exactCallCountByLastCall":47,"org.easymock.tests2.AnswerTest.stubAnswer":100,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":103,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":51,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":283,"org.easymock.tests2.CaptureTest.testCaptureLast":7,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":203,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":166,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":96,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":135,"org.easymock.tests.UsageStrictMockTest.range":44,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":309,"org.easymock.tests.UsageTest.unexpectedCallWithArray":348,"org.easymock.tests.MockingTest.testPartialClassMocking":160,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":184,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":330,"org.easymock.tests2.UsageConstraintsTest.constraints":70,"org.easymock.samples.ExampleTest.addDocument":248,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":352,"org.easymock.tests2.UsageConstraintsTest.lessThan":93,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":324,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":350,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":227,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":328,"org.easymock.tests.UsageVarargTest.varargLongAccepted":238,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":257,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":281,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":364,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":272,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":260,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":267,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":345,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":137,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":294,"org.easymock.tests2.UsageStrictMockTest.range":34,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":122,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":303,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":312,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":342,"org.easymock.tests.UsageTest.moreThanOneArgument":67,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":156,"org.easymock.tests2.UsageTest.openCallCountByLastCall":273,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":266,"org.easymock.tests.UsageStrictMockTest.differentMethods":65,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":105,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":69,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":332,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":110,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":206,"org.easymock.tests.DefaultClassInstantiatorTest.object":360,"org.easymock.tests.UsageVarargTest.differentLength":361,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":276,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":305,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":168,"org.easymock.tests2.CaptureTest.testCapture2_2446744":11,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":201,"org.easymock.tests.GenericTest.testPackageScope":188}}]

[{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[93],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:582","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[94],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[95,96],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[97,98,99,100,101,102,103,104,105,106],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[107,108,109,110,111],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:592","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[112,113],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[114,115,116,117,118,119,1,3,4,120,121,6,122,123,124,125,126,127,128,129,130,131,132,8,133,134,13,135,136,137,138,139,95,96,140,141,142,143,144,145,14,146,147,93,148,149,150,151,152,153,16,154,18,19,21,155,156,157,158,159,160,161,162,163,164,165,23,166,25,167,26,168,27,28,169,29,30,170,171,172,173,174,175,176,177,178,179,180,181,31,182,32,34,183,184,185,38,39,104,186,40,41,187,188,42,43,189,190,191,44,192,193,194,195,196,197,198,46,199,200,201,105,105,106,106,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,50,52,53,225,226,56,227,228,229,230,231,232,233,234,235,113,236,237,238,59,239,240,241,242,243,244,245,246,247,67,68,69,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,74,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,75,76,295,296,81,297,298,299,300,301,83,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:94","sourceCode":"(int)++","type":"CtUnaryOperatorImpl"},"failures":[],"status":-2,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"method","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[120,121,317,318],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"argType":"primitiveType","paramType":"primitiveType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[114,115,116,117,118,119,0,319,1,2,3,4,5,120,121,317,320,321,322,323,324,6,7,325,326,327,328,329,122,123,124,125,126,330,127,331,128,332,333,334,335,336,337,129,338,339,130,340,341,131,342,132,8,343,133,134,13,135,344,136,137,138,139,95,96,345,140,141,142,143,144,145,14,146,147,93,148,149,346,150,151,152,153,16,347,154,348,18,349,20,350,155,156,351,157,158,352,353,159,160,161,162,163,164,165,354,355,356,357,358,23,24,359,360,361,362,363,166,25,167,168,27,169,30,170,171,364,172,173,174,175,176,177,178,179,180,181,365,366,367,368,369,370,371,372,31,182,32,33,34,35,183,184,185,36,37,38,39,104,373,41,187,188,42,189,190,191,44,192,193,194,195,374,196,375,376,45,197,198,46,377,199,200,201,378,105,105,106,106,379,202,380,203,204,205,206,381,207,382,208,383,384,209,210,211,212,213,214,215,216,217,218,219,220,221,222,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,223,401,402,403,404,405,224,406,48,407,49,50,51,52,53,54,408,409,410,411,412,55,225,226,56,227,228,229,230,231,232,112,413,414,415,416,417,418,94,419,420,421,422,423,424,425,426,427,428,429,233,234,235,430,431,113,432,236,57,237,238,58,59,60,433,239,434,62,64,66,240,241,242,243,244,245,246,247,67,68,69,248,249,250,251,252,435,436,437,438,439,440,253,441,254,442,443,444,445,446,447,448,70,449,450,451,452,453,454,71,455,456,72,73,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,74,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,75,76,77,78,295,296,79,80,81,297,298,299,300,301,82,83,457,302,303,304,305,306,307,308,309,310,311,312,313,458,459,460,314,315,461,316,462,463,464,84,465,85,86,466,467,87,88,89,468,469,90,91,92,470,471,472],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[137,345,93,151],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[3,4,393,52,53,259,263,264,266,269,279,283,284,286,289,297,300,301],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[114,115,116,117,118,119,0,319,1,2,3,4,5,120,121,317,6,122,123,124,125,126,127,128,129,130,131,132,8,9,10,11,12,133,134,13,135,136,137,138,139,95,96,140,141,142,143,144,145,14,146,147,93,148,149,346,150,151,152,153,15,16,154,348,18,19,20,21,22,155,156,351,157,158,352,353,159,160,161,162,163,164,165,23,166,25,167,26,168,27,28,169,29,30,170,171,364,172,173,174,175,176,177,178,179,180,181,369,370,371,372,31,182,32,33,34,35,183,184,185,36,37,38,39,104,186,40,41,187,188,42,43,189,190,191,44,192,193,194,195,374,196,45,197,198,46,199,200,201,378,105,105,106,106,379,202,380,203,204,205,206,381,207,382,208,383,384,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,48,407,49,50,51,52,53,54,408,409,410,411,412,225,226,56,227,228,229,230,231,232,112,94,419,420,421,422,423,424,425,426,427,428,429,233,234,235,113,236,57,237,238,58,59,60,433,239,434,240,241,242,243,244,245,246,247,67,68,69,248,249,250,251,252,435,436,437,438,439,253,441,254,443,444,445,447,448,70,449,450,451,452,453,71,455,456,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,74,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,75,76,77,78,295,296,79,80,81,297,298,299,300,301,82,83,302,303,304,305,306,307,308,309,310,311,312,313,460,314,315,316,84,465,85,86,466,467,87,88,89,468,469,90,91,92,470,471,472],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:96","sourceCode":"return java.lang.Class<?>.getConstructors()[0]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:89","sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[32,33,36,37,473,474,475,476,49,477,478,479,76,77,78,79,80],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.Results:56","sourceCode":"if (int > int) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"currentPosition":"result","callCount":"result"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[15,348,172,374,47],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[114,117,118,119,319,1,4,5,120,121,317,122,123,126,131,132,8,9,10,11,12,133,134,13,135,136,137,138,139,95,96,140,141,142,143,144,145,14,146,147,93,148,149,150,151,152,153,15,154,348,155,156,351,157,352,353,159,160,161,162,165,172,173,174,175,177,178,181,369,370,371,372,182,32,34,35,185,38,104,40,41,42,43,189,190,191,192,193,194,195,196,45,198,199,203,204,205,206,381,207,208,209,210,211,212,213,214,215,216,217,218,219,221,222,407,50,53,54,408,409,410,411,412,225,56,227,228,229,113,59,243,244,247,67,68,69,248,249,250,251,252,435,436,437,438,439,253,441,443,444,445,447,448,449,450,451,452,453,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,76,457,302,303,305,306,312,314,315,316,84,465,85,86,466,467,469],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[416,480,481],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[420],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[182,376],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[114,117,118,119,0,319,1,2,3,4,5,120,121,317,6,122,123,124,125,126,127,128,129,130,131,132,8,9,10,11,12,133,134,13,135,136,137,138,139,95,96,140,141,142,143,144,145,14,146,147,93,148,149,150,151,152,153,15,154,348,18,19,21,22,155,156,351,157,158,352,353,159,160,161,162,163,164,165,23,166,25,167,26,168,27,28,169,29,30,170,171,364,172,173,174,175,177,178,179,181,369,370,371,372,31,182,32,33,34,35,183,184,185,36,37,38,39,104,186,40,41,187,188,42,43,189,190,191,44,192,193,194,195,196,45,198,199,200,201,378,105,105,106,106,379,202,380,203,204,205,206,381,207,208,383,384,209,210,211,212,213,214,215,216,217,218,219,221,222,48,407,49,50,51,52,53,54,408,409,410,411,412,225,56,227,228,229,419,421,422,424,427,429,113,59,243,244,245,246,247,67,68,69,248,249,250,251,252,435,436,437,438,439,253,441,443,444,445,447,448,449,450,451,452,453,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,74,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,75,76,77,78,295,296,79,80,81,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,84,465,85,86,466,467,469],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"substring"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[136],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[176,178,395],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":135,"org.easymock.tests2.UsageTest.argumentsOrdered":37,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":75,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":170,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":24,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":395,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":35,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":378,"org.easymock.tests2.DelegateToTest.testReturnException":177,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":215,"org.easymock.tests.MockingTest.testPartialClassMocking":314,"org.easymock.tests.MockClassControlTest.testToString":90,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":343,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":403,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":47,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":128,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":275,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":200,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":96,"org.easymock.tests2.UsageTest.wrongArguments":33,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":243,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":329,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":411,"org.easymock.samples.ExampleTest.answerVsDelegate":204,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":64,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":463,"org.easymock.tests2.UsageConstraintsTest.testNull":137,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":193,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":472,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":30,"org.easymock.tests2.CaptureTest.testPrimitive":157,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":247,"org.easymock.tests.UsageTest.moreThanOneArgument":76,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":294,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":192,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":250,"org.easymock.tests.UsageTest.argumentsOrdered":80,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":297,"org.easymock.tests.UsageVarargTest.varargIntAccepted":445,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":400,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":209,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":15,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":362,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":387,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":213,"org.easymock.tests.ReplayStateInvalidUsageTest.times":426,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":6,"org.easymock.tests2.AnswerTest.answer":114,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":401,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":372,"org.easymock.tests2.CaptureTest.testAnd":155,"org.easymock.tests2.UsageTest.strictResetToDefault":182,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":45,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":249,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":168,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":228,"org.easymock.tests2.DelegateToTest.testDelegate":181,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":301,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":290,"org.easymock.tests.LimitationsTest.mockFinalMethod":432,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":218,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":439,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":82,"org.easymock.tests2.CaptureTest.testCapture1_2446744":158,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":288,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":370,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":420,"org.easymock.tests.UsageThrowableTest.throwError":304,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":63,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":363,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":252,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":341,"org.easymock.samples.PartialClassMockTest.testGetArea":201,"org.easymock.tests.MockingTest.testInterfaceMocking":461,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":421,"org.easymock.tests2.CompareToTest.testLessOrEqual":111,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":210,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":241,"org.easymock.tests2.UsageTest.niceToStrict":34,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":73,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":385,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":103,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":154,"org.easymock.tests2.MockBuilderTest.testCreateMock":20,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":326,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":473,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":284,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":27,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":232,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":84,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":409,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":100,"org.easymock.tests.UsageOverloadedMethodTest.overloading":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":339,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":144,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":238,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":220,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":266,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":480,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":143,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":161,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":446,"org.easymock.tests.MockClassControlTest.testEquals":471,"org.easymock.tests2.EasyMockSupportClassTest.testAll":127,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":441,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":474,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":292,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":437,"org.easymock.tests2.CaptureTest.testCaptureAll":156,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":371,"org.easymock.tests.MockNameTest.defaultName":55,"org.easymock.tests2.UsageConstraintsTest.testMatches":145,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":94,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":251,"org.easymock.samples.ExampleTest.voteForRemovals":207,"org.easymock.tests.UsageVarargTest.allKinds":453,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":67,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":438,"org.easymock.samples.BasicClassMockTest.testPrintContent":384,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":310,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":0,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":219,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":359,"org.easymock.tests2.UsageConstraintsTest.greaterThan":146,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":227,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":46,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":418,"org.easymock.samples.ExampleTest.voteForRemoval":205,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":123,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":377,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":65,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":374,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":31,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":225,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":392,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":167,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":306,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":214,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":176,"org.easymock.tests2.CaptureTest.testCaptureFirst":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":391,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":26,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":39,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":60,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":262,"org.easymock.tests2.CaptureTest.testCapture2_2446744":164,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":125,"org.easymock.tests2.UsageTest.moreThanOneArgument":32,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":402,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":21,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":452,"org.easymock.tests.GenericTest.testBridgedEquals":442,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":101,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":98,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":88,"org.easymock.tests.UsageExpectAndReturnTest.longType":258,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":435,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":166,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":293,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":226,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":346,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":291,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":234,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":248,"org.easymock.tests.UsageCallCountTest.tooManyCalls":89,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":85,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":263,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":280,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":309,"org.easymock.tests.MockingTest.testNiceClassMocking":464,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":40,"org.easymock.tests.MockingTest.testClassMocking":459,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":465,"org.easymock.tests2.UsageConstraintsTest.testContains":142,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":174,"org.easymock.tests2.UsageConstraintsTest.testFind":136,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":222,"org.easymock.tests.MockTypeTest.fromEasyMockClass":62,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":132,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":48,"org.easymock.tests.UsageExpectAndReturnTest.object":265,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":196,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":327,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":29,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":448,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":456,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":102,"org.easymock.tests.UsageTest.exactCallCountByLastCall":81,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":390,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":433,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":298,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":479,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":373,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":443,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":271,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":237,"org.easymock.tests.MockClassControlTest.testHashCode":470,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":355,"org.easymock.tests2.EasyMockSupportTest.testVerify":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":335,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":299,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":231,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":236,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":369,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":350,"org.easymock.tests.UsageVarargTest.varargCharAccepted":447,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":406,"org.easymock.tests2.UsageTest.openCallCountByLastCall":183,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":171,"org.easymock.tests.DefaultClassInstantiatorTest.object":112,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":230,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":71,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":336,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":307,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":323,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":354,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":92,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":197,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":281,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":272,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":130,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":91,"org.easymock.tests2.UsageTest.resumeIfFailure":38,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":61,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":217,"org.easymock.tests2.StubTest.stubWithReturnValue":190,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":150,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":264,"org.easymock.tests2.SerializationTest.testAllMockedMethod":317,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":223,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":475,"org.easymock.samples.SupportTest.voteForRemovals":202,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":440,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":357,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":287,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":318,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":224,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":115,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":434,"org.easymock.tests.UsageExpectAndThrowTest.object":285,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":148,"org.easymock.tests2.DelegateToTest.testWrongClass":179,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":302,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":303,"org.easymock.samples.ConstructorCalledMockTest.testTax":105,"org.easymock.tests.UsageStrictMockTest.range":52,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":367,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":169,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":186,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":99,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":286,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":18,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":428,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":330,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":410,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":477,"org.easymock.tests2.CaptureTest.testCaptureNone":160,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":242,"org.easymock.tests.UsageUnorderedTest.message":74,"org.easymock.tests.UsageVerifyTest.twoReturns":69,"org.easymock.tests.UsageVarargTest.varargByteAccepted":451,"org.easymock.tests2.ThreadingTest.testThreadSafe":122,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":467,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":72,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":383,"org.easymock.tests2.CaptureTest.testCapture_2617107":351,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":476,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":404,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":246,"org.easymock.tests2.UsageConstraintsTest.any":140,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":425,"org.easymock.tests2.StubTest.stub":189,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":405,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":216,"org.easymock.tests.UsageExpectAndThrowTest.longType":278,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":416,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":424,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":2,"org.easymock.tests2.SerializationTest.testClass":120,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":23,"org.easymock.tests.LimitationsTest.mockNativeMethod":113,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":254,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":274,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":322,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":5,"org.easymock.tests2.NameTest.nameForMocksControl":12,"org.easymock.tests2.MockedExceptionTest.testMockedException":173,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":331,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":296,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":279,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":316,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":342,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":191,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":19,"org.easymock.tests.MockingTest.testNicePartialClassMocking":315,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":195,"org.easymock.tests2.CaptureTest.testCaptureLast":159,"org.easymock.tests2.CompareToTest.testCompareEqual":109,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":320,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":83,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":43,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":95,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":149,"org.easymock.tests.MockingTest.testTwoMocks":460,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":255,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":283,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":36,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":152,"org.easymock.samples.ExampleTest.removeNonExistingDocument":382,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":422,"org.easymock.tests.UsageStrictMockTest.differentMethods":53,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":325,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":356,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":414,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":124,"org.easymock.tests2.MockBuilderTest.testCreateMockString":22,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":468,"org.easymock.tests.UsageExpectAndThrowTest.floatType":277,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":14,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":117,"org.easymock.tests.UsageVerifyTest.twoThrows":68,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":129,"org.easymock.samples.ExampleTest.voteAgainstRemoval":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":396,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":240,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":198,"org.easymock.tests.LimitationsTest.privateConstructor":431,"org.easymock.tests2.UsageConstraintsTest.testNotNull":151,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":172,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":311,"org.easymock.tests2.UsageTest.defaultResetToNice":185,"org.easymock.samples.ExampleTest.voteAgainstRemovals":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":397,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":270,"org.easymock.tests.UsageVarargTest.differentLength":70,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":321,"org.easymock.tests2.CallbackTest.callback":8,"org.easymock.tests2.UsageConstraintsTest.equals":344,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":375,"org.easymock.tests.UsageTest.openCallCountByLastCall":295,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":133,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":245,"org.easymock.tests.UsageCallCountTest.tooFewCalls":86,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":187,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":412,"org.easymock.tests.UsageThrowableTest.throwCheckedException":308,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":478,"org.easymock.tests.MockingTest.testStrictClassMocking":458,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":42,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":313,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":41,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":7,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":427,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":188,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":119,"org.easymock.tests.ObjectMethodsTest.testHashCode":455,"org.easymock.tests2.CompareToTest.testGreateOrEqual":110,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":126,"org.easymock.tests2.NameTest.nameForNiceMock":11,"org.easymock.tests2.DependencyTest.testInterfaceMocking":199,"org.easymock.samples.ExampleTest.addDocument":381,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":338,"org.easymock.tests2.DelegateToTest.testStubDelegate":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":340,"org.easymock.tests2.AnswerTest.stubAnswer":118,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":50,"org.easymock.tests.UsageVarargTest.varargLongAccepted":450,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":54,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":394,"org.easymock.tests.UsageExpectAndReturnTest.floatType":257,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":273,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":104,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":106,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":147,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":58,"org.easymock.tests.UsageThrowableTest.noUpperLimit":305,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":361,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":134,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":365,"org.easymock.tests2.SerializationTest.test":121,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":352,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":481,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":413,"org.easymock.tests2.UsageConstraintsTest.testSame":138,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":256,"org.easymock.samples.SupportTest.addDocument":379,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":332,"org.easymock.tests.GenericTest.testPackageScope":253,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":389,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":360,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":462,"org.easymock.tests2.NameTest.nameForMock":9,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":267,"org.easymock.tests2.UsageStrictMockTest.differentMethods":4,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":376,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":259,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":289,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":454,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":229,"org.easymock.tests2.MockedExceptionTest.testRealException":175,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":398,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":1,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":429,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":244,"org.easymock.tests2.NameTest.nameForStrictMock":10,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":347,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":131,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":194,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":366,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":415,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":93,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":16,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.UsageConstraintsTest.lessThan":153,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":393,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":25,"org.easymock.tests2.CaptureTest.testCaptureRightOne":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":334,"org.easymock.tests2.UsageConstraintsTest.testOr":139,"org.easymock.tests.UsageRangeTest.combination":56,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":44,"org.easymock.tests.UsageTest.wrongArguments":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":333,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":469,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":386,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":268,"org.easymock.tests.UsageVarargTest.varargShortAccepted":449,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":417,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":87,"org.easymock.tests2.UsageConstraintsTest.cmpTo":141,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":116,"org.easymock.tests2.CompareToTest.testLessThan":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":388,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":184,"org.easymock.tests2.CaptureTest.testCaptureFromStub":163,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":419,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":17,"org.easymock.tests.UsageTest.unexpectedCallWithArray":77,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":49,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":466,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":269,"org.easymock.tests2.UsageConstraintsTest.constraints":13,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":51,"org.easymock.samples.ExampleTest.addAndChangeDocument":208,"org.easymock.tests.UsageStrictMockTest.testVerify":408,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":380,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":407,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":436,"org.easymock.tests2.CompareToTest.testGreateThan":108,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":353,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":211,"org.easymock.tests.LimitationsTest.abstractClass":430,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":261,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":59,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":212,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":444,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":28}}]

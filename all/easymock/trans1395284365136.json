[{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[3,4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:56","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"targetField":"targetField"}},{"position":"org.easymock.internal.RecordState:99","failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[175,176,177,178,179,180,4,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[196,197,198,199,200,201],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:43","sourceCode":"org.easymock.Capture<T>.this(org.easymock.CaptureType.org.easymock.CaptureType)","type":"CtInvocationImpl"},"failures":[40,202,42,43,203,204,46,205,47],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[30,31,206,207],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[205,208],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[209,210,211,212,213,214,215],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[9,216,217,218,219,198,116,220,221,163,201,222,223,224,225],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[68],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"paramType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[3,4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[209,210,211,212,213,214,215],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"(((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"expected"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[244,245],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:39","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>.getName(), java.lang.Float.java.lang.Class<java.lang.Float>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[246,8,247,9,10,248,11,13,17,21,249,35,38,50,52,216,53,250,217,218,57,58,62,76,87,95,96,98,251,101,252,253,254,219,255,256,257,258,198,115,259,116,117,260,261,262,263,264,265,266,267,268,158,162,221,163,167,168,201,222,223,224,171,269,270,271,272,273,274,275,174,225],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:269","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:158","sourceCode":"if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n    java.lang.reflect.Field.setAccessible(true);\n    return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:933","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:135","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[40,202,47,62,63,65,67,68,276,79,83],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[208],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[76],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[277,278,279,280,5,281,282,7,283,246,284,8,247,9,10,248,24,25,26,27,28,29,249,285,286,30,31,206,287,32,34,35,38,39,40,41,202,42,43,203,204,44,45,46,47,288,48,49,50,51,52,216,53,250,54,55,56,217,218,57,58,289,59,290,291,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,292,82,83,84,85,293,294,295,296,86,87,88,89,90,91,297,92,298,93,94,95,299,96,97,300,251,100,301,302,303,102,304,107,305,108,109,306,110,307,308,252,309,310,311,219,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,113,329,330,331,255,256,257,332,333,334,258,335,198,115,259,116,117,260,336,261,337,262,263,338,339,264,265,266,118,119,340,341,120,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,121,122,123,124,125,362,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,363,364,365,366,367,368,153,154,155,156,157,369,370,371,372,373,268,374,375,376,377,378,158,159,160,161,162,221,163,164,165,166,167,168,201,222,169,170,223,224,171,379,380,381,382,270,172,173,383,274,384,385,174,225,386,387,388,389,390,391,392],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"failures":[393],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:83","sourceCode":"return (int) == (java.lang.Integer.int)","type":"CtReturnImpl"},"failures":[9,10,54,55,116,117,162,166,169,170],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"maximum"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[30,31,206,207],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[394,60,62,77,82],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[277,278,279,280,5,6,281,282,7,283,246,284,8,247,9,10,248,11,12,13,14,15,16,17,18,19,20,21,22,23,395,24,25,26,27,28,29,249,285,286,30,31,206,287,32,33,34,35,36,37,38,39,40,41,202,42,43,203,204,44,45,46,47,288,48,49,50,51,52,216,53,250,54,55,56,217,218,57,58,289,59,290,291,396,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,293,294,295,296,86,87,88,89,90,91,92,298,94,299,97,300,98,99,100,301,101,302,303,102,304,103,104,105,106,397,398,399,107,305,108,109,306,110,308,400,400,401,401,402,111,403,112,219,313,315,316,318,321,323,324,325,326,327,328,113,329,331,258,335,198,115,259,116,117,260,336,261,337,262,263,338,339,118,119,340,341,120,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,121,122,123,124,125,362,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,363,364,365,366,367,368,153,154,155,156,157,369,370,371,372,373,374,375,376,377,378,158,159,160,161,162,221,163,165,166,167,168,201,222,169,170,223,224,171,379,380,381,382,270,172,173,174,386,387,388,389,390,391,392],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":63,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":167,"org.easymock.tests2.UsageTest.argumentsOrdered":218,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":184,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":250,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":403,"org.easymock.tests2.DelegateToTest.testReturnException":289,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":388,"org.easymock.tests.MockingTest.testPartialClassMocking":122,"org.easymock.tests.MockClassControlTest.testToString":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":192,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":342,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":6,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":210,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":69,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":118,"org.easymock.tests2.UsageTest.wrongArguments":216,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":234,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":381,"org.easymock.samples.ExampleTest.answerVsDelegate":305,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":272,"org.easymock.tests2.UsageConstraintsTest.testNull":65,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":89,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":21,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":334,"org.easymock.tests2.CaptureTest.testPrimitive":42,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":120,"org.easymock.tests.UsageTest.moreThanOneArgument":168,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":361,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":88,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":326,"org.easymock.tests.UsageTest.argumentsOrdered":224,"org.easymock.tests.UsageVarargTest.varargIntAccepted":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":153,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":214,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":299,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":242,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":177,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":157,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":11,"org.easymock.tests.ReplayStateInvalidUsageTest.times":320,"org.easymock.tests2.AnswerTest.answer":281,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":190,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":280,"org.easymock.tests2.CaptureTest.testAnd":40,"org.easymock.tests2.UsageTest.strictResetToDefault":51,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":298,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":325,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":160,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":16,"org.easymock.tests2.DelegateToTest.testDelegate":291,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":357,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":391,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":368,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":269,"org.easymock.tests2.CaptureTest.testCapture1_2446744":43,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":355,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":278,"org.easymock.tests.UsageThrowableTest.throwError":125,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":314,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":243,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":328,"org.easymock.samples.PartialClassMockTest.testGetArea":112,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":315,"org.easymock.tests2.CompareToTest.testLessOrEqual":394,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":154,"org.easymock.tests2.UsageTest.niceToStrict":53,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":254,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":175,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":97,"org.easymock.tests2.MockBuilderTest.testCreateMock":251,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":231,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":196,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":351,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":17,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":261,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":379,"org.easymock.tests.UsageOverloadedMethodTest.overloading":165,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":385,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":74,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":164,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":143,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":73,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":46,"org.easymock.tests2.EasyMockSupportClassTest.testAll":103,"org.easymock.tests.MockClassControlTest.testEquals":333,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":329,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":359,"org.easymock.tests2.CaptureTest.testCaptureAll":41,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":279,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":366,"org.easymock.tests.MockNameTest.defaultName":267,"org.easymock.tests2.UsageConstraintsTest.testMatches":75,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":312,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":327,"org.easymock.samples.ExampleTest.voteForRemovals":110,"org.easymock.tests.UsageVarargTest.allKinds":378,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":162,"org.easymock.samples.BasicClassMockTest.testPrintContent":399,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":367,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":130,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":246,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":392,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":239,"org.easymock.tests2.UsageConstraintsTest.greaterThan":77,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":159,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":95,"org.easymock.samples.ExampleTest.voteForRemoval":108,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":25,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":297,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":386,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":181,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":14,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":126,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":387,"org.easymock.tests2.CaptureTest.testCaptureFirst":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":4,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":15,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":58,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":225,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":139,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":27,"org.easymock.tests2.CaptureTest.testCapture2_2446744":48,"org.easymock.tests2.UsageTest.moreThanOneArgument":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":191,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":100,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":377,"org.easymock.tests.GenericTest.testBridgedEquals":245,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":265,"org.easymock.tests.UsageExpectAndReturnTest.longType":135,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":12,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":364,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":360,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":292,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":358,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":324,"org.easymock.tests.UsageCallCountTest.tooManyCalls":266,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":262,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":140,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":233,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":347,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":129,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":34,"org.easymock.tests2.UsageConstraintsTest.testContains":72,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":337,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":102,"org.easymock.tests2.UsageConstraintsTest.testFind":64,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":166,"org.easymock.tests.MockTypeTest.fromEasyMockClass":271,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":258,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":286,"org.easymock.tests.UsageExpectAndReturnTest.object":142,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":92,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":232,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":20,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":211,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":373,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":310,"org.easymock.tests.UsageTest.exactCallCountByLastCall":171,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":180,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":209,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":148,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":369,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":384,"org.easymock.tests.ResultTest.createThrowResultToString":2,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":235,"org.easymock.tests.MockClassControlTest.testHashCode":332,"org.easymock.tests2.EasyMockSupportTest.testVerify":395,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":383,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":277,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":396,"org.easymock.tests.UsageVarargTest.varargCharAccepted":372,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":195,"org.easymock.tests2.UsageTest.openCallCountByLastCall":54,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":23,"org.easymock.tests.DefaultClassInstantiatorTest.object":311,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":252,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":220,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":349,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":127,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":228,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":93,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":257,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":348,"org.easymock.tests.CapturesMatcherTest.test":208,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":106,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":256,"org.easymock.tests2.UsageTest.resumeIfFailure":57,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":390,"org.easymock.tests2.StubTest.stubWithReturnValue":32,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":215,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":141,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":82,"org.easymock.tests2.SerializationTest.testAllMockedMethod":206,"org.easymock.samples.SupportTest.voteForRemovals":111,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":197,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":244,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":237,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":354,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":207,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":3,"org.easymock.tests.UsageExpectAndThrowTest.object":352,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":80,"org.easymock.tests2.DelegateToTest.testWrongClass":290,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":172,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":173,"org.easymock.samples.ConstructorCalledMockTest.testTax":400,"org.easymock.tests.UsageStrictMockTest.range":116,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":19,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":33,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":353,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":98,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":223,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":322,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":380,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":199,"org.easymock.tests2.CaptureTest.testCaptureNone":45,"org.easymock.tests.UsageUnorderedTest.message":219,"org.easymock.tests.UsageVerifyTest.twoReturns":163,"org.easymock.tests.UsageVarargTest.varargByteAccepted":376,"org.easymock.tests2.ThreadingTest.testThreadSafe":24,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":339,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":398,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":253,"org.easymock.tests2.CaptureTest.testCapture_2617107":202,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":393,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":193,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":341,"org.easymock.tests2.UsageConstraintsTest.any":70,"org.easymock.tests2.StubTest.stub":287,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":319,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":389,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":194,"org.easymock.tests.UsageExpectAndThrowTest.longType":345,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":318,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":247,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":101,"org.easymock.tests2.SerializationTest.testClass":30,"org.easymock.tests.LimitationsTest.mockNativeMethod":121,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":151,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":114,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":227,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":248,"org.easymock.tests2.NameTest.nameForMocksControl":296,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":229,"org.easymock.tests2.MockedExceptionTest.testMockedException":303,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":170,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":124,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":346,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":86,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":99,"org.easymock.tests.MockingTest.testNicePartialClassMocking":123,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":91,"org.easymock.tests2.CaptureTest.testCaptureLast":44,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":270,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":39,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":68,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":81,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":132,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":350,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":217,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":84,"org.easymock.samples.ExampleTest.removeNonExistingDocument":307,"org.easymock.tests.UsageStrictMockTest.differentMethods":117,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":230,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":316,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":236,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":26,"org.easymock.tests2.MockBuilderTest.testCreateMockString":301,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":330,"org.easymock.tests.UsageExpectAndThrowTest.floatType":344,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":76,"org.easymock.tests.ResultTest.createReturnResultToString":1,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":282,"org.easymock.tests.UsageVerifyTest.twoThrows":221,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":105,"org.easymock.tests.ResultTest.createDelegateResultToString":0,"org.easymock.samples.ExampleTest.voteAgainstRemoval":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":185,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":94,"org.easymock.tests2.UsageConstraintsTest.testNotNull":83,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":131,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":302,"org.easymock.tests2.UsageTest.defaultResetToNice":56,"org.easymock.samples.ExampleTest.voteAgainstRemovals":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":186,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":147,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":226,"org.easymock.tests.UsageVarargTest.differentLength":268,"org.easymock.tests2.CallbackTest.callback":249,"org.easymock.tests.UsageTest.openCallCountByLastCall":169,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":60,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":340,"org.easymock.tests.UsageCallCountTest.tooFewCalls":263,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":36,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":382,"org.easymock.tests.UsageThrowableTest.throwCheckedException":128,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":200,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":38,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":363,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":35,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":321,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":37,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":283,"org.easymock.tests.ObjectMethodsTest.testHashCode":309,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":213,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":28,"org.easymock.tests2.NameTest.nameForNiceMock":295,"org.easymock.tests2.DependencyTest.testInterfaceMocking":5,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":212,"org.easymock.samples.ExampleTest.addDocument":306,"org.easymock.tests2.DelegateToTest.testStubDelegate":59,"org.easymock.tests2.AnswerTest.stubAnswer":7,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":115,"org.easymock.tests.UsageVarargTest.varargLongAccepted":375,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":183,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":150,"org.easymock.tests.UsageExpectAndReturnTest.floatType":134,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":29,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":401,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":78,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":241,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":275,"org.easymock.tests.UsageThrowableTest.noUpperLimit":362,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":61,"org.easymock.tests2.SerializationTest.test":31,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":203,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":133,"org.easymock.tests2.UsageConstraintsTest.testSame":66,"org.easymock.samples.SupportTest.addDocument":402,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":317,"org.easymock.tests.GenericTest.testPackageScope":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":179,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":240,"org.easymock.tests2.NameTest.nameForMock":293,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":144,"org.easymock.tests2.UsageStrictMockTest.differentMethods":10,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":136,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":356,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":161,"org.easymock.tests2.MockedExceptionTest.testRealException":304,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":187,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":8,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":119,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":323,"org.easymock.tests2.NameTest.nameForStrictMock":294,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":285,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":90,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":79,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":96,"org.easymock.tests2.UsageStrictMockTest.range":9,"org.easymock.tests2.UsageConstraintsTest.lessThan":85,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":238,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":182,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":13,"org.easymock.tests2.CaptureTest.testCaptureRightOne":47,"org.easymock.tests2.UsageConstraintsTest.testOr":67,"org.easymock.tests.UsageRangeTest.combination":158,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":87,"org.easymock.tests.UsageTest.wrongArguments":222,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":331,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":176,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":145,"org.easymock.tests.UsageVarargTest.varargShortAccepted":374,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":264,"org.easymock.tests2.UsageConstraintsTest.cmpTo":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":178,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":55,"org.easymock.tests2.CaptureTest.testCaptureFromStub":288,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":313,"org.easymock.tests.UsageTest.unexpectedCallWithArray":201,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":198,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":338,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":146,"org.easymock.tests2.CaptureTest.testCapture":205,"org.easymock.tests2.UsageConstraintsTest.constraints":62,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":259,"org.easymock.samples.ExampleTest.addAndChangeDocument":308,"org.easymock.tests.UsageStrictMockTest.testVerify":336,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":397,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":335,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":365,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":204,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":155,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":138,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":174,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":156,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":18,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":370}}]

[{"transplant":{"position":"org.easymock.internal.EasyMockProperties:71","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String).append(\", actual: \")","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:164","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"failures":[26,27,28,29,30,31,32],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return java.lang.Object == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[30],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[33,3,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,11,12,49,50,51,26,52,27,53,54,28,55,29,56,57,58,59,60,61,62,63,64,65,66,67,68,69,30,70,71,72,31,73,74,75,76,77,78,79,80,81,32,82,83,84,85,86,87,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[88,89,90,3,91,92,93,94,95,5,6,7,9,10,96,97,11,13,14,98,99,100,101,102,16,17,18,103,24,25],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:30","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:231","sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    if (org.easymock.internal.Injection != null) {\n        throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n    } \n    org.easymock.internal.Injection = org.easymock.internal.Injection;\n} ","type":"CtIfImpl"},"failures":[104,105,106,107,108,109],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[110],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[27,53,29,56,65,66,30,70],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[111,112,113,114,33,115,116,35,44,117,118,119,120,121,122,123,124,125],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:148","sourceCode":"final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"failures":[26,27,28,29,30,31,32],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Results:90","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[126,126,127,127,128,129,130,131,132,34,36,37,38,39,40,42,43,46,133,47,48,12,49,50,52,27,53,54,58,60,61,63,64,30,70,71,82,125,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[88,89,90,3,134,95,5,6,7,135,9,10,136,96,137,11,138,13,14,139,140,141,98,51,62,142,99,100,101,102,143,16,144,145,17,18,103,146,147,148,149,150,151,152,24,25],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[153,154,155],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[156,157,158,104,105,159,160,161,162,163,164,165,166,167,168,169,170,171,172,33,173,174,175,176,177,89,90,3,178,179,180,181,134,4,5,182,183,6,7,135,34,35,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,36,37,38,39,40,8,9,10,215,216,217,218,219,136,220,221,222,223,41,224,96,225,226,227,42,43,44,45,46,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,47,48,249,250,251,252,137,253,11,12,138,13,14,254,255,256,257,258,259,260,261,262,139,263,264,265,140,141,266,267,98,268,269,270,123,49,50,51,26,52,27,53,54,28,55,29,56,57,58,59,60,61,62,63,64,65,66,67,68,69,30,70,71,271,272,273,142,274,275,276,31,73,74,75,76,77,78,79,80,81,32,83,84,277,278,153,279,280,281,282,283,284,99,285,286,287,101,143,288,15,16,144,145,289,290,291,17,18,103,146,292,293,294,295,296,85,86,297,147,298,299,300,301,87,148,302,149,303,304,305,306,307,308,309,310,125,150,19,20,21,22,151,311,23,152,24,25,312,313,314,315,316],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[144],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[156,126,126,127,127,160,161,162,163,164,166,167,317,168,169,318,319,320,321,322,323,324,170,325,172,111,112,113,114,33,115,174,3,178,128,129,130,131,132,179,180,181,326,134,4,95,5,182,183,6,7,135,34,35,327,328,329,184,185,186,187,188,189,190,191,330,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,36,37,38,39,40,8,9,10,41,96,225,226,227,42,43,44,45,46,228,331,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,133,47,48,249,332,250,251,333,252,97,117,118,119,334,335,336,337,137,11,12,138,13,14,254,338,339,340,259,341,262,139,263,264,265,140,141,266,267,98,268,269,121,122,123,124,49,50,51,26,52,27,53,54,28,55,29,56,57,58,59,60,61,62,63,64,65,66,67,68,69,30,70,71,271,272,273,142,274,275,276,31,73,74,75,76,77,78,79,80,81,32,82,83,84,277,278,153,279,342,281,282,283,343,284,344,345,346,347,348,99,285,349,286,287,100,101,102,143,288,15,16,144,145,289,290,291,17,18,103,146,292,293,350,351,294,295,296,85,86,297,147,298,299,300,301,352,87,353,148,302,149,303,304,305,306,307,308,309,310,125,150,151,23,152,24,25,312,313,314,315,316],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[4,8,9,10,354,252,12,14,254,15,23,25,312],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[156,157,158,104,105,159,160,161,162,163,164,165,166,167,168,169,170,171,172,33,173,174,175,176,177,89,90,3,178,179,180,181,134,4,5,182,183,6,7,135,34,35,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,36,37,38,39,40,8,9,10,215,216,217,218,219,136,220,221,222,223,41,224,96,225,226,227,42,43,44,45,46,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,47,48,249,250,251,252,137,253,11,12,138,13,14,254,255,262,139,263,264,265,140,141,266,267,98,268,269,270,123,49,50,51,26,52,27,53,54,28,55,29,56,57,58,59,60,61,62,63,64,65,66,67,68,69,30,70,71,271,272,273,142,274,275,276,31,73,74,75,76,77,78,79,80,81,32,83,84,277,278,153,279,280,281,282,283,284,99,285,286,287,101,143,288,15,16,144,145,289,290,291,17,18,103,146,292,293,294,295,296,85,86,297,147,298,299,300,301,87,148,302,149,303,304,305,306,307,308,309,310,125,150,19,20,21,22,151,311,23,152,24,25,312,313,314,315,316],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[99,101,148,355],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[144],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:592","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[34,56],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[156,160,161,163,164,166,170,325,172,179,180,181,134,4,182,183,135,34,184,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,36,37,38,39,40,8,10,96,225,226,227,42,43,46,47,48,252,12,13,14,262,139,263,264,265,140,141,266,267,98,268,269,123,49,50,51,26,52,27,53,54,28,55,56,57,58,59,60,61,62,63,64,65,66,67,69,30,70,71,271,272,273,142,274,275,276,31,73,75,76,79,80,81,32,83,84,277,278,153,279,282,99,285,286,287,101,143,288,15,144,289,290,291,103,146,292,293,295,297,147,298,299,300,301,87,148,302,149,303,304,305,306,307,308,309,125,23,24,25,313,314,315,316],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":26,"org.easymock.tests2.UsageTest.argumentsOrdered":18,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":134,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":268,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":107,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":114,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":145,"org.easymock.tests2.StubTest.stubWithReturnValue":125,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":204,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":69,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":104,"org.easymock.tests2.SerializationTest.testAllMockedMethod":280,"org.easymock.tests2.DelegateToTest.testReturnException":281,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":259,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":112,"org.easymock.tests.MockingTest.testPartialClassMocking":192,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":155,"org.easymock.samples.SupportTest.voteForRemovals":160,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":326,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":355,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":241,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":341,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":314,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":229,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":350,"org.easymock.tests.UsageExpectAndThrowTest.object":239,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":0,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":278,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":66,"org.easymock.tests2.DelegateToTest.testWrongClass":283,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":47,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":48,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":55,"org.easymock.tests2.UsageTest.wrongArguments":16,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":42,"org.easymock.tests.UsageStrictMockTest.range":13,"org.easymock.samples.ConstructorCalledMockTest.testTax":126,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":336,"org.easymock.samples.ExampleTest.answerVsDelegate":162,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":266,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":303,"org.easymock.tests2.UsageConstraintsTest.testNull":27,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":299,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":240,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":286,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":98,"org.easymock.tests2.CaptureTest.testPrimitive":75,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":46,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":248,"org.easymock.tests.UsageTest.moreThanOneArgument":4,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":6,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":116,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":335,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":298,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":130,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":340,"org.easymock.tests2.CaptureTest.testCaptureNone":80,"org.easymock.tests.UsageUnorderedTest.message":3,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":93,"org.easymock.tests.UsageVerifyTest.twoReturns":10,"org.easymock.tests.UsageVarargTest.varargByteAccepted":222,"org.easymock.tests2.ThreadingTest.testThreadSafe":272,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":317,"org.easymock.tests.UsageTest.argumentsOrdered":7,"org.easymock.tests.UsageVarargTest.varargIntAccepted":217,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":177,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":157,"org.easymock.tests2.CaptureTest.testCapture_2617107":74,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":36,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":348,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":354,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":45,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":349,"org.easymock.tests2.UsageConstraintsTest.any":56,"org.easymock.tests2.StubTest.stub":310,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":40,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":119,"org.easymock.tests.UsageExpectAndThrowTest.longType":232,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":113,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":152,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":271,"org.easymock.tests2.SerializationTest.testClass":153,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":276,"org.easymock.tests.LimitationsTest.mockNativeMethod":172,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":325,"org.easymock.tests2.AnswerTest.answer":293,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":214,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":260,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":347,"org.easymock.tests2.CaptureTest.testAnd":31,"org.easymock.tests2.UsageTest.strictResetToDefault":288,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":353,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":312,"org.easymock.tests2.NameTest.nameForMocksControl":22,"org.easymock.tests2.MockedExceptionTest.testMockedException":122,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":129,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":265,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":226,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":183,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":319,"org.easymock.tests2.DelegateToTest.testDelegate":284,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":233,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":194,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":297,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":287,"org.easymock.tests.MockingTest.testNicePartialClassMocking":193,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":244,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":301,"org.easymock.tests2.CaptureTest.testCaptureLast":79,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":108,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":33,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":331,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":309,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":28,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":324,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":67,"org.easymock.tests.MockingTest.testTwoMocks":330,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":228,"org.easymock.tests2.CaptureTest.testCapture1_2446744":76,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":195,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":242,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":345,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":237,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":70,"org.easymock.tests.UsageThrowableTest.throwError":184,"org.easymock.tests.UsageStrictMockTest.differentMethods":14,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":142,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":94,"org.easymock.tests2.MockBuilderTest.testCreateMockString":102,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":224,"org.easymock.tests.UsageExpectAndThrowTest.floatType":231,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":132,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":62,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":294,"org.easymock.tests.UsageVerifyTest.twoThrows":9,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":315,"org.easymock.samples.PartialClassMockTest.testGetArea":156,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":37,"org.easymock.samples.ExampleTest.voteAgainstRemoval":164,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":339,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":338,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":302,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":230,"org.easymock.tests2.UsageTest.niceToStrict":144,"org.easymock.tests2.UsageConstraintsTest.testNotNull":30,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":121,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":191,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":285,"org.easymock.tests2.UsageTest.defaultResetToNice":291,"org.easymock.tests2.MockBuilderTest.testCreateMock":100,"org.easymock.samples.ExampleTest.voteAgainstRemovals":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":258,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":210,"org.easymock.tests.UsageVarargTest.differentLength":136,"org.easymock.tests2.CallbackTest.callback":150,"org.easymock.tests.UsageTest.openCallCountByLastCall":182,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":238,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":140,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":49,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":329,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":173,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":334,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":44,"org.easymock.tests.UsageCallCountTest.tooFewCalls":175,"org.easymock.tests.UsageOverloadedMethodTest.overloading":180,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":251,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":60,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":306,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":206,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":179,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":59,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":81,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":337,"org.easymock.tests.UsageThrowableTest.throwCheckedException":188,"org.easymock.tests2.EasyMockSupportClassTest.testAll":313,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":171,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":246,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":346,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":322,"org.easymock.tests2.CaptureTest.testCaptureAll":73,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":308,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":35,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":305,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":109,"org.easymock.tests2.UsageConstraintsTest.testMatches":61,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":307,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":296,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":131,"org.easymock.samples.ExampleTest.voteForRemovals":166,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":275,"org.easymock.tests2.NameTest.nameForNiceMock":21,"org.easymock.tests.UsageVarargTest.allKinds":41,"org.easymock.tests2.DependencyTest.testInterfaceMocking":277,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":8,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":323,"org.easymock.samples.BasicClassMockTest.testPrintContent":158,"org.easymock.samples.ExampleTest.addDocument":165,"org.easymock.tests2.DelegateToTest.testStubDelegate":282,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":190,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":151,"org.easymock.tests2.AnswerTest.stubAnswer":295,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":343,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":115,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":12,"org.easymock.tests2.UsageConstraintsTest.greaterThan":63,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":225,"org.easymock.tests.UsageVarargTest.varargLongAccepted":221,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":149,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":254,"org.easymock.samples.ExampleTest.voteForRemoval":163,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":273,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":213,"org.easymock.tests.UsageExpectAndReturnTest.floatType":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":352,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":292,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":127,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":333,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":64,"org.easymock.tests.UsageThrowableTest.noUpperLimit":185,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":50,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":143,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":178,"org.easymock.tests2.SerializationTest.test":279,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":77,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":120,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":263,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":186,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":196,"org.easymock.tests2.UsageConstraintsTest.testSame":53,"org.easymock.samples.SupportTest.addDocument":159,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":111,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":342,"org.easymock.tests2.CaptureTest.testCaptureFirst":84,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":264,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":146,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":97,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":202,"org.easymock.tests.GenericTest.testPackageScope":170,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":274,"org.easymock.tests2.CaptureTest.testCapture2_2446744":83,"org.easymock.tests2.UsageTest.moreThanOneArgument":15,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":318,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":261,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":101,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":223,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":89,"org.easymock.tests2.NameTest.nameForMock":19,"org.easymock.tests.UsageExpectAndReturnTest.longType":198,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":320,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":262,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":247,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":207,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":68,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":133,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":245,"org.easymock.tests2.UsageStrictMockTest.differentMethods":25,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":118,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":128,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":199,"org.easymock.tests.UsageCallCountTest.tooManyCalls":90,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":243,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":227,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":174,"org.easymock.tests2.MockedExceptionTest.testRealException":124,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":203,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":234,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":23,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":43,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":189,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":304,"org.easymock.tests2.UsageConstraintsTest.testContains":58,"org.easymock.tests2.NameTest.nameForStrictMock":20,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":123,"org.easymock.tests2.UsageConstraintsTest.testFind":52,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":181,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":85,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":300,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":86,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":137,"org.easymock.tests.UsageExpectAndReturnTest.object":205,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":65,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":1,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":87,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":99,"org.easymock.tests2.UsageStrictMockTest.range":24,"org.easymock.tests2.UsageConstraintsTest.lessThan":71,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":267,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":219,"org.easymock.tests.UsageTest.exactCallCountByLastCall":135,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":34,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":257,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":139,"org.easymock.tests2.CaptureTest.testCaptureRightOne":32,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":168,"org.easymock.tests2.UsageConstraintsTest.testOr":54,"org.easymock.tests.UsageRangeTest.combination":96,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":215,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":211,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":147,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":250,"org.easymock.tests.UsageTest.wrongArguments":5,"org.easymock.tests2.EasyMockSupportTest.testVerify":270,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":256,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":208,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":169,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":328,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":249,"org.easymock.tests.UsageVarargTest.varargShortAccepted":220,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":344,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":91,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":88,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":72,"org.easymock.tests2.UsageConstraintsTest.cmpTo":57,"org.easymock.tests.UsageVarargTest.varargCharAccepted":218,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":351,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":311,"org.easymock.tests2.UsageTest.openCallCountByLastCall":289,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":290,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":269,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":327,"org.easymock.tests2.CaptureTest.testCaptureFromStub":82,"org.easymock.tests.UsageTest.unexpectedCallWithArray":95,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":92,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":236,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":11,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":187,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":176,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":106,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":209,"org.easymock.tests2.CaptureTest.testCapture":110,"org.easymock.tests2.UsageConstraintsTest.constraints":51,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":138,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":148,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":235,"org.easymock.samples.ExampleTest.addAndChangeDocument":167,"org.easymock.tests.UsageStrictMockTest.testVerify":255,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":212,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":117,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":316,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":253,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":321,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":78,"org.easymock.tests2.UsageTest.resumeIfFailure":103,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":38,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":201,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":252,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":39,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":216,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":2,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":141}}]

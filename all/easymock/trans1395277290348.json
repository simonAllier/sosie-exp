[{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[6,7],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:163","failures":[8,9,10,11,12],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[13,14,15,16],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[17],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[18,19,20,21,22,23,24,25,26],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[27,28,10,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,26,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,17,79,80,81,82,83],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:39","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[18,19,20,21,22,23,84,24,25,26],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[85,86],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:208","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[87],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:747","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:60","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"failures":[103,0,104,1,2,105,3,106,107,4,108,109,110,88,89,90,91,92,93,94,95,96,97,98,99,100,101,18,111,112,113,114,115,116,117,118,119,120,13,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,14,138,139,15,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,28,30,31,32,33,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,44,46,47,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,53,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,64,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,5,262,263,85,264,265,266,267,268,269,270,7,271,272,273,274,275,276,79,80,277,278,279,280,281,282,283,284,285,286,287,288,289,290,86,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[324,0,1,2,3,4,115,19,146,325,326,327,328,329,330,331,332,333,334,335,166,336,337,167,338,28,31,32,33,171,175,177,178,180,181,41,44,46,47,49,199,200,201,202,203,204,207,208,210,211,212,214,215,216,217,218,62,245,246,247,248,75,76,77,339,340,341,342,260,261,5,262,263,271,273,274,295,320,321],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"returnedType"}},{"position":"org.easymock.internal.matchers.Compare:53","failures":[137],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[6,343,344,345,346,7],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:380","sourceCode":"final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[264,265,291,292],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:159","failures":[8,9,10,11,347,12],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:933","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[121],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[348],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[18,111,112,349],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[18,19,20,350,21,22,23,84,351,24,25,26,352],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:255","failures":[82],"status":-1,"binaryOperator":"java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[294,353],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[354],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[177,227,355,356,273,281,282],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[155,156,162,163,175,177,178,357,358,359,360,227,253,254,257,258,7,271,273,274,280,281,282],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:170","sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[361,362,363,364,365,366,367,368],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[54,58],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"candidateMethod"}},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[17,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"position":"org.easymock.Capture:82","failures":[88,90,91,92,93,94,95,97,369,98,99,101],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[155,156,162,163,6,370,343,371,344,345,372,253,346,254,257,258,7],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[136],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[128],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[337,338,175,177,178,7,271,273,274,276],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[297],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[17,79,80,81,82],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[169,170],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1863","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:89","sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","type":"CtTryImpl"},"failures":[53,54,55,56,58,59],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[147,153,159,160,165,175,252,255,256,259,271,280,282],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1633","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[373,88,89,90,91,92,93,94,95,96,97,369,98,99,100,101,18,102,323],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:270","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[374,86,291,292],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1163","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:721","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":123,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":252,"org.easymock.tests2.UsageTest.argumentsOrdered":163,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":242,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":158,"org.easymock.tests2.StubTest.stubWithReturnValue":120,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":25,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":208,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":103,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":142,"org.easymock.tests2.SerializationTest.testAllMockedMethod":112,"org.easymock.tests2.DelegateToTest.testReturnException":114,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":250,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":240,"org.easymock.tests.MockingTest.testPartialClassMocking":75,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":343,"org.easymock.samples.SupportTest.voteForRemovals":4,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":17,"org.easymock.tests.MockClassControlTest.testToString":66,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":266,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":312,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":35,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":349,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":332,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":300,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":251,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":148,"org.easymock.tests.UsageExpectAndThrowTest.object":310,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":15,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":181,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":21,"org.easymock.tests2.DelegateToTest.testWrongClass":116,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":320,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":321,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":129,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":295,"org.easymock.tests2.UsageTest.wrongArguments":156,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":364,"org.easymock.tests.UsageStrictMockTest.range":273,"org.easymock.samples.ConstructorCalledMockTest.testTax":8,"org.easymock.samples.ExampleTest.answerVsDelegate":104,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":189,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":52,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":146,"org.easymock.tests2.UsageConstraintsTest.testNull":125,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":337,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":311,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":71,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":46,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":191,"org.easymock.tests2.CaptureTest.testPrimitive":91,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":299,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":319,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":257,"org.easymock.tests.UsageTest.moreThanOneArgument":253,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":336,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":344,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":247,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":290,"org.easymock.tests2.CaptureTest.testCaptureNone":96,"org.easymock.tests.UsageUnorderedTest.message":227,"org.easymock.tests.UsageVerifyTest.twoReturns":282,"org.easymock.tests.UsageVarargTest.varargByteAccepted":236,"org.easymock.tests2.ThreadingTest.testThreadSafe":168,"org.easymock.tests.UsageTest.argumentsOrdered":258,"org.easymock.tests.UsageVarargTest.varargIntAccepted":230,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":108,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":260,"org.easymock.tests2.CaptureTest.testCapture_2617107":90,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":371,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":40,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":298,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":45,"org.easymock.tests2.UsageConstraintsTest.any":131,"org.easymock.tests2.StubTest.stub":119,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":265,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":263,"org.easymock.tests.UsageExpectAndThrowTest.longType":303,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":241,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":57,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":176,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":196,"org.easymock.tests2.SerializationTest.testClass":18,"org.easymock.tests.LimitationsTest.mockNativeMethod":62,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":152,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":218,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":81,"org.easymock.tests2.AnswerTest.answer":147,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":130,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":362,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests2.UsageTest.strictResetToDefault":154,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":30,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":179,"org.easymock.tests2.NameTest.nameForMocksControl":360,"org.easymock.tests2.MockedExceptionTest.testMockedException":38,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":246,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":341,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":186,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":256,"org.easymock.tests2.DelegateToTest.testDelegate":118,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":304,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":77,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":335,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":47,"org.easymock.tests.MockingTest.testNicePartialClassMocking":76,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":315,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":338,"org.easymock.tests.LimitationsTest.mockFinalMethod":63,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":350,"org.easymock.tests2.CaptureTest.testCaptureLast":95,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":243,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":294,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":330,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":128,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":140,"org.easymock.tests.MockingTest.testTwoMocks":74,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":293,"org.easymock.tests2.CaptureTest.testCapture1_2446744":92,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":199,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":27,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":313,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":308,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":162,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":144,"org.easymock.tests.UsageThrowableTest.throwError":219,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":353,"org.easymock.tests.UsageStrictMockTest.differentMethods":274,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":366,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":55,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":170,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":368,"org.easymock.tests2.MockBuilderTest.testCreateMockString":50,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":64,"org.easymock.tests.UsageExpectAndThrowTest.floatType":302,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":249,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":137,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":150,"org.easymock.tests.UsageVerifyTest.twoThrows":281,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":333,"org.easymock.samples.PartialClassMockTest.testGetArea":324,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":261,"org.easymock.samples.ExampleTest.voteAgainstRemoval":2,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":289,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":32,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":301,"org.easymock.tests2.UsageTest.niceToStrict":157,"org.easymock.tests.LimitationsTest.privateConstructor":61,"org.easymock.tests2.ThreadingTest.testChangeDefault":36,"org.easymock.tests2.UsageConstraintsTest.testNotNull":143,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":226,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":37,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":44,"org.easymock.tests2.MockBuilderTest.testCreateMock":48,"org.easymock.tests2.UsageTest.defaultResetToNice":161,"org.easymock.samples.ExampleTest.voteAgainstRemovals":0,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":214,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":361,"org.easymock.tests.UsageVarargTest.differentLength":233,"org.easymock.tests2.CallbackTest.callback":195,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":363,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":10,"org.easymock.tests.UsageTest.openCallCountByLastCall":255,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":309,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":6,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":187,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":13,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":292,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":297,"org.easymock.tests.UsageOverloadedMethodTest.overloading":278,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":286,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":135,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":327,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":277,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":210,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":348,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":134,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":97,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":354,"org.easymock.tests.UsageThrowableTest.throwCheckedException":223,"org.easymock.tests2.EasyMockSupportClassTest.testAll":331,"org.easymock.tests.MockClassControlTest.testEquals":70,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":80,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":370,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":345,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":317,"org.easymock.tests.MockingTest.testStrictClassMocking":72,"org.easymock.tests2.CaptureTest.testCaptureAll":89,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":329,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":268,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":326,"org.easymock.tests2.UsageConstraintsTest.testMatches":136,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":328,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":248,"org.easymock.samples.ExampleTest.voteForRemovals":3,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":351,"org.easymock.tests2.NameTest.nameForNiceMock":359,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":172,"org.easymock.tests.UsageVarargTest.allKinds":238,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":280,"org.easymock.tests2.DependencyTest.testInterfaceMocking":180,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":23,"org.easymock.samples.BasicClassMockTest.testPrintContent":109,"org.easymock.samples.ExampleTest.addDocument":105,"org.easymock.tests2.DelegateToTest.testStubDelegate":115,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":225,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":173,"org.easymock.tests2.AnswerTest.stubAnswer":151,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":244,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":117,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":271,"org.easymock.tests2.UsageConstraintsTest.greaterThan":14,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":24,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":340,"org.easymock.tests.UsageVarargTest.varargLongAccepted":235,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":33,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":275,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":59,"org.easymock.samples.ExampleTest.voteForRemoval":1,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":34,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":169,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":217,"org.easymock.tests.UsageExpectAndReturnTest.floatType":201,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":19,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":9,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":287,"org.easymock.tests.UsageThrowableTest.noUpperLimit":220,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":138,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":83,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":121,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":153,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":93,"org.easymock.tests2.SerializationTest.test":111,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":26,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":54,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":184,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":221,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":200,"org.easymock.tests2.UsageConstraintsTest.testSame":126,"org.easymock.samples.SupportTest.addDocument":107,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":239,"org.easymock.tests2.CaptureTest.testCaptureFirst":101,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":113,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":185,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":165,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":206,"org.easymock.tests.GenericTest.testPackageScope":79,"org.easymock.tests2.CaptureTest.testCapture2_2446744":100,"org.easymock.tests2.UsageTest.moreThanOneArgument":155,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":171,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":49,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":367,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":237,"org.easymock.tests.GenericTest.testBridgedEquals":82,"org.easymock.tests2.NameTest.nameForMock":357,"org.easymock.tests.UsageExpectAndReturnTest.longType":202,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":182,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":318,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":211,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":322,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":141,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":316,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":12,"org.easymock.tests2.UsageStrictMockTest.differentMethods":178,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":245,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":29,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":203,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":314,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":342,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":207,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":352,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":305,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":175,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":296,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":224,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":325,"org.easymock.tests.MockingTest.testNiceClassMocking":78,"org.easymock.tests.MockingTest.testClassMocking":73,"org.easymock.tests2.NameTest.nameForStrictMock":358,"org.easymock.tests2.UsageConstraintsTest.testContains":133,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":39,"org.easymock.tests2.UsageConstraintsTest.testFind":124,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":279,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":43,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":197,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":167,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":269,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":198,"org.easymock.tests.UsageExpectAndReturnTest.object":209,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":355,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":56,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":139,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":28,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":41,"org.easymock.tests2.UsageStrictMockTest.range":177,"org.easymock.tests2.UsageConstraintsTest.lessThan":145,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":190,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":232,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":22,"org.easymock.tests.UsageTest.exactCallCountByLastCall":259,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":87,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":267,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":84,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":183,"org.easymock.tests2.CaptureTest.testCaptureRightOne":98,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":372,"org.easymock.tests2.UsageConstraintsTest.testOr":127,"org.easymock.tests.UsageRangeTest.combination":339,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":20,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":228,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":215,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":166,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":285,"org.easymock.tests.UsageTest.wrongArguments":254,"org.easymock.tests2.MockBuilderTest.testWithConstructor":11,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":365,"org.easymock.tests.MockClassControlTest.testHashCode":69,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":65,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":204,"org.easymock.tests2.EasyMockSupportTest.testVerify":194,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":212,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":291,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":283,"org.easymock.tests.UsageVarargTest.varargShortAccepted":234,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":58,"org.easymock.tests2.UsageConstraintsTest.cmpTo":132,"org.easymock.tests.UsageVarargTest.varargCharAccepted":231,"org.easymock.tests2.CaptureTest.testCaptureMultiple":373,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":374,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":174,"org.easymock.tests2.UsageTest.openCallCountByLastCall":159,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":160,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":193,"org.easymock.tests.DefaultClassInstantiatorTest.object":53,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":86,"org.easymock.tests2.CaptureTest.testCaptureFromStub":99,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":42,"org.easymock.tests.UsageTest.unexpectedCallWithArray":346,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":323,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":307,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":222,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":7,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":347,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":213,"org.easymock.tests2.CaptureTest.testCapture":369,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":272,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":68,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":31,"org.easymock.tests2.UsageConstraintsTest.constraints":122,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":306,"org.easymock.samples.ExampleTest.addAndChangeDocument":106,"org.easymock.tests.CapturesMatcherTest.test":102,"org.easymock.tests.UsageStrictMockTest.testVerify":276,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":216,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":85,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":334,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":270,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":67,"org.easymock.tests2.CompareToTest.testGreateThan":16,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":94,"org.easymock.tests2.UsageTest.resumeIfFailure":164,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":5,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":205,"org.easymock.tests.LimitationsTest.abstractClass":60,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":51,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":288,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":262,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":356,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":229,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":188}}]

[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:110","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.ExpectedInvocation:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], 0, int)","position":"org.easymock.internal.Invocation:63","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Same:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:130","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : org.easymock.internal.InjectionPlan.getQualifiedInjections()) {\n    if (!(org.easymock.internal.Injection.isMatched())) {\n        throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n    } \n}","position":"org.easymock.internal.Injector:88","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","position":"org.easymock.internal.DefaultClassInstantiator:157","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:109","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","position":"org.easymock.internal.MockBuilder:97","type":"CtForEachImpl"},"status":0},{"failures":[0],"variableMapping":{"genericType":"genericType"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResult org.easymock.internal.ExpectedInvocationAndResult : java.util.List<org.easymock.internal.ExpectedInvocationAndResult>) {\n    if (org.easymock.internal.ExpectedInvocationAndResult.getExpectedInvocation().matches(org.easymock.internal.Invocation)) {\n        return org.easymock.internal.ExpectedInvocationAndResult.getResult();\n    } \n}","position":"org.easymock.internal.MocksBehavior:65","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n    org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n}","position":"org.easymock.internal.MocksBehavior:168","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"<any>\")","position":"org.easymock.internal.matchers.Any:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.MockBuilder:205","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","position":"org.easymock.internal.RecordState:220","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","position":"org.easymock.Capture:135","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n    return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:67","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","position":"org.easymock.internal.matchers.CompareTo:45","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:50","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:312","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:1038","type":"CtInvocationImpl"},"status":-2},{"failures":[231,77,84,232],"variableMapping":{"thisListMessages":"messages","messages":"messages"},"name":"add","transplant":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)","position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage)","position":"org.easymock.internal.UnorderedBehavior:95","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","position":"org.easymock.EasyMock:1633","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:198","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"status":-2},{"failures":[19,20,21,22,24,64,65,66,67,68,233,84,85,86,125,128,234,171,177,178,182],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1276","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:602","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getAllDeclaredMethods(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:78","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","position":"org.easymock.internal.matchers.Compare:47","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"interval":"interval"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Proxy.((T)(java.lang.reflect.Proxy.newProxyInstance(java.lang.Class<T>.getClassLoader(), new java.lang.Class[]{ java.lang.Class<T> }, java.lang.reflect.InvocationHandler)))","position":"org.easymock.internal.JavaProxyFactory:30","type":"CtReturnImpl"},"status":-2},{"failures":[0,235],"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","position":"org.easymock.internal.BridgeMethodResolver:193","type":"mutation","status":-1},{"failures":[],"variableMapping":{"paramType":"leafClass","argType":"leafClass"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","position":"org.easymock.internal.LastControl:49","type":"CtInvocationImpl"},"status":-2},{"failures":[236],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new org.easymock.internal.Range(1)","position":"org.easymock.internal.MocksControl:380","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","position":"org.easymock.internal.RecordState:115","type":"CtInvocationImpl"},"status":-1},{"failures":[121,123,126,237,142,170,180],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","position":"org.easymock.EasyMock:1568","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:932","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods()","position":"org.easymock.internal.ReflectionUtils:94","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:365","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Integer>(int))","position":"org.easymock.EasyMock:852","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","position":"org.easymock.internal.DefaultClassInstantiator:40","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","position":"org.easymock.internal.DefaultClassInstantiator:41","type":"CtTryImpl"},"status":0},{"failures":[137],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.SecurityException java.lang.SecurityException","position":"org.easymock.internal.Injector:208","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1360","type":"CtInvocationImpl"},"status":-1},{"failures":[190,191],"variableMapping":{"behavior":"behavior"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","position":"org.easymock.internal.RecordState:166","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.DefaultClassInstantiator:192","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.MocksBehavior:124","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = (java.lang.Object[].int) - 1","position":"org.easymock.internal.Invocation:60","type":"CtLocalVariableImpl"},"status":-2},{"failures":[238,238,239,239,12,13,14,18,240,241,242,243,244,245,246,247,248,249,250,251,252,61,62,63,253,254,255,256,257,258,259,260,261,262,95,263,0,96,97,264,235,265,266,267,268,269,153,165,167,192,193,194,195,197,198,270,271,272,273,274,275,201,276,202,203,277,278,279,280,204,205,207,208,209,281,210,282,283,284,285,211,286,287,288,289,290,291,212,292,293,213,294,295,296,297,298,299,300,301,302,214,303,304,305,306,307,215,308,309,218,310],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","position":"org.easymock.internal.Injector:70","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-5418279681566430252L","position":"org.easymock.internal.RecordState:31","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:76","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","position":"org.easymock.internal.ClassProxyFactory:226","type":"CtTryImpl"},"status":-2},{"failures":[240,311,312,313,314,315,316,317,318,152,319,320,321,322,323,324,325,326,327,328,329,169,330,331,332,333,334,335,192,193,198,272,274,203,279,280,205,284,286,288,290,291,292,294,297,298,303,305,306,222,225,226,336,337,338,339],"binaryOperator":"((java.lang.String.indexOf(' ')) > (-1))","name":"conditionalBoundary","position":"org.easymock.internal.Invocation:195","type":"mutation","status":-1},{"failures":[],"variableMapping":{"toMock":"toMock"},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"c":"c"},"name":"replace","transplant":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToDefault()","position":"org.easymock.EasyMockSupport:584","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"m":"m","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"try {\n    java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ClassProxyFactory:116","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod())","position":"org.easymock.internal.ClassProxyFactory:117","type":"CtInvocationImpl"},"status":0},{"failures":[143],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.CompareTo:42","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:288","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"same(\")","position":"org.easymock.internal.matchers.Same:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"suid":"this"},"name":"replace","transplant":{"sourceCode":"return java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","position":"org.easymock.internal.DefaultClassInstantiator:155","type":"CtTryImpl"},"status":-2},{"failures":[340],"variableMapping":{"i":"i","arguments":"arguments"},"name":"replace","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","position":"org.easymock.internal.Invocation:118","type":"CtLocalVariableImpl"},"status":-1},{"failures":[139],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:1051","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return ((int) <= int) && (int <= (int))","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:894","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1747","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:154","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.matchers.Captures<java.lang.Object>.setPotentialValue(java.lang.Object)","position":"org.easymock.internal.Invocation:162","type":"CtInvocationImpl"},"status":-2},{"failures":[341,157],"variableMapping":{"answer":"delegateTo","state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:364","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5701204283180444317L","position":"org.easymock.internal.matchers.Or:29","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:89","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"minimum":"minimum"},"name":"add","transplant":{"sourceCode":"return \"at least \" + (int)","position":"org.easymock.internal.Range:68","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"\" + (int)","position":"org.easymock.internal.Range:66","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation()","position":"org.easymock.internal.UnorderedBehavior:107","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:182","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","position":"org.easymock.internal.ReflectionUtils:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:344","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.IExpectationSetters<T>)(org.easymock.internal.MocksControl))","position":"org.easymock.EasyMock:562","type":"CtReturnImpl"},"status":-2},{"failures":[205],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:987","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:323","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.UnorderedBehavior:41","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:260","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Constructor<T>","position":"org.easymock.internal.ReflectionUtils:162","type":"CtReturnImpl"},"status":0},{"failures":[342,343,134,344,345],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:177","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","position":"org.easymock.internal.Range:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getDeclaredField(java.lang.String)","position":"org.easymock.internal.Injector:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:733","type":"CtInvocationImpl"},"status":-2},{"failures":[346],"variableMapping":{"buffer":"buffer"},"name":"replace","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","position":"org.easymock.internal.matchers.Null:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.internal.matchers.Null()","position":"org.easymock.internal.matchers.Null:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.Invocation:220","type":"CtInvocationImpl"},"status":-2},{"failures":[120,126,137,172],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","position":"org.easymock.EasyMock:1079","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:75","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.ReplayState:61","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.EasyMockSupport:480","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","position":"org.easymock.internal.EasyMockProperties:128","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.DefaultClassInstantiator:46","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:111","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"status":-2},{"failures":[347,348,349,231,350,71,77,78,84,351,352,353,354,232,162],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ArgumentToString:69","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"status":0},{"failures":[347,350,355,342,344,345],"variableMapping":{"buffer":"buffer","value":"value"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = (java.lang.Object[].int) - 1","position":"org.easymock.internal.Invocation:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StackTraceElement[] java.lang.StackTraceElement[] = java.lang.Throwable.getStackTrace()","position":"org.easymock.internal.ClassProxyFactory:156","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.And:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)","position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:154","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","position":"org.easymock.internal.ReflectionUtils:149","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"value"},"name":"add","transplant":{"sourceCode":"return \"Delegated to \" + java.lang.Object","position":"org.easymock.internal.Result:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer returning \" + java.lang.Object","position":"org.easymock.internal.Result:68","type":"CtReturnImpl"},"status":-2},{"failures":[356],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"status":-1},{"failures":[157],"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","position":"org.easymock.internal.RecordState:173","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResult>()","position":"org.easymock.internal.MocksBehavior:33","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtOperatorAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","position":"org.easymock.EasyMock:1939","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:60","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:94","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:155","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"length"},"name":"add","transplant":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName()))) && ((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","position":"org.easymock.internal.BridgeMethodResolver:130","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","position":"org.easymock.internal.ClassProxyFactory:245","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.Or:50","type":"CtIfImpl"},"status":-2},{"failures":[1,2,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock))","position":"org.easymock.internal.Injector:138","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:417","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","position":"org.easymock.internal.BridgeMethodResolver:353","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:194","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"equalsMethod","method":"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":90,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":70,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":210,"org.easymock.tests2.DependencyTest.testClassMockingSupport":271,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":327,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":294,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":44,"org.easymock.tests.UsageVarargTest.varargIntAccepted":51,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":24,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":317,"org.easymock.tests.LimitationsTest.mockFinalMethod":263,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":118,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":1,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":218,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":245,"org.easymock.tests2.UsageConstraintsTest.testContains":130,"org.easymock.tests.UsageCallCountTest.tooManyCalls":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":304,"org.easymock.tests2.UsageConstraintsTest.testFind":122,"org.easymock.tests.UsageVarargTest.allKinds":58,"org.easymock.tests2.StubTest.stubWithReturnValue":217,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":309,"org.easymock.tests2.CaptureTest.testCaptureAll":171,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":85,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":257,"org.easymock.samples.ExampleTest.addAndChangeDocument":11,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":272,"org.easymock.tests.UsageVarargTest.varargCharAccepted":52,"org.easymock.tests.UsageVerifyTest.twoThrows":77,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":335,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":20,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":53,"org.easymock.tests2.DelegateToTest.testReturnException":156,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":149,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":310,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":134,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":229,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":160,"org.easymock.tests2.CaptureTest.testAnd":170,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":259,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":37,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":16,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":179,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":41,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":240,"org.easymock.tests2.UsageConstraintsTest.testMatches":133,"org.easymock.tests.MockClassControlTest.testToString":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":341,"org.easymock.tests2.UsageConstraintsTest.testNull":123,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":192,"org.easymock.tests.LimitationsTest.abstractClass":261,"org.easymock.tests2.EasyMockSupportClassTest.testAll":212,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":224,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":45,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":111,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":169,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":18,"org.easymock.tests.UsageThrowableTest.throwError":87,"org.easymock.tests2.UsageConstraintsTest.greaterThan":135,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":49,"org.easymock.samples.SupportTest.addDocument":3,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":23,"org.easymock.tests2.StubTest.stub":216,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":325,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":67,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":19,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":321,"org.easymock.tests.UsageExpectAndReturnTest.object":108,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":117,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":137,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":226,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":288,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":287,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":57,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":164,"org.easymock.tests.UsageExpectAndThrowTest.object":39,"org.easymock.tests2.DelegateToTest.testWrongClass":158,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":306,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":355,"org.easymock.tests2.UsageTest.moreThanOneArgument":147,"org.easymock.tests.UsageVarargTest.varargByteAccepted":56,"org.easymock.tests.MockClassControlTest.testEquals":248,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":36,"org.easymock.samples.ExampleTest.voteAgainstRemoval":8,"org.easymock.tests.UsageTest.wrongArguments":348,"org.easymock.tests.CapturesMatcherTest.test":346,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":351,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":93,"org.easymock.tests.UsageVarargTest.varargShortAccepted":54,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":329,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":40,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":342,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":323,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":344,"org.easymock.tests.MockingTest.testNiceClassMocking":253,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":153,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":66,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":2,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":186,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":291,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":242,"org.easymock.tests2.MockBuilderTest.testCreateMock":278,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":187,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":326,"org.easymock.tests2.SerializationTest.testAllMockedMethod":167,"org.easymock.tests2.NameTest.nameForMocksControl":339,"org.easymock.samples.ExampleTest.voteAgainstRemovals":5,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":328,"org.easymock.tests.MockingTest.testStrictClassMocking":250,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":75,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":22,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":59,"org.easymock.tests2.CaptureTest.testCapture1_2446744":174,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":297,"org.easymock.tests.LimitationsTest.mockNativeMethod":95,"org.easymock.tests2.DelegateToTest.testStubDelegate":157,"org.easymock.tests.UsageUnorderedTest.message":84,"org.easymock.samples.ExampleTest.answerVsDelegate":6,"org.easymock.samples.ExampleTest.voteForRemoval":7,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":107,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":81,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":189,"org.easymock.tests.UsageVerifyTest.twoReturns":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":305,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":38,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":102,"org.easymock.tests2.DependencyTest.testInterfaceMocking":199,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":236,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":219,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":222,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":126,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":73,"org.easymock.tests.MockingTest.testTwoMocks":252,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":104,"org.easymock.tests2.CaptureTest.testCaptureRightOne":180,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":79,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":268,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":209,"org.easymock.tests2.UsageConstraintsTest.cmpTo":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":295,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":109,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":258,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":194,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":333,"org.easymock.tests2.MockedExceptionTest.testMockedException":269,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":332,"org.easymock.tests.UsageThrowableTest.throwCheckedException":91,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":290,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":48,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":141,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":311,"org.easymock.samples.PartialClassMockTest.testGetArea":12,"org.easymock.samples.ExampleTest.voteForRemovals":10,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":89,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":132,"org.easymock.samples.ConstructorCalledMockTest.testTax":238,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":296,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":266,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":208,"org.easymock.tests2.UsageTest.argumentsOrdered":232,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":25,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":191,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":256,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":103,"org.easymock.tests2.AnswerTest.answer":188,"org.easymock.tests.MockingTest.testNicePartialClassMocking":62,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":334,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":233,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":99,"org.easymock.tests2.UsageConstraintsTest.any":128,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":316,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":106,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":68,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":228,"org.easymock.tests.UsageExpectAndThrowTest.longType":32,"org.easymock.tests.LimitationsTest.privateConstructor":262,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":46,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":155,"org.easymock.tests2.CallbackTest.callback":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":214,"org.easymock.tests2.NameTest.nameForMock":336,"org.easymock.tests.UsageTest.argumentsOrdered":231,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":121,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":202,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":131,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":116,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":21,"org.easymock.tests2.MockBuilderTest.testCreateMockString":280,"org.easymock.tests2.NameTest.nameForStrictMock":337,"org.easymock.tests2.CaptureTest.testCaptureNone":178,"org.easymock.tests2.SerializationTest.test":166,"org.easymock.tests.UsageExpectAndReturnTest.longType":101,"org.easymock.tests2.SerializationTest.testClass":165,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":176,"org.easymock.tests2.CaptureTest.testCaptureFirst":182,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":138,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":13,"org.easymock.tests2.UsageTest.niceToStrict":148,"org.easymock.tests2.EasyMockSupportTest.testVerify":230,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":331,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":276,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":34,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":140,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":145,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":42,"org.easymock.tests2.UsageTest.strictResetToDefault":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":289,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":115,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":211,"org.easymock.tests.GenericTest.testBridgedEquals":235,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":279,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":352,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":29,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":127,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":105,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":196,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":275,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":281,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":50,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":136,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":207,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":204,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":63,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":343,"org.easymock.tests2.UsageConstraintsTest.testOr":125,"org.easymock.tests2.DelegateToTest.testDelegate":159,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":184,"org.easymock.tests2.UsageConstraintsTest.testNotNull":142,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":161,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":152,"org.easymock.tests.MockClassControlTest.testHashCode":247,"org.easymock.tests2.CaptureTest.testCapture_2617107":172,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":315,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":86,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":94,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":110,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":241,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":320,"org.easymock.tests2.ThreadingTest.testThreadSafe":183,"org.easymock.tests.UsageThrowableTest.noUpperLimit":88,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":193,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":308,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":227,"org.easymock.tests.UsageExpectAndReturnTest.floatType":100,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":220,"org.easymock.tests2.UsageTest.wrongArguments":353,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":292,"org.easymock.tests2.UsageConstraintsTest.testSame":124,"org.easymock.tests2.UsageTest.resumeIfFailure":150,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":246,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":277,"org.easymock.tests.UsageOverloadedMethodTest.overloading":60,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":197,"org.easymock.samples.SupportTest.voteForRemovals":4,"org.easymock.tests.UsageRangeTest.combination":74,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":282,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":312,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":302,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":318,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":299,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":239,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":143,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":298,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":35,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":313,"org.easymock.tests2.NameTest.nameForNiceMock":338,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":330,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":76,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":307,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":324,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":234,"org.easymock.tests2.CaptureTest.testPrimitive":173,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":206,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":112,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":43,"org.easymock.samples.BasicClassMockTest.testPrintContent":14,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":64,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":356,"org.easymock.tests.UsageExpectAndThrowTest.floatType":31,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":303,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":113,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":154,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":205,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":314,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":283,"org.easymock.tests2.UsageStrictMockTest.differentMethods":163,"org.easymock.tests.UsageTest.exactCallCountByLastCall":27,"org.easymock.tests2.AnswerTest.stubAnswer":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":300,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":221,"org.easymock.tests.MockingTest.testClassMocking":251,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":225,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":264,"org.easymock.tests2.CaptureTest.testCaptureLast":177,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":30,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":80,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":200,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":213,"org.easymock.tests.UsageStrictMockTest.range":71,"org.easymock.tests.InvocationTest.testEquals":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":301,"org.easymock.tests.UsageTest.unexpectedCallWithArray":347,"org.easymock.tests.MockingTest.testPartialClassMocking":61,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":114,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":354,"org.easymock.tests2.UsageConstraintsTest.constraints":120,"org.easymock.samples.ExampleTest.addDocument":9,"org.easymock.tests2.UsageConstraintsTest.lessThan":144,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":349,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":15,"org.easymock.tests.UsageVarargTest.varargLongAccepted":55,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":285,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":286,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":265,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":260,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":350,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":47,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":345,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":215,"org.easymock.tests2.UsageStrictMockTest.range":162,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":198,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":274,"org.easymock.tests2.DependencyTest.testClassMocking":270,"org.easymock.tests.UsageTest.moreThanOneArgument":26,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":65,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":249,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":273,"org.easymock.tests.UsageStrictMockTest.differentMethods":72,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":255,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":322,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":223,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":119,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":243,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":201,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":267,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":33,"org.easymock.tests.DefaultClassInstantiatorTest.object":254,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":28,"org.easymock.tests2.CaptureTest.testCapture2_2446744":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":293,"org.easymock.tests.GenericTest.testPackageScope":96}}]

[{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,0,53,54,55,56,57,58,59,60,61],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"toMock"}},{"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[62],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1790","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[63,64],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,6,79,80,81,82,83,84,85,7,86,8,87,10,11,13,14,88,89,90,91,92,93,94,95,96,97,98,99,100,62,15,16,101,17,18,19,20,21,22,23,24,25,102,103,104,105,27,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,28,29,31,32,35,36,37,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,45,46,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,49,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,51,52,0,53,54,55,56,57,58,59,60,61,306,307,308,309,310,311,312,313,314,315,316,317,318],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[319,320,321,322,323,324,325,326,327,328,329,330],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"matched","value":"matched"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[7,86,8],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[22,26,146],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[243],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[331,332,65,66,67,68,69,70,72,1,2,333,3,4,5,334,73,74,75,76,77,335,78,336,6,79,80,81,82,83,84,85,7,86,8,87,9,10,11,12,337,13,14,88,89,90,91,92,93,94,95,96,97,98,99,100,62,15,16,101,17,18,19,20,21,22,23,24,25,102,338,103,104,105,27,106,339,107,108,109,110,111,112,113,114,340,341,342,343,344,345,346,347,348,349,350,351,352,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,151,28,29,31,32,33,34,35,36,37,152,153,154,155,156,157,158,159,160,161,162,163,164,38,39,40,41,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,199,200,201,202,203,204,207,208,209,210,211,212,213,45,46,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,246,248,249,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,49,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,51,52,0,61,306,308,309,310,311,312,313,314,315,316,317,318],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[43],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:92","sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","type":"CtForEachImpl"},"failures":[331,332,65,66,67,68,69,70,72,333,3,4,5,334,73,74,77,335,78,336,6,79,80,81,82,83,84,85,7,86,8,87,9,10,11,12,337,13,14,88,89,90,91,93,94,95,96,97,98,62,15,16,101,17,18,19,21,23,24,25,102,103,27,339,111,112,114,340,341,342,343,344,345,346,348,349,350,351,352,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,29,31,33,34,36,152,153,154,155,156,157,161,162,163,164,38,39,40,41,169,170,171,172,173,174,175,176,179,180,186,187,188,189,190,191,192,193,203,205,207,208,209,210,212,213,45,46,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,49,273,280,281,282,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,51,52,0,61,306,307,308,309,310,311,313,316,317,318],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[353],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[354,355,356],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[116,199,200,201,202,203,204,357],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[7,86,8,358],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:612","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[81,83,84,359,360,361,362,363,364,87,16,101,24,25,342,346,349,120,134,153,154,155,157,38,169,170,171,365,366,367,368,177,178,189,191,192,247,369,250,251,272,49,294,311],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[370,371,372,373,374,375,376,377,378,353],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"parameterType"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[197,53,58],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[7,86,8,358],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[331,332,65,66,67,68,69,70,72,1,1,2,2,333,3,4,5,334,73,74,75,76,77,335,78,336,6,79,80,81,82,83,84,85,7,86,8,87,9,10,11,12,337,13,14,88,89,90,91,92,93,94,95,96,97,98,99,100,62,15,16,101,17,18,19,20,21,22,23,24,25,102,103,104,105,27,106,339,379,111,112,113,380,114,340,341,342,343,344,345,346,347,348,349,350,351,352,115,116,117,118,119,120,121,122,123,124,125,126,381,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,382,383,149,150,151,28,29,31,33,34,36,152,153,154,155,156,157,158,159,160,161,162,163,164,38,39,40,41,354,384,355,385,169,170,171,172,173,174,175,176,356,368,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,386,387,388,199,200,201,202,203,204,205,207,208,209,210,212,213,45,46,47,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,246,247,248,249,369,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,49,389,390,391,392,393,273,274,275,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,50,51,52,0,53,61,394,395,396,397,398,306,307,308,309,310,311,313,314,315,316,317,318],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[331,332,65,66,67,68,69,70,71,72,1,1,2,2,333,3,4,5,334,73,74,75,76,77,335,78,336,6,79,80,81,82,83,84,85,7,86,8,87,9,10,11,12,337,13,14,88,89,90,91,92,93,94,95,96,97,98,99,100,62,15,16,101,17,18,19,20,21,22,23,24,25,102,103,104,105,27,106,339,107,108,109,110,111,112,113,114,340,341,342,343,344,345,346,347,348,349,350,351,352,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,28,29,31,32,33,34,35,36,37,152,153,154,155,156,157,158,159,160,161,162,163,164,38,39,40,41,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,45,46,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,49,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,51,52,0,53,54,55,56,57,58,59,60,61,306,307,308,309,310,311,312,313,314,315,316,317,318],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:355","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[391,399],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:932","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[137],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[400],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[170,182,183],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[401,45,46,47,48],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[402],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[163,241,403,307,309],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[398],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"failures":[120,125,136],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":120,"org.easymock.tests2.UsageTest.argumentsOrdered":162,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":310,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":350,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":157,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":333,"org.easymock.tests2.DelegateToTest.testReturnException":111,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":200,"org.easymock.tests.MockingTest.testPartialClassMocking":51,"org.easymock.tests.MockClassControlTest.testToString":55,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":356,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":26,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":39,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":252,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":336,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":371,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":126,"org.easymock.tests2.UsageTest.wrongArguments":155,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":280,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":324,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":167,"org.easymock.samples.ExampleTest.answerVsDelegate":66,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":44,"org.easymock.tests2.UsageConstraintsTest.testNull":122,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":17,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":60,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":349,"org.easymock.tests2.CaptureTest.testPrimitive":91,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":284,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":271,"org.easymock.tests.UsageTest.moreThanOneArgument":311,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":303,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":389,"org.easymock.tests.UsageTest.argumentsOrdered":317,"org.easymock.tests.UsageVarargTest.varargIntAccepted":290,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":364,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":172,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":28,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":376,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":32,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":176,"org.easymock.tests.ReplayStateInvalidUsageTest.times":242,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":335,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":400,"org.easymock.tests2.AnswerTest.answer":148,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":403,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":110,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests2.UsageTest.strictResetToDefault":153,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":22,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":302,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":308,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":344,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":393,"org.easymock.tests2.DelegateToTest.testDelegate":114,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":267,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":203,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":279,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":368,"org.easymock.tests2.CaptureTest.testCapture1_2446744":92,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":265,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":108,"org.easymock.tests.UsageThrowableTest.throwError":178,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":236,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":330,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":305,"org.easymock.samples.PartialClassMockTest.testGetArea":3,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":237,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":173,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":355,"org.easymock.tests2.UsageTest.niceToStrict":156,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":42,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":253,"org.easymock.tests2.ThreadingTest.testChangeDefault":63,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":402,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":31,"org.easymock.tests2.MockBuilderTest.testCreateMock":35,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":323,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":261,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":360,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":345,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":396,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":205,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":165,"org.easymock.tests.UsageOverloadedMethodTest.overloading":286,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":131,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":249,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":225,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":285,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":130,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":97,"org.easymock.tests2.EasyMockSupportClassTest.testAll":38,"org.easymock.tests.MockClassControlTest.testEquals":59,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":46,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":269,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":109,"org.easymock.tests2.CaptureTest.testCaptureAll":89,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":277,"org.easymock.tests2.UsageConstraintsTest.testMatches":132,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":234,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":304,"org.easymock.samples.ExampleTest.voteForRemovals":70,"org.easymock.tests.UsageVarargTest.allKinds":298,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":169,"org.easymock.samples.BasicClassMockTest.testPrintContent":5,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":278,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":184,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":79,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":204,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":328,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":380,"org.easymock.tests2.UsageConstraintsTest.greaterThan":134,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":377,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":307,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":25,"org.easymock.samples.ExampleTest.voteForRemoval":67,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":74,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":20,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":152,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":357,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":342,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":199,"org.easymock.tests2.CaptureTest.testCaptureFirst":62,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":379,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":343,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":164,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":251,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":221,"org.easymock.tests2.UsageTest.moreThanOneArgument":154,"org.easymock.tests2.CaptureTest.testCapture2_2446744":100,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":399,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":36,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":297,"org.easymock.tests.GenericTest.testBridgedEquals":48,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":212,"org.easymock.tests.UsageExpectAndReturnTest.longType":217,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":275,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":340,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":270,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":139,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":354,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":268,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":387,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":301,"org.easymock.tests.UsageCallCountTest.tooManyCalls":213,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":207,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":222,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":257,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":183,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":10,"org.easymock.tests2.UsageConstraintsTest.testContains":129,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":206,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":27,"org.easymock.tests2.UsageConstraintsTest.testFind":121,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":287,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":186,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":103,"org.easymock.tests.UsageExpectAndReturnTest.object":224,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":21,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":348,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":292,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":372,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":198,"org.easymock.tests.UsageTest.exactCallCountByLastCall":318,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":273,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":390,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":370,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":230,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":288,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":248,"org.easymock.tests.MockClassControlTest.testHashCode":58,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":325,"org.easymock.tests2.EasyMockSupportTest.testVerify":352,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":391,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":395,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":246,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":107,"org.easymock.tests.UsageVarargTest.varargCharAccepted":291,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":80,"org.easymock.tests2.UsageTest.openCallCountByLastCall":158,"org.easymock.tests.DefaultClassInstantiatorTest.object":195,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":351,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":394,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":196,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":367,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":259,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":181,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":23,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":57,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":258,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":231,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":41,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":56,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":362,"org.easymock.tests2.UsageTest.resumeIfFailure":163,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":43,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":202,"org.easymock.tests2.StubTest.stubWithReturnValue":116,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":378,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":140,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":223,"org.easymock.tests2.SerializationTest.testAllMockedMethod":8,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":397,"org.easymock.samples.SupportTest.voteForRemovals":332,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":401,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":264,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":358,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":398,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":382,"org.easymock.tests.UsageExpectAndThrowTest.object":262,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":137,"org.easymock.tests2.DelegateToTest.testWrongClass":113,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":299,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":300,"org.easymock.tests.UsageStrictMockTest.range":191,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":347,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":9,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":263,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":33,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":244,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":316,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":166,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":385,"org.easymock.tests2.CaptureTest.testCaptureNone":96,"org.easymock.tests.UsageUnorderedTest.message":272,"org.easymock.tests.UsageVerifyTest.twoReturns":171,"org.easymock.tests.UsageVarargTest.varargByteAccepted":296,"org.easymock.tests2.ThreadingTest.testThreadSafe":73,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":210,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":4,"org.easymock.tests2.CaptureTest.testCapture_2617107":90,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":283,"org.easymock.tests2.UsageConstraintsTest.any":127,"org.easymock.tests2.StubTest.stub":115,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":241,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":388,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":201,"org.easymock.tests.UsageExpectAndThrowTest.longType":255,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":240,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":82,"org.easymock.tests2.SerializationTest.testClass":7,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":339,"org.easymock.tests.LimitationsTest.mockNativeMethod":49,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":47,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":233,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":320,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":85,"org.easymock.tests2.NameTest.nameForMocksControl":147,"org.easymock.tests2.MockedExceptionTest.testMockedException":105,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":321,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":315,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":0,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":256,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":338,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":15,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":34,"org.easymock.tests.MockingTest.testNicePartialClassMocking":52,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":19,"org.easymock.tests2.CaptureTest.testCaptureLast":95,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":177,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":125,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":14,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":138,"org.easymock.tests.MockingTest.testTwoMocks":50,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":214,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":260,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":161,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":142,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":64,"org.easymock.samples.ExampleTest.removeNonExistingDocument":71,"org.easymock.tests.UsageStrictMockTest.differentMethods":192,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":238,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":322,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":326,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":75,"org.easymock.tests2.ConstraintsToStringTest.andToString":363,"org.easymock.tests2.MockBuilderTest.testCreateMockString":37,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":53,"org.easymock.tests.UsageExpectAndThrowTest.floatType":254,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":133,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":149,"org.easymock.tests.UsageVerifyTest.twoThrows":170,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":40,"org.easymock.samples.ExampleTest.voteAgainstRemoval":68,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":384,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":24,"org.easymock.tests2.UsageConstraintsTest.testNotNull":141,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":185,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":104,"org.easymock.tests2.UsageTest.defaultResetToNice":160,"org.easymock.samples.ExampleTest.voteAgainstRemovals":65,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":229,"org.easymock.tests.UsageVarargTest.differentLength":293,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":319,"org.easymock.tests2.CallbackTest.callback":87,"org.easymock.tests.UsageTest.openCallCountByLastCall":314,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":117,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":282,"org.easymock.tests.UsageCallCountTest.tooFewCalls":208,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":12,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":168,"org.easymock.tests.UsageThrowableTest.throwCheckedException":182,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":365,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":13,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":274,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":11,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":243,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":337,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":151,"org.easymock.tests.ObjectMethodsTest.testHashCode":197,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":375,"org.easymock.tests2.NameTest.nameForNiceMock":146,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":77,"org.easymock.tests2.DependencyTest.testInterfaceMocking":78,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":373,"org.easymock.samples.ExampleTest.addDocument":69,"org.easymock.tests2.DelegateToTest.testStubDelegate":112,"org.easymock.tests2.AnswerTest.stubAnswer":150,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":189,"org.easymock.tests.UsageVarargTest.varargLongAccepted":295,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":193,"org.easymock.tests.UsageExpectAndReturnTest.floatType":216,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":232,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":6,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests2.ConstraintsToStringTest.orToString":359,"org.easymock.tests.UsageThrowableTest.noUpperLimit":179,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":135,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":369,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":118,"org.easymock.tests2.SerializationTest.test":86,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":93,"org.easymock.tests2.UsageConstraintsTest.testSame":123,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":215,"org.easymock.samples.SupportTest.addDocument":331,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":239,"org.easymock.tests.GenericTest.testPackageScope":45,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":392,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":329,"org.easymock.tests2.NameTest.nameForMock":144,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":226,"org.easymock.tests2.UsageStrictMockTest.differentMethods":84,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":218,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":266,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":309,"org.easymock.tests2.MockedExceptionTest.testRealException":106,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":366,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":353,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":81,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":245,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":281,"org.easymock.tests2.NameTest.nameForStrictMock":145,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":102,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":18,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":136,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":29,"org.easymock.tests2.UsageStrictMockTest.range":83,"org.easymock.tests2.UsageConstraintsTest.lessThan":143,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":327,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":341,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":374,"org.easymock.tests2.CaptureTest.testCaptureRightOne":98,"org.easymock.tests2.UsageConstraintsTest.testOr":124,"org.easymock.tests.UsageRangeTest.combination":306,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":16,"org.easymock.tests.UsageTest.wrongArguments":313,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":54,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":227,"org.easymock.tests.UsageVarargTest.varargShortAccepted":294,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":211,"org.easymock.tests2.UsageConstraintsTest.cmpTo":128,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":383,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":159,"org.easymock.tests2.CaptureTest.testCaptureFromStub":99,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":235,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":30,"org.easymock.tests.UsageTest.unexpectedCallWithArray":312,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":188,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":209,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":228,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":190,"org.easymock.tests2.UsageConstraintsTest.constraints":119,"org.easymock.samples.ExampleTest.addAndChangeDocument":72,"org.easymock.tests2.ConstraintsToStringTest.notToString":361,"org.easymock.tests.UsageStrictMockTest.testVerify":194,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":334,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":187,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":276,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":94,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":174,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":175,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":250,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":289,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":346}}]

[{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"leafClass"}},{"position":"org.easymock.Capture:134","failures":[214,215],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[160,216,217,218,219,220,221,222,223],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","failures":[224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,129,131,251,160,252,253,216,217,254,255,256,257,184,218],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[258,259,260],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[9,261,262,106,263,264],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[147],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[0,2,3,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,20,280,261,33,281,282,283,284,285,286,287,94,288,289,290,291,292,105,106,107,293,294,109,295,296,110,111,297,126,298,299,128,129,130,131,136,150,163,300,301,302,303,304,305,306,263,167,307,168,169,308,309,171,310,311,312,313,314,315,316,317,318,180,181,182,183,319,320,189,321,211,322,323,212,213],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[3,4,5,266,267,8,282,283,284,34,35,36,37,38,39,40,41,42,43,47,287,324,288,289,104,108,294,295,296,110,111,113,115,116,117,118,119,325,326,327,328,329,330,331,162,164,307,169,308,309,314,318,332,333,334,200,201,203,204,205,206,209,210,322,323,212,213],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:71","failures":[335,300,164,302,303,305,306],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[336,127,164,337,338,339],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[340,341,342],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[343,344,345,346,347,348],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[280,349,281,282,283,284,287,106,107,294,296,307,308,309,323],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[268,271,276,350,351,44,352,353,46,47,354,355,356,357,358,88,89,90,359,343,344,345,346,360,347,348,361,103,290,291,292,362,363,364,104,335,224,224,225,225,329,330,120,297,122,123,124,365,125,366,367,126,336,127,298,368,299,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,369,128,129,370,130,131,160,162,163,371,300,301,372,164,165,302,303,217,304,305,373,306,374,375,184,218,337,376,377,338,339,185,186,187],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"method","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[216,218,219,220,221,222,223],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[280,349,281,282,283,284,287,106,107,294,296,307,308,309,323],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[378,379,281,294,380,381],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[278,279,288,289],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[382,383,384,385,386,387,388,389,390,391,392,393],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"matched","value":"matched"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,265,266,267,394,6,7,274,395,396,397,8,9,398,399,400,401,402,10,11,12,13,14,15,16,17,18,19,403,404,405,20,280,21,22,23,24,25,26,27,28,29,30,31,32,261,33,281,282,406,262,283,284,285,34,35,36,37,38,286,39,40,41,42,43,44,45,407,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,287,91,92,324,408,93,343,409,410,411,412,413,414,415,416,417,418,419,420,94,95,96,97,98,99,100,101,102,361,103,290,291,292,362,363,364,104,105,106,107,293,108,294,109,295,296,110,111,112,335,113,114,115,116,117,118,421,119,224,224,225,225,325,326,327,328,329,330,120,297,121,122,123,124,365,125,126,336,127,298,229,232,242,248,369,128,129,370,422,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,331,156,157,158,159,160,161,162,163,300,164,165,302,303,304,305,306,263,166,167,307,168,169,423,264,170,308,309,171,310,172,173,174,175,176,177,178,179,311,424,313,425,314,426,315,316,427,317,318,332,333,334,180,181,182,183,319,184,185,186,187,188,189,190,191,428,429,192,193,194,195,430,196,197,431,198,199,200,201,202,432,203,204,205,206,207,208,433,434,209,321,210,211,322,323,212,213],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"failures":[397,398],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[134,151,156,435],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[214],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[410,420],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[399,400,106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:315","failures":[7,9,401,402,14,15,16,17,18,19,405,261,262,407,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,324,408,263,264,185,186,187,188,194],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:184","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[216,218,219,220,221,222,223],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1039","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[147],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[136,137,138,139,140,141,142,143,436,144,153,154,157,158,199,200,201,202,208,433],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[437],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[153],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksBehavior:200","failures":[428],"status":-1,"binaryOperator":"(((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[283,438,308],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[439],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:134","failures":[214],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[216,218,219,220,221,222,223],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MocksControl:189","failures":[261,281,282,283,284,285,287,106,107,293,294,295,296,110,136,305,306,263,307,169,308,309,310,321,322,323,212],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[18,19,21,22,23,24,25,26,27,28,43,45,407,287,91,92,324,408,93,294,109,125,126,132,133,134,135,136,137,138,139,140,141,142,143,436,144,145,146,147,148,149,150,151,152,153,154,155,331,156,157,158,159,160,429,193,199,200,201,202,432,203,204,205,206,207,208,433,434,209,440,321,211,322],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[224,224,225,225,174],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[403,404,172,196,431],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:105","failures":[441,442,443,0,1,2,3,4,5,265,266,267,444,445,446,269,270,272,273,447,258,448,394,6,7,449,274,395,396,275,276,277,397,8,9,398,399,400,401,402,10,11,12,13,14,15,16,17,18,19,403,278,404,405,279,20,280,21,22,23,24,25,26,27,28,29,30,31,32,261,33,281,282,406,262,283,284,285,34,35,36,450,37,38,286,39,40,41,42,43,451,259,452,45,407,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,477,478,479,287,91,92,324,408,93,409,410,411,412,413,414,415,416,417,418,419,420,94,95,96,97,98,99,100,101,102,260,288,289,480,105,106,107,439,481,482,483,484,293,108,294,109,295,296,110,111,112,113,114,115,116,117,118,421,119,325,326,327,328,121,422,251,132,485,133,134,135,136,137,438,138,139,140,141,142,143,436,144,145,146,147,148,149,150,151,152,153,154,155,331,156,157,158,159,161,263,166,167,307,168,169,423,264,170,308,309,171,310,486,487,172,488,489,173,174,175,176,177,178,179,490,382,383,491,384,311,312,385,386,492,493,387,424,313,425,314,426,315,316,427,317,318,332,333,334,494,180,181,182,183,495,388,389,496,390,319,320,391,392,497,498,393,185,186,187,188,189,190,191,428,429,192,193,194,195,430,499,196,197,431,500,198,199,200,201,202,432,203,204,205,206,207,208,433,434,209,440,321,210,211,322,323,212,213],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1385","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[344,347],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":137,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":261,"org.easymock.tests2.UsageTest.argumentsOrdered":309,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":463,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":169,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":325,"org.easymock.tests2.DelegateToTest.testReturnException":196,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":15,"org.easymock.tests.MockingTest.testPartialClassMocking":88,"org.easymock.tests.MockClassControlTest.testToString":290,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":494,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":236,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":48,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":232,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":430,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":219,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":143,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":91,"org.easymock.tests2.UsageTest.wrongArguments":307,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":393,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":12,"org.easymock.samples.ExampleTest.answerVsDelegate":114,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":271,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":479,"org.easymock.tests2.UsageConstraintsTest.testNull":139,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":122,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":318,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":364,"org.easymock.tests2.CaptureTest.testPrimitive":202,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":93,"org.easymock.tests.UsageTest.moreThanOneArgument":33,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":67,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":121,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":100,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":439,"org.easymock.tests.UsageTest.argumentsOrdered":284,"org.easymock.tests.UsageVarargTest.varargIntAccepted":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":468,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":23,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":163,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":223,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":493,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":455,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":27,"org.easymock.tests.ReplayStateInvalidUsageTest.times":417,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":319,"org.easymock.tests2.AnswerTest.answer":172,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":436,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":470,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":179,"org.easymock.tests2.CaptureTest.testAnd":199,"org.easymock.tests2.UsageTest.strictResetToDefault":166,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":126,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":253,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":99,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":426,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":96,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":484,"org.easymock.tests2.DelegateToTest.testDelegate":198,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":63,"org.easymock.tests.LimitationsTest.mockFinalMethod":352,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":18,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":32,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":288,"org.easymock.tests2.CaptureTest.testCapture1_2446744":432,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":61,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":177,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":411,"org.easymock.tests.UsageThrowableTest.throwError":397,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":270,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":387,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":102,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":250,"org.easymock.samples.PartialClassMockTest.testGetArea":335,"org.easymock.tests.MockingTest.testInterfaceMocking":477,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":412,"org.easymock.tests2.CompareToTest.testLessOrEqual":435,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":24,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":258,"org.easymock.tests2.UsageTest.niceToStrict":168,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":237,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":453,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":164,"org.easymock.tests2.MockBuilderTest.testCreateMock":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":245,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":392,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":57,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":380,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":315,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":443,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":0,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":10,"org.easymock.tests.UsageOverloadedMethodTest.overloading":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":247,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":405,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":148,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":394,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":79,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":147,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":207,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":450,"org.easymock.tests2.EasyMockSupportClassTest.testAll":229,"org.easymock.tests.MockClassControlTest.testEquals":363,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":47,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":65,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":337,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":178,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":30,"org.easymock.tests2.CaptureTest.testCaptureAll":200,"org.easymock.tests.MockNameTest.defaultName":277,"org.easymock.tests2.UsageConstraintsTest.testMatches":149,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":409,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":101,"org.easymock.samples.ExampleTest.voteForRemovals":118,"org.easymock.tests.UsageVarargTest.allKinds":43,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":105,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":31,"org.easymock.samples.BasicClassMockTest.testPrintContent":330,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":401,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":321,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":500,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":385,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":19,"org.easymock.tests2.UsageConstraintsTest.greaterThan":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":230,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":95,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":298,"org.easymock.samples.ExampleTest.voteForRemoval":115,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":348,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":191,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":368,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":272,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":365,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":104,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":263,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":217,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":460,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":425,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":227,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":14,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":499,"org.easymock.tests2.CaptureTest.testCaptureFirst":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":459,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":314,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":310,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":280,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":75,"org.easymock.tests2.CaptureTest.testCapture2_2446744":434,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":429,"org.easymock.tests2.UsageTest.moreThanOneArgument":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":471,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":305,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":42,"org.easymock.tests.GenericTest.testBridgedEquals":355,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":437,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":266,"org.easymock.tests.UsageExpectAndReturnTest.longType":71,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":424,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":28,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":66,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":373,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":260,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":331,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":64,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":445,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":98,"org.easymock.tests.UsageCallCountTest.tooManyCalls":267,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":246,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":76,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":498,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":53,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":400,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":128,"org.easymock.tests.MockingTest.testNiceClassMocking":359,"org.easymock.tests.MockingTest.testClassMocking":357,"org.easymock.tests2.UsageConstraintsTest.testContains":146,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":1,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":371,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":187,"org.easymock.tests2.UsageConstraintsTest.testFind":138,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":7,"org.easymock.tests.MockTypeTest.fromEasyMockClass":269,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":133,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":293,"org.easymock.tests.UsageExpectAndReturnTest.object":78,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":125,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":497,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":317,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":38,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":220,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":396,"org.easymock.tests.UsageTest.exactCallCountByLastCall":285,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":458,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":481,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":451,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":218,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":34,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":84,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":404,"org.easymock.tests.MockClassControlTest.testHashCode":362,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":382,"org.easymock.tests2.EasyMockSupportTest.testVerify":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":239,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":482,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":442,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":403,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":176,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":440,"org.easymock.tests.UsageVarargTest.varargCharAccepted":37,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":476,"org.easymock.tests2.UsageTest.openCallCountByLastCall":423,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":333,"org.easymock.tests.DefaultClassInstantiatorTest.object":343,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":441,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":274,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":349,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":240,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":398,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":339,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":496,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":490,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":292,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":336,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":54,"org.easymock.tests.CapturesMatcherTest.test":214,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":85,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":444,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":248,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":291,"org.easymock.tests2.UsageTest.resumeIfFailure":171,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":268,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":17,"org.easymock.tests2.StubTest.stubWithReturnValue":194,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":216,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":156,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":77,"org.easymock.tests2.SerializationTest.testAllMockedMethod":162,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":469,"org.easymock.samples.SupportTest.voteForRemovals":328,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":381,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":353,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":491,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":60,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":475,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":488,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":452,"org.easymock.tests.UsageExpectAndThrowTest.object":58,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":154,"org.easymock.tests2.DelegateToTest.testWrongClass":431,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":21,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":22,"org.easymock.samples.ConstructorCalledMockTest.testTax":224,"org.easymock.tests.UsageStrictMockTest.range":296,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":486,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":427,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":369,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":59,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":302,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":419,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":226,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":283,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":11,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":378,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":448,"org.easymock.tests2.CaptureTest.testCaptureNone":206,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":341,"org.easymock.tests.UsageUnorderedTest.message":287,"org.easymock.tests.UsageVerifyTest.twoReturns":107,"org.easymock.tests.UsageVarargTest.varargByteAccepted":41,"org.easymock.tests2.ThreadingTest.testThreadSafe":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":243,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":5,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":275,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":329,"org.easymock.tests2.CaptureTest.testCapture_2617107":201,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":473,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":408,"org.easymock.tests2.UsageConstraintsTest.any":144,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":416,"org.easymock.tests2.StubTest.stub":193,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":474,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":16,"org.easymock.tests.UsageExpectAndThrowTest.longType":51,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":360,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":415,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":322,"org.easymock.tests2.SerializationTest.testClass":160,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":311,"org.easymock.tests.LimitationsTest.mockNativeMethod":44,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":87,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":354,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":389,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":338,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":213,"org.easymock.tests2.NameTest.nameForMocksControl":183,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":390,"org.easymock.tests2.MockedExceptionTest.testMockedException":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":231,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":262,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":485,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":52,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":90,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":120,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":303,"org.easymock.tests.MockingTest.testNicePartialClassMocking":89,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":124,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":495,"org.easymock.tests2.CaptureTest.testCaptureLast":205,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":289,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":142,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":131,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":155,"org.easymock.tests.MockingTest.testTwoMocks":358,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":251,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":68,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":56,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":308,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":158,"org.easymock.samples.ExampleTest.removeNonExistingDocument":421,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":413,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":391,"org.easymock.tests.UsageStrictMockTest.differentMethods":110,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":383,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":342,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":345,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":428,"org.easymock.tests2.MockBuilderTest.testCreateMockString":306,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":361,"org.easymock.tests.UsageExpectAndThrowTest.floatType":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":233,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":228,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":173,"org.easymock.tests.UsageVerifyTest.twoThrows":106,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":242,"org.easymock.samples.ExampleTest.voteAgainstRemoval":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":464,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":447,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":127,"org.easymock.tests.LimitationsTest.privateConstructor":351,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":257,"org.easymock.tests2.UsageConstraintsTest.testNotNull":157,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":402,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":185,"org.easymock.tests2.UsageTest.defaultResetToNice":170,"org.easymock.samples.ExampleTest.voteAgainstRemovals":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":465,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":83,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":388,"org.easymock.tests.UsageVarargTest.differentLength":286,"org.easymock.tests2.CallbackTest.callback":189,"org.easymock.tests2.UsageConstraintsTest.equals":438,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":366,"org.easymock.tests.UsageTest.openCallCountByLastCall":406,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":134,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":324,"org.easymock.tests.UsageCallCountTest.tooFewCalls":3,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":370,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":13,"org.easymock.tests.UsageThrowableTest.throwCheckedException":399,"org.easymock.tests.MockingTest.testStrictClassMocking":356,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":379,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":407,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":130,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":129,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":320,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":418,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":422,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":175,"org.easymock.tests.ObjectMethodsTest.testHashCode":395,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":222,"org.easymock.tests2.NameTest.nameForNiceMock":182,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":192,"org.easymock.tests2.DependencyTest.testInterfaceMocking":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":221,"org.easymock.samples.ExampleTest.addDocument":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":244,"org.easymock.tests2.DelegateToTest.testStubDelegate":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":249,"org.easymock.tests2.AnswerTest.stubAnswer":174,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":109,"org.easymock.tests.UsageVarargTest.varargLongAccepted":40,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":462,"org.easymock.tests.UsageExpectAndReturnTest.floatType":70,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":86,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":184,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":225,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":492,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":152,"org.easymock.tests.UsageThrowableTest.noUpperLimit":8,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":279,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":135,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":374,"org.easymock.tests2.SerializationTest.test":161,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":203,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":344,"org.easymock.tests2.UsageConstraintsTest.testSame":140,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":69,"org.easymock.samples.SupportTest.addDocument":327,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":234,"org.easymock.tests.GenericTest.testPackageScope":46,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":457,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":386,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":478,"org.easymock.tests2.NameTest.nameForMock":180,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":80,"org.easymock.tests2.UsageStrictMockTest.differentMethods":212,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":255,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":367,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":72,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":62,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":449,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":97,"org.easymock.tests2.MockedExceptionTest.testRealException":188,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":273,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":466,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":211,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":420,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":92,"org.easymock.tests2.NameTest.nameForStrictMock":181,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":372,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":132,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":123,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":375,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":153,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":346,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":300,"org.easymock.tests2.UsageStrictMockTest.range":323,"org.easymock.tests2.UsageConstraintsTest.lessThan":159,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":376,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":461,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":313,"org.easymock.tests2.CaptureTest.testCaptureRightOne":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":238,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":340,"org.easymock.tests2.UsageConstraintsTest.testOr":141,"org.easymock.tests.UsageRangeTest.combination":94,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":297,"org.easymock.tests.UsageTest.wrongArguments":282,"org.easymock.tests2.MockBuilderTest.testWithConstructor":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":235,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":103,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":454,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":81,"org.easymock.tests.UsageVarargTest.varargShortAccepted":39,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":347,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":265,"org.easymock.tests2.UsageConstraintsTest.cmpTo":145,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":456,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":264,"org.easymock.tests2.CaptureTest.testCaptureFromStub":433,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":410,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":301,"org.easymock.tests.UsageTest.unexpectedCallWithArray":281,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":294,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":4,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":254,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":82,"org.easymock.tests2.CaptureTest.testCapture":215,"org.easymock.tests2.UsageConstraintsTest.constraints":136,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":295,"org.easymock.samples.ExampleTest.addAndChangeDocument":119,"org.easymock.tests.UsageStrictMockTest.testVerify":112,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":326,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":108,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":29,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":204,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":25,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":377,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":74,"org.easymock.tests.LimitationsTest.abstractClass":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":26,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":20,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":35,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":316}}]

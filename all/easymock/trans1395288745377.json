[{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[0,1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[50,51,52,53],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[54,0,55,56],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:63","sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[57],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[58,59,60,61,62,63,64,2,3,65,4,5,6,7,8,9,66,67,68,69,10,11,12,13,14,15,70,71,72,73,74,75,76,77,78,79,80,81,82,17,83,84,85,86,18,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,19,102,103,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,40,41,130,131,132,133,134,135,136,137,138,139,140,53,141,142,143,42,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,0,55,56,202,203,204,205,206,43,207,208,209,210,211,212,44,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,45,46,47,48,231,232,233,234,235,236,237,49,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[14,71,72,73,74,75,76,77,99,101,19,127,128,129,40,41,130,147,148,167,174,175,176,177,178,179,180,181,182,183,184,185,265,186,187,188,189,190,191,192,193,194,195,196,197,266,198,199,200,201,235,243,244,245,246,247,248,249,250,251,252,253,254,255,256,260],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1026","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[179],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[16,48],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:77","failures":[267,268],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:110","sourceCode":"break","type":"CtBreakImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:218","failures":[269,270,271,272,273],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[274],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[275],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[54,0,55,56],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:117","failures":[276,155,174,175,218,219,221,231],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:62","sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"org.easymock.internal.EasyMockProperties.PREFIX"}},{"position":"org.easymock.internal.RecordState:85","failures":[58,59,60,61,62,63,277,278,279,280,64,2,281,282,283,3,65,4,5,6,7,8,9,66,67,68,69,10,11,12,13,14,15,276,284,16,70,285,71,72,73,74,75,76,77,78,79,80,81,82,17,83,84,85,86,18,87,88,89,90,91,92,93,94,286,95,96,97,98,99,100,101,19,102,103,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,40,41,130,287,288,289,290,291,131,292,293,294,295,296,297,298,132,133,134,135,136,137,138,139,140,299,141,300,301,302,303,304,305,142,143,42,144,145,146,147,148,149,150,151,152,153,269,154,155,156,157,158,159,306,160,270,270,271,271,307,308,309,310,311,312,161,162,163,164,165,166,313,167,168,314,169,315,316,272,273,317,318,170,171,319,320,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,266,198,199,200,201,0,55,56,202,321,203,204,322,323,324,205,206,43,207,208,209,210,211,212,44,213,214,215,216,217,218,219,220,221,222,223,224,225,325,326,327,328,329,330,331,332,333,334,335,336,337,338,226,227,228,229,339,230,45,46,47,48,231,232,233,234,235,236,237,49,238,340,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[178,184,188,195],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1672","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","type":"CtInvocationImpl"},"failures":[189],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[124,125,126,172,341],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[176,178,190,193,201,342,343,344,345,346],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.EndsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[347],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[58,59,60,61,62,63,64,2,3,65,4,5,6,7,8,9,66,67,68,69,10,11,12,13,14,15,70,71,72,73,74,75,76,77,78,79,80,81,82,17,83,84,85,86,18,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,19,102,103,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,40,41,130,131,132,133,134,135,136,137,138,139,140,53,141,142,143,42,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,0,55,56,202,203,204,205,206,43,207,208,209,210,211,212,44,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,45,46,47,48,231,232,233,234,235,236,237,49,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[233,234],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[348],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","failures":[270,271,349,350,351,316,352,353,272,354,355,356,357,358,359,360,361,362,273,363,364,365,366,367,317,368,369,171,173,341,0,370,371,372,1,373,374,375,267,230,376],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[377,378,379,58,59,60,61,62,63,277,278,279,380,381,382,383,384,385,386,387,388,389,390,391,392,393,280,64,2,394,281,282,283,395,396,397,3,65,4,5,6,7,8,9,66,67,68,69,10,11,12,13,14,15,276,50,284,16,51,70,285,71,72,398,73,74,75,76,77,78,79,80,81,82,17,83,84,85,86,18,87,88,89,90,91,92,399,93,94,286,95,96,97,98,99,400,401,402,403,404,100,405,101,19,57,102,103,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,432,433,434,124,125,435,126,436,437,438,127,128,129,40,41,130,439,287,440,441,442,443,444,445,446,288,289,290,291,131,292,293,294,295,296,297,298,132,133,134,135,136,137,138,139,140,447,52,53,448,299,141,300,301,302,303,304,305,142,143,42,144,449,450,451,452,453,145,146,147,148,149,150,151,152,153,269,154,155,156,157,158,159,306,160,270,271,307,308,309,310,311,312,161,162,163,164,165,166,313,454,167,455,456,168,314,169,315,457,458,349,350,351,316,352,353,272,354,355,356,357,358,359,360,361,362,273,363,364,365,366,367,317,368,369,318,170,171,319,459,320,172,173,341,174,460,175,176,177,178,179,461,180,181,182,183,184,185,265,186,187,188,189,190,191,192,193,194,195,196,197,266,198,199,200,201,0,55,56,202,370,321,462,371,463,203,204,322,372,323,464,1,324,205,374,206,43,207,208,209,210,211,212,44,213,214,215,216,217,465,466,467,468,469,470,471,218,472,473,219,220,221,222,223,224,225,474,475,476,477,478,325,479,480,481,482,483,484,326,327,328,329,330,331,332,333,334,335,336,337,338,485,226,227,228,229,486,487,488,489,490,339,491,492,493,494,495,496,230,376,497,45,46,47,48,231,232,233,234,235,236,237,49,498,499,238,340,500,239,240,241,501,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1927","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","type":"CtInvocationImpl"},"failures":[246],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[502,503,84,147,504,505],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[506,507,508,509],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1121","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:103","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"failures":[265],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[10,11,12,13,14,15,19,40,45,46,47,48,49],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:52","failures":[192],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[0,372,1,510,511,230,376,512,513,514,515,516,517,518,519],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":179,"org.easymock.tests.ClassInstantiatorFactoryTest.getJVM":274,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":17,"org.easymock.tests2.UsageTest.argumentsOrdered":215,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":336,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":418,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":211,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":307,"org.easymock.tests2.DelegateToTest.testReturnException":239,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":11,"org.easymock.tests.MockingTest.testPartialClassMocking":124,"org.easymock.tests.MockClassControlTest.testToString":300,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":485,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":401,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":458,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":357,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":20,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":272,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":340,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":513,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":185,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":128,"org.easymock.tests2.UsageTest.wrongArguments":209,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":496,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":68,"org.easymock.samples.ExampleTest.answerVsDelegate":155,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":388,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":437,"org.easymock.tests2.UsageConstraintsTest.testNull":181,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":164,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":305,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":335,"org.easymock.tests2.CaptureTest.testPrimitive":246,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":130,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":39,"org.easymock.tests.UsageTest.moreThanOneArgument":83,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":163,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":138,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":449,"org.easymock.tests.UsageTest.argumentsOrdered":88,"org.easymock.tests.UsageVarargTest.varargIntAccepted":92,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":423,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":73,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":518,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":202,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":483,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":467,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":410,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":77,"org.easymock.tests.ReplayStateInvalidUsageTest.times":295,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":339,"org.easymock.tests2.DependencyTest.testClassMocking":498,"org.easymock.tests2.AnswerTest.answer":218,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":425,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":225,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":385,"org.easymock.tests2.CaptureTest.testAnd":243,"org.easymock.tests2.UsageTest.strictResetToDefault":207,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":168,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":371,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":137,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":134,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":330,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":453,"org.easymock.tests2.DelegateToTest.testDelegate":242,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":35,"org.easymock.tests.LimitationsTest.mockFinalMethod":405,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":14,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":82,"org.easymock.tests2.DependencyTest.testClassMockingSupport":499,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":52,"org.easymock.tests2.CaptureTest.testCapture1_2446744":247,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":454,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":33,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":223,"org.easymock.tests.UsageThrowableTest.throwError":3,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":290,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":387,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":484,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":398,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":140,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":375,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":369,"org.easymock.samples.PartialClassMockTest.testGetArea":269,"org.easymock.tests.MockingTest.testInterfaceMocking":435,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":291,"org.easymock.tests2.CompareToTest.testLessOrEqual":346,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":74,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":392,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":396,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":21,"org.easymock.tests2.UsageTest.niceToStrict":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":408,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":268,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":203,"org.easymock.tests2.MockBuilderTest.testCreateMock":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":365,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":493,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":504,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":29,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":331,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":384,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":379,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":58,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":66,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":506,"org.easymock.tests.UsageOverloadedMethodTest.overloading":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":367,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":190,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":16,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":115,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":280,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":189,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":252,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":399,"org.easymock.tests.MockClassControlTest.testEquals":304,"org.easymock.tests2.EasyMockSupportClassTest.testAll":316,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":103,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":37,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":80,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":224,"org.easymock.tests2.CaptureTest.testCaptureAll":244,"org.easymock.tests.MockNameTest.defaultName":397,"org.easymock.tests2.UsageConstraintsTest.testMatches":191,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":139,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":288,"org.easymock.samples.ExampleTest.voteForRemovals":159,"org.easymock.tests.UsageVarargTest.allKinds":99,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":143,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":81,"org.easymock.samples.BasicClassMockTest.testPrintContent":312,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":8,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":258,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":501,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":480,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":15,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":519,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":445,"org.easymock.tests2.UsageConstraintsTest.greaterThan":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":352,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":133,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":315,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":446,"org.easymock.samples.ExampleTest.voteForRemoval":156,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":457,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":233,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":389,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":468,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":313,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":142,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":43,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":415,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":328,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":350,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":10,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":500,"org.easymock.tests2.CaptureTest.testCaptureFirst":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":414,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":329,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":217,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":285,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":111,"org.easymock.tests2.UsageTest.moreThanOneArgument":208,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":235,"org.easymock.tests2.CaptureTest.testCapture2_2446744":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":426,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":205,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":98,"org.easymock.tests.GenericTest.testBridgedEquals":407,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":507,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":278,"org.easymock.tests.UsageExpectAndReturnTest.longType":107,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":78,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":326,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":38,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":447,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":266,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":36,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":136,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":381,"org.easymock.tests.UsageCallCountTest.tooManyCalls":279,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":366,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":112,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":495,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":25,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":7,"org.easymock.tests.MockingTest.testNiceClassMocking":438,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":170,"org.easymock.tests.MockingTest.testClassMocking":433,"org.easymock.tests2.UsageConstraintsTest.testContains":188,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":59,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":47,"org.easymock.tests2.UsageConstraintsTest.testFind":180,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":2,"org.easymock.tests.MockTypeTest.fromEasyMockClass":386,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":175,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":145,"org.easymock.tests.UsageExpectAndReturnTest.object":114,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":167,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":494,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":334,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":514,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":94,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":283,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":508,"org.easymock.tests.UsageTest.exactCallCountByLastCall":89,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":413,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":450,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":400,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":376,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":120,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":90,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":284,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":475,"org.easymock.tests.MockClassControlTest.testHashCode":303,"org.easymock.tests2.EasyMockSupportTest.testVerify":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":360,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":451,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":276,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":378,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":222,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":257,"org.easymock.tests.UsageVarargTest.varargCharAccepted":93,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":439,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":431,"org.easymock.tests2.UsageTest.openCallCountByLastCall":212,"org.easymock.tests.DefaultClassInstantiatorTest.object":287,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":337,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":377,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":281,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":361,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":5,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":489,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":474,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":302,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":314,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":26,"org.easymock.tests.CapturesMatcherTest.test":348,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":121,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":380,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":317,"org.easymock.tests2.UsageTest.resumeIfFailure":216,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":383,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":466,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":13,"org.easymock.tests2.StubTest.stubWithReturnValue":49,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":372,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":113,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":198,"org.easymock.tests2.SerializationTest.testAllMockedMethod":56,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":424,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":511,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":505,"org.easymock.samples.SupportTest.voteForRemovals":310,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":57,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":477,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":32,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":54,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":430,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":472,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":402,"org.easymock.tests.UsageExpectAndThrowTest.object":30,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":196,"org.easymock.tests2.DelegateToTest.testWrongClass":241,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":71,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":72,"org.easymock.tests.UsageStrictMockTest.range":150,"org.easymock.samples.ConstructorCalledMockTest.testTax":270,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":470,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":333,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":318,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":31,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":322,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":87,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":349,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":67,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":502,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":393,"org.easymock.tests2.CaptureTest.testCaptureNone":251,"org.easymock.tests.UsageUnorderedTest.message":127,"org.easymock.tests.UsageVerifyTest.twoReturns":144,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":347,"org.easymock.tests.UsageVarargTest.varargByteAccepted":97,"org.easymock.tests2.ThreadingTest.testThreadSafe":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":363,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":63,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":395,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":311,"org.easymock.tests2.CaptureTest.testCapture_2617107":245,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":428,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":41,"org.easymock.tests2.UsageConstraintsTest.any":186,"org.easymock.tests2.StubTest.stub":237,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":294,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":429,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":12,"org.easymock.tests.UsageExpectAndThrowTest.longType":23,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":443,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":293,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":261,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":325,"org.easymock.tests.LimitationsTest.mockNativeMethod":100,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":406,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":123,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":488,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":264,"org.easymock.tests2.NameTest.nameForMocksControl":229,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":490,"org.easymock.tests2.MockedExceptionTest.testMockedException":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":353,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":18,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":460,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":126,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":24,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":161,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":323,"org.easymock.tests.MockingTest.testNicePartialClassMocking":125,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":166,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":512,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":486,"org.easymock.tests2.CaptureTest.testCaptureLast":250,"org.easymock.tests2.CompareToTest.testCompareEqual":344,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":53,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":184,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":173,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":197,"org.easymock.tests.MockingTest.testTwoMocks":434,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":341,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":28,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":214,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":200,"org.easymock.samples.ExampleTest.removeNonExistingDocument":306,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":492,"org.easymock.tests.UsageStrictMockTest.differentMethods":151,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":131,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":476,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":441,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":234,"org.easymock.tests2.MockBuilderTest.testCreateMockString":206,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":299,"org.easymock.tests.UsageExpectAndThrowTest.floatType":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":354,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":351,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":219,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":497,"org.easymock.tests.UsageVerifyTest.twoThrows":42,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":273,"org.easymock.samples.ExampleTest.voteAgainstRemoval":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":419,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":391,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":169,"org.easymock.tests.LimitationsTest.privateConstructor":404,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":267,"org.easymock.tests2.UsageConstraintsTest.testNotNull":199,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":45,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":9,"org.easymock.tests2.UsageTest.defaultResetToNice":213,"org.easymock.samples.ExampleTest.voteAgainstRemovals":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":420,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":119,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":487,"org.easymock.tests.UsageVarargTest.differentLength":286,"org.easymock.tests2.CallbackTest.callback":231,"org.easymock.tests2.UsageConstraintsTest.equals":461,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":455,"org.easymock.tests.UsageTest.openCallCountByLastCall":86,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":176,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":40,"org.easymock.tests.UsageCallCountTest.tooFewCalls":61,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":319,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":69,"org.easymock.tests.UsageThrowableTest.throwCheckedException":6,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":503,"org.easymock.tests.MockingTest.testStrictClassMocking":432,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":172,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":19,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":491,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":171,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":296,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":320,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":221,"org.easymock.tests.ObjectMethodsTest.testHashCode":282,"org.easymock.tests2.CompareToTest.testGreateOrEqual":345,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":517,"org.easymock.tests2.NameTest.nameForNiceMock":228,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":236,"org.easymock.tests2.DependencyTest.testInterfaceMocking":238,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":515,"org.easymock.samples.ExampleTest.addDocument":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":364,"org.easymock.tests2.DelegateToTest.testStubDelegate":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":368,"org.easymock.tests2.AnswerTest.stubAnswer":220,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":148,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":464,"org.easymock.tests.UsageVarargTest.varargLongAccepted":96,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":417,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":122,"org.easymock.tests.UsageExpectAndReturnTest.floatType":106,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":230,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":271,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":482,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":51,"org.easymock.tests.UsageThrowableTest.noUpperLimit":65,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":194,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":177,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":465,"org.easymock.tests2.SerializationTest.test":55,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":248,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":440,"org.easymock.tests2.UsageConstraintsTest.testSame":182,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":105,"org.easymock.samples.SupportTest.addDocument":309,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":459,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":355,"org.easymock.tests.GenericTest.testPackageScope":102,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":452,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":412,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":481,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":436,"org.easymock.tests2.NameTest.nameForMock":226,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":116,"org.easymock.tests2.UsageStrictMockTest.differentMethods":263,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":374,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":456,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":108,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":34,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":394,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":135,"org.easymock.tests2.MockedExceptionTest.testRealException":48,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":390,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":422,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":510,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":421,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":260,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":129,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":298,"org.easymock.tests2.NameTest.nameForStrictMock":227,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":463,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":509,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":174,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":165,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":469,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":442,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":195,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":321,"org.easymock.tests2.UsageStrictMockTest.range":262,"org.easymock.tests2.UsageConstraintsTest.lessThan":201,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":478,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":275,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":516,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":416,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":327,"org.easymock.tests2.CaptureTest.testCaptureRightOne":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":359,"org.easymock.tests2.UsageConstraintsTest.testOr":183,"org.easymock.tests.UsageRangeTest.combination":132,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":162,"org.easymock.tests.UsageTest.wrongArguments":85,"org.easymock.tests2.MockBuilderTest.testWithConstructor":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":356,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":141,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":409,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":117,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":444,"org.easymock.tests.UsageVarargTest.varargShortAccepted":95,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":277,"org.easymock.tests2.UsageConstraintsTest.cmpTo":187,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":473,"org.easymock.tests2.CompareToTest.testLessThan":342,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":411,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":44,"org.easymock.tests2.CaptureTest.testCaptureFromStub":254,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":289,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":462,"org.easymock.tests.UsageTest.unexpectedCallWithArray":84,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":147,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":62,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":373,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":118,"org.easymock.tests2.UsageConstraintsTest.constraints":178,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":149,"org.easymock.samples.ExampleTest.addAndChangeDocument":160,"org.easymock.tests.UsageStrictMockTest.testVerify":153,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":308,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":146,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":79,"org.easymock.tests2.CompareToTest.testGreateThan":343,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":249,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":75,"org.easymock.tests.LimitationsTest.abstractClass":403,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":110,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":70,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":76,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":91,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":332}}]

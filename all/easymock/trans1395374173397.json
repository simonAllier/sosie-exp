[{"transplant":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:337","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[0,1,2],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[3],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[4,5,6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:65","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:46","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte.valueOf(((byte)(0))))","type":"CtInvocationImpl"},"failures":[39,40,41,42,43,44,45],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:41","sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[46],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"qualifier":"org.easymock.internal.EasyMockProperties.PREFIX","this":"key"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[48,48,49,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,6,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:65","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:83","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[83],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[7,8,9,10,12,13,14,15,16,17,18,20,21,22,85],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"verified":"org.easymock.internal.AndroidSupport.isAndroid"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[86,87,88],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:87","sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result","bridgeMethod":"bridgeMethod","candidateMethods":"candidateMethods","this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:44","sourceCode":"new java.util.ArrayList<org.easymock.internal.matchers.Captures<?>>(0)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[89,90],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[91,92,93,94,95,83,96,97,98,99,100],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Any:40","sourceCode":"java.lang.StringBuffer.append(\"<any>\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[101,102,103,104,105,106,46,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:158","sourceCode":"return ((java.lang.Class<?>.getSimpleName()) + \".\") + java.lang.String","type":"CtReturnImpl"},"failures":[101,102,103,104,127,128,129,130,110,111,112,113,114,115,116,117,131,121,132,133,134,135,122],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[136,137],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EndsWith:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","type":"CtReturnImpl"},"failures":[3],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:74","sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[50,52,53,54,138,58,59,60,61,62,63,64,66,6,68,69,70,77,139,140],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[89,90],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[39,141,40,41,142,42,143,48,48,49,49,23,50,24,144,43,145,146,147,148,149,150,151,152,101,153,102,103,154,155,156,157,158,27,159,3,91,92,160,93,161,94,95,162,163,164,165,166,167,168,169,170,171,96,172,173,174,97,175,176,98,177,99,178,179,180,181,182,183,184,100,185,186,187,188,189,190,191,192,193,51,194,195,196,197,198,199,54,56,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,58,61,218,62,63,64,66,219,220,104,127,221,222,223,224,225,128,129,226,227,7,8,9,10,34,228,229,230,231,232,233,234,6,235,236,67,68,69,70,237,238,239,240,241,87,242,243,244,245,11,246,247,248,249,76,250,251,252,253,254,255,256,257,130,110,258,111,112,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,12,13,14,15,16,17,281,282,283,284,113,114,115,285,18,117,78,79,80,286,287,81,288,289,290,291,292,293,294,295,296,297,298,299,300,301,121,132,133,302,303,134,135,304,305,306,307,308,309,310,311,312,313,314,315,316,44,317,318,82,319,320,85,321,322,323,324,45,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,122,136,349,350,137,351,352,353,354,125],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[48,48,49,49,50,145,146,193,51,195,196,197,52,198,199,53,54,55,56,58,355,59,60,61,218,62,63,356,64,357,66,9,228,229,230,231,233,234,6,236,67,68,69,70,72,73,74,76,250,77,358,78,79,80,139,140,81,300,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[102,103,111,112,265,269,270,272,275,359,333,337,338,340,343,360,361,362],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:355","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[363,364],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1901","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","type":"CtInvocationImpl"},"failures":[169],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[48,49,365,366,367,368],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[4,5,6],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":92,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":301,"org.easymock.tests2.UsageTest.argumentsOrdered":129,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":15,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":88,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":222,"org.easymock.tests2.StubTest.stubWithReturnValue":11,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":270,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":24,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":174,"org.easymock.tests2.SerializationTest.testAllMockedMethod":236,"org.easymock.tests2.DelegateToTest.testReturnException":241,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":13,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":1,"org.easymock.tests.MockingTest.testPartialClassMocking":78,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":5,"org.easymock.samples.SupportTest.voteForRemovals":43,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":89,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":32,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":84,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":341,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":138,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":329,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":68,"org.easymock.tests.UsageExpectAndThrowTest.object":339,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":148,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":172,"org.easymock.tests2.DelegateToTest.testWrongClass":242,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":323,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":324,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":162,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":319,"org.easymock.tests2.UsageTest.wrongArguments":127,"org.easymock.samples.ConstructorCalledMockTest.testTax":48,"org.easymock.tests.UsageStrictMockTest.range":111,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":248,"org.easymock.samples.ExampleTest.answerVsDelegate":141,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":212,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":228,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":140,"org.easymock.tests2.UsageConstraintsTest.testNull":93,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":340,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":195,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":214,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":62,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":71,"org.easymock.tests2.CaptureTest.testPrimitive":178,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":322,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":348,"org.easymock.tests.UsageTest.moreThanOneArgument":121,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":134,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":247,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":194,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":253,"org.easymock.tests2.CaptureTest.testCaptureNone":183,"org.easymock.tests.UsageUnorderedTest.message":122,"org.easymock.tests.UsageVerifyTest.twoReturns":115,"org.easymock.tests.UsageVarargTest.varargByteAccepted":312,"org.easymock.tests2.ThreadingTest.testThreadSafe":200,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":360,"org.easymock.tests.UsageTest.argumentsOrdered":135,"org.easymock.tests.UsageVarargTest.varargIntAccepted":307,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":293,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":145,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":109,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":315,"org.easymock.tests2.CaptureTest.testCapture_2617107":99,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":58,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":321,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":38,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":218,"org.easymock.tests2.UsageConstraintsTest.any":163,"org.easymock.tests2.StubTest.stub":245,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":318,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":22,"org.easymock.tests.UsageExpectAndThrowTest.longType":332,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":14,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":297,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":153,"org.easymock.tests2.SerializationTest.testClass":6,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":34,"org.easymock.tests.LimitationsTest.mockNativeMethod":81,"org.easymock.tests.ReplayStateInvalidUsageTest.times":2,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":27,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":280,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":77,"org.easymock.tests2.AnswerTest.answer":188,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":83,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":158,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":74,"org.easymock.tests2.CaptureTest.testAnd":98,"org.easymock.tests2.UsageTest.strictResetToDefault":220,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":199,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":154,"org.easymock.tests2.NameTest.nameForMocksControl":240,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":47,"org.easymock.tests2.MockedExceptionTest.testMockedException":8,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":26,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":252,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":283,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":209,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":303,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":362,"org.easymock.tests2.DelegateToTest.testDelegate":243,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":333,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":80,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":193,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":63,"org.easymock.tests.MockingTest.testNicePartialClassMocking":79,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":344,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":197,"org.easymock.tests2.CaptureTest.testCaptureLast":182,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":16,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":117,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":234,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":95,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":328,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":173,"org.easymock.tests.MockingTest.testTwoMocks":358,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":116,"org.easymock.tests2.CaptureTest.testCapture1_2446744":179,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":261,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":342,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":337,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":156,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":128,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":175,"org.easymock.tests.UsageThrowableTest.throwError":136,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":296,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":29,"org.easymock.tests.UsageStrictMockTest.differentMethods":112,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":202,"org.easymock.tests2.ConstraintsToStringTest.andToString":108,"org.easymock.tests2.MockBuilderTest.testCreateMockString":66,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":131,"org.easymock.tests.UsageExpectAndThrowTest.floatType":331,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":255,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":169,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":189,"org.easymock.tests.UsageVerifyTest.twoThrows":114,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":69,"org.easymock.samples.PartialClassMockTest.testGetArea":50,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":295,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":316,"org.easymock.samples.ExampleTest.voteAgainstRemoval":41,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":54,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":330,"org.easymock.tests2.UsageTest.niceToStrict":221,"org.easymock.tests2.UsageConstraintsTest.testNotNull":97,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":354,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":7,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":61,"org.easymock.tests2.MockBuilderTest.testCreateMock":356,"org.easymock.tests2.UsageTest.defaultResetToNice":225,"org.easymock.samples.ExampleTest.voteAgainstRemovals":39,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":0,"org.easymock.tests2.CallbackTest.callback":244,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":365,"org.easymock.tests.UsageTest.openCallCountByLastCall":302,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":338,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":106,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":210,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":159,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":288,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":246,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":85,"org.easymock.tests.UsageCallCountTest.tooFewCalls":291,"org.easymock.tests.UsageOverloadedMethodTest.overloading":286,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":167,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":272,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":231,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":166,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":184,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":249,"org.easymock.tests.UsageThrowableTest.throwCheckedException":351,"org.easymock.tests2.EasyMockSupportClassTest.testAll":67,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":250,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":346,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":118,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":72,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":326,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":157,"org.easymock.tests2.CaptureTest.testCaptureAll":177,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":233,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":18,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":230,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":28,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":298,"org.easymock.tests2.UsageConstraintsTest.testMatches":168,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":232,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":191,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":254,"org.easymock.samples.ExampleTest.voteForRemovals":42,"org.easymock.tests2.NameTest.nameForNiceMock":239,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":204,"org.easymock.tests.UsageVarargTest.allKinds":314,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":113,"org.easymock.tests2.DependencyTest.testInterfaceMocking":147,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":327,"org.easymock.samples.BasicClassMockTest.testPrintContent":146,"org.easymock.samples.ExampleTest.addDocument":142,"org.easymock.tests2.DelegateToTest.testStubDelegate":87,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":353,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":151,"org.easymock.tests2.AnswerTest.stubAnswer":190,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":17,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":36,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":110,"org.easymock.tests2.UsageConstraintsTest.greaterThan":170,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":282,"org.easymock.tests.UsageVarargTest.varargLongAccepted":311,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":55,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":259,"org.easymock.samples.ExampleTest.voteForRemoval":40,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":201,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":279,"org.easymock.tests.UsageExpectAndReturnTest.floatType":263,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":65,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":56,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":52,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":49,"org.easymock.tests2.ConstraintsToStringTest.orToString":105,"org.easymock.tests.UsageThrowableTest.noUpperLimit":349,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":37,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":124,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":171,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":219,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":82,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":3,"org.easymock.tests2.SerializationTest.test":235,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":180,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":4,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":19,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":207,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":350,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":262,"org.easymock.tests2.UsageConstraintsTest.testSame":161,"org.easymock.samples.SupportTest.addDocument":144,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":12,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":86,"org.easymock.tests2.CaptureTest.testCaptureFirst":187,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":208,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":227,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":126,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":268,"org.easymock.tests.GenericTest.testPackageScope":76,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":203,"org.easymock.tests2.UsageTest.moreThanOneArgument":104,"org.easymock.tests2.CaptureTest.testCapture2_2446744":186,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":361,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":363,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":64,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":313,"org.easymock.tests.GenericTest.testBridgedEquals":90,"org.easymock.tests2.NameTest.nameForMock":237,"org.easymock.tests.UsageExpectAndReturnTest.longType":264,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":205,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":45,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":357,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":347,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":273,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":368,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":345,"org.easymock.tests2.UsageStrictMockTest.differentMethods":103,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":251,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":21,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":265,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":343,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":284,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":290,"org.easymock.tests2.MockedExceptionTest.testRealException":10,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":269,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":31,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":119,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":334,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":101,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":352,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":320,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":299,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":229,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":355,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":289,"org.easymock.tests2.NameTest.nameForStrictMock":238,"org.easymock.tests2.UsageConstraintsTest.testContains":165,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":9,"org.easymock.tests2.UsageConstraintsTest.testFind":160,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":287,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":149,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":196,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":256,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":150,"org.easymock.tests.UsageExpectAndReturnTest.object":271,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":96,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":198,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":59,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":30,"org.easymock.tests2.UsageStrictMockTest.range":102,"org.easymock.tests2.UsageConstraintsTest.lessThan":176,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":213,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":309,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":33,"org.easymock.tests.UsageTest.exactCallCountByLastCall":304,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":285,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":359,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":206,"org.easymock.tests2.CaptureTest.testCaptureRightOne":100,"org.easymock.tests2.UsageConstraintsTest.testOr":94,"org.easymock.tests.UsageRangeTest.combination":281,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":305,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":277,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":51,"org.easymock.tests.UsageTest.wrongArguments":133,"org.easymock.tests2.MockBuilderTest.testWithConstructor":366,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":300,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":266,"org.easymock.tests2.EasyMockSupportTest.testVerify":217,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":274,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":364,"org.easymock.tests.UsageVarargTest.varargShortAccepted":310,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":155,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":192,"org.easymock.tests2.UsageConstraintsTest.cmpTo":164,"org.easymock.tests.UsageVarargTest.varargCharAccepted":308,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":152,"org.easymock.tests2.UsageTest.openCallCountByLastCall":223,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":224,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":216,"org.easymock.tests2.CaptureTest.testCaptureFromStub":185,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":294,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":60,"org.easymock.tests.UsageTest.unexpectedCallWithArray":132,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":120,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":336,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":75,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":130,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":137,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":292,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":367,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":25,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":275,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":258,"org.easymock.tests2.UsageConstraintsTest.constraints":91,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":53,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":335,"org.easymock.samples.ExampleTest.addAndChangeDocument":143,"org.easymock.tests2.ConstraintsToStringTest.notToString":46,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":278,"org.easymock.tests.UsageStrictMockTest.testVerify":260,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":20,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":23,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":70,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":107,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":325,"org.easymock.tests2.UsageTest.resumeIfFailure":226,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":181,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":44,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":267,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":317,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":125,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":306,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":211}}]

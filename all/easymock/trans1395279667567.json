[{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[0,1],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[4,5],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[6,7,8,9,10,11,12,13,14,15],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,4,52,5,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,6,96,8,11,12,97,98,99,13,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,14,171,172,173,174,175,176,177,178,179,180],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[16,17,181,18,19,20,21,182,183,184,185,186,25,29,30,32,37,42,47,51,187,4,52,5,53,54,55,56,57,58,59,60,188,61,66,189,190,191,192,193,194,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,195,196,85,86,87,88,89,90,91,92,93,94,95,6,7,96,8,11,12,97,98,13,103,104,105,106,107,108,109,197,198,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,199,200,201,134,135,136,137,138,139,140,142,145,147,148,149,150,151,152,154,158,159,160,161,163,164,165,166,168,169,14,171,173,174,175,15,176,177,180],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[16,17,181,18,19,202,20,203,204,21,205,206,207,208,209,210,211,212,182,183,213,184,214,215,216,217,185,218,219,220,221,186,222,223,224,225,25,226,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,227,228,229,230,231,232,233,234,235,236,237,238,52,57,58,59,60,188,61,63,239,240,241,242,189,243,67,244,68,70,245,246,71,72,73,247,248,249,250,251,252,75,76,253,254,255,256,257,77,78,79,80,81,258,259,260,261,262,263,264,265,266,267,82,83,84,268,85,87,88,89,90,91,269,93,95,6,7,96,9,10,11,12,97,98,13,100,101,104,105,106,107,108,270,271,272,109,273,197,274,110,198,111,112,275,113,114,115,116,117,118,119,120,121,122,123,124,276,125,126,127,128,129,130,131,132,277,278,279,280,199,133,201,281,135,282,136,137,140,141,142,283,145,146,284,148,150,285,286,287,288,289,151,152,290,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,14,171,172,173,174,175,176,177,178,179,291,292,180],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[293,294,188,61,295,296,297,298,299,300,69,301,302,303,149],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[95,7,98,157,158,160,162,163,304,173,177],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:190","failures":[22,23,24,32,33,34,37,38,39,40,41,47,48,49,50,51,305,4,52,5,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,255,257,80,86,89,91,92,93,94,95,6,96,8,11,12,97,98,306,99,13,100,101,102,104,109,197,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,14,171,172,173,174,175,176,177,178,179],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Number)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[16,17,181,18,19,20,203,21,206,206,207,207,211,212,182,183,213,184,214,215,216,217,185,218,219,220,221,186,222,223,224,225,307,22,23,24,25,26,293,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,187,305,308,309,310,311,312,227,228,229,230,231,232,233,234,235,236,313,314,315,4,238,52,5,53,54,55,56,57,58,316,317,59,60,188,61,62,63,295,296,64,65,297,298,66,239,240,241,242,189,243,190,191,192,193,194,67,299,318,300,68,319,69,70,245,71,72,73,320,321,249,74,75,76,253,254,255,256,257,77,78,79,80,81,322,323,324,267,82,83,84,195,196,85,86,87,88,89,90,325,91,269,92,93,94,95,6,7,96,8,9,10,11,12,97,98,306,99,13,100,101,102,103,104,105,106,107,108,270,271,272,109,273,197,326,327,274,110,198,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,328,199,133,200,329,201,281,134,135,282,136,137,138,330,139,140,141,301,142,283,143,144,145,302,303,146,147,331,148,332,149,150,285,286,287,288,289,151,152,290,153,154,155,156,157,158,159,160,161,162,163,164,304,165,166,167,168,169,170,14,171,172,173,174,175,15,176,177,178,179,291,292,180],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[333,334,335],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod","typeParameterMap":"typeParameterMap","candidateMethod":"bridgeMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"failures":[51,75,259,260,261,262,263,264,265,266,86,111,112,135,136,137,158,163],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[16,17,181,18,19,202,20,336,203,204,21,205,206,207,208,209,210,211,212,182,183,213,184,214,215,216,217,185,218,219,220,221,186,222,223,224,225,307,22,23,337,24,338,339,25,226,26,340,341,293,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,187,305,308,309,310,311,312,227,342,343,344,345,346,347,348,349,350,351,228,229,230,231,232,233,234,235,236,313,314,315,352,237,353,354,355,356,357,358,4,238,52,5,53,54,55,56,57,58,316,317,59,60,188,61,359,360,361,362,363,364,365,366,62,63,295,296,64,65,297,298,66,239,240,241,242,189,243,190,191,192,193,194,67,299,318,244,300,68,319,69,70,245,246,367,368,369,71,72,370,73,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,320,390,391,392,393,394,321,395,247,248,249,250,251,252,396,397,398,74,75,76,253,254,255,256,257,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,77,78,79,80,81,322,323,324,258,259,260,417,261,262,418,263,264,265,266,267,82,83,419,420,84,421,195,196,268,85,86,87,88,89,90,325,422,91,423,424,269,92,93,94,425,426,95,6,7,96,8,9,10,11,12,97,98,306,99,13,100,101,102,103,104,427,428,429,105,430,431,106,432,433,434,435,436,437,438,439,440,107,441,442,443,444,445,108,446,447,270,271,272,109,273,197,326,327,274,110,198,111,112,275,113,114,115,116,117,118,119,120,121,122,123,124,276,448,449,450,451,452,125,453,454,455,456,457,458,126,127,128,129,459,130,131,132,460,461,277,278,279,280,328,199,133,200,329,201,281,462,134,463,464,465,135,282,136,466,137,467,468,469,138,470,330,471,472,473,474,475,476,477,139,140,141,301,142,283,143,144,145,302,303,146,147,331,284,148,332,149,150,285,286,287,288,289,478,479,151,152,290,153,480,481,482,483,484,154,485,486,487,488,489,490,155,156,157,158,491,159,160,161,162,163,164,304,165,166,167,168,169,170,14,171,172,173,174,175,15,176,177,178,179,492,291,493,292,180,494,495],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[16,17,181,18,19,202,20,336,203,204,21,205,206,207,208,209,210,211,212,182,183,213,184,214,215,216,217,185,218,219,220,221,186,222,223,224,225,307,22,23,337,24,338,339,25,226,26,340,341,293,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,187,305,308,309,310,311,312,227,342,343,344,345,346,347,348,349,350,351,228,229,230,231,232,233,234,235,236,313,314,315,352,237,353,354,355,356,357,358,4,238,52,5,53,54,55,56,57,58,316,317,59,60,188,61,359,360,361,362,363,364,365,366,62,63,295,296,64,65,297,298,66,239,240,241,242,189,243,190,191,192,193,194,67,299,318,244,300,68,319,69,70,245,246,367,368,369,71,72,370,73,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,320,390,391,392,393,394,321,395,247,248,249,250,251,252,396,397,398,74,75,76,253,254,255,256,257,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,77,78,79,80,81,322,323,324,258,259,260,417,261,262,418,263,264,265,266,267,82,83,419,420,84,421,195,196,268,85,86,87,88,89,90,325,422,91,423,424,269,92,93,94,425,426,95,6,7,96,8,9,10,11,12,97,98,306,99,13,100,101,102,103,104,427,428,429,105,430,431,106,432,433,434,435,436,437,438,439,440,107,441,442,443,444,445,108,446,447,270,271,272,109,273,197,326,327,274,110,198,111,112,275,113,114,115,116,117,118,119,120,121,122,123,124,276,448,449,450,451,452,125,453,454,455,456,457,458,126,127,128,129,459,130,131,132,460,461,277,278,279,280,328,199,133,200,329,201,281,462,134,463,464,465,135,282,136,466,137,467,468,469,138,470,330,471,472,473,474,475,476,477,139,140,141,301,142,283,143,144,145,302,303,146,147,331,284,148,332,149,150,285,286,287,288,289,478,479,151,152,290,153,480,481,482,483,484,154,485,486,487,488,489,490,155,156,157,158,491,159,160,161,162,163,164,304,165,166,167,168,169,170,14,171,172,173,174,175,15,176,177,178,179,492,291,493,292,180,494,495],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[496],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:215","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[140],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1163","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[180,494],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[95,6,7,96,98,306,157,158,159,160,161,162,163,164,304,165,173,174,177,178],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:70","sourceCode":"java.io.InputStream.close()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[343,344,345,346,348,350],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:136","failures":[206,206,207,207,51,57,58,59,68,253,254,255,256,257,77,78,79,80,81,82,83,306,148,155,156,159,160,161,162,167,169,170,171,172,177,178,179],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Null:35","failures":[160],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[497],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[168],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:63","sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[498,499,500,501],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[16,17,181,18,19,202,20,336,203,204,21,205,206,206,207,207,208,209,210,211,212,182,183,213,184,214,215,216,217,185,218,219,220,221,186,222,223,224,225,25,226,293,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,187,227,343,228,229,230,231,232,233,234,235,236,352,237,353,354,355,356,357,358,4,238,52,5,53,54,55,56,57,58,316,317,59,60,188,61,62,63,295,296,64,65,297,298,66,239,240,241,242,189,243,190,191,192,193,67,299,318,244,300,68,319,69,70,245,246,71,72,73,247,248,249,250,251,252,396,397,398,74,75,76,253,254,255,256,257,400,401,402,405,406,407,408,409,410,411,412,413,414,415,416,77,78,79,80,81,258,259,260,261,262,418,263,264,265,266,267,82,83,84,196,85,86,87,88,89,90,325,91,269,92,93,94,95,6,7,96,8,9,10,11,12,97,98,306,99,13,100,101,102,103,104,105,106,107,108,270,271,272,109,273,197,274,110,198,111,112,275,113,114,115,116,117,118,119,120,121,122,123,124,276,125,126,127,128,129,130,131,132,277,278,279,280,199,133,200,201,281,134,135,282,136,137,469,138,330,139,140,141,301,142,283,143,144,145,302,303,146,147,331,284,148,332,149,150,285,286,287,288,289,151,152,290,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,14,171,172,173,174,175,15,176,177,178,179,492,291,292,180],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[16,17,181,18,19,202,20,336,203,204,21,205,206,207,208,209,210,211,212,182,183,213,184,214,215,216,217,185,218,219,220,221,186,222,223,224,225,307,22,23,337,24,338,339,25,226,26,340,341,293,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,187,305,308,309,310,311,312,227,342,343,344,345,346,347,348,349,350,351,228,229,230,231,232,233,234,235,236,313,314,315,352,237,353,354,355,356,357,358,4,238,52,5,53,54,55,56,57,58,316,317,59,60,188,61,359,360,361,362,363,364,365,366,62,63,295,296,64,65,297,298,66,239,240,241,242,189,243,190,191,192,193,194,67,299,318,244,300,68,319,69,70,245,246,367,368,369,71,72,370,73,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,320,390,391,392,393,394,321,395,247,248,249,250,251,252,396,397,398,74,75,76,253,254,255,256,257,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,77,78,79,80,81,322,323,324,258,259,260,417,261,262,418,263,264,265,266,267,82,83,419,420,84,421,195,196,268,85,86,87,88,89,90,325,422,91,423,424,269,92,93,94,425,426,95,6,7,96,8,9,10,11,12,97,98,306,99,13,100,101,102,103,104,427,428,429,105,430,431,106,432,433,434,435,436,437,438,439,440,107,441,442,443,444,445,108,446,447,270,271,272,109,273,197,326,327,274,110,198,111,112,275,113,114,115,116,117,118,119,120,121,122,123,124,276,448,449,450,451,452,125,453,454,455,456,457,458,126,127,128,129,459,130,131,132,460,461,277,278,279,280,328,199,133,200,329,201,281,462,134,463,464,465,135,282,136,466,137,467,468,469,138,470,330,471,472,473,474,475,476,477,139,140,141,301,142,283,143,144,145,302,303,146,147,331,284,148,332,149,150,285,286,287,288,289,478,479,151,152,290,153,480,481,482,483,484,154,485,486,487,488,489,490,155,156,157,158,491,159,160,161,162,163,164,304,165,166,167,168,169,170,14,171,172,173,174,175,15,176,177,178,179,492,291,493,292,180,494,495],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[502,155,171,176],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[291,493],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"failures":[503],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"key"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:176","sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[293,51,187,57,58,316,317,59,189,300,68,77,78,79,80,81,267,82,83,91,95,6,7,96,8,9,10,11,12,97,98,306,99,13,103,148,155,156,157,158,159,160,161,162,163,164,304,165,166,167,168,169,170,14,171,172,173,174,175,15,176,177,178,179,492,291,292],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[293,51,187,57,58,316,317,59,189,300,68,77,78,79,80,81,267,82,83,91,95,6,7,96,8,9,10,11,12,97,98,306,99,13,103,148,155,156,157,158,159,160,161,162,163,164,304,165,166,167,168,169,170,14,171,172,173,174,175,15,176,177,178,179,291,292],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[95,7,98,157,158,160,162,163,304,173,177],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":158,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":62,"org.easymock.tests2.UsageTest.argumentsOrdered":303,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":123,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":485,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":384,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":283,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":210,"org.easymock.tests2.DelegateToTest.testReturnException":199,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":240,"org.easymock.tests.MockingTest.testPartialClassMocking":71,"org.easymock.tests.MockClassControlTest.testToString":353,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":461,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":24,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":435,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":106,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":211,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":152,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":164,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":57,"org.easymock.tests2.UsageTest.wrongArguments":301,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":458,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":230,"org.easymock.samples.ExampleTest.answerVsDelegate":181,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":364,"org.easymock.tests2.UsageConstraintsTest.testNull":160,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":372,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":88,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":122,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":358,"org.easymock.tests2.CaptureTest.testPrimitive":96,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":59,"org.easymock.tests.UsageTest.moreThanOneArgument":63,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":225,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":87,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":255,"org.easymock.tests.UsageTest.argumentsOrdered":298,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":308,"org.easymock.tests.UsageVarargTest.varargIntAccepted":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":389,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":77,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":281,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":489,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":473,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":376,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":81,"org.easymock.tests.ReplayStateInvalidUsageTest.times":413,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":125,"org.easymock.tests2.DependencyTest.testClassMocking":478,"org.easymock.tests2.AnswerTest.answer":197,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":390,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":289,"org.easymock.tests2.CaptureTest.testAnd":95,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":361,"org.easymock.tests2.UsageTest.strictResetToDefault":140,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":464,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":269,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":117,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":49,"org.easymock.tests2.DelegateToTest.testDelegate":201,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":312,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":186,"org.easymock.tests.LimitationsTest.mockFinalMethod":421,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":189,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":236,"org.easymock.tests2.DependencyTest.testClassMockingSupport":479,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":195,"org.easymock.tests2.CaptureTest.testCapture1_2446744":8,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":422,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":220,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":287,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":407,"org.easymock.tests.UsageThrowableTest.throwError":4,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":363,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":490,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":351,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":447,"org.easymock.samples.PartialClassMockTest.testGetArea":16,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":408,"org.easymock.tests.MockingTest.testInterfaceMocking":370,"org.easymock.tests2.CompareToTest.testLessOrEqual":502,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":78,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":436,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":404,"org.easymock.tests2.UsageTest.niceToStrict":142,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":212,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":374,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":135,"org.easymock.tests2.MockBuilderTest.testCreateMock":469,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":443,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":455,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":217,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":118,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":360,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":324,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":247,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":228,"org.easymock.tests.UsageOverloadedMethodTest.overloading":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":445,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":440,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":169,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":193,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":38,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":74,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":168,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":0,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":97,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":417,"org.easymock.tests2.EasyMockSupportClassTest.testAll":105,"org.easymock.tests.MockClassControlTest.testEquals":357,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":226,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":223,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":497,"org.easymock.tests2.CaptureTest.testCaptureAll":6,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":234,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":288,"org.easymock.tests.MockNameTest.defaultName":341,"org.easymock.tests2.UsageConstraintsTest.testMatches":170,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":405,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":256,"org.easymock.samples.ExampleTest.voteForRemovals":20,"org.easymock.tests.UsageVarargTest.allKinds":267,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":60,"org.easymock.samples.BasicClassMockTest.testPrintContent":209,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":235,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":55,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":331,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":486,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":243,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":329,"org.easymock.tests2.UsageConstraintsTest.greaterThan":171,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":430,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":48,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":94,"org.easymock.samples.ExampleTest.voteForRemoval":18,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":350,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":425,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":101,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":365,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":474,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":325,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":139,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":227,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":468,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":381,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":115,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":428,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":239,"org.easymock.tests2.CaptureTest.testCaptureFirst":13,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":380,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":116,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":147,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":299,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":34,"org.easymock.tests2.UsageTest.moreThanOneArgument":141,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":103,"org.easymock.tests2.CaptureTest.testCapture2_2446744":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":391,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":138,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":266,"org.easymock.tests.GenericTest.testBridgedEquals":340,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":397,"org.easymock.tests.UsageExpectAndReturnTest.longType":30,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":113,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":232,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":3,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":224,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":15,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":305,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":222,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":253,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":314,"org.easymock.tests.UsageCallCountTest.tooManyCalls":398,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":444,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":35,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":457,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":184,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":54,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":127,"org.easymock.tests.MockingTest.testNiceClassMocking":373,"org.easymock.tests.MockingTest.testClassMocking":368,"org.easymock.tests2.UsageConstraintsTest.testContains":167,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":2,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":248,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":109,"org.easymock.tests2.UsageConstraintsTest.testFind":159,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":76,"org.easymock.tests.MockTypeTest.fromEasyMockClass":362,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":292,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":318,"org.easymock.tests.UsageExpectAndReturnTest.object":37,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":91,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":456,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":121,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":262,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":402,"org.easymock.tests.UsageTest.exactCallCountByLastCall":66,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":379,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":309,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":337,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":494,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":43,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":258,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":192,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":481,"org.easymock.tests.MockClassControlTest.testHashCode":356,"org.easymock.tests2.EasyMockSupportTest.testVerify":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":438,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":310,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":190,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":323,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":286,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":492,"org.easymock.tests.UsageVarargTest.varargCharAccepted":261,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":342,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":395,"org.easymock.tests2.UsageTest.openCallCountByLastCall":143,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":124,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":334,"org.easymock.tests.DefaultClassInstantiatorTest.object":343,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":322,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":400,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":439,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":215,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":5,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":451,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":480,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":92,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":355,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":214,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":44,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":108,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":354,"org.easymock.tests2.UsageTest.resumeIfFailure":146,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":359,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":472,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":242,"org.easymock.tests2.StubTest.stubWithReturnValue":153,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":466,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":176,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":36,"org.easymock.tests2.SerializationTest.testAllMockedMethod":275,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":320,"org.easymock.samples.SupportTest.voteForRemovals":21,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":339,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":483,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":219,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":321,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":326,"org.easymock.tests.UsageExpectAndThrowTest.object":185,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":338,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":174,"org.easymock.tests2.DelegateToTest.testWrongClass":200,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":82,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":83,"org.easymock.tests.UsageStrictMockTest.range":69,"org.easymock.samples.ConstructorCalledMockTest.testTax":206,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":476,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":120,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":126,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":218,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":427,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":415,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":297,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":229,"org.easymock.tests2.CaptureTest.testCaptureNone":12,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":23,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":499,"org.easymock.tests.UsageUnorderedTest.message":293,"org.easymock.tests.UsageVerifyTest.twoReturns":61,"org.easymock.tests.UsageVarargTest.varargByteAccepted":265,"org.easymock.tests2.ThreadingTest.testThreadSafe":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":441,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":252,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":403,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":208,"org.easymock.tests2.CaptureTest.testCapture_2617107":7,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":393,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":317,"org.easymock.tests2.UsageConstraintsTest.any":165,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":412,"org.easymock.tests2.StubTest.stub":290,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":394,"org.easymock.tests.UsageExpectAndThrowTest.longType":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":241,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":347,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":411,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":332,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":154,"org.easymock.tests2.SerializationTest.testClass":111,"org.easymock.tests.LimitationsTest.mockNativeMethod":84,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":46,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":26,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":450,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":285,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":503,"org.easymock.tests2.NameTest.nameForMocksControl":280,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":452,"org.easymock.tests2.MockedExceptionTest.testMockedException":272,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":431,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":65,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":493,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":73,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":213,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":85,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":137,"org.easymock.tests.MockingTest.testNicePartialClassMocking":72,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":90,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":448,"org.easymock.tests2.CaptureTest.testCaptureLast":11,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":196,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":163,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":132,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":175,"org.easymock.tests.MockingTest.testTwoMocks":369,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":460,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":27,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":216,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":302,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":178,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":501,"org.easymock.samples.ExampleTest.removeNonExistingDocument":336,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":454,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":409,"org.easymock.tests.UsageStrictMockTest.differentMethods":70,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":482,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":345,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":102,"org.easymock.tests2.MockBuilderTest.testCreateMockString":330,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":432,"org.easymock.tests.UsageExpectAndThrowTest.floatType":182,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":429,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":274,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":495,"org.easymock.tests.UsageVerifyTest.twoThrows":188,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":107,"org.easymock.samples.ExampleTest.voteAgainstRemoval":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":385,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":307,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":93,"org.easymock.tests.LimitationsTest.privateConstructor":420,"org.easymock.tests2.UsageConstraintsTest.testNotNull":177,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":56,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":271,"org.easymock.tests2.UsageTest.defaultResetToNice":145,"org.easymock.samples.ExampleTest.voteAgainstRemovals":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":386,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":42,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":449,"org.easymock.tests.UsageVarargTest.differentLength":418,"org.easymock.tests2.CallbackTest.callback":270,"org.easymock.tests2.UsageConstraintsTest.equals":491,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":423,"org.easymock.tests.UsageTest.openCallCountByLastCall":64,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":155,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":316,"org.easymock.tests.UsageCallCountTest.tooFewCalls":250,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":129,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":231,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":500,"org.easymock.tests.UsageThrowableTest.throwCheckedException":53,"org.easymock.tests.MockingTest.testStrictClassMocking":367,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":187,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":131,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":453,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":128,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":414,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":130,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":198,"org.easymock.tests.ObjectMethodsTest.testHashCode":401,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":104,"org.easymock.tests2.NameTest.nameForNiceMock":279,"org.easymock.tests2.DependencyTest.testInterfaceMocking":151,"org.easymock.samples.ExampleTest.addDocument":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":442,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":446,"org.easymock.tests2.DelegateToTest.testStubDelegate":133,"org.easymock.tests2.AnswerTest.stubAnswer":110,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":68,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":467,"org.easymock.tests.UsageVarargTest.varargLongAccepted":264,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":383,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":45,"org.easymock.tests.UsageExpectAndReturnTest.floatType":29,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":180,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":207,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":488,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":172,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests.UsageThrowableTest.noUpperLimit":238,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":156,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":471,"org.easymock.tests2.SerializationTest.test":112,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":9,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":1,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":344,"org.easymock.tests2.UsageConstraintsTest.testSame":161,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":28,"org.easymock.samples.SupportTest.addDocument":204,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":459,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":433,"org.easymock.tests.GenericTest.testPackageScope":25,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":378,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":487,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":371,"org.easymock.tests2.NameTest.nameForMock":277,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":39,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":470,"org.easymock.tests2.UsageStrictMockTest.differentMethods":150,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":424,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":31,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":221,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":399,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":50,"org.easymock.tests2.MockedExceptionTest.testRealException":273,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":366,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":387,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":148,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":416,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":58,"org.easymock.tests2.NameTest.nameForStrictMock":278,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":465,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":291,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":335,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":89,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":475,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":173,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":346,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":134,"org.easymock.tests2.UsageStrictMockTest.range":149,"org.easymock.tests2.UsageConstraintsTest.lessThan":179,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":496,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":484,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":437,"org.easymock.tests2.CaptureTest.testCaptureRightOne":98,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":498,"org.easymock.tests2.UsageConstraintsTest.testOr":162,"org.easymock.tests.UsageRangeTest.combination":47,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":86,"org.easymock.tests.UsageTest.wrongArguments":296,"org.easymock.tests2.MockBuilderTest.testWithConstructor":462,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":434,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":237,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":32,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":375,"org.easymock.tests.UsageVarargTest.varargShortAccepted":263,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":348,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":396,"org.easymock.tests2.UsageConstraintsTest.cmpTo":166,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":377,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":144,"org.easymock.tests2.CaptureTest.testCaptureFromStub":306,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":406,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":463,"org.easymock.tests.UsageTest.unexpectedCallWithArray":295,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":300,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":251,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":41,"org.easymock.tests2.UsageConstraintsTest.constraints":157,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":319,"org.easymock.samples.ExampleTest.addAndChangeDocument":203,"org.easymock.tests.UsageStrictMockTest.testVerify":246,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":205,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":244,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":233,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":10,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":79,"org.easymock.tests.LimitationsTest.abstractClass":419,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":33,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":67,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":80,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":119,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":259}}]

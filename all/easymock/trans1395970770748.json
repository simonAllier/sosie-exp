[{"failures":[0,1],"variableMapping":{"errorMessage":"buffer"},"name":"replace","transplant":{"sourceCode":"java.lang.StringBuilder.append(\":\")","position":"org.easymock.internal.MocksBehavior:140","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","position":"org.easymock.internal.ErrorMessage:53","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1531","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1878","type":"CtReturnImpl"},"status":-2},{"failures":[2],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:46","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short)","position":"org.easymock.internal.RecordState:60","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","position":"org.easymock.internal.ReplayState:48","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"add","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })))","position":"org.easymock.internal.DefaultClassInstantiator:189","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<org.easymock.IArgumentMatcher> != null) {\n    if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n        throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n    } \n    return java.util.List<org.easymock.IArgumentMatcher>;\n} ","position":"org.easymock.internal.ExpectedInvocation:45","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-3483500330975410177L","position":"org.easymock.internal.RuntimeExceptionWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.Result:88","type":"CtLocalVariableImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12,13,0,14,1,15,16,17,18,19,20,21,22,23,24,25,26],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","position":"org.easymock.internal.MockInvocationHandler:36","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","position":"org.easymock.EasyMock:759","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","position":"org.easymock.internal.BridgeMethodResolver:351","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","position":"org.easymock.internal.BridgeMethodResolver:353","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.matchers.Captures<java.lang.Object>.setPotentialValue(java.lang.Object)","position":"org.easymock.internal.Invocation:162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:592","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ReflectionUtils:229","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n    java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n}","position":"org.easymock.internal.ClassProxyFactory:136","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalArgumentException java.lang.IllegalArgumentException","position":"org.easymock.internal.Result:85","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:83","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","position":"org.easymock.EasyMock:1862","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:155","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:282","type":"CtLocalVariableImpl"},"status":-2},{"failures":[27,3,8,10,11,12,13,16,20,22,23,24,25,26],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n    org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n}","position":"org.easymock.internal.MocksBehavior:168","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"status":-2},{"failures":[28,29,30,11,31,32],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:336","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:69","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:46","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType())","position":"org.easymock.internal.RecordState:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"<any>\")","position":"org.easymock.internal.matchers.Any:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.RuntimeException","position":"org.easymock.internal.RuntimeExceptionWrapper:32","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:197","type":"CtReturnImpl"},"status":-2},{"failures":[33],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"returnedType":"mockClass"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","position":"org.easymock.internal.ClassProxyFactory:251","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:225","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:62","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.Object != null) && (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))","position":"org.easymock.internal.matchers.InstanceOf:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory().getInvocationHandler(java.lang.Object)","position":"org.easymock.internal.MocksControl:165","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1543","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.get()","position":"org.easymock.internal.LastControl:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:1012","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return (int) == (java.lang.Integer.int)","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injection = org.easymock.internal.Injection","position":"org.easymock.internal.Injector:237","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = java.lang.Object","position":"org.easymock.internal.DefaultClassInstantiator:127","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:326","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual"},"name":"add","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Null:35","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && ((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","position":"org.easymock.internal.matchers.Contains:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>.getName(), java.lang.Byte.java.lang.Class<java.lang.Byte>)","position":"org.easymock.internal.MethodSerializationWrapper:34","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:185","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:531","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectByType(java.lang.Object, java.util.List<java.lang.reflect.Field>, org.easymock.internal.InjectionPlan.getUnqualifiedInjections())","position":"org.easymock.internal.Injector:153","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"]\")","position":"org.easymock.internal.ArgumentToString:52","type":"CtInvocationImpl"},"status":-2},{"failures":[34,4,5,6,7,9,12,13,0,35,36,17,18,19,21],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ArgumentToString:69","type":"CtReturnImpl"},"status":-1},{"failures":[37,38,39],"variableMapping":{"stack":"stack"},"name":"replace","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","position":"org.easymock.internal.LastControl:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:111","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:98","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.get()","position":"org.easymock.internal.LastControl:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToDefault()","position":"org.easymock.EasyMockSupport:584","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToStrict()","position":"org.easymock.EasyMockSupport:595","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.reflect.Array.java.lang.reflect.Array.getLength(java.lang.Object)]","position":"org.easymock.internal.Invocation:72","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Or:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:106","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1065","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:149","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1569","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"[\")","position":"org.easymock.internal.ArgumentToString:45","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:249","type":"CtReturnImpl"},"status":-2},{"failures":[40],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Not:41","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object)","position":"org.easymock.internal.MocksControl:156","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\")","position":"org.easymock.internal.DefaultClassInstantiator:156","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[])","position":"org.easymock.internal.DefaultClassInstantiator:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1361","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:80","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int == 0","position":"org.easymock.LogicalOperator:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.UnorderedBehavior:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \")","name":"math","position":"org.easymock.internal.matchers.Compare:47","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"name":"name"},"name":"add","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","position":"org.easymock.internal.ReflectionUtils:107","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n    throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n} ","position":"org.easymock.internal.ExpectedInvocation:46","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.DefaultClassInstantiator:190","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods()","position":"org.easymock.internal.BridgeMethodResolver:413","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)))","position":"org.easymock.internal.ClassProxyFactory:227","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > (int)) {\n    return true;\n} ","position":"org.easymock.internal.Results:56","type":"CtIfImpl"},"status":-2},{"failures":[41,42,43],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Same:42","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","position":"org.easymock.internal.ReplayState:48","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:79","type":"CtReturnImpl"},"status":-2},{"failures":[44,45,46,47,48],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:132","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:79","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:196","type":"CtAssignmentImpl"},"status":-2},{"failures":[49,50,51],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","position":"org.easymock.internal.DefaultClassInstantiator:144","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:226","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-2},{"failures":[52],"variableMapping":{"actual":"actual"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:88","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.ClassProxyFactory:89","type":"CtIfImpl"},"status":-2},{"failures":[53],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"status":-1},{"failures":[54,55],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:231","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : java.util.List<org.easymock.internal.Injection>) {\n    if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n        if (org.easymock.internal.Injection != null) {\n            throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n        } \n        org.easymock.internal.Injection = org.easymock.internal.Injection;\n    } \n}","position":"org.easymock.internal.Injector:230","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1120","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>(java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size())","position":"org.easymock.internal.UnorderedBehavior:83","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:162","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","position":"org.easymock.EasyMock:2143","type":"CtInvocationImpl"},"status":-2},{"failures":[56],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:127","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:632","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ClassProxyFactory:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","position":"org.easymock.internal.EasyMockProperties:49","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","position":"org.easymock.internal.MockBuilder:72","type":"CtAssignmentImpl"},"status":-2},{"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,3,4,28,29,5,6,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,30,124,125,126,127,128,129,130,131,132,133,134,135,7,8,136,9,10,137,138,139,140,141,142,143,144,145,11,12,13,146,147,148,149,150,151,0,152,153,154,155,156,157,158,159,160,161,162,45,46,48,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,37,186,187,188,38,189,190,191,192,193,52,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,16,17,209,210,31,32,18,19,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,20,226,21,22,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282],"variableMapping":{"expected":"proxy"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","position":"org.easymock.internal.ObjectMethodsFilter:83","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1928","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:416","type":"CtIfImpl"},"status":-2},{"failures":[283,218,219,230,251],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:309","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.MocksControl:276","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2159","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!org.easymock.internal.Invocation.(toStringIsDefined(java.lang.Object))) {\n    return java.lang.String;\n} ","position":"org.easymock.internal.Invocation:147","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:103","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size()))","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","position":"org.easymock.internal.RecordState:340","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","position":"org.easymock.internal.RecordState:336","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:317","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"status":0},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":157,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":136,"org.easymock.tests2.MockedExceptionTest.testRealException":217,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":266,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":135,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":106,"org.easymock.tests.UsageVarargTest.varargIntAccepted":113,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":79,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":183,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":57,"org.easymock.tests2.UsageConstraintsTest.testContains":193,"org.easymock.tests.UsageCallCountTest.tooManyCalls":151,"org.easymock.tests2.UsageConstraintsTest.testFind":186,"org.easymock.tests.UsageVarargTest.allKinds":121,"org.easymock.tests2.StubTest.stubWithReturnValue":270,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":237,"org.easymock.tests2.CaptureTest.testCaptureAll":233,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":152,"org.easymock.samples.ExampleTest.addAndChangeDocument":67,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":42,"org.easymock.tests.UsageVarargTest.varargCharAccepted":114,"org.easymock.tests2.CaptureTest.testCaptureFromStub":243,"org.easymock.tests.UsageVerifyTest.twoThrows":12,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":75,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":115,"org.easymock.tests2.DelegateToTest.testReturnException":220,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":210,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":196,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":281,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":44,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":225,"org.easymock.tests2.CaptureTest.testAnd":232,"org.easymock.tests.UsageStrictMockTest.testVerify":138,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":99,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":71,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":241,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":103,"org.easymock.tests2.UsageConstraintsTest.testMatches":195,"org.easymock.tests2.UsageConstraintsTest.testNull":187,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":255,"org.easymock.tests2.EasyMockSupportClassTest.testAll":268,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":276,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":107,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":176,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":231,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":73,"org.easymock.tests.UsageThrowableTest.throwError":154,"org.easymock.tests2.UsageConstraintsTest.greaterThan":197,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":111,"org.easymock.samples.SupportTest.addDocument":59,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":78,"org.easymock.tests2.StubTest.stub":269,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":141,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":127,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":74,"org.easymock.tests.UsageExpectAndReturnTest.object":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":182,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":278,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":55,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":120,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":227,"org.easymock.tests.UsageExpectAndThrowTest.object":101,"org.easymock.tests2.DelegateToTest.testWrongClass":222,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":248,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":87,"org.easymock.tests2.UsageTest.moreThanOneArgument":16,"org.easymock.tests.UsageVarargTest.varargByteAccepted":119,"org.easymock.tests.MockClassControlTest.testEquals":83,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":98,"org.easymock.tests.UsageTest.wrongArguments":4,"org.easymock.samples.ExampleTest.voteAgainstRemoval":64,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":35,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":160,"org.easymock.tests.UsageVarargTest.varargShortAccepted":117,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":140,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":102,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":216,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":126,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":58,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":249,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":250,"org.easymock.tests2.NameTest.nameForMocksControl":26,"org.easymock.tests2.SerializationTest.testAllMockedMethod":229,"org.easymock.samples.ExampleTest.voteAgainstRemovals":61,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":224,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":144,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":77,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":122,"org.easymock.tests2.CaptureTest.testCapture1_2446744":236,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":212,"org.easymock.tests.LimitationsTest.mockNativeMethod":162,"org.easymock.tests2.DelegateToTest.testStubDelegate":221,"org.easymock.tests.UsageUnorderedTest.message":0,"org.easymock.samples.ExampleTest.answerVsDelegate":62,"org.easymock.samples.ExampleTest.voteForRemoval":63,"org.easymock.tests.UsageCallCountTest.tooFewCalls":147,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":172,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":149,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":252,"org.easymock.tests.UsageVerifyTest.twoReturns":13,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":167,"org.easymock.tests2.DependencyTest.testInterfaceMocking":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":283,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":27,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":271,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":86,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":274,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":189,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":137,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":1,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":169,"org.easymock.tests2.CaptureTest.testCaptureRightOne":242,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":146,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":214,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":265,"org.easymock.tests2.UsageConstraintsTest.cmpTo":192,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":49,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":174,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":33,"org.easymock.tests2.MockedExceptionTest.testMockedException":215,"org.easymock.tests.UsageThrowableTest.throwCheckedException":158,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":110,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":131,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":203,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":11,"org.easymock.samples.ExampleTest.voteForRemovals":66,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":156,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":30,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":194,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":72,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":88,"org.easymock.tests2.UsageTest.argumentsOrdered":19,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":264,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":81,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":254,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":168,"org.easymock.tests2.AnswerTest.answer":251,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":8,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":164,"org.easymock.tests2.UsageConstraintsTest.any":191,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":171,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":128,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":133,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":142,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":280,"org.easymock.tests.UsageExpectAndThrowTest.longType":94,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":108,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":219,"org.easymock.tests2.CallbackTest.callback":230,"org.easymock.tests2.ConstraintsToStringTest.notToString":40,"org.easymock.tests2.NameTest.nameForMock":23,"org.easymock.tests.UsageTest.argumentsOrdered":6,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":37,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":52,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":181,"org.easymock.tests2.NameTest.nameForStrictMock":24,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":76,"org.easymock.tests2.CaptureTest.testCaptureNone":240,"org.easymock.tests2.SerializationTest.test":228,"org.easymock.tests.UsageExpectAndReturnTest.longType":166,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":238,"org.easymock.tests2.CaptureTest.testCaptureFirst":245,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":200,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":68,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":85,"org.easymock.tests2.UsageTest.niceToStrict":209,"org.easymock.tests2.EasyMockSupportTest.testVerify":282,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":134,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":96,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":202,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":207,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":104,"org.easymock.tests2.UsageTest.strictResetToDefault":208,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":36,"org.easymock.tests.GenericTest.testBridgedEquals":48,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":54,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":180,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":91,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":190,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":170,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":257,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":112,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":198,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":263,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":260,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":90,"org.easymock.tests2.UsageConstraintsTest.testOr":38,"org.easymock.tests2.DelegateToTest.testDelegate":223,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":247,"org.easymock.tests2.UsageConstraintsTest.testNotNull":204,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":226,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":213,"org.easymock.tests2.CaptureTest.testCapture_2617107":234,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":153,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":161,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":175,"org.easymock.tests2.ThreadingTest.testThreadSafe":246,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":32,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":50,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":130,"org.easymock.tests.UsageThrowableTest.noUpperLimit":155,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":256,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":279,"org.easymock.tests.UsageExpectAndReturnTest.floatType":165,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":272,"org.easymock.tests2.UsageTest.wrongArguments":17,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":39,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":43,"org.easymock.tests2.UsageConstraintsTest.testSame":188,"org.easymock.tests2.UsageTest.resumeIfFailure":211,"org.easymock.tests.UsageOverloadedMethodTest.overloading":123,"org.easymock.samples.SupportTest.voteForRemovals":60,"org.easymock.tests.UsageRangeTest.combination":143,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":159,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":205,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":46,"org.easymock.tests.UsageTest.openCallCountByLastCall":28,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":97,"org.easymock.tests2.NameTest.nameForNiceMock":25,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":145,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":201,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":129,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":20,"org.easymock.tests2.CaptureTest.testPrimitive":235,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":262,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":177,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":105,"org.easymock.samples.BasicClassMockTest.testPrintContent":69,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":124,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":15,"org.easymock.tests.UsageExpectAndThrowTest.floatType":93,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":150,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":178,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":218,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":261,"org.easymock.tests2.UsageStrictMockTest.differentMethods":22,"org.easymock.tests.UsageTest.exactCallCountByLastCall":82,"org.easymock.tests2.AnswerTest.stubAnswer":253,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":273,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":47,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":277,"org.easymock.tests2.CaptureTest.testCaptureLast":239,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":92,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":148,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":259,"org.easymock.tests.UsageStrictMockTest.range":9,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":29,"org.easymock.tests.InvocationTest.testEquals":56,"org.easymock.tests.UsageTest.unexpectedCallWithArray":34,"org.easymock.tests.MockingTest.testPartialClassMocking":2,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":179,"org.easymock.tests.MatchableArgumentsTest.testEquals":53,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests2.UsageConstraintsTest.constraints":185,"org.easymock.samples.ExampleTest.addDocument":65,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":14,"org.easymock.tests2.UsageConstraintsTest.lessThan":206,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":5,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":70,"org.easymock.tests.UsageVarargTest.varargLongAccepted":118,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":132,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":51,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":267,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":109,"org.easymock.tests2.UsageStrictMockTest.range":21,"org.easymock.tests.UsageTest.moreThanOneArgument":3,"org.easymock.tests2.UsageTest.openCallCountByLastCall":31,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":41,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":84,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":125,"org.easymock.tests.UsageStrictMockTest.differentMethods":10,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":139,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":275,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":184,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":95,"org.easymock.tests.UsageVarargTest.differentLength":116,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":89,"org.easymock.tests2.CaptureTest.testCapture2_2446744":244,"org.easymock.tests.GenericTest.testPackageScope":45}}]

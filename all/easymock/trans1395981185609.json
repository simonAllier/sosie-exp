[{"failures":[],"variableMapping":{"bridgeMethod":"result"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:98","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"toMock":"toMock","constructorArgs":"constructorArgs","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:233","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","position":"org.easymock.internal.matchers.EndsWith:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","position":"org.easymock.EasyMock:1530","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:212","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:198","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1507","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.Injector:110","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.ExpectedInvocationAndResult:41","type":"CtReturnImpl"},"status":-2},{"failures":[0,1,2],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","position":"org.easymock.internal.ArgumentToString:87","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * (((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - (int)) + 1)))","position":"org.easymock.internal.MocksBehavior:164","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Failed to mock \" + java.lang.Class<T>)","name":"math","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\")","position":"org.easymock.internal.AndroidSupport:26","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.clear()","position":"org.easymock.internal.Invocation:176","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:123","type":"CtReturnImpl"},"status":0},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15],"variableMapping":{"support":"support"},"name":"add","transplant":{"sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.callLongMethod(java.lang.Class<?>, (org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.is1_3Specifications() ? \"computeSerialVersionUID\" : \"computeDefaultSUID\"))","position":"org.easymock.internal.DefaultClassInstantiator:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","position":"org.easymock.internal.DefaultClassInstantiator:155","type":"CtTryImpl"},"status":-2},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"this.T = T","position":"org.easymock.internal.matchers.Captures:47","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","position":"org.easymock.Capture:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.Capture<T>.setValue(T)","position":"org.easymock.internal.matchers.Captures:57","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:200","type":"CtIfImpl"},"status":-2},{"failures":[30],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"shouldBeUsedInOneThread":"shouldBeUsedInOneThread","state":"state"},"name":"add","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl"},"status":0},{"failures":[16,31,32,17,18,19,20,21,22,23,24,33,25,34,26,27,28,29,35],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:733","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","position":"org.easymock.internal.MocksControl:160","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1848","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:99","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.matchers.Or:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:573","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-1726286682930686024L","position":"org.easymock.internal.ObjectMethodsFilter:29","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"status":0},{"failures":[],"binaryOperator":"(java.lang.Object + \" isn\\'t of type \")","name":"math","position":"org.easymock.ConstructorArgs:87","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"status":0},{"failures":[36],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1134","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:127","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.MocksBehavior:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1052","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[37,38,39,40,41,42,36,43,44,45,46,47,48,49,17,18,19,20,26,27],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:91","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:159","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Or:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl"},"status":-2},{"failures":[50],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:242","type":"CtThrowImpl"},"status":-1},{"failures":[51],"variableMapping":{"controls":"controls"},"name":"replace","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"status":-1},{"failures":[52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,31,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,37,38,39,40,41,42,36,43,45,183,184,185,186,187,188,189,190,46,47,191,192,193,48,49,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,2,212,213,214,215,216,217,218,219,5,220,221,222,223,17,18,19,20,21,22,23,24,33,25,26,28,29,35,224,225,226,227,30,228,229,230,231,232,233,234,235,236,237,238,6,239,240,241,242,243,244,245,246,247,12,248,249,250,251,252,253,14,51,254,255,256,257,258,259,260,261,262,263,264],"variableMapping":{"behavior":"behavior"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:919","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw java.lang.reflect.InvocationTargetException.getCause()","position":"org.easymock.internal.Result:89","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:83","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:81","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl"},"status":-2},{"failures":[56,57,58,59,60,61,265,62,66,266,67,68,69,267,70,71,72,73,74,75,268,269,270,271,272,273,274,275,276,277,76,278,77,78,279,79,80,81,82,83,84,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,85,297,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,298,299,106,107,108,109,110,300,111,112,113,114,115,116,117,118,301,302,119,120,303,121,304,305,306,307,122,123,124,125,126,308,309,310,311,312,313,127,128,129,130,131,132,133,314,315,316,317,136,318,137,138,139,140,141,319,320,142,143,144,145,321,146,147,148,149,150,151,152,153,154,155,156,157,158,159,31,160,322,323,324,50,325,326,327,328,329,330,331,332,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,333,334,335,336,337,338,181,182,37,38,39,40,41,42,36,43,45,183,184,185,186,187,188,189,190,46,47,191,192,193,48,49,194,195,196,197,198,199,200,201,202,339,203,204,205,206,340,341,208,342,343,344,345,346,209,210,211,2,212,213,347,214,215,216,217,218,219,5,220,221,222,17,18,19,20,21,22,23,24,33,25,26,27,28,29,35,224,225,226,227,30,228,229,348,231,232,235,236,237,349,350,351,352,6,353,9,354,10,241,242,243,244,245,246,355,247,356,357,358,12,359,360,252,253,14,361,362,363,364],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2110","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","position":"org.easymock.internal.MocksControl:155","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Field.getType()","position":"org.easymock.internal.InjectionTarget:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","position":"org.easymock.internal.ErrorMessage:48","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"case FIRST :\n    if (!org.easymock.Capture<T>.(hasCaptured())) {\n        java.util.List<T>.add(T);\n    } \n    break;","position":"org.easymock.Capture:111","type":"CtCaseImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","position":"org.easymock.internal.InjectionPlan:36","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{"i":"i","arguments":"arguments"},"name":"add","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","position":"org.easymock.internal.Invocation:118","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:435","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"status":-2},{"failures":[268,270,272,365,366,367,368,369,370,207,371,372,373,374,375,376,377,378,379,380,381,223,382,383,384,385,386,387,230,231,236,349,351,240,354,10,242,357,359,13,388,389,390,391,392,393,394,395,396,256,259,260,361,362,363,364],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:204","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1249","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"\"\" + (int)","name":"math","position":"org.easymock.internal.Range:66","type":"mutation","status":-2},{"failures":[],"variableMapping":{"constructorArgs":"constructorArgs"},"name":"add","transplant":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:163","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n} else {\n    try {\n        org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n        java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n    } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:42","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>.getName(), java.lang.Integer.java.lang.Class<java.lang.Integer>)","position":"org.easymock.internal.MethodSerializationWrapper:37","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4434322855124959723L","position":"org.easymock.internal.ThrowableWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next()","position":"org.easymock.internal.UnorderedBehavior:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))","position":"org.easymock.internal.UnorderedBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[397],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"status":-1},{"failures":[3],"variableMapping":{"result":"genericType","bound":"genericType"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:267","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:270","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.reflect.InvocationTargetException.getCause()","position":"org.easymock.internal.Result:89","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1291","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:256","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"actualTypeArgument","bound":"actualTypeArgument"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:327","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0,1,2],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:317","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))","position":"org.easymock.internal.UnorderedBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field)","position":"org.easymock.internal.InjectionPlan:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:612","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","position":"org.easymock.internal.ReflectionUtils:150","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"add","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":0},{"failures":[55,56,57,58,59,61,63,69,71,72,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,117,118,119,120,121,122,123,124,125,126,313,128,129,130,131,132,133,134,135,136,137,138,139,140,141,148,149,150,151,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,37,38,39,40,41,42,36,43,45,183,184,185,186,187,188,189,190,46,47,191,193,48,49,194,195,196,197,198,199,200,201,202,203,204,206,207,208,209,210,211,2,212,213,347,215,216,217,218,219,5,220,222,223,17,18,19,20,21,22,23,25,26,35,225,226,227,30,228,229,348,230,231,232,233,234,235,236,237,238,6,239,240,354,241,243,244,246,249,250,251,253,14,51,255,256,257,258,260,262,263],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","position":"org.easymock.internal.InjectionPlan:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:155","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","position":"org.easymock.internal.MocksControl:294","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new (\"<=\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int <= 0;\n    }\n}","position":"org.easymock.LogicalOperator:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:958","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.Invocation:135","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","position":"org.easymock.EasyMock:1607","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:69","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","position":"org.easymock.internal.LastControl:37","type":"CtNewClassImpl"},"status":-2},{"failures":[224,225],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2159","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:583","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String","position":"org.easymock.internal.Injector:119","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockInvocationHandler","position":"org.easymock.internal.ObjectMethodsFilter:102","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","position":"org.easymock.internal.RecordState:220","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:123","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:278","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:382","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int));\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:342","type":"CtTryImpl"},"status":-2},{"failures":[77,80,81,84,129,139,141,195,201,202,206,215,30],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:100","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:416","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","position":"org.easymock.internal.ReflectionUtils:105","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:622","type":"CtInvocationImpl"},"status":-2},{"failures":[398,399,400],"variableMapping":{"buffer":"buffer"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.And:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:42","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"genericInterface","bound":"genericInterface","this":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:356","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:281","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"number":"number"},"name":"replace","transplant":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:204","type":"CtIfImpl"},"status":-2},{"failures":[401,402,63,119,120,121,3,340,231,232,235,236,355,358,12],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","position":"org.easymock.internal.ClassProxyFactory:169","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":154,"org.easymock.tests2.MockedExceptionTest.testRealException":342,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":391,"org.easymock.tests.UsageVarargTest.varargIntAccepted":108,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":181,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":14,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":283,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":50,"org.easymock.tests.UsageCallCountTest.tooManyCalls":147,"org.easymock.tests.UsageVarargTest.allKinds":115,"org.easymock.tests2.StubTest.stubWithReturnValue":253,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":277,"org.easymock.tests2.CaptureTest.testCaptureAll":18,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":149,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":188,"org.easymock.tests2.CaptureTest.testAnd":17,"org.easymock.tests.UsageStrictMockTest.testVerify":314,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":94,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":67,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":268,"org.easymock.tests.MockClassControlTest.testToString":282,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":230,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":331,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":258,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":102,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":174,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":223,"org.easymock.tests.UsageThrowableTest.throwError":151,"org.easymock.samples.SupportTest.addDocument":54,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":75,"org.easymock.tests2.StubTest.stub":252,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":134,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":325,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":377,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":125,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":71,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":373,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":180,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":13,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":360,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":114,"org.easymock.tests.UsageExpectAndThrowTest.object":96,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":225,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":396,"org.easymock.tests2.UsageTest.moreThanOneArgument":197,"org.easymock.tests.UsageVarargTest.varargByteAccepted":113,"org.easymock.tests.MockClassControlTest.testEquals":286,"org.easymock.tests.UsageTest.wrongArguments":79,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":291,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":317,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":381,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":97,"org.easymock.tests2.UsageTest.defaultResetToNice":339,"org.easymock.tests.MockingTest.testNiceClassMocking":306,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":208,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":226,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":240,"org.easymock.tests2.MockBuilderTest.testCreateMock":9,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":227,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":322,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":326,"org.easymock.samples.ExampleTest.voteAgainstRemovals":56,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":347,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":266,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":380,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":137,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":116,"org.easymock.tests2.CaptureTest.testCapture1_2446744":21,"org.easymock.samples.ExampleTest.voteForRemoval":58,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":145,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":69,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":335,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":133,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":274,"org.easymock.tests2.CaptureTest.testCaptureRightOne":26,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":167,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":323,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":246,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":318,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":324,"org.easymock.tests2.UsageConstraintsTest.cmpTo":183,"org.easymock.tests.MockTypeTest.fromEasyMockClass":269,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":7,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":385,"org.easymock.tests2.MockedExceptionTest.testMockedException":341,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":105,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":193,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":310,"org.easymock.samples.PartialClassMockTest.testGetArea":63,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":139,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":118,"org.easymock.samples.ConstructorCalledMockTest.testTax":401,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":333,"org.easymock.tests2.UsageTest.argumentsOrdered":204,"org.easymock.samples.ExampleTest.removeNonExistingDocument":265,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":337,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":348,"org.easymock.tests2.CaptureTest.testCaptureMultiple":32,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":166,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":288,"org.easymock.tests2.AnswerTest.answer":30,"org.easymock.tests.MockingTest.testNicePartialClassMocking":120,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":386,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":129,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":126,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":135,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":312,"org.easymock.tests.UsageExpectAndThrowTest.longType":89,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":273,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":250,"org.easymock.tests.UsageTest.argumentsOrdered":83,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":38,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":239,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":179,"org.easymock.tests2.MockBuilderTest.testCreateMockString":10,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":73,"org.easymock.tests2.NameTest.nameForStrictMock":362,"org.easymock.tests2.CaptureTest.testCaptureNone":33,"org.easymock.tests2.SerializationTest.testClass":5,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":64,"org.easymock.tests.MockingTest.testInterfaceMocking":303,"org.easymock.tests2.EasyMockSupportTest.testVerify":264,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":315,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":383,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":353,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":91,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":305,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":192,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":195,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":178,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":354,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":43,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":234,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":241,"org.easymock.tests2.UsageConstraintsTest.testOr":42,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":224,"org.easymock.tests.MockClassControlTest.testHashCode":285,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":367,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":150,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":173,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":271,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":309,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":231,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":390,"org.easymock.tests2.UsageConstraintsTest.testSame":41,"org.easymock.tests2.UsageTest.resumeIfFailure":205,"org.easymock.tests.UsageOverloadedMethodTest.overloading":117,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":235,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":11,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":272,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":370,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":371,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":402,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":393,"org.easymock.tests.UsageTest.openCallCountByLastCall":80,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":92,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":365,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":328,"org.easymock.tests2.NameTest.nameForNiceMock":363,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":382,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":138,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":308,"org.easymock.tests2.CaptureTest.testPrimitive":20,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":243,"org.easymock.samples.BasicClassMockTest.testPrintContent":65,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":122,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":357,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":146,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":209,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":320,"org.easymock.tests2.UsageStrictMockTest.differentMethods":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":255,"org.easymock.tests.MockingTest.testClassMocking":302,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":4,"org.easymock.tests2.CaptureTest.testCaptureLast":24,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":87,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":321,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":144,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":238,"org.easymock.tests.UsageStrictMockTest.range":131,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":81,"org.easymock.tests.UsageTest.unexpectedCallWithArray":279,"org.easymock.samples.ExampleTest.addDocument":60,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":304,"org.easymock.tests2.UsageConstraintsTest.lessThan":194,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":267,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":82,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":66,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":1,"org.easymock.tests2.UsageStrictMockTest.range":217,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":236,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":290,"org.easymock.tests.UsageTest.moreThanOneArgument":78,"org.easymock.tests2.UsageTest.openCallCountByLastCall":201,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":399,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":350,"org.easymock.tests.UsageStrictMockTest.differentMethods":132,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":336,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":90,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":161,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":85,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":130,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":247,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":379,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":101,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":76,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":369,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":52,"org.easymock.tests2.UsageConstraintsTest.testContains":184,"org.easymock.tests2.UsageConstraintsTest.testFind":39,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":22,"org.easymock.samples.ExampleTest.addAndChangeDocument":62,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":349,"org.easymock.tests.UsageVarargTest.varargCharAccepted":109,"org.easymock.tests2.CaptureTest.testCaptureFromStub":27,"org.easymock.tests.UsageVerifyTest.twoThrows":140,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":387,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":72,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":110,"org.easymock.tests2.DelegateToTest.testReturnException":211,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":15,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":200,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":263,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":400,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":3,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":214,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":332,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":25,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":98,"org.easymock.tests2.UsageConstraintsTest.testMatches":187,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":0,"org.easymock.tests2.UsageConstraintsTest.testNull":40,"org.easymock.tests2.EasyMockSupportClassTest.testAll":248,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":70,"org.easymock.tests2.UsageConstraintsTest.greaterThan":189,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":106,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":327,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":46,"org.easymock.tests.UsageExpectAndReturnTest.object":171,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":260,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":219,"org.easymock.tests2.DelegateToTest.testWrongClass":212,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":93,"org.easymock.samples.ExampleTest.voteAgainstRemoval":59,"org.easymock.tests.CapturesMatcherTest.test":16,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":157,"org.easymock.tests.UsageVarargTest.varargShortAccepted":111,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":397,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":375,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":124,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":389,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":280,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":378,"org.easymock.tests2.SerializationTest.testAllMockedMethod":221,"org.easymock.tests2.NameTest.nameForMocksControl":364,"org.easymock.tests.MockingTest.testStrictClassMocking":301,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":74,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":392,"org.easymock.tests2.DelegateToTest.testStubDelegate":2,"org.easymock.tests.LimitationsTest.mockNativeMethod":159,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":398,"org.easymock.tests.UsageUnorderedTest.message":148,"org.easymock.samples.ExampleTest.answerVsDelegate":57,"org.easymock.tests.UsageCallCountTest.tooFewCalls":143,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":170,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":228,"org.easymock.tests.UsageVerifyTest.twoReturns":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":395,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":95,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":165,"org.easymock.tests2.DependencyTest.testInterfaceMocking":237,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":51,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":294,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":256,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":346,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":36,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":142,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":275,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":340,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":319,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":172,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":232,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":384,"org.easymock.tests.UsageThrowableTest.throwCheckedException":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":388,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":270,"org.easymock.samples.ExampleTest.voteForRemovals":61,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":153,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":186,"org.easymock.tests.ReplayStateInvalidUsageTest.times":329,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":68,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":296,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":245,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":77,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":162,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":334,"org.easymock.tests2.UsageConstraintsTest.any":45,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":368,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":169,"org.easymock.tests2.CaptureTest.testCapture":34,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":262,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":210,"org.easymock.tests2.CallbackTest.callback":222,"org.easymock.tests2.NameTest.nameForMock":361,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":185,"org.easymock.tests2.SerializationTest.test":220,"org.easymock.tests.UsageExpectAndReturnTest.longType":164,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":23,"org.easymock.tests2.CaptureTest.testCaptureFirst":29,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":47,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":299,"org.easymock.tests2.UsageTest.niceToStrict":199,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":293,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":292,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":313,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":99,"org.easymock.tests2.UsageTest.strictResetToDefault":196,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":12,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":278,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":86,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":168,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":343,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":352,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":355,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":107,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":190,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":244,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":297,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":121,"org.easymock.tests2.DelegateToTest.testDelegate":213,"org.easymock.tests2.UsageConstraintsTest.testNotNull":48,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":216,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":207,"org.easymock.tests2.CaptureTest.testCapture_2617107":19,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":330,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":372,"org.easymock.tests2.ThreadingTest.testThreadSafe":35,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":202,"org.easymock.tests.UsageThrowableTest.noUpperLimit":152,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":261,"org.easymock.tests.UsageExpectAndReturnTest.floatType":163,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":254,"org.easymock.tests2.UsageTest.wrongArguments":198,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":44,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":345,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":284,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":8,"org.easymock.samples.SupportTest.voteForRemovals":55,"org.easymock.tests.UsageRangeTest.combination":136,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":156,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":49,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":191,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":376,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":215,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":175,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":100,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":276,"org.easymock.tests.UsageExpectAndThrowTest.floatType":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":394,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":176,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":242,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":366,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":356,"org.easymock.tests.UsageTest.exactCallCountByLastCall":84,"org.easymock.tests2.AnswerTest.stubAnswer":229,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":259,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":249,"org.easymock.tests.MockingTest.testPartialClassMocking":119,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":177,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":203,"org.easymock.tests2.UsageConstraintsTest.constraints":37,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":344,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":338,"org.easymock.tests.UsageVarargTest.varargLongAccepted":112,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":311,"org.easymock.tests.ObjectMethodsTest.testHashCode":316,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":358,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":359,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":128,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":251,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":298,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":351,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":123,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":287,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":374,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":257,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":182,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":281,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":6,"org.easymock.tests.DefaultClassInstantiatorTest.object":307,"org.easymock.tests.UsageVarargTest.differentLength":300,"org.easymock.tests2.CaptureTest.testCapture2_2446744":28,"org.easymock.tests.GenericTest.testPackageScope":31}}]

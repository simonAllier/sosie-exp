[{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[39,40,41,42,43,44,45,46,47,48,49,50,14,51,52],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"failures":[53,54],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[55,56,57,58],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[59,60,61,62],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[63,64,65,66,66,67,67,55,57,68,69,70,71,72,73,74,75,76,77,78,79,59,80,81,82,53,83,84,85,86,87,88,89,90,91,92,93,94,95,96,54,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[115,71,73,97,104,116,117,118,119,120],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[63,121,122,123,124,125,126,127,128,129,130,131,64,65,132,66,67,133,134,135,136,137,138,139,140,141,142,143,144,145,146,55,56,57,147,148,149,150,151,152,153,0,68,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,115,185,186,187,188,189,190,69,70,71,72,191,192,73,74,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,75,215,216,76,217,218,219,220,221,222,223,224,225,77,226,227,228,229,230,78,231,232,1,233,234,39,235,236,237,2,238,40,41,239,240,241,79,59,242,80,81,82,53,243,83,244,245,84,85,86,87,246,60,247,248,249,250,251,252,253,254,255,42,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,61,62,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,91,297,92,298,94,95,299,300,96,54,97,301,98,302,303,99,100,304,102,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,3,328,4,5,6,7,8,9,43,103,329,330,331,332,104,333,334,335,336,337,338,339,340,341,342,343,344,345,105,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,10,363,364,106,116,117,118,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,11,397,45,46,398,12,47,48,399,400,401,402,403,404,405,406,107,108,109,407,110,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,119,427,428,429,430,431,432,433,49,434,435,50,436,437,438,439,111,112,113,440,114,441,442,13,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,14,51,458,459,460,15,461,462,52,463,464,465,16,17,18,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,486,487,488,489,490,491,492,493,120,494],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[233],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:40","failures":[63,121,122,123,124,125,126,127,128,129,130,131,64,65,132,66,67,133,134,135,136,137,138,139,140,141,142,143,144,145,146,55,56,57,147,148,149,150,151,152,153,0,68,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,115,185,186,187,188,189,190,69,70,71,72,191,192,73,74,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,75,215,216,76,217,218,219,220,221,222,223,224,225,77,226,227,228,229,230,78,231,232,1,233,234,39,235,236,237,2,238,40,41,239,240,241,79,59,242,80,81,82,53,243,83,244,245,84,85,86,87,246,60,247,248,249,250,251,252,253,254,255,42,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,61,62,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,91,297,92,298,94,95,299,300,96,54,97,301,98,302,303,99,100,304,102,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,3,328,4,5,6,7,8,9,43,103,329,330,331,332,104,333,334,335,336,337,338,339,340,341,342,343,344,345,105,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,10,363,364,106,116,117,118,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,11,397,45,46,398,12,47,48,399,400,401,402,403,404,405,406,107,108,109,407,110,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,119,427,428,429,430,431,432,433,49,434,435,50,436,437,438,439,111,112,113,440,114,441,442,13,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,14,51,458,459,460,15,461,462,52,463,464,465,16,17,18,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,486,487,488,489,490,491,492,493,120,494],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[373,377,378,387,392,469,488],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[133,135,143,158,159,162,164,165,167,177,182],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:53","failures":[174],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[66,66,67,67,198],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"failures":[43,495],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"prefix","key":"prefix"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[162,167,177,182],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:218","sourceCode":"return ","type":"CtReturnImpl"},"failures":[63,121,122,123,124,125,126,127,128,129,130,131,64,65,132,66,66,67,67,133,134,135,136,137,138,139,140,141,142,143,144,145,146,55,56,57,147,148,149,150,151,152,153,0,68,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,69,70,71,72,192,73,74,194,195,196,197,198,199,205,75,76,77,78,1,233,234,39,235,236,237,2,238,40,41,239,240,241,79,59,242,80,81,82,53,83,84,85,86,87,247,248,249,250,251,252,253,254,255,42,256,257,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,62,275,276,277,278,279,280,281,282,288,295,296,91,297,92,94,96,54,97,98,99,100,102,305,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,3,328,4,5,6,7,8,9,43,336,105,347,348,349,351,352,353,354,355,356,357,358,359,360,361,362,10,363,364,106,116,117,118,365,366,367,368,369,370,371,372,389,395,11,397,45,46,398,12,47,48,399,400,401,402,403,404,107,108,109,110,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,428,430,431,432,433,49,434,435,50,436,437,438,111,112,113,114,441,442,13,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,14,51,458,459,460,15,461,462,52,463,464,465,16,17,18,466,467,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,486,487,488,490,491,492],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:115","sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[337,341],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[175,496],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[497,498,499,500,45,49],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1385","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:363","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[501],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:70","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[55,56,58],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:47","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","type":"CtIfImpl"},"failures":[63,121,122,123,124,125,126,127,128,129,130,131,64,65,132,66,67,133,134,135,136,137,138,139,140,141,142,143,144,145,146,55,56,57,147,148,149,150,151,152,153,0,68,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,115,185,186,188,189,190,69,70,71,72,191,192,73,74,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,502,503,504,505,506,507,212,213,214,75,215,216,76,217,218,219,220,221,222,223,224,225,77,226,227,228,229,230,78,231,232,1,233,234,39,235,236,237,2,238,40,41,239,240,241,79,59,242,80,81,82,53,243,83,244,245,84,85,86,87,246,60,247,508,248,249,250,251,252,253,254,255,42,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,61,62,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,91,297,92,94,95,300,96,54,97,98,302,303,99,100,102,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,3,328,4,5,6,7,8,9,43,103,329,330,331,332,104,333,334,336,337,338,339,340,341,343,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,344,345,105,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,10,363,364,106,116,117,118,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,11,397,45,46,398,12,47,48,399,400,401,402,403,404,405,406,107,108,109,407,110,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,49,434,435,50,436,437,438,439,111,112,113,440,114,441,442,13,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,14,51,458,459,460,15,461,462,52,463,464,465,16,17,18,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,486,487,488,489,490,491,492,493,120,494],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[85,86,88,90,531,96],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[133,135,143,165],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[63,121,122,123,124,125,126,127,128,129,130,131,64,65,132,66,67,133,134,135,136,137,138,139,140,141,142,143,144,145,146,55,56,57,147,148,149,150,151,152,153,0,68,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,115,185,186,187,188,189,190,69,70,71,72,191,192,73,74,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,75,215,216,76,217,218,219,220,221,222,223,224,225,77,226,227,228,229,230,78,231,232,1,233,234,39,235,236,237,2,238,40,41,239,240,241,79,59,242,80,81,82,53,243,83,244,245,84,85,86,87,246,60,247,248,249,250,251,252,253,254,255,42,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,61,62,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,91,297,92,298,94,95,299,300,96,54,97,301,98,302,303,99,100,304,102,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,3,328,4,5,6,7,8,9,43,103,329,330,331,332,104,333,334,335,336,337,338,339,340,341,342,343,344,345,105,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,10,363,364,106,116,117,118,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,11,397,45,46,398,12,47,48,399,400,401,402,403,404,405,406,107,108,109,407,110,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,119,427,428,429,430,431,432,433,49,434,435,50,436,437,438,439,111,112,113,440,114,441,442,13,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,14,51,458,459,460,15,461,462,52,463,464,465,16,17,18,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,486,487,488,489,490,491,492,493,120,494],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.EasyMock:708","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[59,60,61,62],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[439],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[172,179,184,532],"status":-1,"binaryOperator":"int < 0","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":159,"org.easymock.tests.ClassInstantiatorFactoryTest.getJVM":501,"org.easymock.tests2.UsageTest.argumentsOrdered":41,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":11,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":272,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":383,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":236,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":121,"org.easymock.tests2.DelegateToTest.testReturnException":148,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":360,"org.easymock.tests.MockingTest.testPartialClassMocking":108,"org.easymock.tests.MockClassControlTest.testToString":116,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":61,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":428,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":392,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":220,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":19,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":76,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":261,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":530,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":166,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":481,"org.easymock.tests2.UsageTest.wrongArguments":39,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":211,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":417,"org.easymock.samples.ExampleTest.answerVsDelegate":123,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":104,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":409,"org.easymock.tests2.UsageConstraintsTest.testNull":162,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":80,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":271,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":367,"org.easymock.tests2.CaptureTest.testPrimitive":136,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":485,"org.easymock.tests.UsageTest.moreThanOneArgument":397,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":38,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":242,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":370,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":443,"org.easymock.tests.UsageTest.argumentsOrdered":48,"org.easymock.tests.UsageVarargTest.varargIntAccepted":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":388,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":419,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":92,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":186,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":293,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":54,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":375,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":423,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":514,"org.easymock.tests.ReplayStateInvalidUsageTest.times":477,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":205,"org.easymock.tests2.DependencyTest.testClassMocking":258,"org.easymock.tests2.AnswerTest.answer":194,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":390,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":282,"org.easymock.tests2.CaptureTest.testAnd":133,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":330,"org.easymock.tests2.UsageTest.strictResetToDefault":233,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":84,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":299,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":369,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":413,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":266,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":447,"org.easymock.tests2.DelegateToTest.testDelegate":152,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":513,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":34,"org.easymock.tests.LimitationsTest.mockFinalMethod":346,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":10,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":404,"org.easymock.tests2.DependencyTest.testClassMockingSupport":259,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":466,"org.easymock.tests2.CaptureTest.testCapture1_2446744":137,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":243,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":32,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":280,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":471,"org.easymock.tests.UsageThrowableTest.throwError":3,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":332,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":119,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":294,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":232,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":517,"org.easymock.samples.PartialClassMockTest.testGetArea":63,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":472,"org.easymock.tests.MockingTest.testInterfaceMocking":407,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":420,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":464,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":120,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":221,"org.easymock.tests2.UsageTest.niceToStrict":235,"org.easymock.tests2.ThreadingTest.testChangeDefault":508,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":373,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":96,"org.easymock.tests2.MockBuilderTest.testCreateMock":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":228,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":208,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":497,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":28,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":267,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":329,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":18,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":448,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":415,"org.easymock.tests.UsageOverloadedMethodTest.overloading":442,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":230,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":172,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":15,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":441,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":319,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":171,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":142,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":350,"org.easymock.tests2.EasyMockSupportClassTest.testAll":75,"org.easymock.tests.MockClassControlTest.testEquals":366,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":112,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":36,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":88,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":402,"org.easymock.tests2.CaptureTest.testCaptureAll":134,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":281,"org.easymock.tests.MockNameTest.defaultName":494,"org.easymock.tests2.UsageConstraintsTest.testMatches":173,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":469,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":371,"org.easymock.samples.ExampleTest.voteForRemovals":127,"org.easymock.tests.UsageVarargTest.allKinds":358,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":457,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":403,"org.easymock.samples.BasicClassMockTest.testPrintContent":65,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":8,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":252,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":151,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":290,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":363,"org.easymock.tests2.UsageConstraintsTest.greaterThan":175,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":215,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":412,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":87,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":518,"org.easymock.samples.ExampleTest.voteForRemoval":124,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":343,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":246,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":248,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":333,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":187,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":53,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":510,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":114,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":1,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":380,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":264,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":213,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":359,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":147,"org.easymock.tests2.CaptureTest.testCaptureFirst":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":379,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":265,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":240,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":52,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":315,"org.easymock.tests2.CaptureTest.testCapture2_2446744":145,"org.easymock.tests2.UsageTest.moreThanOneArgument":234,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":391,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":100,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":357,"org.easymock.tests.GenericTest.testBridgedEquals":440,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":455,"org.easymock.tests.UsageExpectAndReturnTest.longType":311,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":400,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":262,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":101,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":37,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":488,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":180,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":35,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":425,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":368,"org.easymock.tests.UsageCallCountTest.tooManyCalls":456,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":229,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":316,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":210,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":24,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":7,"org.easymock.tests.MockingTest.testNiceClassMocking":410,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":70,"org.easymock.tests.MockingTest.testClassMocking":406,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":449,"org.easymock.tests2.UsageConstraintsTest.testContains":170,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":93,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":91,"org.easymock.tests2.UsageConstraintsTest.testFind":161,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":13,"org.easymock.tests.MockTypeTest.fromEasyMockClass":331,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":432,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":307,"org.easymock.tests.UsageExpectAndReturnTest.object":318,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":83,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":209,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":270,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":352,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":492,"org.easymock.tests.UsageTest.exactCallCountByLastCall":399,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":430,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":378,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":444,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":427,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":154,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":324,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":347,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":460,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":284,"org.easymock.tests.MockClassControlTest.testHashCode":365,"org.easymock.tests2.EasyMockSupportTest.testVerify":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":223,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":445,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":458,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":17,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":279,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":241,"org.easymock.tests.UsageVarargTest.varargCharAccepted":351,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":335,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":396,"org.easymock.tests2.UsageTest.openCallCountByLastCall":237,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":273,"org.easymock.tests.DefaultClassInstantiatorTest.object":336,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":16,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":490,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":44,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":224,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":531,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":5,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":203,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":283,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":516,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":118,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":85,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":25,"org.easymock.tests.ReplayStateInvalidCallsTest.times":522,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":325,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":424,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":523,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":78,"org.easymock.tests2.UsageTest.resumeIfFailure":239,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":103,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":185,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":362,"org.easymock.tests2.StubTest.stubWithReturnValue":0,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":301,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":181,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":317,"org.easymock.tests2.SerializationTest.testAllMockedMethod":57,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":389,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":498,"org.easymock.samples.SupportTest.voteForRemovals":131,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":439,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":286,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":31,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":58,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":395,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":195,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":429,"org.easymock.tests.UsageExpectAndThrowTest.object":29,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":178,"org.easymock.tests2.DelegateToTest.testWrongClass":150,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":520,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":486,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":487,"org.easymock.tests.UsageStrictMockTest.range":50,"org.easymock.samples.ConstructorCalledMockTest.testTax":66,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":189,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":269,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":69,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":30,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":97,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":479,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":212,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":416,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":499,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":512,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":465,"org.easymock.tests2.CaptureTest.testCaptureNone":141,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":503,"org.easymock.tests.UsageUnorderedTest.message":43,"org.easymock.tests.UsageVerifyTest.twoReturns":51,"org.easymock.tests.UsageVarargTest.varargByteAccepted":356,"org.easymock.tests2.ThreadingTest.testThreadSafe":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":226,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":453,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":493,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":64,"org.easymock.tests2.CaptureTest.testCapture_2617107":135,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":468,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":393,"org.easymock.tests2.UsageConstraintsTest.any":168,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":476,"org.easymock.tests2.StubTest.stub":153,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":394,"org.easymock.tests.UsageExpectAndThrowTest.longType":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":361,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":340,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":475,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":255,"org.easymock.tests2.SerializationTest.testClass":55,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":288,"org.easymock.tests.LimitationsTest.mockNativeMethod":105,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":113,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":327,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":90,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":202,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":528,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":257,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":504,"org.easymock.tests2.NameTest.nameForMocksControl":277,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":204,"org.easymock.tests2.MockedExceptionTest.testMockedException":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":216,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":12,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":110,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":23,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":306,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":79,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":98,"org.easymock.tests.MockingTest.testNicePartialClassMocking":109,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":82,"org.easymock.tests2.CaptureTest.testCaptureLast":140,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":200,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":467,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":527,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":165,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":74,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":179,"org.easymock.tests.MockingTest.testTwoMocks":107,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":524,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":193,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":308,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":27,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":40,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":183,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":507,"org.easymock.samples.ExampleTest.removeNonExistingDocument":128,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":473,"org.easymock.tests.UsageStrictMockTest.differentMethods":436,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":207,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":285,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":506,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":338,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":249,"org.easymock.tests2.MockBuilderTest.testCreateMockString":102,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":364,"org.easymock.tests.UsageExpectAndThrowTest.floatType":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":217,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":214,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":197,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":155,"org.easymock.tests.UsageVerifyTest.twoThrows":14,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":459,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":77,"org.easymock.samples.ExampleTest.voteAgainstRemoval":125,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":384,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":86,"org.easymock.tests.LimitationsTest.privateConstructor":345,"org.easymock.tests2.UsageConstraintsTest.testNotNull":182,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":9,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":295,"org.easymock.tests2.UsageTest.defaultResetToNice":238,"org.easymock.samples.ExampleTest.voteAgainstRemovals":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":385,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":323,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":201,"org.easymock.tests.UsageVarargTest.differentLength":353,"org.easymock.tests2.CallbackTest.callback":278,"org.easymock.tests2.UsageConstraintsTest.equals":160,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":244,"org.easymock.tests.UsageTest.openCallCountByLastCall":398,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":156,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":483,"org.easymock.tests.UsageCallCountTest.tooFewCalls":451,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":72,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":418,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":505,"org.easymock.tests.UsageThrowableTest.throwCheckedException":6,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":500,"org.easymock.tests.MockingTest.testStrictClassMocking":405,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":431,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":73,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":71,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":206,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":478,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":192,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":199,"org.easymock.tests.ObjectMethodsTest.testHashCode":491,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":526,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":251,"org.easymock.tests2.NameTest.nameForNiceMock":276,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":521,"org.easymock.tests2.DependencyTest.testInterfaceMocking":260,"org.easymock.samples.ExampleTest.addDocument":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":227,"org.easymock.tests2.DelegateToTest.testStubDelegate":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":231,"org.easymock.tests2.AnswerTest.stubAnswer":198,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":434,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":302,"org.easymock.tests.UsageVarargTest.varargLongAccepted":355,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":382,"org.easymock.tests.UsageExpectAndReturnTest.floatType":310,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":326,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":68,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":67,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":461,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":176,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":292,"org.easymock.tests.UsageThrowableTest.noUpperLimit":328,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":157,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":115,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":138,"org.easymock.tests2.SerializationTest.test":56,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":337,"org.easymock.tests2.UsageConstraintsTest.testSame":163,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":309,"org.easymock.samples.SupportTest.addDocument":130,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":191,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":511,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":474,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":218,"org.easymock.tests.GenericTest.testPackageScope":111,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":377,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":291,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":408,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":509,"org.easymock.tests2.NameTest.nameForMock":62,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":320,"org.easymock.tests2.UsageStrictMockTest.differentMethods":256,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":304,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":245,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":312,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":33,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":489,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":414,"org.easymock.tests2.MockedExceptionTest.testRealException":297,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":334,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":387,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":386,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":254,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":482,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":480,"org.easymock.tests2.NameTest.nameForStrictMock":275,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":300,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":305,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":81,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":188,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":495,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":177,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":339,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":94,"org.easymock.tests2.UsageStrictMockTest.range":42,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":515,"org.easymock.tests2.UsageConstraintsTest.lessThan":184,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":287,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":381,"org.easymock.tests2.CaptureTest.testCaptureRightOne":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":222,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":502,"org.easymock.tests2.UsageConstraintsTest.testOr":164,"org.easymock.tests.UsageRangeTest.combination":411,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":59,"org.easymock.tests.UsageTest.wrongArguments":46,"org.easymock.tests2.MockBuilderTest.testWithConstructor":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":219,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":106,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":313,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":374,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":341,"org.easymock.tests.UsageVarargTest.varargShortAccepted":354,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":454,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":529,"org.easymock.tests2.UsageConstraintsTest.cmpTo":169,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":196,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":519,"org.easymock.tests2.CompareToTest.testLessThan":532,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":376,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":2,"org.easymock.tests2.CaptureTest.testCaptureFromStub":144,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":470,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":95,"org.easymock.tests.UsageTest.unexpectedCallWithArray":45,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":525,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":49,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":452,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":322,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":435,"org.easymock.tests2.UsageConstraintsTest.constraints":158,"org.easymock.samples.ExampleTest.addAndChangeDocument":129,"org.easymock.tests.UsageStrictMockTest.testVerify":438,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":132,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":433,"org.easymock.tests2.CompareToTest.testGreateThan":496,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":401,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":421,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":89,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":314,"org.easymock.tests.LimitationsTest.abstractClass":344,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":462,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":422,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":268,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":348}}]

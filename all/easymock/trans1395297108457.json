[{"transplant":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255,256,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:48","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[239,479],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.RecordState:163","failures":[384,385],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((this.org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[255,255,256,256,272,344,358,432,433],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[3,4,5,6,7,8,25,26,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,87,88,89,90,91,97,99,100,102,103,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,173,174,176,180,181,182,183,184,185,196,198,199,201,204,206,207,208,209,210,211,212,213,214,215,221,228,229,230,231,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,254,255,255,256,256,257,258,259,260,261,262,263,264,265,266,267,268,271,274,276,283,286,296,302,305,306,307,308,309,310,311,312,314,315,316,317,318,320,321,322,323,324,325,327,328,329,330,331,332,333,334,335,336,337,338,340,341,342,343,344,345,346,347,353,354,355,357,360,362,363,364,365,366,367,368,369,370,371,372,373,374,375,380,383,384,385,386,387,388,389,395,402,403,404,405,406,407,408,409,410,411,412,413,414,416,417,418,419,425,432,435,436,437,438,439,440,441,442,443,444,445,446,449,450,452,453,454,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,472,473,474,475,476,477,478],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[58,480,73,74,77,78,180,230,231,239,242,366,372,373,476],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[481],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:315","failures":[26,36,40,41,46,47,48,49,50,51,55,71,76,100,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,183,184,363,370,435,436,437,438,446],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[317,318,323,324,326,336,457,459,467],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[318,320,326,327],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[101],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[101],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[315,317,331,334,343,482,483,484,485,486],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[3,4,5,6,7,8,25,26,35,36,42,43,44,45,46,47,48,49,50,51,57,59,60,61,62,63,64,65,66,67,68,69,70,72,80,81,82,84,85,87,88,89,90,91,97,99,102,103,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,173,174,176,181,182,185,207,208,209,210,211,212,213,214,215,221,228,229,230,231,238,240,243,244,245,247,248,249,250,251,252,254,263,265,266,267,268,271,274,276,306,307,310,311,312,314,315,316,317,318,320,321,322,323,324,325,327,328,329,330,331,332,333,334,335,336,337,338,340,341,342,343,344,345,346,347,353,354,364,365,367,368,371,374,380,383,384,385,386,387,388,389,416,417,418,419,432,435,436,437,438,439,440,441,444,445,446,449,452,453,456,457,458,459,460,462,463,464,465,466,467,470,473,474,477,478],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"expected","myArgument":"expected"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[95,96,97,98,102,103,105,170,171,172,179,187,188,189,190,191,192,194,220,221,222,223,224,225,226,227,228,261,262,263,264,266,267,268,271,273,274,277,278,279,280,283,285,287,288,291,294,297,298,301,305,308,346,376,377,436,437],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"position":"org.easymock.internal.LastControl:124","failures":[487,487,5,6,7,8,9,10,11,24,25,26,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,103,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,173,174,176,180,181,182,183,184,185,207,209,210,211,212,213,214,215,228,229,230,231,237,238,239,240,241,242,243,244,246,247,248,249,250,251,252,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,271,274,275,276,277,283,286,296,302,305,306,307,308,309,310,311,312,314,315,316,317,318,320,321,322,323,324,325,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,349,353,354,355,357,359,360,362,363,364,365,366,367,368,369,370,371,372,373,374,375,380,383,384,385,386,387,388,389,395,402,403,404,405,406,407,408,409,410,411,412,413,414,425,432,435,436,437,438,439,440,441,442,443,444,445,446,449,450,452,453,454,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,472,473,474,475,476,477,478],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[242,243,274,476,477],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[116,451],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[488,344,345,346],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[489,490,491],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"position":"org.easymock.internal.RecordState:317","failures":[1,2,13,14],"status":-1,"binaryOperator":"java.lang.Throwable instanceof java.lang.Error","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:135","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:197","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255,256,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:104","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[353,492],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[307,311,493,348,351,356,494,361,495,496,433],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[326],"status":-1,"binaryOperator":"(((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[101],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[15,18,104,246,269,344,347,497,349,350,353,354,355,357,359,360,492,362],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[191,498,499],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[500],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[457,459,460,461,462,463,464,466,501,467,468,470],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[502],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnValue":"arg","returnedType":"paramType"}},{"position":"org.easymock.internal.RecordState:136","failures":[59,60,61,62,63,64,65,99,181,182,185,211,212,213,214,215,240,255,255,256,256,315,316,320,321,322,323,329,331,332,334,335,341,342,343,468,474],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":318,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":71,"org.easymock.tests2.UsageTest.argumentsOrdered":373,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":412,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":396,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":116,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":368,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":257,"org.easymock.tests2.DelegateToTest.testReturnException":452,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":47,"org.easymock.tests.MockingTest.testPartialClassMocking":173,"org.easymock.tests.MockClassControlTest.testToString":222,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":415,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":125,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":290,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":130,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":286,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":450,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":325,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":181,"org.easymock.tests2.UsageTest.wrongArguments":366,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":431,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":44,"org.easymock.samples.ExampleTest.answerVsDelegate":248,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":18,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":178,"org.easymock.tests2.UsageConstraintsTest.testNull":321,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":266,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":411,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":227,"org.easymock.tests2.CaptureTest.testPrimitive":460,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":185,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":149,"org.easymock.tests.UsageTest.moreThanOneArgument":72,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":265,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":213,"org.easymock.tests.UsageTest.argumentsOrdered":78,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":232,"org.easymock.tests.UsageVarargTest.varargIntAccepted":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":121,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":61,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":347,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":400,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":108,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":65,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":491,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":425,"org.easymock.tests.ReplayStateInvalidUsageTest.times":203,"org.easymock.tests2.DependencyTest.testClassMocking":447,"org.easymock.tests2.AnswerTest.answer":380,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":123,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":389,"org.easymock.tests2.CaptureTest.testAnd":457,"org.easymock.tests2.UsageTest.strictResetToDefault":364,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":274,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":351,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":406,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":209,"org.easymock.tests2.DelegateToTest.testDelegate":456,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":236,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":145,"org.easymock.tests.LimitationsTest.mockFinalMethod":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":50,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":70,"org.easymock.tests2.DependencyTest.testClassMockingSupport":448,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":217,"org.easymock.tests2.CaptureTest.testCapture1_2446744":461,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":270,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":143,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":387,"org.easymock.tests.UsageThrowableTest.throwError":34,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":197,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":17,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":401,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":215,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":481,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":495,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":304,"org.easymock.samples.PartialClassMockTest.testGetArea":246,"org.easymock.tests.MockingTest.testInterfaceMocking":175,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":198,"org.easymock.tests2.CompareToTest.testLessOrEqual":486,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":62,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":22,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":131,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":291,"org.easymock.tests2.UsageTest.niceToStrict":367,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":106,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":353,"org.easymock.tests2.MockBuilderTest.testCreateMock":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":299,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":428,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":479,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":139,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":407,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":2,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":3,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":42,"org.easymock.tests.UsageOverloadedMethodTest.overloading":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":301,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":55,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":331,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":161,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":24,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":498,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":330,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":466,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":83,"org.easymock.tests.MockClassControlTest.testEquals":226,"org.easymock.tests2.EasyMockSupportClassTest.testAll":283,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":103,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":147,"org.easymock.tests2.CaptureTest.testCaptureAll":458,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":388,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":68,"org.easymock.tests.MockNameTest.defaultName":33,"org.easymock.tests2.UsageConstraintsTest.testMatches":332,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":195,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":214,"org.easymock.samples.ExampleTest.voteForRemovals":252,"org.easymock.tests.UsageVarargTest.allKinds":91,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":69,"org.easymock.samples.BasicClassMockTest.testPrintContent":262,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":40,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":472,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":455,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":397,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":51,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":193,"org.easymock.tests2.UsageConstraintsTest.greaterThan":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":284,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":208,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":277,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":194,"org.easymock.samples.ExampleTest.voteForRemoval":249,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":441,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":278,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":19,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":269,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":228,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":363,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":113,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":404,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":281,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":46,"org.easymock.tests2.CaptureTest.testCaptureFirst":470,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":112,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":405,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":375,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":58,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":157,"org.easymock.tests2.CaptureTest.testCapture2_2446744":469,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":443,"org.easymock.tests2.UsageTest.moreThanOneArgument":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":124,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":360,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":90,"org.easymock.tests.GenericTest.testBridgedEquals":105,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":10,"org.easymock.tests.UsageExpectAndReturnTest.longType":153,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":402,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":66,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":492,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":148,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":216,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":339,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":146,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":13,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":211,"org.easymock.tests.UsageCallCountTest.tooManyCalls":11,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":489,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":300,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":158,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":430,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":135,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":39,"org.easymock.tests.MockingTest.testNiceClassMocking":179,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":306,"org.easymock.tests.MockingTest.testClassMocking":171,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":497,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":4,"org.easymock.tests2.UsageConstraintsTest.testContains":329,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":437,"org.easymock.tests2.UsageConstraintsTest.testFind":320,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":26,"org.easymock.tests.MockTypeTest.fromEasyMockClass":16,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":237,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":314,"org.easymock.tests.UsageExpectAndReturnTest.object":160,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":271,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":429,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":410,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":85,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":30,"org.easymock.tests.UsageTest.exactCallCountByLastCall":79,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":111,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":92,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":233,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":433,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":166,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":80,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":54,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":391,"org.easymock.tests.MockClassControlTest.testHashCode":225,"org.easymock.tests2.EasyMockSupportTest.testVerify":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":293,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":490,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":234,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":1,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":52,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":386,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":471,"org.easymock.tests.UsageVarargTest.varargCharAccepted":84,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":186,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":129,"org.easymock.tests2.UsageTest.openCallCountByLastCall":369,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":413,"org.easymock.tests.DefaultClassInstantiatorTest.object":187,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":0,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":28,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":480,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":294,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":37,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":423,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":390,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":224,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":275,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":136,"org.easymock.tests.CapturesMatcherTest.test":487,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":167,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":12,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":302,"org.easymock.tests2.UsageTest.resumeIfFailure":374,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":15,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":49,"org.easymock.tests2.StubTest.stubWithReturnValue":446,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":356,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":159,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":340,"org.easymock.tests2.SerializationTest.testAllMockedMethod":346,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":122,"org.easymock.samples.SupportTest.voteForRemovals":260,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":101,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":393,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":142,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":488,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":128,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":381,"org.easymock.tests.UsageExpectAndThrowTest.object":140,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":94,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":337,"org.easymock.tests2.DelegateToTest.testWrongClass":454,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":59,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":60,"org.easymock.tests.UsageStrictMockTest.range":242,"org.easymock.samples.ConstructorCalledMockTest.testTax":255,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":378,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":409,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":305,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":141,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":355,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":77,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":280,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":43,"org.easymock.tests2.CaptureTest.testCaptureNone":465,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":23,"org.easymock.tests.UsageUnorderedTest.message":180,"org.easymock.tests.UsageVerifyTest.twoReturns":231,"org.easymock.tests.UsageVarargTest.varargByteAccepted":89,"org.easymock.tests2.ThreadingTest.testThreadSafe":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":297,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":8,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":31,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":261,"org.easymock.tests2.CaptureTest.testCapture_2617107":459,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":219,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":126,"org.easymock.tests2.UsageConstraintsTest.any":327,"org.easymock.tests2.StubTest.stub":445,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":202,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":14,"org.easymock.tests.UsageExpectAndThrowTest.longType":133,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":127,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":48,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":191,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":201,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":475,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":395,"org.easymock.tests2.SerializationTest.testClass":344,"org.easymock.tests.LimitationsTest.mockNativeMethod":97,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":169,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":104,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":422,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":478,"org.easymock.tests2.NameTest.nameForMocksControl":419,"org.easymock.tests2.MockedExceptionTest.testMockedException":436,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":285,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":76,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":176,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":134,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":313,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":263,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":357,"org.easymock.tests.MockingTest.testNicePartialClassMocking":174,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":268,"org.easymock.tests2.CompareToTest.testCompareEqual":484,"org.easymock.tests2.CaptureTest.testCaptureLast":464,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":420,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":218,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":311,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":324,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":338,"org.easymock.tests.MockingTest.testTwoMocks":172,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":493,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":150,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":138,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":372,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":342,"org.easymock.samples.ExampleTest.removeNonExistingDocument":253,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":427,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":199,"org.easymock.tests.UsageStrictMockTest.differentMethods":243,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":392,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":189,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":442,"org.easymock.tests2.MockBuilderTest.testCreateMockString":362,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":220,"org.easymock.tests.UsageExpectAndThrowTest.floatType":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":287,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":282,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":383,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":434,"org.easymock.tests.UsageVerifyTest.twoThrows":230,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":296,"org.easymock.samples.ExampleTest.voteAgainstRemoval":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":117,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":21,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":276,"org.easymock.tests.LimitationsTest.privateConstructor":96,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":496,"org.easymock.tests2.UsageConstraintsTest.testNotNull":341,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":435,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":41,"org.easymock.tests2.UsageTest.defaultResetToNice":371,"org.easymock.samples.ExampleTest.voteAgainstRemovals":247,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":118,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":421,"org.easymock.tests.UsageVarargTest.differentLength":86,"org.easymock.tests2.CallbackTest.callback":439,"org.easymock.tests2.UsageConstraintsTest.equals":319,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":272,"org.easymock.tests.UsageTest.openCallCountByLastCall":75,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":315,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":183,"org.easymock.tests.UsageCallCountTest.tooFewCalls":6,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":308,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":45,"org.easymock.tests.UsageThrowableTest.throwCheckedException":38,"org.easymock.tests.MockingTest.testStrictClassMocking":170,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":100,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":310,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":426,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":307,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":204,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":309,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":385,"org.easymock.tests2.CompareToTest.testGreateOrEqual":485,"org.easymock.tests.ObjectMethodsTest.testHashCode":29,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":444,"org.easymock.tests2.NameTest.nameForNiceMock":418,"org.easymock.tests2.DependencyTest.testInterfaceMocking":449,"org.easymock.samples.ExampleTest.addDocument":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":298,"org.easymock.tests2.DelegateToTest.testStubDelegate":453,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":303,"org.easymock.tests2.AnswerTest.stubAnswer":384,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":240,"org.easymock.tests.UsageVarargTest.varargLongAccepted":88,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":115,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":168,"org.easymock.tests.UsageExpectAndReturnTest.floatType":152,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":432,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":256,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":399,"org.easymock.tests.UsageThrowableTest.noUpperLimit":35,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":56,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":335,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":316,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":376,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":462,"org.easymock.tests2.SerializationTest.test":345,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":499,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":188,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":151,"org.easymock.tests2.UsageConstraintsTest.testSame":322,"org.easymock.samples.SupportTest.addDocument":259,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":288,"org.easymock.tests.GenericTest.testPackageScope":102,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":110,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":398,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":177,"org.easymock.tests2.NameTest.nameForMock":416,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":162,"org.easymock.tests2.UsageStrictMockTest.differentMethods":477,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":361,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":273,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":154,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":144,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":27,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":210,"org.easymock.tests2.MockedExceptionTest.testRealException":438,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":120,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":379,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":119,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":182,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":206,"org.easymock.tests2.NameTest.nameForStrictMock":417,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":352,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":312,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":267,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":377,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":190,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":336,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":349,"org.easymock.tests2.UsageStrictMockTest.range":476,"org.easymock.tests2.UsageConstraintsTest.lessThan":343,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":394,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":500,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":403,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":114,"org.easymock.tests2.CaptureTest.testCaptureRightOne":467,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":292,"org.easymock.tests2.UsageConstraintsTest.testOr":323,"org.easymock.tests.UsageRangeTest.combination":207,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":264,"org.easymock.tests.UsageTest.wrongArguments":74,"org.easymock.tests2.MockBuilderTest.testWithConstructor":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":289,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":221,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":155,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":107,"org.easymock.tests.UsageVarargTest.varargShortAccepted":87,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":192,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":9,"org.easymock.tests2.UsageConstraintsTest.cmpTo":328,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":382,"org.easymock.tests2.CompareToTest.testLessThan":482,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":109,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":370,"org.easymock.tests2.CaptureTest.testCaptureFromStub":468,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":196,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":350,"org.easymock.tests.UsageTest.unexpectedCallWithArray":73,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":239,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":7,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":494,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":164,"org.easymock.tests2.CaptureTest.testCapture":501,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":241,"org.easymock.tests2.UsageConstraintsTest.constraints":317,"org.easymock.samples.ExampleTest.addAndChangeDocument":254,"org.easymock.tests.UsageStrictMockTest.testVerify":245,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":258,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":238,"org.easymock.tests2.CompareToTest.testGreateThan":483,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":67,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":463,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":63,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":156,"org.easymock.tests.LimitationsTest.abstractClass":95,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":57,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":64,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":408,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":81}}]

[{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"parameterType"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[28,29,30],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:35","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:327","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[31,32,33,34,35,36],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[37],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"equalsMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[56],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:183","sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:174","sourceCode":"try {\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n} catch (final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException) {\n    net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader());\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"enhancer":"enhancer","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[57,58,59,60,61,62,63,47,64,65,66,67,49,68,69,70,50,51,71,52,72,73,53,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[88,89,90,91],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:144","sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[92,38,93,94,39,40,95,96,97,98,99,100,28,101,102,103,104,105,106,57,41,107,108,29,109,110,111,112,113,114,115,116,117,118,42,119,120,43,44,121,46,47,48,122,123,79,54,124,125,126,127,128,129,130,131,132],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer","matches":"matches","m":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[41,107,109,110,133,134,135,136,118,137,138,139,54,140,124,125,126],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[141,142,143,144,92,145,38,93,94,39,40,146,147,148,149,150,151,152,153,154,155,156,157,158,88,89,95,159,160,100,161,162,163,164,165,166,167,168,169,170,37,171,172,28,173,174,175,176,177,90,178,91,179,180,181,101,182,183,184,185,186,102,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,103,204,205,206,104,105,207,208,106,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,57,224,41,107,108,29,225,58,226,109,110,227,111,228,229,230,231,232,233,234,235,236,59,237,238,239,240,30,241,242,243,244,112,245,113,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,31,268,269,270,271,60,272,273,274,61,117,275,118,42,119,120,43,44,276,277,278,279,280,121,281,282,283,284,285,62,286,287,288,289,63,290,46,47,48,291,32,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,122,307,308,309,310,311,312,313,314,33,315,316,317,318,319,34,320,321,322,323,324,325,35,36,326,327,123,64,65,66,67,49,68,69,70,50,51,71,52,72,73,53,74,75,76,77,78,79,54,140,124,328,80,125,126,127,329,330,81,331,82,83,84,85,86,87,332,333,334,335,336,129,130,337,338,339,131,132,340,340],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"actual","this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[341,342,343],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"failures":[195,197],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[153,155,156,157,158,101,182,184,185,102,217,228,229,230,231,232,233,234,235,237,239,240,241,248,265,283,334,335,336],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:693","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1726","sourceCode":"return null","type":"CtReturnImpl"},"failures":[163],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[100,166],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:156","sourceCode":"final java.lang.StackTraceElement[] java.lang.StackTraceElement[] = java.lang.Throwable.getStackTrace()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","sourceCode":"return java.lang.Class<?>.getConstructors()[0]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[146,148,155,156,157,158,181,101,344,182,183,184,185,186,102,187,214,228,229,230,231,232,234,235,237,238,240,30,241,242,243,244,112,245,113,345,248,250,250,251,251,262,263,280,283,346,347,300,301,348,349,350,351,334,335,336,352,353,354,355,356,357,358,359],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[346],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":161,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":79,"org.easymock.tests2.UsageTest.argumentsOrdered":110,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":209,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":271,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":29,"org.easymock.tests2.StubTest.stubWithReturnValue":59,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":7,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":249,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":34,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":178,"org.easymock.tests2.SerializationTest.testAllMockedMethod":148,"org.easymock.tests2.DelegateToTest.testReturnException":216,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":269,"org.easymock.tests.MockingTest.testPartialClassMocking":334,"org.easymock.samples.SupportTest.voteForRemovals":253,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":135,"org.easymock.tests.MockClassControlTest.testToString":354,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":21,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":342,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":345,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":72,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":64,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":156,"org.easymock.tests.UsageExpectAndThrowTest.object":71,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":114,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":247,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":176,"org.easymock.tests2.DelegateToTest.testWrongClass":218,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":0,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":329,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":330,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":167,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":287,"org.easymock.tests2.UsageTest.wrongArguments":107,"org.easymock.samples.ConstructorCalledMockTest.testTax":250,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":18,"org.easymock.tests.UsageStrictMockTest.range":120,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":278,"org.easymock.samples.ExampleTest.answerVsDelegate":256,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":207,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":347,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":229,"org.easymock.tests2.UsageConstraintsTest.testNull":163,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":240,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":52,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":359,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":106,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":184,"org.easymock.tests2.CaptureTest.testPrimitive":191,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":290,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":78,"org.easymock.tests.UsageTest.moreThanOneArgument":54,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":125,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":277,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":239,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":292,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":137,"org.easymock.tests2.CaptureTest.testCaptureNone":196,"org.easymock.tests.UsageUnorderedTest.message":123,"org.easymock.tests.UsageVerifyTest.twoReturns":48,"org.easymock.tests.UsageVarargTest.varargByteAccepted":309,"org.easymock.tests2.ThreadingTest.testThreadSafe":150,"org.easymock.tests.UsageTest.argumentsOrdered":126,"org.easymock.tests.UsageVarargTest.varargIntAccepted":304,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":338,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":262,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":264,"org.easymock.tests2.CaptureTest.testCapture_2617107":190,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":5,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":181,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":55,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":63,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":26,"org.easymock.tests2.UsageConstraintsTest.any":168,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":183,"org.easymock.tests2.StubTest.stub":236,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":31,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":270,"org.easymock.tests.UsageExpectAndThrowTest.longType":67,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":93,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":202,"org.easymock.tests2.SerializationTest.testClass":146,"org.easymock.tests.LimitationsTest.mockNativeMethod":283,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":149,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":348,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":327,"org.easymock.tests2.AnswerTest.answer":141,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":223,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":11,"org.easymock.tests2.CaptureTest.testAnd":188,"org.easymock.tests2.UsageTest.strictResetToDefault":224,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":244,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":40,"org.easymock.tests2.NameTest.nameForMocksControl":99,"org.easymock.tests2.MockedExceptionTest.testMockedException":213,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":13,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":32,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":281,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":206,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":80,"org.easymock.tests2.DelegateToTest.testDelegate":219,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":336,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":49,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":237,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":185,"org.easymock.tests.MockingTest.testNicePartialClassMocking":335,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":74,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":241,"org.easymock.tests2.CaptureTest.testCaptureLast":195,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":60,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":235,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":166,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":299,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":177,"org.easymock.tests.MockingTest.testTwoMocks":351,"org.easymock.tests2.CaptureTest.testCapture1_2446744":192,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":312,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":73,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":221,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":50,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":109,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":179,"org.easymock.tests.UsageThrowableTest.throwError":81,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":14,"org.easymock.tests.UsageStrictMockTest.differentMethods":43,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":20,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":152,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":27,"org.easymock.tests2.MockBuilderTest.testCreateMockString":187,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":352,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":294,"org.easymock.tests.UsageExpectAndThrowTest.floatType":66,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":28,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":142,"org.easymock.tests.UsageVerifyTest.twoThrows":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":157,"org.easymock.samples.PartialClassMockTest.testGetArea":248,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":265,"org.easymock.samples.ExampleTest.voteAgainstRemoval":258,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":343,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":56,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":245,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":350,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":65,"org.easymock.tests2.UsageTest.niceToStrict":108,"org.easymock.tests2.UsageConstraintsTest.testNotNull":91,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":212,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":87,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":182,"org.easymock.tests2.UsageTest.defaultResetToNice":226,"org.easymock.tests2.MockBuilderTest.testCreateMock":186,"org.easymock.samples.ExampleTest.voteAgainstRemovals":255,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":325,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":10,"org.easymock.tests.UsageVarargTest.differentLength":122,"org.easymock.tests2.CallbackTest.callback":95,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":15,"org.easymock.tests.UsageTest.openCallCountByLastCall":328,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":51,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":133,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":104,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":159,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":128,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":289,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":276,"org.easymock.tests.UsageCallCountTest.tooFewCalls":130,"org.easymock.tests.UsageOverloadedMethodTest.overloading":274,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":62,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":171,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":321,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":273,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":232,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":37,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":197,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":279,"org.easymock.tests.UsageThrowableTest.throwCheckedException":84,"org.easymock.tests.MockClassControlTest.testEquals":358,"org.easymock.tests2.EasyMockSupportClassTest.testAll":155,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":301,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":76,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":134,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":138,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":297,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":222,"org.easymock.tests2.CaptureTest.testCaptureAll":189,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":333,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":234,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":231,"org.easymock.tests2.UsageConstraintsTest.testMatches":172,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":233,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":144,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":293,"org.easymock.samples.ExampleTest.voteForRemovals":260,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":4,"org.easymock.tests2.NameTest.nameForNiceMock":98,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":154,"org.easymock.tests.UsageVarargTest.allKinds":311,"org.easymock.tests2.DependencyTest.testInterfaceMocking":246,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":46,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":2,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":298,"org.easymock.samples.BasicClassMockTest.testPrintContent":263,"org.easymock.samples.ExampleTest.addDocument":259,"org.easymock.tests2.DelegateToTest.testStubDelegate":217,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":86,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":92,"org.easymock.tests2.AnswerTest.stubAnswer":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":272,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":23,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":42,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":6,"org.easymock.tests2.UsageConstraintsTest.greaterThan":173,"org.easymock.tests.UsageVarargTest.varargLongAccepted":308,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":113,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":44,"org.easymock.samples.ExampleTest.voteForRemoval":257,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":151,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":326,"org.easymock.tests.UsageExpectAndReturnTest.floatType":314,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":242,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":228,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":251,"org.easymock.tests.UsageThrowableTest.noUpperLimit":331,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":25,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":174,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":280,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":57,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":160,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":193,"org.easymock.tests2.SerializationTest.test":147,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":204,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":313,"org.easymock.tests2.UsageConstraintsTest.testSame":164,"org.easymock.samples.SupportTest.addDocument":252,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":268,"org.easymock.tests2.CaptureTest.testCaptureFirst":201,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":205,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":111,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":286,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":318,"org.easymock.tests.GenericTest.testPackageScope":300,"org.easymock.tests2.CaptureTest.testCapture2_2446744":200,"org.easymock.tests2.UsageTest.moreThanOneArgument":41,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":153,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":102,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":24,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":310,"org.easymock.tests.GenericTest.testBridgedEquals":349,"org.easymock.tests2.NameTest.nameForMock":96,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":131,"org.easymock.tests.UsageExpectAndReturnTest.longType":33,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":295,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":203,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":322,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":77,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":341,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":90,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":75,"org.easymock.tests2.UsageStrictMockTest.differentMethods":39,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":291,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":315,"org.easymock.tests.UsageCallCountTest.tooManyCalls":132,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":53,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":282,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":129,"org.easymock.tests2.MockedExceptionTest.testRealException":215,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":319,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":17,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":8,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":68,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":288,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":85,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":230,"org.easymock.tests2.NameTest.nameForStrictMock":97,"org.easymock.tests2.UsageConstraintsTest.testContains":170,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":214,"org.easymock.tests2.UsageConstraintsTest.testFind":162,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":61,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":88,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":30,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":89,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":117,"org.easymock.tests.UsageExpectAndReturnTest.object":320,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":115,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":175,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":243,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":101,"org.easymock.tests2.UsageStrictMockTest.range":94,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":16,"org.easymock.tests2.UsageConstraintsTest.lessThan":180,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":208,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":306,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":1,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":22,"org.easymock.tests.UsageTest.exactCallCountByLastCall":127,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":332,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":3,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":103,"org.easymock.tests2.CaptureTest.testCaptureRightOne":198,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":139,"org.easymock.tests2.UsageConstraintsTest.testOr":165,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageRangeTest.combination":121,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":302,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":238,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":35,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":285,"org.easymock.tests.UsageTest.wrongArguments":124,"org.easymock.tests.MockClassControlTest.testHashCode":357,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":19,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":353,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":316,"org.easymock.tests2.EasyMockSupportTest.testVerify":211,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":323,"org.easymock.tests.UsageVarargTest.varargShortAccepted":307,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":284,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":339,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":220,"org.easymock.tests2.UsageConstraintsTest.cmpTo":169,"org.easymock.tests.UsageVarargTest.varargCharAccepted":305,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":145,"org.easymock.tests2.UsageTest.openCallCountByLastCall":225,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":58,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":210,"org.easymock.tests2.CaptureTest.testCaptureFromStub":199,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":344,"org.easymock.tests.UsageTest.unexpectedCallWithArray":140,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":70,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":83,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":118,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":337,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":12,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":324,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":356,"org.easymock.tests2.UsageConstraintsTest.constraints":100,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":112,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":119,"org.easymock.samples.ExampleTest.addAndChangeDocument":261,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":69,"org.easymock.tests.CapturesMatcherTest.test":340,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":36,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":254,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":355,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":158,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":296,"org.easymock.tests2.UsageTest.resumeIfFailure":227,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":194,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":266,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":346,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":317,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":267,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":45,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":303,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":105,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":116}}]

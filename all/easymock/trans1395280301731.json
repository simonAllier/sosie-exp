[{"transplant":{"position":"org.easymock.EasyMock:1747","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:360","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1901","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","type":"CtInvocationImpl"},"failures":[18],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"failures":[19,20,21,22,23,24,25,26],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:88","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1163","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[27,28,29,30,31,32],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:99","failures":[33,34,1,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,3,4,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,6,83,84,85,7,86,87,10,11,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,12,122,123,124,125,126,127,128,129,18,130,13,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,14,15,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,19,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,16,17],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:210","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[189,190,191,192,193,0,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,33,34,1,214,215,216,217,218,219,220,35,2,36,37,38,39,40,41,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,42,236,43,44,237,45,46,47,48,49,238,239,240,241,242,50,51,29,243,3,4,244,245,52,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,53,263,54,264,265,55,266,56,267,268,5,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,311,312,313,77,78,314,79,315,316,317,318,80,81,319,320,82,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,6,83,84,85,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,7,360,86,361,8,9,362,363,364,365,30,87,366,10,11,367,368,88,89,369,90,91,370,92,371,372,373,374,375,376,377,93,378,379,94,95,96,97,98,99,380,381,100,382,383,384,101,102,103,385,386,387,388,389,104,390,391,105,392,393,394,395,396,397,398,399,400,106,401,402,403,404,405,107,406,407,108,109,110,111,408,112,113,114,409,410,411,412,115,116,117,118,413,119,120,121,12,122,123,414,124,125,126,127,128,129,18,130,13,131,132,133,415,134,135,136,137,138,139,416,417,418,140,419,420,421,141,422,142,423,143,424,425,426,144,427,428,145,146,147,429,148,430,14,15,149,431,432,150,151,433,434,435,436,437,438,439,152,440,441,442,153,443,444,445,446,447,448,449,450,451,452,154,453,454,455,456,457,458,155,156,157,158,159,160,161,162,163,164,165,166,459,460,461,462,463,464,465,466,467,468,469,167,470,471,472,473,474,475,19,476,477,478,479,168,480,481,169,170,171,172,173,482,174,483,484,175,176,485,486,177,487,488,489,178,179,490,180,181,491,492,182,183,184,185,493,186,187,494,495,496,188,497,16,17,498],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"failures":[499],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[43,44,45,46,47,48,49,53,57,58,59,60,61,62,65,66,68,69,70,72,73,74,75,76,77,78,79,80,6,83,84,85,342,343,344,345,87,10,11,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,140,141,142,143,144,19,172,175,176,177,188,16,17],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[460],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"qualifier":"this","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[373,373,374,374,382,500],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[27,28,29,30,31,32],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[375,376,448,449,450,452,453,454,455,458,465,466,467,469,470,471,472,475],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"failures":[27,28,29,30,31,32],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[27,28,29,30,31,32],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[189,190,191,192,193,0,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,33,34,1,214,215,216,217,218,219,220,35,2,36,37,38,39,40,41,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,42,236,43,44,237,45,46,47,48,49,238,239,240,241,242,50,51,29,243,3,4,244,245,52,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,53,263,54,264,265,55,266,56,267,268,5,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,311,312,313,77,78,314,79,315,316,317,318,80,81,319,320,82,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,6,83,84,85,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,7,360,86,361,8,9,362,363,364,365,30,87,366,10,11,367,368,88,89,369,90,91,370,92,371,372,373,374,375,376,377,93,378,379,94,95,96,97,98,99,380,381,100,382,383,384,101,102,103,385,386,387,388,389,104,390,391,105,392,393,394,395,396,397,398,399,400,106,401,402,403,404,405,107,406,407,108,109,110,111,408,112,113,114,409,410,411,412,115,116,117,118,413,119,120,121,12,122,123,414,124,125,126,127,128,129,18,130,13,131,132,133,415,134,135,136,137,138,139,416,417,418,140,419,420,421,141,422,142,423,143,424,425,426,144,427,428,145,146,147,429,148,430,14,15,149,431,432,150,151,433,434,435,436,437,438,439,152,440,441,442,153,443,444,445,446,447,448,449,450,451,452,154,453,454,455,456,457,458,155,156,157,158,159,160,161,162,163,164,165,166,459,460,461,462,463,464,465,466,467,468,469,167,470,471,472,473,474,475,19,476,477,478,479,168,480,481,169,170,171,172,173,482,174,483,484,175,176,485,486,177,487,488,489,178,179,490,180,181,491,492,182,183,184,185,493,186,187,494,495,496,188,497,16,17,498],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[189,190,191,192,193,0,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,33,34,1,214,215,216,217,218,219,220,35,2,36,37,38,39,40,41,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,42,236,43,44,237,45,46,47,48,49,238,239,240,241,242,50,51,29,243,3,4,244,245,52,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,53,263,54,264,265,55,266,56,267,268,5,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,311,312,313,77,78,314,79,315,316,317,318,80,81,319,320,82,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,6,83,84,85,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,7,360,86,361,8,9,362,363,364,365,30,87,366,10,11,367,368,88,89,369,90,91,370,92,371,372,373,374,375,376,377,93,378,379,94,95,96,97,98,99,380,381,100,382,383,384,101,102,103,385,386,387,388,389,104,390,391,105,392,393,394,395,396,397,398,399,400,106,401,402,403,404,405,107,406,407,108,109,110,111,408,112,113,114,409,410,411,412,115,116,117,118,413,119,120,121,12,122,123,414,124,125,126,127,128,129,18,130,13,131,132,133,415,134,135,136,137,138,139,416,417,418,140,419,420,421,141,422,142,423,143,424,425,426,144,427,428,145,146,147,429,148,430,14,15,149,431,432,150,151,433,434,435,436,437,438,439,152,440,441,442,153,443,444,445,446,447,448,449,450,451,452,154,453,454,455,456,457,458,155,156,157,158,159,160,161,162,163,164,165,166,459,460,461,462,463,464,465,466,467,468,469,167,470,471,472,473,474,475,19,476,477,478,479,168,480,481,169,170,171,172,173,482,174,483,484,175,176,485,486,177,487,488,489,178,179,490,180,181,491,492,182,183,184,185,493,186,187,494,495,496,188,497,16,17,498],"status":-1,"binaryOperator":"(int >= 1)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[501,502,503],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[282,289,320,482],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[192,193,0,194,195,196,34,1,35,2,36,37,38,39,40,41,221,222,223,224,225,226,227,228,229,230,42,43,44,45,46,47,48,49,238,239,240,241,242,50,51,29,243,3,4,244,245,52,246,247,248,250,251,253,254,255,256,257,53,54,264,55,266,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,318,80,81,319,320,82,334,6,83,84,85,342,343,344,345,346,349,352,359,7,360,86,364,365,30,87,366,10,11,367,368,89,369,90,91,370,92,372,94,95,96,97,98,99,100,384,102,109,110,113,114,410,412,115,116,117,118,119,120,121,12,122,123,124,125,126,127,128,129,18,130,13,131,132,133,134,135,136,137,138,139,416,417,141,422,144,428,145,146,147,429,148,430,14,15,149,431,432,150,151,152,442,153,443,444,445,446,447,461,462,463,464,19,478,479,168,480,481,169,170,171,172,173,482,174,175,486,177,487,489,178,179,490,180,181,491,492,182,183,184,185,493,186,187,494,495,496,188,497,16,17,498],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[5,275,279,284,285],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"position":"org.easymock.internal.Range:40","failures":[189,190,191,192,193,0,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,33,34,1,214,215,216,217,218,219,220,35,2,36,37,38,39,40,41,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,42,236,43,44,237,45,46,47,48,49,238,239,240,241,242,50,51,29,243,3,4,244,245,52,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,53,263,54,264,265,55,266,56,267,268,5,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,311,312,313,77,78,314,79,315,316,317,318,80,81,319,320,82,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,6,83,84,85,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,7,360,86,361,8,9,362,363,364,365,30,87,366,10,11,367,368,88,89,369,90,91,370,92,371,372,373,374,375,376,377,93,378,379,94,95,96,97,98,99,380,381,100,382,383,384,101,102,103,385,386,387,388,389,104,390,391,105,392,393,394,395,396,397,398,399,400,106,401,402,403,404,405,107,406,407,108,109,110,111,408,112,113,114,409,410,411,412,115,116,117,118,413,119,120,121,12,122,123,414,124,125,126,127,128,129,18,130,13,131,132,133,415,134,135,136,137,138,139,416,417,418,140,419,420,421,141,422,142,423,143,424,425,426,144,427,428,145,146,147,429,148,430,14,15,149,431,432,150,151,433,434,435,436,437,438,439,152,440,441,442,153,443,444,445,446,447,448,449,450,451,452,154,453,454,455,456,457,458,155,156,157,158,159,160,161,162,163,164,165,166,459,460,461,462,463,464,465,466,467,468,469,167,470,471,472,473,474,475,19,476,477,478,479,168,480,481,169,170,171,172,173,482,174,483,484,175,176,485,486,177,487,488,489,178,179,490,180,181,491,492,182,183,184,185,493,186,187,494,495,496,188,497,16,17,498],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[118],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Range:36","failures":[189,190,191,192,193,0,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,33,34,1,214,215,216,217,218,219,220,35,2,36,37,38,39,40,41,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,42,236,43,44,237,45,46,47,48,49,238,239,240,241,242,50,51,29,243,3,4,244,245,52,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,53,263,54,264,265,55,266,56,267,268,5,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,311,312,313,77,78,314,79,315,316,317,318,80,81,319,320,82,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,6,83,84,85,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,7,360,86,361,8,9,362,363,364,365,30,87,366,10,11,367,368,88,89,369,90,91,370,92,371,372,373,374,375,376,377,93,378,379,94,95,96,97,98,99,380,381,100,382,383,384,101,102,103,385,386,387,388,389,104,390,391,105,392,393,394,395,396,397,398,399,400,106,401,402,403,404,405,107,406,407,108,109,110,111,408,112,113,114,409,410,411,412,115,116,117,118,413,119,120,121,12,122,123,414,124,125,126,127,128,129,18,130,13,131,132,133,415,134,135,136,137,138,139,416,417,418,140,419,420,421,141,422,142,423,143,424,425,426,144,427,428,145,146,147,429,148,430,14,15,149,431,432,150,151,433,434,435,436,437,438,439,152,440,441,442,153,443,444,445,446,447,448,449,450,451,452,154,453,454,455,456,457,458,155,156,157,158,159,160,161,162,163,164,165,166,459,460,461,462,463,464,465,466,467,468,469,167,470,471,472,473,474,475,19,476,477,478,479,168,480,481,169,170,171,172,173,482,174,483,484,175,176,485,486,177,487,488,489,178,179,490,180,181,491,492,182,183,184,185,493,186,187,494,495,496,188,497,16,17,498],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[129],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"regex"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":118,"org.easymock.tests2.UsageTest.argumentsOrdered":432,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":50,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":165,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":453,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":277,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":430,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":375,"org.easymock.tests2.DelegateToTest.testReturnException":486,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":226,"org.easymock.tests.MockingTest.testPartialClassMocking":77,"org.easymock.tests.MockClassControlTest.testToString":353,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":460,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":259,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":386,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":395,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":105,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":291,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":21,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":123,"org.easymock.tests2.UsageTest.wrongArguments":429,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":80,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":475,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":223,"org.easymock.samples.ExampleTest.answerVsDelegate":369,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":208,"org.easymock.tests2.UsageConstraintsTest.testNull":120,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":316,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":97,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":164,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":358,"org.easymock.tests2.CaptureTest.testPrimitive":180,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":82,"org.easymock.tests.UsageTest.moreThanOneArgument":51,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":310,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":96,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":344,"org.easymock.tests.UsageTest.argumentsOrdered":245,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":361,"org.easymock.tests.UsageVarargTest.varargIntAccepted":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":282,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":45,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":417,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":25,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":457,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":435,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":422,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":269,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":49,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":167,"org.easymock.tests.ReplayStateInvalidUsageTest.times":338,"org.easymock.tests2.DependencyTest.testClassMocking":483,"org.easymock.tests2.AnswerTest.answer":152,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":284,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":447,"org.easymock.tests2.CaptureTest.testAnd":178,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":205,"org.easymock.tests2.UsageTest.strictResetToDefault":146,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":420,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":384,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":343,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":159,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":84,"org.easymock.tests2.DelegateToTest.testDelegate":489,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":363,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":306,"org.easymock.tests.LimitationsTest.mockFinalMethod":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":242,"org.easymock.tests2.DependencyTest.testClassMockingSupport":484,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":348,"org.easymock.tests2.CaptureTest.testCapture1_2446744":181,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":381,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":304,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":445,"org.easymock.tests.UsageThrowableTest.throwError":35,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":332,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":207,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":458,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":237,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":346,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":407,"org.easymock.samples.PartialClassMockTest.testGetArea":88,"org.easymock.tests.MockingTest.testInterfaceMocking":314,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":333,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":46,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":396,"org.easymock.tests2.UsageTest.niceToStrict":148,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":219,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":292,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":501,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":268,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":141,"org.easymock.tests2.MockBuilderTest.testCreateMock":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":403,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":472,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":31,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":300,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":160,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":204,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":191,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":192,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":221,"org.easymock.tests.UsageOverloadedMethodTest.overloading":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":400,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":128,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":234,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":33,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":68,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":127,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":184,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":249,"org.easymock.tests2.EasyMockSupportClassTest.testAll":104,"org.easymock.tests.MockClassControlTest.testEquals":357,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":266,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":308,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":446,"org.easymock.tests2.CaptureTest.testCaptureAll":179,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":240,"org.easymock.tests.MockNameTest.defaultName":220,"org.easymock.tests2.UsageConstraintsTest.testMatches":129,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":330,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":345,"org.easymock.samples.ExampleTest.voteForRemovals":92,"org.easymock.tests.UsageVarargTest.allKinds":257,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":7,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":241,"org.easymock.samples.BasicClassMockTest.testPrintContent":379,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":40,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":495,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":488,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":454,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":230,"org.easymock.tests2.UsageConstraintsTest.greaterThan":130,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":26,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":390,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":83,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":103,"org.easymock.samples.ExampleTest.voteForRemoval":90,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":329,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":385,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":170,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":209,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":436,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":380,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":145,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":359,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":425,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":274,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":157,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":388,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":225,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":485,"org.easymock.tests2.CaptureTest.testCaptureFirst":187,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":273,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":158,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":151,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":236,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":64,"org.easymock.tests2.CaptureTest.testCapture2_2446744":186,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":172,"org.easymock.tests2.UsageTest.moreThanOneArgument":147,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":285,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":256,"org.easymock.tests.GenericTest.testBridgedEquals":267,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":198,"org.easymock.tests.UsageExpectAndReturnTest.longType":60,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":238,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":309,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":415,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":347,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":307,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":201,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":342,"org.easymock.tests.UsageCallCountTest.tooManyCalls":199,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":404,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":65,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":474,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":296,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":39,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":109,"org.easymock.tests.MockingTest.testNiceClassMocking":317,"org.easymock.tests.MockingTest.testClassMocking":312,"org.easymock.tests2.UsageConstraintsTest.testContains":126,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":193,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":168,"org.easymock.tests2.UsageConstraintsTest.testFind":119,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":1,"org.easymock.tests.MockTypeTest.fromEasyMockClass":206,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":412,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":364,"org.easymock.tests.UsageExpectAndReturnTest.object":67,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":100,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":473,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":163,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":22,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":251,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":217,"org.easymock.tests.UsageTest.exactCallCountByLastCall":52,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":54,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":272,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":8,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":258,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":476,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":73,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":246,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":233,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":449,"org.easymock.tests.MockClassControlTest.testHashCode":356,"org.easymock.tests2.EasyMockSupportTest.testVerify":459,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":398,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":9,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":190,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":231,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":444,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":494,"org.easymock.tests.UsageVarargTest.varargCharAccepted":250,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":321,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":290,"org.easymock.tests2.UsageTest.openCallCountByLastCall":14,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":502,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":166,"org.easymock.tests.DefaultClassInstantiatorTest.object":322,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":189,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":399,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":298,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":37,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":468,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":448,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":101,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":355,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":297,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":74,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":107,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":354,"org.easymock.tests2.UsageTest.resumeIfFailure":150,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":203,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":434,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":228,"org.easymock.tests2.StubTest.stubWithReturnValue":174,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":423,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":66,"org.easymock.tests2.SerializationTest.testAllMockedMethod":416,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":283,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":32,"org.easymock.samples.SupportTest.voteForRemovals":93,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":265,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":451,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":303,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":289,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":440,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":260,"org.easymock.tests.UsageExpectAndThrowTest.object":301,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":132,"org.easymock.tests2.DelegateToTest.testWrongClass":487,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":43,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":44,"org.easymock.tests.UsageStrictMockTest.range":10,"org.easymock.samples.ConstructorCalledMockTest.testTax":373,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":438,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":162,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":108,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":302,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":387,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":244,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":340,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":222,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":27,"org.easymock.tests2.CaptureTest.testCaptureNone":183,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":213,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":499,"org.easymock.tests.UsageUnorderedTest.message":318,"org.easymock.tests.UsageVerifyTest.twoReturns":86,"org.easymock.tests.UsageVarargTest.varargByteAccepted":255,"org.easymock.tests2.ThreadingTest.testThreadSafe":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":401,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":196,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":218,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":378,"org.easymock.tests2.CaptureTest.testCapture_2617107":490,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":350,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":287,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":320,"org.easymock.tests2.UsageConstraintsTest.any":124,"org.easymock.tests2.StubTest.stub":482,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":337,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":202,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":288,"org.easymock.tests.UsageExpectAndThrowTest.longType":294,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":326,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":336,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":497,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":154,"org.easymock.tests2.SerializationTest.testClass":138,"org.easymock.tests.LimitationsTest.mockNativeMethod":53,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":56,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":76,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":467,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":498,"org.easymock.tests2.NameTest.nameForMocksControl":464,"org.easymock.tests2.MockedExceptionTest.testMockedException":479,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":469,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":391,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":4,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":411,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":79,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":295,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":94,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":143,"org.easymock.tests.MockingTest.testNicePartialClassMocking":78,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":99,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":465,"org.easymock.tests2.CaptureTest.testCaptureLast":182,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":20,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":349,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":122,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":114,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":133,"org.easymock.tests.MockingTest.testTwoMocks":313,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":409,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":57,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":299,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":431,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":136,"org.easymock.samples.ExampleTest.removeNonExistingDocument":371,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":471,"org.easymock.tests.UsageStrictMockTest.differentMethods":11,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":334,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":450,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":324,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":171,"org.easymock.tests2.MockBuilderTest.testCreateMockString":428,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":392,"org.easymock.tests.UsageExpectAndThrowTest.floatType":293,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":389,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":442,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":477,"org.easymock.tests.UsageVerifyTest.twoThrows":360,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":106,"org.easymock.samples.ExampleTest.voteAgainstRemoval":91,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":278,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":102,"org.easymock.tests.LimitationsTest.privateConstructor":262,"org.easymock.tests2.UsageConstraintsTest.testNotNull":135,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":478,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":41,"org.easymock.tests2.UsageTest.defaultResetToNice":149,"org.easymock.samples.ExampleTest.voteAgainstRemovals":89,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":279,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":466,"org.easymock.tests.UsageVarargTest.differentLength":252,"org.easymock.tests2.CallbackTest.callback":481,"org.easymock.tests2.UsageConstraintsTest.equals":413,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":382,"org.easymock.tests.UsageTest.openCallCountByLastCall":3,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":115,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":319,"org.easymock.tests.UsageCallCountTest.tooFewCalls":194,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":111,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":224,"org.easymock.tests.UsageThrowableTest.throwCheckedException":38,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":28,"org.easymock.tests.MockingTest.testStrictClassMocking":311,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":113,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":264,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":470,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":110,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":339,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":112,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":443,"org.easymock.tests.ObjectMethodsTest.testHashCode":216,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":24,"org.easymock.tests2.NameTest.nameForNiceMock":463,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":173,"org.easymock.tests2.DependencyTest.testInterfaceMocking":175,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":23,"org.easymock.samples.ExampleTest.addDocument":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":406,"org.easymock.tests2.DelegateToTest.testStubDelegate":177,"org.easymock.tests2.AnswerTest.stubAnswer":153,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":87,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":424,"org.easymock.tests.UsageVarargTest.varargLongAccepted":254,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":276,"org.easymock.tests.UsageExpectAndReturnTest.floatType":59,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":75,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":19,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":374,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":456,"org.easymock.tests.UsageThrowableTest.noUpperLimit":2,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":13,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":235,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":116,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":433,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":491,"org.easymock.tests2.SerializationTest.test":139,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":323,"org.easymock.tests2.UsageConstraintsTest.testSame":121,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":58,"org.easymock.samples.SupportTest.addDocument":377,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":408,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":393,"org.easymock.tests.GenericTest.testPackageScope":55,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":271,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":455,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":315,"org.easymock.tests2.NameTest.nameForMock":461,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":69,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":427,"org.easymock.tests2.UsageStrictMockTest.differentMethods":17,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":383,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":61,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":305,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":214,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":85,"org.easymock.tests2.MockedExceptionTest.testRealException":480,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":210,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":439,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":281,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":280,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":81,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":341,"org.easymock.tests2.NameTest.nameForStrictMock":462,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":421,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":503,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":410,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":98,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":437,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":131,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":325,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":140,"org.easymock.tests2.UsageStrictMockTest.range":16,"org.easymock.tests2.UsageConstraintsTest.lessThan":137,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":452,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":397,"org.easymock.tests2.CaptureTest.testCaptureRightOne":185,"org.easymock.tests2.UsageConstraintsTest.testOr":12,"org.easymock.tests.UsageRangeTest.combination":6,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":95,"org.easymock.tests.UsageTest.wrongArguments":243,"org.easymock.tests2.MockBuilderTest.testWithConstructor":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":394,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":352,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":5,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":70,"org.easymock.tests.UsageVarargTest.varargShortAccepted":253,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":327,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":197,"org.easymock.tests2.UsageConstraintsTest.cmpTo":125,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":270,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":15,"org.easymock.tests2.CaptureTest.testCaptureFromStub":493,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":331,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":419,"org.easymock.tests.UsageTest.unexpectedCallWithArray":29,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":30,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":195,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":500,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":71,"org.easymock.tests2.UsageConstraintsTest.constraints":117,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":366,"org.easymock.samples.ExampleTest.addAndChangeDocument":372,"org.easymock.tests.UsageStrictMockTest.testVerify":368,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":376,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":365,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":239,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":492,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":47,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":63,"org.easymock.tests.LimitationsTest.abstractClass":261,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":42,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":48,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":161,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":247}}]

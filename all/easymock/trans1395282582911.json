[{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[5,6,7,8],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[9],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:193","sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:52","sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[10,11],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:37","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[29,30,31,32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[33,34],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[31,35],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[36,37,38,39,40,41,5,42,43],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[44,45],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[46],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[47,17,18,19,48,20,49,50,51,52,25,26,27,28,53],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:142","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[54,36,5,7,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,45,77,78,79,80,81,82,83,84,85,43,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,119,120,120,121,122,33,123,124,125,34,126,10,127,128,129,11,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[10,11],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[152,153,154,0,155,156,1,2,3,157,158],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[5,6,7,8],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:73","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[10],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[5,6,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[5,6,7,8],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[159,160],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return java.lang.Object == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"expected"}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:43","sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1361","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:80","failures":[5,69,78,161,79,80,82,83,84,85,86,87,162,163,88,121,129,149,150],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[36,37,38,39,40,41,42],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[164],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:178","failures":[85,149],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[5,6,7,8],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[165,166,167,168,169],"status":-1,"binaryOperator":"(((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[5,6,7,8],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[170],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[47,19,49,28],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[171],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:174","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[150],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[57,188,65,73,76],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.LastControl:92","failures":[30],"status":-1,"binaryOperator":"(\"\" + int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[12,14,20,21,22,25],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":46,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":59,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":175,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":57,"org.easymock.tests2.UsageTest.argumentsOrdered":19,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":156,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":182,"org.easymock.tests2.CompareToTest.testGreateOrEqual":168,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":42,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":187,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":40,"org.easymock.tests2.SerializationTest.testAllMockedMethod":7,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":164,"org.easymock.tests.MockingTest.testPartialClassMocking":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":39,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":14,"org.easymock.samples.BasicClassMockTest.testPrintContent":118,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":10,"org.easymock.tests.MockClassControlTest.testToString":132,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":115,"org.easymock.tests2.DelegateToTest.testStubDelegate":9,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":102,"org.easymock.tests2.AnswerTest.stubAnswer":155,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":8,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":183,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":98,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":96,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":35,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":76,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":37,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":126,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":45,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":162,"org.easymock.tests2.UsageTest.wrongArguments":17,"org.easymock.samples.ConstructorCalledMockTest.testTax":119,"org.easymock.tests.UsageStrictMockTest.range":49,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":54,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":69,"org.easymock.samples.ExampleTest.answerVsDelegate":157,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":120,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":184,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":150,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":55,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":151,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":61,"org.easymock.tests2.UsageConstraintsTest.testNull":29,"org.easymock.tests2.SerializationTest.test":6,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":66,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":137,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":43,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":84,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":33,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":27,"org.easymock.tests.UsageTest.moreThanOneArgument":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":92,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":93,"org.easymock.tests.UsageUnorderedTest.message":48,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":100,"org.easymock.tests.GenericTest.testPackageScope":127,"org.easymock.tests2.UsageTest.moreThanOneArgument":16,"org.easymock.tests.UsageVerifyTest.twoReturns":52,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":87,"org.easymock.tests.UsageTest.argumentsOrdered":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":109,"org.easymock.tests.GenericTest.testBridgedEquals":11,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":117,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":15,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":41,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":78,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":163,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":185,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":83,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":72,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":125,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":181,"org.easymock.tests2.SerializationTest.testClass":5,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":174,"org.easymock.tests.LimitationsTest.mockNativeMethod":140,"org.easymock.tests2.AnswerTest.answer":152,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":129,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":112,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":178,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":73,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":173,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":4,"org.easymock.tests2.MockedExceptionTest.testMockedException":90,"org.easymock.tests.MockingTest.testNiceClassMocking":148,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":56,"org.easymock.tests.MockingTest.testClassMocking":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":97,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":161,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":147,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":64,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":91,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":85,"org.easymock.tests.MockingTest.testNicePartialClassMocking":146,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":68,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":81,"org.easymock.tests.LimitationsTest.mockFinalMethod":141,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":2,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":67,"org.easymock.tests2.CompareToTest.testCompareEqual":167,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":3,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":63,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":124,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":60,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":70,"org.easymock.tests.ErrorMessageTest.testGetters":171,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":79,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":177,"org.easymock.tests.MockingTest.testTwoMocks":144,"org.easymock.tests2.UsageStrictMockTest.range":47,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":188,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":38,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":180,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":104,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":159,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":23,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":36,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":65,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":160,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":123,"org.easymock.tests.UsageTest.wrongArguments":26,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":44,"org.easymock.tests2.MockBuilderTest.testCreateMockString":88,"org.easymock.tests.MockClassControlTest.testHashCode":135,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":101,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":105,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":0,"org.easymock.tests.UsageVerifyTest.twoThrows":51,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":158,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":108,"org.easymock.samples.PartialClassMockTest.testGetArea":121,"org.easymock.tests2.CompareToTest.testLessOrEqual":169,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":154,"org.easymock.tests2.CompareToTest.testLessThan":165,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":103,"org.easymock.tests.LimitationsTest.privateConstructor":139,"org.easymock.tests2.UsageConstraintsTest.testNotNull":32,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":89,"org.easymock.tests.DefaultClassInstantiatorTest.object":122,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":82,"org.easymock.tests2.MockBuilderTest.testCreateMock":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":111,"org.easymock.tests2.CallbackTest.callback":1,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":80,"org.easymock.tests.UsageTest.unexpectedCallWithArray":25,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":50,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":106,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":12,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":20,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":172,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":107,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":74,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":58,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":170,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":186,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":114,"org.easymock.tests2.CompareToTest.testGreateThan":166,"org.easymock.tests.MockClassControlTest.testEquals":136,"org.easymock.tests2.EasyMockSupportClassTest.testAll":95,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":149,"org.easymock.tests.LimitationsTest.abstractClass":138,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":128,"org.easymock.tests.MockingTest.testStrictClassMocking":142,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":13,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":22,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":62}}]

[{"position":"org.easymock.internal.BridgeMethodResolver:210","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[48,48,49,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,46],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[104,105,106,107,108,109,110,111,112,113,114,51,52,115,116,117,118,119,120,121,122,123,124,125,0,126,1,127,128,2,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,3,158,159,4,5,160,161,162,6,59,7,8,9,10,11,12,163,164,165,166,167,168,169,170,171,172,173,60,61,174,175,176,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,63,177,178,179,180,181,182,183,34,184,35,36,37,38,39,40,185,186,187,188,189,190,191,192,193,194,195,196,197,41,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,42,213,214,215,216,217,43,218,219,220,221,222,223,224,225,226,227,228,229,230,231,67,68,84,87,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,90,91,265,92,93,94,96,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,44,45,46,47],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[246],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[109,162,282,284,285],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(this.java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"value","properties":"properties","key":"value"}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1051","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[259],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:137","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[65,286,66,287,288,289,290,291,292,293],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:123","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:60","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[48,48,49,49,50,51,52,53,54,294,295,55,56,57,58,296,59,297,60,61,62,174,298,299,63,300,301,64,302,303,304,305,180,181,306,307,308,309,310,311,312,313,65,286,66,67,314,315,316,68,317,318,69,319,320,321,322,323,324,325,326,327,70,328,329,330,331,332,71,333,334,335,72,73,74,75,336,76,77,78,79,288,80,81,337,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,338,339,97,98,99,100,340,341,342,343,344,101,345,102,103,346,44,45,46],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"failures":[108,109,110,111,112,113,347,114,115,116,117,118,119,348,120,121,122,123,124,125,0,126,1,127,349,350,128,2,129,351,130,352,353,53,354,355,54,356,357,294,295,56,57,358,58,359,360,296,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,361,151,362,152,153,154,155,156,363,157,3,158,159,4,5,160,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,161,380,162,6,381,382,59,7,8,9,10,11,12,163,164,165,166,167,383,384,385,386,387,388,389,168,169,170,171,390,172,173,60,61,175,176,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,63,177,178,179,301,64,302,303,304,305,180,181,306,391,392,183,34,184,35,36,37,38,39,40,187,188,189,190,191,192,393,193,194,195,196,197,41,210,212,42,213,214,394,215,216,217,43,395,218,396,219,220,397,221,222,223,224,225,226,65,398,399,400,401,227,228,229,230,402,403,404,405,66,231,67,72,74,75,336,76,77,80,81,83,406,84,85,86,88,89,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,90,91,265,92,93,94,95,96,339,97,98,99,100,340,407,408,409,343,410,267,268,269,270,271,272,273,274,275,276,277,278,279,280,282,283,284,285,44,45,46,47],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String).append(\", actual: \")","type":"CtInvocationImpl"},"failures":[411,412,413,125,0,126,127,350,129,351,362,152,154,155,179,214,394,218,396,222,224,225,398,399,400,401],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[257],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[286,66,287,414,415,416],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[125,0,126,127,353,152,155,156,381,18,22,23,25,28,214,222,225,226],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[251],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:58","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[216,254,93],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[417],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[418],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"methodName":"name"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[419],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[48,48,49,49,50,51,52,53,54,294,295,55,56,57,58,296,59,297,60,61,62,174,298,299,63,300,301,64,302,303,304,305,180,181,306,307,308,309,310,311,312,420,421,65,286,66,67,314,315,316,68,317,318,69,319,320,321,322,323,324,325,326,327,70,328,329,330,331,332,71,333,334,72,74,75,336,76,77,78,79,288,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,338,339,97,98,99,100,340,341,342,407,408,343,44,45,46],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":241,"org.easymock.tests2.UsageTest.argumentsOrdered":396,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":1,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":207,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":216,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":107,"org.easymock.tests2.DelegateToTest.testReturnException":282,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":8,"org.easymock.tests.MockingTest.testPartialClassMocking":56,"org.easymock.tests.MockClassControlTest.testToString":302,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":418,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":322,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":14,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":69,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":411,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":211,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":289,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":247,"org.easymock.tests2.UsageTest.wrongArguments":394,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":158,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":378,"org.easymock.samples.ExampleTest.answerVsDelegate":109,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":54,"org.easymock.tests2.UsageConstraintsTest.testNull":243,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":360,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":92,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":181,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":206,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":344,"org.easymock.tests2.CaptureTest.testPrimitive":270,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":160,"org.easymock.tests.UsageTest.moreThanOneArgument":127,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":33,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":265,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":189,"org.easymock.tests.UsageTest.argumentsOrdered":351,"org.easymock.tests.UsageVarargTest.varargIntAccepted":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":163,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":72,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":408,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":77,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":167,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":281,"org.easymock.tests.ReplayStateInvalidUsageTest.times":372,"org.easymock.tests2.DependencyTest.testClassMocking":420,"org.easymock.tests2.AnswerTest.answer":227,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":405,"org.easymock.tests2.CaptureTest.testAnd":267,"org.easymock.tests2.UsageTest.strictResetToDefault":213,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":97,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":188,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":193,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":202,"org.easymock.tests2.DelegateToTest.testDelegate":285,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":29,"org.easymock.tests.LimitationsTest.mockFinalMethod":300,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":11,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":387,"org.easymock.tests2.DependencyTest.testClassMockingSupport":421,"org.easymock.tests2.CaptureTest.testCapture1_2446744":271,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":27,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":403,"org.easymock.tests.UsageThrowableTest.throwError":34,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":366,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":355,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":334,"org.easymock.samples.PartialClassMockTest.testGetArea":50,"org.easymock.tests.MockingTest.testInterfaceMocking":358,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":367,"org.easymock.tests2.CompareToTest.testLessOrEqual":419,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":164,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":15,"org.easymock.tests2.UsageTest.niceToStrict":215,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":323,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":76,"org.easymock.tests2.MockBuilderTest.testCreateMock":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":330,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":23,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":203,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":388,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":376,"org.easymock.tests.UsageOverloadedMethodTest.overloading":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":332,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":6,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":252,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":175,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":142,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":251,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":276,"org.easymock.tests.MockClassControlTest.testEquals":180,"org.easymock.tests2.EasyMockSupportClassTest.testAll":68,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":61,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":31,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":101,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":404,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":385,"org.easymock.tests2.CaptureTest.testCaptureAll":268,"org.easymock.tests2.UsageConstraintsTest.testMatches":253,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":190,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":364,"org.easymock.samples.ExampleTest.voteForRemovals":113,"org.easymock.tests.UsageVarargTest.allKinds":124,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":125,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":386,"org.easymock.samples.BasicClassMockTest.testPrintContent":52,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":39,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":397,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":12,"org.easymock.tests2.UsageConstraintsTest.greaterThan":255,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":317,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":393,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":100,"org.easymock.samples.ExampleTest.voteForRemoval":110,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":312,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":234,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":340,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":337,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":356,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":409,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":95,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":42,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":59,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":288,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":200,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":315,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":7,"org.easymock.tests2.CaptureTest.testCaptureFirst":280,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":201,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":220,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":382,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":138,"org.easymock.tests2.UsageTest.moreThanOneArgument":214,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":236,"org.easymock.tests2.CaptureTest.testCapture2_2446744":279,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":81,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":123,"org.easymock.tests.GenericTest.testBridgedEquals":174,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":172,"org.easymock.tests.UsageExpectAndReturnTest.longType":134,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":198,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":383,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":32,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":82,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":260,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":30,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":187,"org.easymock.tests.UsageCallCountTest.tooManyCalls":173,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":331,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":139,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":19,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":38,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":85,"org.easymock.tests.MockingTest.testNiceClassMocking":296,"org.easymock.tests.MockingTest.testClassMocking":295,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":389,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":73,"org.easymock.tests2.UsageConstraintsTest.testContains":250,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":46,"org.easymock.tests2.UsageConstraintsTest.testFind":242,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":13,"org.easymock.tests.MockTypeTest.fromEasyMockClass":354,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":196,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":361,"org.easymock.tests.UsageExpectAndReturnTest.object":141,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":96,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":205,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":119,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":290,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":183,"org.easymock.tests.UsageTest.exactCallCountByLastCall":130,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":157,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":185,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":286,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":147,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":115,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":162,"org.easymock.tests.MockClassControlTest.testHashCode":305,"org.easymock.tests2.EasyMockSupportTest.testVerify":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":325,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":186,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":161,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":402,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":406,"org.easymock.tests.UsageVarargTest.varargCharAccepted":118,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":221,"org.easymock.tests2.UsageTest.openCallCountByLastCall":217,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":208,"org.easymock.tests.DefaultClassInstantiatorTest.object":306,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":391,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":326,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":36,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":346,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":98,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":304,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":20,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":71,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":303,"org.easymock.tests2.UsageTest.resumeIfFailure":219,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":53,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":407,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":10,"org.easymock.tests2.StubTest.stubWithReturnValue":41,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":287,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":140,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":261,"org.easymock.tests2.SerializationTest.testAllMockedMethod":67,"org.easymock.samples.SupportTest.voteForRemovals":106,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":297,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":26,"org.easymock.tests.UsageExpectAndThrowTest.object":24,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":258,"org.easymock.tests2.DelegateToTest.testWrongClass":284,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":177,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":178,"org.easymock.tests.UsageStrictMockTest.range":154,"org.easymock.samples.ConstructorCalledMockTest.testTax":48,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":84,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":25,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":78,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":314,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":374,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":377,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":417,"org.easymock.tests2.CaptureTest.testCaptureNone":275,"org.easymock.tests.UsageUnorderedTest.message":179,"org.easymock.tests.UsageVerifyTest.twoReturns":126,"org.easymock.tests.UsageVarargTest.varargByteAccepted":122,"org.easymock.tests2.ThreadingTest.testThreadSafe":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":328,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":171,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":51,"org.easymock.tests2.CaptureTest.testCapture_2617107":269,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":353,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":5,"org.easymock.tests2.UsageConstraintsTest.any":248,"org.easymock.tests2.StubTest.stub":197,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":371,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":9,"org.easymock.tests.UsageExpectAndThrowTest.longType":17,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":310,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":370,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":223,"org.easymock.tests2.SerializationTest.testClass":66,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":266,"org.easymock.tests.LimitationsTest.mockNativeMethod":63,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":150,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":62,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":103,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":226,"org.easymock.tests2.NameTest.nameForMocksControl":401,"org.easymock.tests2.MockedExceptionTest.testMockedException":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":318,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":2,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":18,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":58,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":90,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":79,"org.easymock.tests.MockingTest.testNicePartialClassMocking":57,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":94,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":415,"org.easymock.tests2.CaptureTest.testCaptureLast":274,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":352,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":89,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":246,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":259,"org.easymock.tests.MockingTest.testTwoMocks":55,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":131,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":22,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":218,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":263,"org.easymock.samples.ExampleTest.removeNonExistingDocument":347,"org.easymock.tests.UsageStrictMockTest.differentMethods":155,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":368,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":308,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":235,"org.easymock.tests2.MockBuilderTest.testCreateMockString":83,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":301,"org.easymock.tests.UsageExpectAndThrowTest.floatType":16,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":319,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":316,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":228,"org.easymock.tests.UsageVerifyTest.twoThrows":0,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":380,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":70,"org.easymock.samples.ExampleTest.voteAgainstRemoval":111,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":99,"org.easymock.tests.LimitationsTest.privateConstructor":299,"org.easymock.tests2.UsageConstraintsTest.testNotNull":262,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":44,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":40,"org.easymock.tests2.UsageTest.defaultResetToNice":395,"org.easymock.samples.ExampleTest.voteAgainstRemovals":108,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":146,"org.easymock.tests.UsageVarargTest.differentLength":348,"org.easymock.tests2.CallbackTest.callback":212,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":338,"org.easymock.tests.UsageTest.openCallCountByLastCall":128,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":238,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":4,"org.easymock.tests.UsageCallCountTest.tooFewCalls":169,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":87,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":379,"org.easymock.tests.UsageThrowableTest.throwCheckedException":37,"org.easymock.tests.MockingTest.testStrictClassMocking":294,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":3,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":88,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":86,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":373,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":232,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":230,"org.easymock.tests.ObjectMethodsTest.testHashCode":392,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":416,"org.easymock.tests2.NameTest.nameForNiceMock":400,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":237,"org.easymock.tests2.DependencyTest.testInterfaceMocking":210,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":291,"org.easymock.samples.ExampleTest.addDocument":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":329,"org.easymock.tests2.DelegateToTest.testStubDelegate":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":333,"org.easymock.tests2.AnswerTest.stubAnswer":229,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":152,"org.easymock.tests.UsageVarargTest.varargLongAccepted":121,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":156,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":149,"org.easymock.tests.UsageExpectAndReturnTest.floatType":133,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":65,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":49,"org.easymock.tests.UsageThrowableTest.noUpperLimit":184,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":256,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":239,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":342,"org.easymock.tests2.SerializationTest.test":231,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":272,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":307,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":132,"org.easymock.tests2.UsageConstraintsTest.testSame":244,"org.easymock.samples.SupportTest.addDocument":105,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":320,"org.easymock.tests.GenericTest.testPackageScope":60,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":359,"org.easymock.tests2.NameTest.nameForMock":398,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":143,"org.easymock.tests2.UsageStrictMockTest.differentMethods":225,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":339,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":135,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":28,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":182,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":194,"org.easymock.tests2.MockedExceptionTest.testRealException":47,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":357,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":410,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":414,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":222,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":159,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":375,"org.easymock.tests2.NameTest.nameForStrictMock":399,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":336,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":195,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":93,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":343,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":412,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":257,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":309,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":74,"org.easymock.tests2.UsageStrictMockTest.range":224,"org.easymock.tests2.UsageConstraintsTest.lessThan":264,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":345,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":335,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":199,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":292,"org.easymock.tests2.CaptureTest.testCaptureRightOne":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":324,"org.easymock.tests2.UsageConstraintsTest.testOr":245,"org.easymock.tests.UsageRangeTest.combination":192,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":91,"org.easymock.tests.UsageTest.wrongArguments":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":321,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":64,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":136,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":144,"org.easymock.tests.UsageVarargTest.varargShortAccepted":120,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":311,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":390,"org.easymock.tests2.UsageConstraintsTest.cmpTo":249,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":43,"org.easymock.tests2.CaptureTest.testCaptureFromStub":278,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":365,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":75,"org.easymock.tests.UsageTest.unexpectedCallWithArray":349,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":362,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":170,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":145,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":153,"org.easymock.tests2.UsageConstraintsTest.constraints":240,"org.easymock.samples.ExampleTest.addAndChangeDocument":114,"org.easymock.tests.UsageStrictMockTest.testVerify":363,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":104,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":151,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":384,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":273,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":165,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":102,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":137,"org.easymock.tests.LimitationsTest.abstractClass":298,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":166,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":381,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":413,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":116,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":204}}]

[{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"parameterType","type":"parameterType"}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[1,2,3,4,5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:163","failures":[6,7],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[74,75,76,77],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[78,79],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[80,10,28,34],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[81,57,82,83,84,85,86],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"buffer","i":"matches"}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[87,88,89],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:190","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:971","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[31],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[90],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:35","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[91,92,93],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[94,95,96,97,98],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","name":"methodName"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,8,162,81,163,164,9,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,10,11,12,13,222,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,223,224,225,87,226,38,227,39,228,229,230,231,232,233,40,41,42,43,44,45,46,47,48,49,50,51,52,53,234,235,236,237,238,239,240,241,242,243,244,245,246,74,75,76,247,248,249,250,6,7,251,252,253,254,255,256,96,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,90,54,274,275,88,97,98,276,277,89,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,55,56,57,310,82,83,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,58,59,337,84,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,60,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,61,62,63,64,65,66,67,68,69,70,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,71,72,410,411,412,413,414,415,416,417,418,419,420,73,421,78,422,423,79,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,91,495,496,497,498,499,500,501],"status":-1,"binaryOperator":"(int <= int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[236,243,360,363],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[292],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"actualTypeArgument","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[99,100,101,102,103,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,128,137,138,139,140,141,142,144,145,146,153,161,8,163,164,165,166,167,168,169,171,172,174,175,178,181,183,184,195,198,208,214,217,218,221,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,224,225,87,226,38,39,229,230,233,40,41,42,43,45,46,47,48,49,50,53,234,235,236,237,238,239,240,241,242,243,244,245,246,74,75,76,247,250,6,7,251,96,257,258,260,267,269,270,271,272,54,88,98,279,280,281,282,283,284,285,286,287,288,293,294,305,306,307,308,309,55,56,310,82,83,336,59,338,339,340,342,352,354,355,356,357,60,358,359,383,61,62,65,66,67,68,69,70,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,71,410,411,412,414,415,417,418,419,420,73,422,423,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,455,456,458,462,463,464,465,466,467,472,482,483,484,485,486,501],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[81,82,83,84,86],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[121,141,146,147,502,503,252,255,259,504,265],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:622","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[21,71],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[74,75,76,77],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,8,162,81,163,164,9,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,10,11,12,13,222,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,223,224,225,87,226,38,227,39,228,229,230,231,232,233,40,41,42,43,44,45,46,47,48,49,50,51,52,53,234,235,236,237,238,239,240,241,242,243,244,245,246,74,75,76,247,248,249,250,6,7,251,252,253,254,255,256,96,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,90,54,274,275,88,97,98,276,277,89,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,55,56,57,310,82,83,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,58,59,337,84,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,60,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,61,62,63,64,65,66,67,68,69,70,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,71,72,410,411,412,413,414,415,416,417,418,419,420,73,421,78,422,423,79,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,91,495,496,497,498,499,500,501],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[255],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.EasyMock:1531","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[8,81,163,172,57,310,82,83,59,84,338,342,505,85,506,86],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[74,75,76],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"hashCodeMethod"}},{"position":"org.easymock.internal.Range:52","failures":[81,163,310,84,338,406,407],"status":-1,"binaryOperator":"(int) == (int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:557","failures":[100,101,102,103,105,107,112,113,114,114,115,115,116,117,118,119,120,128,137,138,139,140,141,142,144,145,146,153,8,81,163,169,170,171,172,174,176,177,178,181,182,183,184,195,198,208,214,217,218,219,220,221,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,228,229,230,231,232,233,40,41,43,44,47,48,49,50,51,52,53,234,235,236,237,238,239,240,241,242,243,244,245,74,75,247,248,249,250,6,7,253,96,258,260,264,267,268,269,270,271,272,54,97,98,276,278,279,280,285,286,287,288,289,290,291,293,295,55,56,57,310,82,83,327,333,59,84,338,341,342,345,346,349,352,354,355,356,357,60,358,359,371,378,380,381,383,61,62,63,64,65,66,67,68,69,70,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,71,72,78,422,423,79,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,455,456,458,464,479,480,481,482,483,484,485,486,487,488,489,500],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[87,88,89],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[8,81,163,172,173,179,180,224,225,87,226,310,82,83,58,59,84,338,342,344,347,348,505],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[409],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksBehavior:200","failures":[219],"status":-1,"binaryOperator":"(((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:117","failures":[101,169,38,39,247,250,7,378],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:324","failures":[82,424,425],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":13,"org.easymock.tests2.UsageTest.argumentsOrdered":180,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":341,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":244,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":321,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":175,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":99,"org.easymock.tests2.DelegateToTest.testReturnException":229,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":355,"org.easymock.tests.MockingTest.testPartialClassMocking":455,"org.easymock.tests.MockClassControlTest.testToString":473,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":223,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":480,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":202,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":429,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":198,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":505,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":138,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":19,"org.easymock.tests2.UsageTest.wrongArguments":173,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":61,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":134,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":283,"org.easymock.samples.ExampleTest.answerVsDelegate":101,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":302,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":460,"org.easymock.tests2.UsageConstraintsTest.testNull":15,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":270,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":478,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":243,"org.easymock.tests2.CaptureTest.testPrimitive":43,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":65,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":448,"org.easymock.tests.UsageTest.moreThanOneArgument":342,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":269,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":484,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":405,"org.easymock.tests.UsageTest.argumentsOrdered":348,"org.easymock.tests.UsageVarargTest.varargIntAccepted":412,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":326,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":66,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":3,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":251,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":187,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":158,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":257,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":313,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":70,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":128,"org.easymock.tests.ReplayStateInvalidUsageTest.times":374,"org.easymock.tests2.DependencyTest.testClassMocking":135,"org.easymock.tests2.AnswerTest.answer":247,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":328,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":168,"org.easymock.tests2.CaptureTest.testAnd":40,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":299,"org.easymock.tests2.UsageTest.strictResetToDefault":171,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":88,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":255,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":483,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":238,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":287,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":409,"org.easymock.tests2.DelegateToTest.testDelegate":233,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":444,"org.easymock.tests.LimitationsTest.mockFinalMethod":353,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":60,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":309,"org.easymock.tests2.DependencyTest.testClassMockingSupport":136,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":499,"org.easymock.tests2.CaptureTest.testCapture1_2446744":44,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":90,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":442,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":166,"org.easymock.tests.UsageThrowableTest.throwError":78,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":368,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":301,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":498,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":159,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":486,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":502,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":216,"org.easymock.samples.PartialClassMockTest.testGetArea":113,"org.easymock.tests.MockingTest.testInterfaceMocking":457,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":369,"org.easymock.tests2.CompareToTest.testLessOrEqual":80,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":67,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":450,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":430,"org.easymock.tests2.UsageTest.niceToStrict":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":203,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":311,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":96,"org.easymock.tests2.MockBuilderTest.testCreateMock":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":211,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":131,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":438,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":239,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":298,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":291,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":462,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":281,"org.easymock.tests.UsageOverloadedMethodTest.overloading":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":213,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":25,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":381,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":396,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":278,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":24,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":92,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":49,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":413,"org.easymock.tests.MockClassControlTest.testEquals":477,"org.easymock.tests2.EasyMockSupportClassTest.testAll":195,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":294,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":446,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":167,"org.easymock.tests2.CaptureTest.testCaptureAll":41,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":307,"org.easymock.tests.MockNameTest.defaultName":421,"org.easymock.tests2.UsageConstraintsTest.testMatches":26,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":485,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":366,"org.easymock.samples.ExampleTest.voteForRemovals":105,"org.easymock.tests.UsageVarargTest.allKinds":73,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":310,"org.easymock.samples.BasicClassMockTest.testPrintContent":110,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":308,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":426,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":160,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":155,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":232,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":358,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":496,"org.easymock.tests2.UsageConstraintsTest.greaterThan":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":196,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":286,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":276,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":497,"org.easymock.samples.ExampleTest.voteForRemoval":102,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":218,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":277,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":0,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":303,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":188,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":273,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":170,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":359,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":318,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":236,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":193,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":354,"org.easymock.tests2.CaptureTest.testCaptureFirst":53,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":317,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":237,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":182,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":384,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":392,"org.easymock.tests2.UsageTest.moreThanOneArgument":172,"org.easymock.tests2.CaptureTest.testCapture2_2446744":52,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":220,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":264,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":329,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":420,"org.easymock.tests.GenericTest.testBridgedEquals":296,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":469,"org.easymock.tests.UsageExpectAndReturnTest.longType":388,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":234,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":305,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":447,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":428,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":33,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":445,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":488,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":482,"org.easymock.tests.UsageCallCountTest.tooManyCalls":470,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":464,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":212,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":393,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":133,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":434,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":425,"org.easymock.tests.MockingTest.testNiceClassMocking":461,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":140,"org.easymock.tests.MockingTest.testClassMocking":453,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":463,"org.easymock.tests2.UsageConstraintsTest.testContains":23,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":95,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":118,"org.easymock.tests2.UsageConstraintsTest.testFind":14,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":280,"org.easymock.tests.MockTypeTest.fromEasyMockClass":300,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":39,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":335,"org.easymock.tests.UsageExpectAndReturnTest.object":395,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":54,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":132,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":242,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":415,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":363,"org.easymock.tests.UsageTest.exactCallCountByLastCall":349,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":316,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":479,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":406,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":121,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":410,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":401,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":380,"org.easymock.tests.MockClassControlTest.testHashCode":476,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":149,"org.easymock.tests2.EasyMockSupportTest.testVerify":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":205,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":407,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":290,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":378,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":165,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":9,"org.easymock.tests.UsageVarargTest.varargCharAccepted":414,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":490,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":334,"org.easymock.tests2.UsageTest.openCallCountByLastCall":176,"org.easymock.tests.DefaultClassInstantiatorTest.object":491,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":245,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":289,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":361,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":436,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":206,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":79,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":126,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":148,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":475,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":97,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":435,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":402,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":487,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":474,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":214,"org.easymock.tests2.UsageTest.resumeIfFailure":181,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":297,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":186,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":357,"org.easymock.tests2.StubTest.stubWithReturnValue":184,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":259,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":394,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":34,"org.easymock.tests2.SerializationTest.testAllMockedMethod":76,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":327,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":5,"org.easymock.samples.SupportTest.voteForRemovals":112,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":292,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":151,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":441,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":77,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":333,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":248,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":481,"org.easymock.tests.UsageExpectAndThrowTest.object":439,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":31,"org.easymock.tests2.DelegateToTest.testWrongClass":231,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":55,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":56,"org.easymock.samples.ConstructorCalledMockTest.testTax":114,"org.easymock.tests.UsageStrictMockTest.range":84,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":190,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":241,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":139,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":440,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":192,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":347,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":282,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":451,"org.easymock.tests2.CaptureTest.testCaptureNone":48,"org.easymock.tests.UsageUnorderedTest.message":57,"org.easymock.tests.UsageVerifyTest.twoReturns":83,"org.easymock.tests.UsageVarargTest.varargByteAccepted":419,"org.easymock.tests2.ThreadingTest.testThreadSafe":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":209,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":467,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":109,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":364,"org.easymock.tests2.CaptureTest.testCapture_2617107":42,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":501,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":64,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":331,"org.easymock.tests2.UsageConstraintsTest.any":21,"org.easymock.tests2.StubTest.stub":183,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":373,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":489,"org.easymock.tests.UsageExpectAndThrowTest.longType":432,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":332,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":356,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":91,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":372,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":162,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":153,"org.easymock.tests2.SerializationTest.testClass":74,"org.easymock.tests.LimitationsTest.mockNativeMethod":352,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":404,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":295,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":125,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":164,"org.easymock.tests2.NameTest.nameForMocksControl":226,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":127,"org.easymock.tests2.MockedExceptionTest.testMockedException":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":197,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":346,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":458,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":433,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":227,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":267,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":260,"org.easymock.tests.MockingTest.testNicePartialClassMocking":456,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":272,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":123,"org.easymock.tests2.CaptureTest.testCaptureLast":47,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":1,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":500,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":146,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":18,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":32,"org.easymock.tests.MockingTest.testTwoMocks":454,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":147,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":385,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":437,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":179,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":36,"org.easymock.samples.ExampleTest.removeNonExistingDocument":106,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":130,"org.easymock.tests.UsageStrictMockTest.differentMethods":338,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":370,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":150,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":493,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":219,"org.easymock.tests2.MockBuilderTest.testCreateMockString":266,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":471,"org.easymock.tests.UsageExpectAndThrowTest.floatType":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":199,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":194,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":250,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":122,"org.easymock.tests.UsageVerifyTest.twoThrows":82,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":208,"org.easymock.samples.ExampleTest.voteAgainstRemoval":103,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":449,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":322,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":98,"org.easymock.tests.LimitationsTest.privateConstructor":351,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":503,"org.easymock.tests2.UsageConstraintsTest.testNotNull":35,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":427,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":116,"org.easymock.tests2.UsageTest.defaultResetToNice":178,"org.easymock.samples.ExampleTest.voteAgainstRemovals":100,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":323,"org.easymock.tests.UsageVarargTest.differentLength":416,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":124,"org.easymock.tests2.CallbackTest.callback":169,"org.easymock.tests2.UsageConstraintsTest.equals":222,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":274,"org.easymock.tests.UsageTest.openCallCountByLastCall":345,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":10,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":63,"org.easymock.tests.UsageCallCountTest.tooFewCalls":465,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":142,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":284,"org.easymock.tests.UsageThrowableTest.throwCheckedException":424,"org.easymock.tests.MockingTest.testStrictClassMocking":452,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":145,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":72,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":141,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":129,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":375,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":144,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":7,"org.easymock.tests.ObjectMethodsTest.testHashCode":362,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":2,"org.easymock.tests2.NameTest.nameForNiceMock":87,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":221,"org.easymock.tests2.DependencyTest.testInterfaceMocking":137,"org.easymock.samples.ExampleTest.addDocument":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":215,"org.easymock.tests2.DelegateToTest.testStubDelegate":230,"org.easymock.tests2.AnswerTest.stubAnswer":6,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":59,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":261,"org.easymock.tests.UsageVarargTest.varargLongAccepted":418,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":320,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":403,"org.easymock.tests.UsageExpectAndReturnTest.floatType":387,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":120,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":115,"org.easymock.tests.UsageThrowableTest.noUpperLimit":422,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":157,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":29,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":382,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":11,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":185,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":45,"org.easymock.tests2.SerializationTest.test":75,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":93,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":492,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":386,"org.easymock.tests2.UsageConstraintsTest.testSame":16,"org.easymock.samples.SupportTest.addDocument":111,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":143,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":200,"org.easymock.tests.GenericTest.testPackageScope":293,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":408,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":315,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":156,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":459,"org.easymock.tests2.NameTest.nameForMock":224,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":397,"org.easymock.tests2.UsageStrictMockTest.differentMethods":163,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":265,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":275,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":389,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":443,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":360,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":288,"org.easymock.tests2.MockedExceptionTest.testRealException":119,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":304,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":325,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":4,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":324,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":62,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":377,"org.easymock.tests2.NameTest.nameForStrictMock":225,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":256,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":38,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":271,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":189,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":494,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":30,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":85,"org.easymock.tests.ErrorMessageTest.testGetters":506,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":253,"org.easymock.tests2.UsageStrictMockTest.range":81,"org.easymock.tests2.UsageConstraintsTest.lessThan":37,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":152,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":94,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":319,"org.easymock.tests2.CaptureTest.testCaptureRightOne":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":204,"org.easymock.tests2.UsageConstraintsTest.testOr":17,"org.easymock.tests.UsageRangeTest.combination":285,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":268,"org.easymock.tests.UsageTest.wrongArguments":344,"org.easymock.tests2.MockBuilderTest.testWithConstructor":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":201,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":472,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":390,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":398,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":312,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":495,"org.easymock.tests.UsageVarargTest.varargShortAccepted":417,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":468,"org.easymock.tests2.UsageConstraintsTest.cmpTo":22,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":249,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":314,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":177,"org.easymock.tests2.CaptureTest.testCaptureFromStub":51,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":367,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":254,"org.easymock.tests.UsageTest.unexpectedCallWithArray":343,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":58,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":466,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":504,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":399,"org.easymock.tests2.UsageConstraintsTest.constraints":12,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":337,"org.easymock.samples.ExampleTest.addAndChangeDocument":107,"org.easymock.tests.UsageStrictMockTest.testVerify":340,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":108,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":336,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":306,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":46,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":68,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":391,"org.easymock.tests.LimitationsTest.abstractClass":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":69,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":383,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":411,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":86,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":240}}]

[{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[0,1,2,3],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[4,5,6,7,8,9],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:760","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[10,11,12,13,14,15,16,17,24,18,19,20,21,22,23],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:154","sourceCode":"return (java.lang.String + \".\") + java.lang.String","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mockName":"defaultValue","methodName":"defaultValue"}},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[25,26,27,28,29,30,31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[32,33,34],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[35,36,37,38],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.reportLastControl(this.org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"control":"control","this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[39,40,41,42,43,44],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:124","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"failures":[45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[46,47,48,49],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[50,51,52,25,53,54,55,56,57,58,59,60,61,62,63,64,65,10,11,12,13,14,15,16,17,24,18,19,20,21,22,46,47,48,66,26,67,27,28,29,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,35,119,120,36,37,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,4,266,5,267,268,269,270,271,272,273,274,275,276,277,278,279,6,7,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,39,40,41,42,298,43,299,44,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,8,330,331,332,333,334,335,30,336,337,338,38,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,31,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,9,489,490,491,492,493,494,495,496,497],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:217","failures":[50,51,52,25,53,54,55,56,58,59,60,61,62,63,10,11,12,13,15,16,17,24,18,19,22,46,47,48,26,27,29,70,76,79,82,83,85,86,88,91,94,95,96,97,98,99,109,110,111,112,114,115,116,118,120,126,136,139,149,155,158,159,161,162,163,167,168,170,172,173,174,175,176,177,180,185,192,193,195,196,197,198,199,200,203,204,205,206,207,208,209,210,211,213,214,215,216,217,223,233,242,250,252,254,4,266,267,272,277,280,281,282,283,284,285,286,287,288,302,304,305,306,308,309,311,312,313,314,315,359,362,363,364,373,374,376,380,403,404,405,406,407,408,409,412,413,416,417,418,428,429,430,432,433,435,436,437,31,439,441,449,450,464,465,466,467,471,472,474,479,484],"status":-1,"binaryOperator":"(boolean) && ((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[10,12,19,75,76,79,81,82,84,94,99],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return org.easymock.internal.AndroidSupport.boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:90","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[498,499,500],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[50,61,62,64,65,46,48,70,71,72,102,106,109,110,111,112,115,116,133,134,136,138,139,140,141,142,144,145,146,147,149,150,151,152,153,154,155,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,240,241,242,244,245,246,247,248,249,250,251,252,253,254,256,257,258,259,260,289,294,39,40,41,42,298,43,44,300,301,302,303,322,323,324,325,326,327,328,329,370,371,372,373,374,376,379,411,412,413,414,415,416],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Contains:40","failures":[501],"status":-1,"binaryOperator":"((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[502,503,504,505,358,404],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[50,51,52,25,53,54,55,56,57,58,59,60,61,62,63,64,65,10,11,12,13,14,15,16,17,24,18,19,20,21,22,46,47,48,66,26,67,27,28,29,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,35,119,120,36,37,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,4,266,5,267,268,269,270,271,272,273,274,275,276,277,278,279,6,7,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,39,40,41,42,298,43,299,44,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,8,330,331,332,333,334,335,30,336,337,338,38,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,31,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,9,489,490,491,492,493,494,495,496,497],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[502,503,504,505,358,404],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","args":"args","cstr":"cstr"}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[506],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:172","failures":[252,294],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:210","failures":[64,64,65,65,46,70,71,181,256],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[198,288,507,508,407,435,436],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[4,5,6,7,8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.RecordState:327","failures":[394,395,447,448],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[160,161,167,168,502,509,503,510,504,505,511,357,358,359,362,363,404],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":76,"org.easymock.tests2.UsageTest.argumentsOrdered":168,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":356,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":215,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":234,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":342,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":163,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":51,"org.easymock.tests2.DelegateToTest.testReturnException":26,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":317,"org.easymock.tests.MockingTest.testPartialClassMocking":373,"org.easymock.tests.MockClassControlTest.testToString":324,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":218,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":398,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":143,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":469,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":139,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":204,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":83,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":464,"org.easymock.tests2.UsageTest.wrongArguments":161,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":132,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":386,"org.easymock.samples.ExampleTest.answerVsDelegate":25,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":294,"org.easymock.tests2.UsageConstraintsTest.testNull":79,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":378,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":175,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":214,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":329,"org.easymock.tests2.CaptureTest.testPrimitive":13,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":468,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":488,"org.easymock.tests.UsageTest.moreThanOneArgument":357,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":174,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":331,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":420,"org.easymock.tests.UsageTest.argumentsOrdered":363,"org.easymock.tests.UsageVarargTest.varargIntAccepted":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":347,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":388,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":244,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":104,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":238,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":30,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":392,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":499,"org.easymock.tests.ReplayStateInvalidUsageTest.times":460,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":126,"org.easymock.tests2.DependencyTest.testClassMocking":201,"org.easymock.tests2.AnswerTest.answer":118,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":349,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":227,"org.easymock.tests2.CaptureTest.testAnd":10,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":291,"org.easymock.tests2.UsageTest.strictResetToDefault":159,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":183,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":248,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":330,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":209,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":382,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":424,"org.easymock.tests2.DelegateToTest.testDelegate":29,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":484,"org.easymock.tests.LimitationsTest.mockFinalMethod":303,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":320,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":369,"org.easymock.tests2.DependencyTest.testClassMockingSupport":202,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":449,"org.easymock.tests2.CaptureTest.testCapture1_2446744":14,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":179,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":482,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":225,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":454,"org.easymock.tests.UsageThrowableTest.throwError":280,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":293,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":396,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":239,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":157,"org.easymock.samples.PartialClassMockTest.testGetArea":50,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":455,"org.easymock.tests.MockingTest.testInterfaceMocking":375,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":389,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":444,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":496,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":470,"org.easymock.tests2.UsageTest.niceToStrict":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":144,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":34,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":334,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":250,"org.easymock.tests2.MockBuilderTest.testCreateMock":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":152,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":129,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":502,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":478,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":210,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":290,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":448,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":425,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":384,"org.easymock.tests.UsageOverloadedMethodTest.overloading":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":148,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":439,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":89,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":417,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":273,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":88,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":18,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":307,"org.easymock.tests2.EasyMockSupportClassTest.testAll":136,"org.easymock.tests.MockClassControlTest.testEquals":328,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":413,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":509,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":486,"org.easymock.tests2.CaptureTest.testCaptureAll":11,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":226,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":367,"org.easymock.tests.MockNameTest.defaultName":497,"org.easymock.tests2.UsageConstraintsTest.testMatches":90,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":452,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":332,"org.easymock.samples.ExampleTest.voteForRemovals":56,"org.easymock.tests.UsageVarargTest.allKinds":315,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":434,"org.easymock.samples.BasicClassMockTest.testPrintContent":62,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":368,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":286,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":194,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":28,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":235,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":321,"org.easymock.tests2.UsageConstraintsTest.greaterThan":92,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":137,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":381,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":186,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":44,"org.easymock.samples.ExampleTest.voteForRemoval":53,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":190,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":187,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":295,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":105,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":178,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":416,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":158,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":339,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":207,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":134,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":316,"org.easymock.tests2.CaptureTest.testCaptureFirst":22,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":38,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":208,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":170,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":442,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":269,"org.easymock.tests2.UsageTest.moreThanOneArgument":160,"org.easymock.tests2.CaptureTest.testCapture2_2446744":21,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":192,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":350,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":314,"org.easymock.tests.GenericTest.testBridgedEquals":415,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":432,"org.easymock.tests.UsageExpectAndReturnTest.longType":266,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":205,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":365,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":487,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":490,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":97,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":485,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":394,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":8,"org.easymock.tests.UsageCallCountTest.tooManyCalls":433,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":500,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":153,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":270,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":131,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":474,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":285,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":110,"org.easymock.tests.MockingTest.testNiceClassMocking":379,"org.easymock.tests.MockingTest.testClassMocking":371,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":426,"org.easymock.tests2.UsageConstraintsTest.testContains":87,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":242,"org.easymock.tests2.UsageConstraintsTest.testFind":78,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":419,"org.easymock.tests.MockTypeTest.fromEasyMockClass":292,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":402,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":263,"org.easymock.tests.UsageExpectAndReturnTest.object":272,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":180,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":130,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":213,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":309,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":494,"org.easymock.tests.UsageTest.exactCallCountByLastCall":364,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":338,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":421,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":397,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":511,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":71,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":278,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":304,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":31,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":229,"org.easymock.tests.MockClassControlTest.testHashCode":327,"org.easymock.tests2.EasyMockSupportTest.testVerify":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":146,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":498,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":422,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":447,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":437,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":224,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":171,"org.easymock.tests.UsageVarargTest.varargCharAccepted":308,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":297,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":355,"org.easymock.tests2.UsageTest.openCallCountByLastCall":164,"org.easymock.tests.DefaultClassInstantiatorTest.object":39,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":32,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":216,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":446,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":492,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":476,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":147,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":283,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":124,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":228,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":184,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":326,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":475,"org.easymock.tests.CapturesMatcherTest.test":23,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":279,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":155,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":325,"org.easymock.tests2.UsageTest.resumeIfFailure":169,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":289,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":103,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":319,"org.easymock.tests2.StubTest.stubWithReturnValue":69,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":253,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":98,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":271,"org.easymock.tests2.SerializationTest.testAllMockedMethod":48,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":348,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":503,"org.easymock.samples.SupportTest.voteForRemovals":60,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":411,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":231,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":481,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":49,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":354,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":35,"org.easymock.tests.UsageExpectAndThrowTest.object":479,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":399,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":95,"org.easymock.tests2.DelegateToTest.testWrongClass":27,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":9,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":489,"org.easymock.tests.UsageStrictMockTest.range":407,"org.easymock.samples.ConstructorCalledMockTest.testTax":64,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":107,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":212,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":109,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":480,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":252,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":462,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":133,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":385,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":504,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":445,"org.easymock.tests2.CaptureTest.testCaptureNone":24,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":1,"org.easymock.tests.UsageUnorderedTest.message":288,"org.easymock.tests.UsageVerifyTest.twoReturns":436,"org.easymock.tests.UsageVarargTest.varargByteAccepted":313,"org.easymock.tests2.ThreadingTest.testThreadSafe":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":150,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":430,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":495,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":61,"org.easymock.tests2.CaptureTest.testCapture_2617107":12,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":510,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":451,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":352,"org.easymock.tests2.UsageConstraintsTest.any":85,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":459,"org.easymock.tests2.StubTest.stub":68,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":395,"org.easymock.tests.UsageExpectAndThrowTest.longType":472,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":318,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":353,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":298,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":458,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":197,"org.easymock.tests2.SerializationTest.testClass":46,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":233,"org.easymock.tests.LimitationsTest.mockNativeMethod":302,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":414,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":7,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":123,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":200,"org.easymock.tests2.NameTest.nameForMocksControl":222,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":125,"org.easymock.tests2.MockedExceptionTest.testMockedException":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":138,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":361,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":473,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":262,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":376,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":172,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":254,"org.easymock.tests.MockingTest.testNicePartialClassMocking":374,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":177,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":121,"org.easymock.tests2.CaptureTest.testCaptureLast":17,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":450,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":116,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":82,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":96,"org.easymock.tests.MockingTest.testTwoMocks":372,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":117,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":264,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":477,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":167,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":100,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":3,"org.easymock.samples.ExampleTest.removeNonExistingDocument":57,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":456,"org.easymock.tests.UsageStrictMockTest.differentMethods":408,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":128,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":230,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":41,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":191,"org.easymock.tests2.MockBuilderTest.testCreateMockString":260,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":322,"org.easymock.tests.UsageExpectAndThrowTest.floatType":471,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":140,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":91,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":135,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":120,"org.easymock.tests.UsageVerifyTest.twoThrows":435,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":72,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":149,"org.easymock.samples.ExampleTest.voteAgainstRemoval":54,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":443,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":343,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":185,"org.easymock.tests.LimitationsTest.privateConstructor":301,"org.easymock.tests2.UsageConstraintsTest.testNotNull":99,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":240,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":287,"org.easymock.tests2.UsageTest.defaultResetToNice":166,"org.easymock.samples.ExampleTest.voteAgainstRemovals":52,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":277,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":344,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":122,"org.easymock.tests.UsageVarargTest.differentLength":310,"org.easymock.tests2.CallbackTest.callback":223,"org.easymock.tests2.UsageConstraintsTest.equals":77,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":181,"org.easymock.tests.UsageTest.openCallCountByLastCall":360,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":73,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":466,"org.easymock.tests.UsageCallCountTest.tooFewCalls":428,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":112,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":387,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":2,"org.easymock.tests.UsageThrowableTest.throwCheckedException":284,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":505,"org.easymock.tests.MockingTest.testStrictClassMocking":370,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":401,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":115,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":127,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":111,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":461,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":114,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":37,"org.easymock.tests.ObjectMethodsTest.testHashCode":493,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":193,"org.easymock.tests2.NameTest.nameForNiceMock":221,"org.easymock.tests2.DependencyTest.testInterfaceMocking":203,"org.easymock.samples.ExampleTest.addDocument":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":156,"org.easymock.tests2.DelegateToTest.testStubDelegate":67,"org.easymock.tests2.AnswerTest.stubAnswer":36,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":405,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":255,"org.easymock.tests.UsageVarargTest.varargLongAccepted":312,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":341,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":6,"org.easymock.tests.UsageExpectAndReturnTest.floatType":4,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":70,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":65,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":440,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":93,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":237,"org.easymock.tests.UsageThrowableTest.noUpperLimit":281,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":74,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":102,"org.easymock.tests2.SerializationTest.test":47,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":15,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":45,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":40,"org.easymock.tests2.UsageConstraintsTest.testSame":80,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":265,"org.easymock.samples.SupportTest.addDocument":59,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":113,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":457,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":141,"org.easymock.tests.GenericTest.testPackageScope":412,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":423,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":337,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":236,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":377,"org.easymock.tests2.NameTest.nameForMock":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":274,"org.easymock.tests2.UsageStrictMockTest.differentMethods":199,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":259,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":182,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":5,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":483,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":491,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":383,"org.easymock.tests2.MockedExceptionTest.testRealException":243,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":296,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":346,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":196,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":345,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":465,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":463,"org.easymock.tests2.NameTest.nameForStrictMock":220,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":249,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":33,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":261,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":176,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":106,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":507,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":42,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":94,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":246,"org.easymock.tests2.UsageStrictMockTest.range":198,"org.easymock.tests2.UsageConstraintsTest.lessThan":101,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":506,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":232,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":145,"org.easymock.tests2.CaptureTest.testCaptureRightOne":19,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":0,"org.easymock.tests2.UsageConstraintsTest.testOr":81,"org.easymock.tests.UsageRangeTest.combination":380,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":173,"org.easymock.tests.UsageTest.wrongArguments":359,"org.easymock.tests2.MockBuilderTest.testWithConstructor":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":142,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":323,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":267,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":335,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":43,"org.easymock.tests.UsageVarargTest.varargShortAccepted":311,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":431,"org.easymock.tests2.UsageConstraintsTest.cmpTo":86,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":119,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":336,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":165,"org.easymock.tests2.CaptureTest.testCaptureFromStub":20,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":453,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":247,"org.easymock.tests.UsageTest.unexpectedCallWithArray":358,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":404,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":429,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":276,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":406,"org.easymock.tests2.UsageConstraintsTest.constraints":75,"org.easymock.samples.ExampleTest.addAndChangeDocument":58,"org.easymock.tests2.ConstraintsToStringTest.containsToString":501,"org.easymock.tests.UsageStrictMockTest.testVerify":410,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":63,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":403,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":366,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":16,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":390,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":268,"org.easymock.tests.LimitationsTest.abstractClass":300,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":441,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":391,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":508,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":211,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":305}}]

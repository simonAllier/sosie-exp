[{"position":"org.easymock.EasyMock:1149","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:124","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:325","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[169,173,295,296,297,298,299,300,301,302,303],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"argType"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[232,234,242,266,267,269,271,272,304,283,288],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[305,306,291],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:116","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:39","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>.getName(), java.lang.Float.java.lang.Class<java.lang.Float>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[307,308,309,310,311,196,296,299,305,291],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[312],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[313,314],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[20,315,316,56,317,318],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[319,320,321],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[11,17,21,23,24,34,35,36,37,38,39,42,43,45,46,47,49,50,51,52,53,65,66,67,68,69,90,91,92,99,100,124,322,125,126,134,135,136,137,139,141,142,144,148,154,156,157,160,162,163,167,168,169,170,171,172,173,194,196,198,199,201,202,204,206,207,208,209,210,211,212,213,214,215,217,219,220,221,229],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[146,147,169,173,295,196,296,297,298,299,305,300,301,323,324,325,206,326,327,207,328,329,330,331,332,333,334,335,336,208,337,338,339,340,341,209,342,343,302,303,291],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:231","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:193","sourceCode":"if (!(this.boolean)) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[0,1,344,345,346,347,348,2,3,4,5,6,7,8,9,10,349,11,12,13,14,15,16,350,351,352,353,354,355,356,357,358,359,360,361,17,18,19,20,21,22,23,24,25,362,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,363,364,319,54,55,56,57,58,59,60,61,62,365,366,367,368,369,63,65,66,67,68,69,70,71,72,73,74,75,370,76,77,371,372,78,79,80,81,82,83,84,85,86,87,88,89,373,320,374,375,376,377,321,378,90,91,92,93,94,95,96,97,98,379,380,381,382,383,99,100,384,385,386,387,388,389,390,391,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,322,125,126,127,128,129,130,131,132,133,392,134,135,136,137,138,139,140,141,142,143,144,393,145,146,146,147,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,394,395,396,397,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,398,399,223,224,225,226,227,313,228,229,230,314,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,400,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,304,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"shouldBeUsedInOneThread":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[169,173,295,296,297,298,299,300,301,302,303,401],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[232,233,234,235,242,243,266,267,268,269,270,271,272,273,304,274,283,284,288,289],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[64,232,233,234,235,236,237,238,239,241,242,243,244,245],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[402,291,292,293],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[221],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"type"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[403],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"m"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[232,234,242,266,267,269,271,272,304,283,288],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[298],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[0,1,344,345,346,347,348,2,3,4,5,6,7,8,404,9,10,349,405,406,11,12,13,14,15,16,350,351,352,353,354,355,356,357,358,359,360,361,407,408,17,409,18,19,20,21,22,23,24,25,362,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,363,364,410,411,319,412,54,55,56,57,58,59,60,61,62,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,365,429,430,431,432,433,366,434,367,368,369,63,65,66,67,68,69,70,71,72,73,74,75,370,76,77,371,372,78,79,80,81,435,82,83,84,85,86,87,88,89,373,320,374,436,375,376,377,437,438,321,439,440,378,90,91,441,92,442,443,444,93,94,95,96,97,98,379,380,381,382,383,445,446,447,448,449,450,451,452,99,100,453,384,385,386,387,388,389,390,391,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,322,125,126,127,128,129,130,131,132,133,454,392,455,456,457,458,459,460,461,134,135,136,137,138,139,140,141,142,143,144,393,145,146,147,148,149,150,151,152,153,154,462,463,464,465,466,155,467,468,469,470,471,472,473,474,156,157,158,159,160,161,162,163,164,165,166,475,476,477,478,479,480,481,167,168,169,170,482,171,172,173,295,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,296,483,484,394,395,396,397,197,297,198,485,298,312,199,200,201,299,202,486,305,203,204,301,205,323,324,325,206,326,327,207,328,329,330,331,332,333,334,335,336,208,337,338,339,340,341,209,342,343,210,211,212,213,214,215,216,487,217,488,489,218,219,220,221,490,491,222,398,399,223,224,225,226,492,227,313,228,229,230,314,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,400,493,494,495,496,497,259,498,499,500,501,502,503,260,261,262,263,264,265,266,267,504,268,269,270,271,272,273,304,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[405],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[76,140,228,230,314,231],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:372","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[505,307,308,309,506,507,311,196,296,299,305,508,306,291],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[509,487,510],"status":-1,"binaryOperator":"java.lang.String == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[428,366,165],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[0,1,348,4,5,6,7,8,9,10,11,12,14,15,350,351,352,353,354,355,356,357,358,359,360,361,17,19,20,21,22,25,362,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,364,54,55,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,370,76,77,372,78,79,80,81,82,83,85,86,87,88,89,375,376,377,90,91,92,93,94,95,96,97,98,99,100,384,385,386,387,388,389,390,391,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,322,125,126,127,128,129,130,131,132,133,392,134,135,136,137,138,139,140,141,142,143,144,393,146,146,147,147,148,149,150,151,152,153,154,155,156,157,159,160,161,164,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,199,200,201,202,203,205,206,207,208,209,210,211,212,213,214,215,216,217,218,220,222,223,224,225,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,400,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[392,455,456,457,459,461],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[16,20,23,511,56,57,60,61,78,128,129,162,177,183,184],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[232,234,242,266,267,269,271,272,304,283,288],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[267,271,304],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:34","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>.getName(), java.lang.Byte.java.lang.Class<java.lang.Byte>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:223","failures":[187,197,200,207,216,491],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[234,242,266],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[405],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"m","equalsMethod":"m"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":267,"org.easymock.tests2.UsageTest.argumentsOrdered":184,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":54,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":256,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":423,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":179,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":149,"org.easymock.tests2.DelegateToTest.testReturnException":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":94,"org.easymock.tests.MockingTest.testPartialClassMocking":90,"org.easymock.tests.MockClassControlTest.testToString":386,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":484,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":319,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":331,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":104,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":207,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":157,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":307,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":273,"org.easymock.tests2.UsageTest.wrongArguments":177,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":11,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":503,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":132,"org.easymock.samples.ExampleTest.answerVsDelegate":140,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":450,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":443,"org.easymock.tests2.UsageConstraintsTest.testNull":269,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":213,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":391,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":255,"org.easymock.tests2.CaptureTest.testPrimitive":235,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":15,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":123,"org.easymock.tests.UsageTest.moreThanOneArgument":55,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":212,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":136,"org.easymock.tests.UsageTest.argumentsOrdered":61,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":379,"org.easymock.tests.UsageVarargTest.varargIntAccepted":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":428,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":65,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":507,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":197,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":477,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":471,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":415,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":69,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":259,"org.easymock.tests.ReplayStateInvalidUsageTest.times":358,"org.easymock.tests2.DependencyTest.testClassMocking":473,"org.easymock.tests2.AnswerTest.answer":222,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":429,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":263,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":447,"org.easymock.tests2.CaptureTest.testAnd":232,"org.easymock.tests2.UsageTest.strictResetToDefault":175,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":218,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":298,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":135,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":125,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":250,"org.easymock.tests2.DelegateToTest.testDelegate":231,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":383,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":119,"org.easymock.tests.LimitationsTest.mockFinalMethod":409,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":97,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":74,"org.easymock.tests2.DependencyTest.testClassMockingSupport":474,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":363,"org.easymock.tests2.CaptureTest.testCapture1_2446744":236,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":487,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":117,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":261,"org.easymock.tests.UsageThrowableTest.throwError":26,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":352,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":449,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":472,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":406,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":138,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":343,"org.easymock.samples.PartialClassMockTest.testGetArea":148,"org.easymock.tests.MockingTest.testInterfaceMocking":441,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":353,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":66,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":320,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":438,"org.easymock.tests2.UsageTest.niceToStrict":178,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":332,"org.easymock.tests2.ThreadingTest.testChangeDefault":509,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":413,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":199,"org.easymock.tests2.MockBuilderTest.testCreateMock":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":339,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":500,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":113,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":317,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":251,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":446,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":346,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":347,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":130,"org.easymock.tests.UsageOverloadedMethodTest.overloading":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":341,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":77,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":278,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":45,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":277,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":241,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":435,"org.easymock.tests.MockClassControlTest.testEquals":390,"org.easymock.tests2.EasyMockSupportClassTest.testAll":206,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":10,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":121,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":72,"org.easymock.tests2.CaptureTest.testCaptureAll":233,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":262,"org.easymock.tests.MockNameTest.defaultName":453,"org.easymock.tests2.UsageConstraintsTest.testMatches":279,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":137,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":350,"org.easymock.samples.ExampleTest.voteForRemovals":144,"org.easymock.tests.UsageVarargTest.allKinds":89,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":127,"org.easymock.samples.BasicClassMockTest.testPrintContent":152,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":73,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":32,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":158,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":468,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":98,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":314,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":460,"org.easymock.tests2.UsageConstraintsTest.greaterThan":281,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":326,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":322,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":221,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":461,"org.easymock.samples.ExampleTest.voteForRemoval":141,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":490,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":192,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":451,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":478,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":216,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":174,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":63,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":420,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":248,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":324,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":93,"org.easymock.tests2.CaptureTest.testCaptureFirst":245,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":419,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":249,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":186,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":78,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":41,"org.easymock.tests2.UsageTest.moreThanOneArgument":176,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":194,"org.easymock.tests2.CaptureTest.testCapture2_2446744":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":430,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":204,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":88,"org.easymock.tests.GenericTest.testBridgedEquals":405,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":401,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":7,"org.easymock.tests.UsageExpectAndReturnTest.longType":37,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":70,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":246,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":122,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":286,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":321,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":120,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":134,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":368,"org.easymock.tests.UsageCallCountTest.tooManyCalls":8,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":340,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":42,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":502,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":109,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":31,"org.easymock.tests.MockingTest.testNiceClassMocking":444,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":168,"org.easymock.tests.MockingTest.testClassMocking":440,"org.easymock.tests2.UsageConstraintsTest.testContains":276,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":348,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":189,"org.easymock.tests2.UsageConstraintsTest.testFind":268,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":103,"org.easymock.tests.MockTypeTest.fromEasyMockClass":448,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":18,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":227,"org.easymock.tests.UsageExpectAndReturnTest.object":44,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":217,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":501,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":254,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":83,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":308,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":377,"org.easymock.tests.UsageTest.exactCallCountByLastCall":62,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":418,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":411,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":380,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":296,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":50,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":79,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":76,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":463,"org.easymock.tests.MockClassControlTest.testHashCode":389,"org.easymock.tests2.EasyMockSupportTest.testVerify":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":334,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":381,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":75,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":345,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":260,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":400,"org.easymock.tests.UsageVarargTest.varargCharAccepted":82,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":454,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":434,"org.easymock.tests2.UsageTest.openCallCountByLastCall":180,"org.easymock.tests.DefaultClassInstantiatorTest.object":392,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":257,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":344,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":375,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":511,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":335,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":29,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":496,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":462,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":388,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":219,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":110,"org.easymock.tests.CapturesMatcherTest.test":64,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":51,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":367,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":209,"org.easymock.tests2.UsageTest.resumeIfFailure":185,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":445,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":476,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":96,"org.easymock.tests2.StubTest.stubWithReturnValue":166,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":299,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":43,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":287,"org.easymock.tests2.SerializationTest.testAllMockedMethod":293,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":365,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":306,"org.easymock.samples.SupportTest.voteForRemovals":154,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":318,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":404,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":465,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":116,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":402,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":366,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":398,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":412,"org.easymock.tests.UsageExpectAndThrowTest.object":114,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":284,"org.easymock.tests2.DelegateToTest.testWrongClass":230,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":99,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":100,"org.easymock.samples.ConstructorCalledMockTest.testTax":146,"org.easymock.tests.UsageStrictMockTest.range":23,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":480,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":253,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":167,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":115,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":201,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":323,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":360,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":131,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":315,"org.easymock.tests2.CaptureTest.testCaptureNone":240,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":374,"org.easymock.tests.UsageUnorderedTest.message":16,"org.easymock.tests.UsageVerifyTest.twoReturns":129,"org.easymock.tests.UsageVarargTest.varargByteAccepted":87,"org.easymock.tests2.ThreadingTest.testThreadSafe":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":337,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":5,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":437,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":151,"org.easymock.tests2.CaptureTest.testCapture_2617107":234,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":432,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":14,"org.easymock.tests2.UsageConstraintsTest.any":274,"org.easymock.tests2.StubTest.stub":165,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":357,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":433,"org.easymock.tests.UsageExpectAndThrowTest.longType":107,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":95,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":458,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":356,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":161,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":155,"org.easymock.tests2.SerializationTest.testClass":291,"org.easymock.tests.LimitationsTest.mockNativeMethod":17,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":53,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":349,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":495,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":164,"org.easymock.tests2.NameTest.nameForMocksControl":397,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":497,"org.easymock.tests2.MockedExceptionTest.testMockedException":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":327,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":59,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":492,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":108,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":92,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":210,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":202,"org.easymock.tests.MockingTest.testNicePartialClassMocking":91,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":215,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":505,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":493,"org.easymock.tests2.CaptureTest.testCaptureLast":239,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":364,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":173,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":272,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":285,"org.easymock.tests.MockingTest.testTwoMocks":378,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":295,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":34,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":112,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":183,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":289,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":510,"org.easymock.samples.ExampleTest.removeNonExistingDocument":393,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":499,"org.easymock.tests.UsageStrictMockTest.differentMethods":24,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":354,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":464,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":456,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":193,"org.easymock.tests2.MockBuilderTest.testCreateMockString":205,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":384,"org.easymock.tests.UsageExpectAndThrowTest.floatType":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":328,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":325,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":223,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":483,"org.easymock.tests.UsageVerifyTest.twoThrows":128,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":208,"org.easymock.samples.ExampleTest.voteAgainstRemoval":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":424,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":373,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":220,"org.easymock.tests.LimitationsTest.privateConstructor":408,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":303,"org.easymock.tests2.UsageConstraintsTest.testNotNull":288,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":187,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":33,"org.easymock.tests2.UsageTest.defaultResetToNice":182,"org.easymock.samples.ExampleTest.voteAgainstRemovals":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":425,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":49,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":494,"org.easymock.tests.UsageVarargTest.differentLength":84,"org.easymock.tests2.CallbackTest.callback":294,"org.easymock.tests2.UsageConstraintsTest.equals":504,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":488,"org.easymock.tests.UsageTest.openCallCountByLastCall":58,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":264,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":13,"org.easymock.tests.UsageCallCountTest.tooFewCalls":3,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":170,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":133,"org.easymock.tests.UsageThrowableTest.throwCheckedException":30,"org.easymock.tests.MockingTest.testStrictClassMocking":439,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":316,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":172,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":1,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":498,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":169,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":359,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":171,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":225,"org.easymock.tests.ObjectMethodsTest.testHashCode":376,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":506,"org.easymock.tests2.NameTest.nameForNiceMock":396,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":195,"org.easymock.tests2.DependencyTest.testInterfaceMocking":156,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":309,"org.easymock.samples.ExampleTest.addDocument":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":338,"org.easymock.tests2.DelegateToTest.testStubDelegate":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":342,"org.easymock.tests2.AnswerTest.stubAnswer":224,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":21,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":486,"org.easymock.tests.UsageVarargTest.varargLongAccepted":86,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":422,"org.easymock.tests.UsageExpectAndReturnTest.floatType":36,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":52,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":196,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":147,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":470,"org.easymock.tests.UsageThrowableTest.noUpperLimit":27,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":282,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":371,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":265,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":475,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":237,"org.easymock.tests2.SerializationTest.test":292,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":455,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":35,"org.easymock.tests2.UsageConstraintsTest.testSame":270,"org.easymock.samples.SupportTest.addDocument":153,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":482,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":329,"org.easymock.tests.GenericTest.testPackageScope":9,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":417,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":469,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":442,"org.easymock.tests2.NameTest.nameForMock":394,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":46,"org.easymock.tests2.UsageStrictMockTest.differentMethods":163,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":301,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":489,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":38,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":118,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":436,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":126,"org.easymock.tests2.MockedExceptionTest.testRealException":190,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":452,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":427,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":508,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":426,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":160,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":12,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":361,"org.easymock.tests2.NameTest.nameForStrictMock":395,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":312,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":226,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":214,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":479,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":457,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":283,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":198,"org.easymock.tests2.UsageStrictMockTest.range":162,"org.easymock.tests2.UsageConstraintsTest.lessThan":290,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":466,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":403,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":421,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":247,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":310,"org.easymock.tests2.CaptureTest.testCaptureRightOne":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":333,"org.easymock.tests2.UsageConstraintsTest.testOr":271,"org.easymock.tests.UsageRangeTest.combination":124,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":211,"org.easymock.tests.UsageTest.wrongArguments":57,"org.easymock.tests2.MockBuilderTest.testWithConstructor":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":330,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":385,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":414,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":47,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":459,"org.easymock.tests.UsageVarargTest.varargShortAccepted":85,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":6,"org.easymock.tests2.UsageConstraintsTest.cmpTo":275,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":416,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":181,"org.easymock.tests2.CaptureTest.testCaptureFromStub":243,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":351,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":485,"org.easymock.tests.UsageTest.unexpectedCallWithArray":56,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":20,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":4,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":300,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":48,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":22,"org.easymock.tests2.UsageConstraintsTest.constraints":266,"org.easymock.samples.ExampleTest.addAndChangeDocument":145,"org.easymock.tests.UsageStrictMockTest.testVerify":362,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":150,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":19,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":71,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":238,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":67,"org.easymock.tests.LimitationsTest.abstractClass":407,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":40,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":68,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":372,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":80,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":252}}]

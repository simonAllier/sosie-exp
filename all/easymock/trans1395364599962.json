[{"transplant":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[2,3,4,5,6,7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[8,9,10,11,12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[13,14,15,16,17,18,19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"maximum"}},{"transplant":{"position":"org.easymock.internal.RecordState:102","sourceCode":"this.org.easymock.internal.Result = org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[20,21,22,23,24],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult","value":"delegateTo","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[25],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[20,21,27,22,23,28,24],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,16,17,42,18,19],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[43,44,45,46,47,48,49,50,37,51,52,38,39,40,53,54,41,55,56,57,58,59,60,61,62],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:122","sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[27,28],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:113","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[45,63,46,64,15,65,66,60,67,61,68,69,70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[72,73,74,75,43,76,77,78,79,80,81,82,83,84,85,86,87,62],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:157","sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","type":"CtReturnImpl"},"failures":[84,86],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:169","sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n    java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n} ","type":"CtIfImpl"},"failures":[88,89],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[90,91,92,93,15,47,65,66,17,94,95,96,97,98,99,70,19,100],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[101,102,103,104,105,106,107,108,109,110,111,112,13,14,113,90,91,92,114,115,116,117,1,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,79,48,135,136,5,66,137,16,17,94,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,96,97,98,99,166,167,70,168,18,19,100],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[169],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"shouldBeUsedInOneThread"}},{"position":"org.easymock.internal.LastControl:61","failures":[133,170,79,48,171,172,173,174,175,176,177,149,150,153,154,178,155],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[179,180,181],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[182],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[183,101,102,103,8,8,9,9,104,105,106,107,20,108,109,110,111,184,112,185,186,187,188,189,190,113,191,72,73,74,75,43,76,90,192,91,92,114,115,193,1,194,195,196,197,198,199,200,201,202,203,77,204,118,205,206,207,208,209,210,211,44,45,93,4,119,63,46,120,121,64,212,78,213,122,214,215,216,217,218,219,220,221,222,223,224,225,226,227,32,228,229,230,33,34,231,35,232,233,36,234,235,236,237,238,239,240,241,242,243,15,47,65,123,124,125,126,127,129,130,131,132,133,134,244,245,246,247,248,249,250,251,252,253,254,255,170,79,48,256,257,49,50,258,259,37,260,51,52,38,39,261,40,53,54,41,262,55,56,57,58,263,264,265,266,21,267,268,269,270,271,272,273,135,136,5,66,137,16,17,94,138,274,275,276,277,278,279,140,280,281,282,283,284,141,142,143,144,84,85,86,87,285,286,171,172,287,173,288,174,175,289,146,290,291,182,292,293,294,295,296,297,298,299,148,176,300,301,302,303,304,305,306,307,308,177,149,150,309,310,151,152,153,154,311,178,312,313,155,314,315,156,316,157,22,317,23,24,318,319,320,321,322,159,323,324,325,326,160,327,60,328,95,161,26,162,67,61,329,163,164,330,68,10,69,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,165,62,355,96,97,98,99,166,167,70,168,18,19,100,356,357,358,359],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:148","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[360],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[183,106,107,108,109,111,190,191,210,211,44,45,93,63,46,64,212,213,214,215,216,217,218,219,221,222,223,224,225,226,227,32,228,229,230,33,34,231,35,232,233,36,234,235,236,237,238,239,240,241,242,243,15,65,251,252,253,254,255,170,256,263,264,268,66,16,17,277,278,279,140,280,281,282,283,284,141,142,143,86,285,286,171,172,287,173,288,174,175,289,146,290,291,182,292,293,294,295,296,297,298,299,148,176,300,301,302,303,304,305,306,307,308,177,149,309,310,153,154,311,178,313,155,314,315,156,316,317,158,159,324,325,160,60,328,95,26,67,61,329,330,68,10,69,332,336,337,338,339,340,341,343,345,346,347,348,349,350,351,352,353,354,62,70,18,19,356,357,358,359],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:60","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":172,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":45,"org.easymock.tests2.UsageTest.argumentsOrdered":164,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":142,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":75,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":162,"org.easymock.tests2.StubTest.stubWithReturnValue":62,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":34,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":103,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":148,"org.easymock.tests2.SerializationTest.testAllMockedMethod":157,"org.easymock.tests2.DelegateToTest.testReturnException":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":73,"org.easymock.tests.MockingTest.testPartialClassMocking":221,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":25,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":7,"org.easymock.samples.SupportTest.voteForRemovals":106,"org.easymock.tests.MockClassControlTest.testToString":245,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":53,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":357,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":49,"org.easymock.tests.UsageExpectAndThrowTest.object":261,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":315,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":298,"org.easymock.tests2.DelegateToTest.testWrongClass":23,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":263,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":264,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":289,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":255,"org.easymock.tests2.UsageTest.wrongArguments":161,"org.easymock.tests.UsageStrictMockTest.range":16,"org.easymock.samples.ConstructorCalledMockTest.testTax":8,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":272,"org.easymock.samples.ExampleTest.answerVsDelegate":20,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":283,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":348,"org.easymock.tests2.UsageConstraintsTest.testNull":173,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":339,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":40,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":324,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":250,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":141,"org.easymock.tests2.CaptureTest.testPrimitive":309,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":256,"org.easymock.tests.UsageTest.moreThanOneArgument":93,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":77,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":58,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":120,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":271,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":207,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":2,"org.easymock.tests2.CaptureTest.testCaptureNone":154,"org.easymock.tests.UsageUnorderedTest.message":1,"org.easymock.tests.UsageVerifyTest.twoReturns":65,"org.easymock.tests.UsageVarargTest.varargByteAccepted":131,"org.easymock.tests2.ThreadingTest.testThreadSafe":303,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":29,"org.easymock.tests.UsageTest.argumentsOrdered":121,"org.easymock.tests.UsageVarargTest.varargIntAccepted":125,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":115,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":101,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":239,"org.easymock.tests2.CaptureTest.testCapture_2617107":150,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":322,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":169,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":48,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":323,"org.easymock.tests2.UsageConstraintsTest.any":146,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":27,"org.easymock.tests2.StubTest.stub":165,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":243,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":82,"org.easymock.tests.UsageExpectAndThrowTest.longType":259,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":74,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":179,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":200,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":168,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":302,"org.easymock.tests2.SerializationTest.testClass":156,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":308,"org.easymock.tests.ReplayStateInvalidUsageTest.times":202,"org.easymock.tests.LimitationsTest.mockNativeMethod":191,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":360,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":238,"org.easymock.tests2.AnswerTest.answer":69,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":145,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":321,"org.easymock.tests2.CaptureTest.testAnd":177,"org.easymock.tests2.UsageTest.strictResetToDefault":328,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":344,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":100,"org.easymock.tests2.NameTest.nameForMocksControl":99,"org.easymock.tests2.MockedExceptionTest.testMockedException":85,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":206,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":280,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":253,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":46,"org.easymock.tests2.DelegateToTest.testDelegate":24,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":31,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":223,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":37,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":336,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":325,"org.easymock.tests.MockingTest.testNicePartialClassMocking":222,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":262,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":341,"org.easymock.tests2.CaptureTest.testCaptureLast":153,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":43,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":257,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":354,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":175,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":299,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":189,"org.easymock.tests2.CaptureTest.testCapture1_2446744":310,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":224,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":54,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":319,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":38,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":163,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":300,"org.easymock.tests.UsageThrowableTest.throwError":213,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":196,"org.easymock.samples.ExampleTest.removeNonExistingDocument":184,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":198,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":89,"org.easymock.tests.UsageStrictMockTest.differentMethods":17,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":305,"org.easymock.tests2.MockBuilderTest.testCreateMockString":327,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":134,"org.easymock.tests.UsageExpectAndThrowTest.floatType":258,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":209,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":294,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":331,"org.easymock.tests.UsageVerifyTest.twoThrows":47,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":266,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":71,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":358,"org.easymock.samples.PartialClassMockTest.testGetArea":183,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":197,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":240,"org.easymock.samples.ExampleTest.voteAgainstRemoval":109,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":139,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":346,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":50,"org.easymock.tests2.UsageTest.niceToStrict":26,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":12,"org.easymock.tests2.UsageConstraintsTest.testNotNull":176,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":219,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":84,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":159,"org.easymock.tests2.UsageTest.defaultResetToNice":329,"org.easymock.tests2.MockBuilderTest.testCreateMock":326,"org.easymock.samples.ExampleTest.voteAgainstRemovals":107,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":234,"org.easymock.tests.UsageVarargTest.differentLength":128,"org.easymock.tests2.CallbackTest.callback":355,"org.easymock.tests.UsageTest.openCallCountByLastCall":63,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":6,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":39,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":281,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":285,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":90,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":270,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":79,"org.easymock.tests.UsageCallCountTest.tooFewCalls":92,"org.easymock.tests.UsageOverloadedMethodTest.overloading":211,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":292,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":267,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":351,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":210,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":35,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":180,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":182,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":311,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":273,"org.easymock.tests.UsageThrowableTest.throwCheckedException":216,"org.easymock.tests2.EasyMockSupportClassTest.testAll":356,"org.easymock.tests.MockClassControlTest.testEquals":249,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":113,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":56,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":3,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":320,"org.easymock.tests2.CaptureTest.testCaptureAll":149,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":187,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":353,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":78,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":350,"org.easymock.tests2.UsageConstraintsTest.testMatches":293,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":203,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":352,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":333,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":208,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":194,"org.easymock.tests.ObjectMethodsTest.testHashCode":275,"org.easymock.samples.ExampleTest.voteForRemovals":111,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":307,"org.easymock.tests2.NameTest.nameForNiceMock":98,"org.easymock.tests.UsageVarargTest.allKinds":133,"org.easymock.tests2.DependencyTest.testInterfaceMocking":314,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":15,"org.easymock.samples.BasicClassMockTest.testPrintContent":102,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":188,"org.easymock.samples.ExampleTest.addDocument":110,"org.easymock.tests2.DelegateToTest.testStubDelegate":317,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":218,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":166,"org.easymock.tests2.AnswerTest.stubAnswer":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":88,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":76,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":28,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":66,"org.easymock.tests2.UsageConstraintsTest.greaterThan":295,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":252,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":347,"org.easymock.tests.UsageVarargTest.varargLongAccepted":130,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":94,"org.easymock.samples.ExampleTest.voteForRemoval":108,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":304,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":237,"org.easymock.tests.UsageExpectAndReturnTest.floatType":226,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":342,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":10,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":9,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":296,"org.easymock.tests.UsageThrowableTest.noUpperLimit":122,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":286,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":60,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":118,"org.easymock.tests2.SerializationTest.test":316,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":151,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":83,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":181,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":279,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":214,"org.easymock.tests2.UsageConstraintsTest.testSame":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":225,"org.easymock.samples.SupportTest.addDocument":105,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":72,"org.easymock.tests2.CaptureTest.testCaptureFirst":155,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":140,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":68,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":269,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":199,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":230,"org.easymock.tests.GenericTest.testPackageScope":190,"org.easymock.tests2.CaptureTest.testCapture2_2446744":313,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":306,"org.easymock.tests2.UsageTest.moreThanOneArgument":95,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":30,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":160,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":132,"org.easymock.tests2.NameTest.nameForMock":96,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":116,"org.easymock.tests.UsageExpectAndReturnTest.longType":227,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":277,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":185,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":232,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":57,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":147,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":55,"org.easymock.tests2.UsageStrictMockTest.differentMethods":19,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":205,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":81,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":32,"org.easymock.tests.UsageCallCountTest.tooManyCalls":117,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":41,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":254,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":91,"org.easymock.tests2.MockedExceptionTest.testRealException":87,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":33,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":260,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":70,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":217,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":204,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":170,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":349,"org.easymock.tests2.UsageConstraintsTest.testContains":291,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":192,"org.easymock.tests2.NameTest.nameForStrictMock":97,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":86,"org.easymock.tests2.UsageConstraintsTest.testFind":287,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":44,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":334,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":340,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":335,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":135,"org.easymock.tests.UsageExpectAndReturnTest.object":231,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":297,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":0,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":343,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":158,"org.easymock.tests2.UsageStrictMockTest.range":18,"org.easymock.tests2.UsageConstraintsTest.lessThan":301,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":284,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":127,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":276,"org.easymock.tests.UsageTest.exactCallCountByLastCall":64,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":212,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":42,"org.easymock.tests2.CaptureTest.testCaptureRightOne":178,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":13,"org.easymock.tests2.UsageConstraintsTest.testOr":174,"org.easymock.tests.UsageRangeTest.combination":251,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":337,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":235,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":123,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":21,"org.easymock.tests.UsageTest.wrongArguments":119,"org.easymock.tests.MockClassControlTest.testHashCode":248,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":244,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":228,"org.easymock.tests2.EasyMockSupportTest.testVerify":144,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":233,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":14,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":265,"org.easymock.tests.UsageVarargTest.varargShortAccepted":129,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":318,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":193,"org.easymock.tests2.UsageConstraintsTest.cmpTo":290,"org.easymock.tests.UsageVarargTest.varargCharAccepted":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":59,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":167,"org.easymock.tests2.UsageTest.openCallCountByLastCall":67,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":61,"org.easymock.tests.DefaultClassInstantiatorTest.object":220,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":143,"org.easymock.tests2.CaptureTest.testCaptureFromStub":312,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":195,"org.easymock.tests.UsageTest.unexpectedCallWithArray":4,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":274,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":52,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":215,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":114,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":36,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":345,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":247,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":137,"org.easymock.tests2.UsageConstraintsTest.constraints":171,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":51,"org.easymock.samples.ExampleTest.addAndChangeDocument":112,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":236,"org.easymock.tests.UsageStrictMockTest.testVerify":138,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":80,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":359,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":246,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":136,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":186,"org.easymock.tests2.UsageTest.resumeIfFailure":330,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":152,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":241,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":229,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":268,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":242,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":282,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":124}}]

[{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[0,1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"this.java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lock":"lock"}},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"qualifier"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:44","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[73],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"leafClass","type":"leafClass"}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[295,109,111,112,113,114,115,116,118,296,119,120,122],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[62],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[297],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[39,298,299,40,41,42,43,300,301,44,302,303,304,305,306,307,308,99,309,310,100,311,312,313,314,315,316,317,318,319,101,320,321,322,323,324,102,325,326,128,129,130,131,133,134,135,136,137,141,141,142,142,144,155,156,327,328,329,330,331,332,333,334,180,335,181,182,336,337,338,339,340,211,212,213,341,342,343,344,345,346,347,348,349,350,260,351,352,353],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"mock"}},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:322","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[354],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[355],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[29,30,31,356],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:278","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"failures":[357],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:112","sourceCode":"if (!(org.easymock.Capture<T>.hasCaptured())) {\n    this.java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[295,110,117,120,121,354],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[207,208,280],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1847","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","type":"CtInvocationImpl"},"failures":[88],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[2,3,4,5,6,8,9,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,358,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,359,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,123,127,128,129,130,131,132,133,134,137,139,140,360,361,362,363,143,144,145,146,147,148,149,150,151,152,153,154,155,156,364,157,158,159,160,162,163,164,165,171,172,173,365,175,176,177,178,179,180,181,182,366,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,367,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,245,246,247,248,249,250,251,252,368,253,254,255,256,257,258,259,260,369,370,265,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[371,372,373,7,374,8,375,9,10,11,12,13,14,376,15,29,31,32,33,35,36,37,38,39,40,41,42,43,44,99,100,101,102,128,129,130,131,133,134,137,141,141,142,142,144,155,156,328,180,181,182,336,340,211,212,213,260,352,353],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[65],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:196","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:189","sourceCode":"org.easymock.internal.IMocksBehavior = new org.easymock.internal.MocksBehavior(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"type":"type","org.easymock.MockType.NICE":"type"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[337],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":73,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":242,"org.easymock.tests2.UsageTest.argumentsOrdered":67,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":26,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":264,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":62,"org.easymock.tests2.StubTest.stubWithReturnValue":140,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":231,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":93,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":143,"org.easymock.tests2.SerializationTest.testAllMockedMethod":31,"org.easymock.tests2.DelegateToTest.testReturnException":46,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":366,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":262,"org.easymock.tests.MockingTest.testPartialClassMocking":211,"org.easymock.samples.SupportTest.voteForRemovals":147,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":335,"org.easymock.tests.MockClassControlTest.testToString":329,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":301,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":314,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":356,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":100,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":183,"org.easymock.tests.UsageExpectAndThrowTest.object":193,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":90,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":104,"org.easymock.tests2.DelegateToTest.testWrongClass":48,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":282,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":283,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":79,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":255,"org.easymock.tests2.UsageTest.wrongArguments":60,"org.easymock.tests.UsageStrictMockTest.range":219,"org.easymock.samples.ConstructorCalledMockTest.testTax":141,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":269,"org.easymock.samples.ExampleTest.answerVsDelegate":149,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":23,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":353,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":128,"org.easymock.tests2.UsageConstraintsTest.testNull":75,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":194,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":35,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":334,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":11,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":25,"org.easymock.tests2.CaptureTest.testPrimitive":112,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":306,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":248,"org.easymock.tests.UsageTest.moreThanOneArgument":243,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":202,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":268,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":34,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":168,"org.easymock.tests2.CaptureTest.testCaptureNone":117,"org.easymock.tests.UsageUnorderedTest.message":251,"org.easymock.tests.UsageVerifyTest.twoReturns":281,"org.easymock.tests.UsageVarargTest.varargByteAccepted":292,"org.easymock.tests2.ThreadingTest.testThreadSafe":105,"org.easymock.tests.UsageTest.argumentsOrdered":249,"org.easymock.tests.UsageVarargTest.varargIntAccepted":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":320,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":160,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":155,"org.easymock.tests2.CaptureTest.testCapture_2617107":111,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":175,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":7,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":258,"org.easymock.tests2.UsageConstraintsTest.any":80,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":297,"org.easymock.tests2.StubTest.stub":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":179,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":263,"org.easymock.tests.UsageExpectAndThrowTest.longType":186,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":346,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":53,"org.easymock.tests2.SerializationTest.testClass":29,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":45,"org.easymock.tests.LimitationsTest.mockNativeMethod":260,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":127,"org.easymock.tests2.DependencyTest.testClassMocking":0,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":336,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":241,"org.easymock.tests2.AnswerTest.answer":2,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":358,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":126,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":373,"org.easymock.tests2.CaptureTest.testAnd":109,"org.easymock.tests2.UsageTest.strictResetToDefault":58,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":56,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":40,"org.easymock.tests2.NameTest.nameForMocksControl":363,"org.easymock.tests2.MockedExceptionTest.testMockedException":136,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":310,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":253,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":20,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":247,"org.easymock.tests2.DelegateToTest.testDelegate":49,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":213,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":187,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":32,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":12,"org.easymock.tests.MockingTest.testNicePartialClassMocking":212,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":198,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":37,"org.easymock.tests.LimitationsTest.mockFinalMethod":351,"org.easymock.tests2.CaptureTest.testCaptureLast":116,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":265,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":78,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":134,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":275,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":91,"org.easymock.tests.MockingTest.testTwoMocks":340,"org.easymock.tests2.DependencyTest.testClassMockingSupport":1,"org.easymock.tests2.CaptureTest.testCapture1_2446744":113,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":222,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":196,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":124,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":191,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":66,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":95,"org.easymock.tests.UsageThrowableTest.throwError":203,"org.easymock.tests.UsageStrictMockTest.differentMethods":220,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":344,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":359,"org.easymock.tests2.MockBuilderTest.testCreateMockString":15,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":311,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":170,"org.easymock.tests.UsageExpectAndThrowTest.floatType":185,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":308,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":3,"org.easymock.tests.UsageVerifyTest.twoThrows":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":101,"org.easymock.samples.PartialClassMockTest.testGetArea":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":176,"org.easymock.samples.ExampleTest.voteAgainstRemoval":151,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":315,"org.easymock.tests2.UsageTest.niceToStrict":61,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":184,"org.easymock.tests.LimitationsTest.privateConstructor":350,"org.easymock.tests2.UsageConstraintsTest.testNotNull":94,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":210,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":135,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":9,"org.easymock.tests2.UsageTest.defaultResetToNice":65,"org.easymock.tests2.MockBuilderTest.testCreateMock":13,"org.easymock.samples.ExampleTest.voteAgainstRemovals":148,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":322,"org.easymock.tests.UsageVarargTest.differentLength":289,"org.easymock.tests2.CallbackTest.callback":6,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":298,"org.easymock.tests.UsageTest.openCallCountByLastCall":246,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":192,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":21,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":70,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":364,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":267,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":257,"org.easymock.tests.UsageCallCountTest.tooFewCalls":158,"org.easymock.tests.UsageOverloadedMethodTest.overloading":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":319,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":84,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":173,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":276,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":233,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":131,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":83,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":118,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":270,"org.easymock.tests.UsageThrowableTest.throwCheckedException":207,"org.easymock.tests.MockClassControlTest.testEquals":333,"org.easymock.tests2.EasyMockSupportClassTest.testAll":99,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":182,"org.easymock.tests.MockingTest.testStrictClassMocking":338,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":200,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":371,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":355,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":273,"org.easymock.tests2.CaptureTest.testCaptureAll":110,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":125,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":133,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":165,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":130,"org.easymock.tests2.UsageConstraintsTest.testMatches":85,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":132,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":5,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":169,"org.easymock.samples.ExampleTest.voteForRemovals":153,"org.easymock.tests2.NameTest.nameForNiceMock":362,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":108,"org.easymock.tests.UsageVarargTest.allKinds":294,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":279,"org.easymock.tests2.DependencyTest.testInterfaceMocking":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":274,"org.easymock.samples.BasicClassMockTest.testPrintContent":156,"org.easymock.samples.ExampleTest.addDocument":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":325,"org.easymock.tests2.DelegateToTest.testStubDelegate":47,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":209,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":50,"org.easymock.tests2.AnswerTest.stubAnswer":4,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":266,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":217,"org.easymock.tests2.UsageConstraintsTest.greaterThan":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":309,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":368,"org.easymock.tests.UsageVarargTest.varargLongAccepted":291,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":43,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":221,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":348,"org.easymock.samples.ExampleTest.voteForRemoval":150,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":300,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":106,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":240,"org.easymock.tests.UsageExpectAndReturnTest.floatType":224,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":38,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":44,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":142,"org.easymock.tests.UsageThrowableTest.noUpperLimit":204,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":88,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":71,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":57,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":180,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":303,"org.easymock.tests2.SerializationTest.test":30,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":114,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":343,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":18,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":205,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":223,"org.easymock.tests2.UsageConstraintsTest.testSame":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":307,"org.easymock.samples.SupportTest.addDocument":146,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":261,"org.easymock.tests2.CaptureTest.testCaptureFirst":122,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":19,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":69,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":174,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":312,"org.easymock.tests.GenericTest.testPackageScope":181,"org.easymock.tests2.UsageTest.moreThanOneArgument":59,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":107,"org.easymock.tests2.CaptureTest.testCapture2_2446744":121,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":14,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":293,"org.easymock.tests.GenericTest.testBridgedEquals":337,"org.easymock.tests2.NameTest.nameForMock":360,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":162,"org.easymock.tests.UsageExpectAndReturnTest.longType":225,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":271,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":16,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":376,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":234,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":201,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":92,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":199,"org.easymock.tests2.UsageStrictMockTest.differentMethods":55,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":166,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":299,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":226,"org.easymock.tests.UsageCallCountTest.tooManyCalls":163,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":197,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":254,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":323,"org.easymock.tests2.MockedExceptionTest.testRealException":138,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":230,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":52,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":188,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":256,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":208,"org.easymock.tests.MockingTest.testNiceClassMocking":341,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":129,"org.easymock.tests.MockingTest.testClassMocking":339,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":374,"org.easymock.tests2.NameTest.nameForStrictMock":361,"org.easymock.tests2.UsageConstraintsTest.testContains":82,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":137,"org.easymock.tests2.UsageConstraintsTest.testFind":74,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":278,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":97,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":36,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":214,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":98,"org.easymock.tests.UsageExpectAndReturnTest.object":232,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":305,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":345,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":89,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":39,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":8,"org.easymock.tests2.UsageStrictMockTest.range":54,"org.easymock.tests2.UsageConstraintsTest.lessThan":96,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":24,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":288,"org.easymock.tests.UsageTest.exactCallCountByLastCall":250,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":164,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":316,"org.easymock.tests2.CaptureTest.testCaptureRightOne":119,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":369,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":357,"org.easymock.tests2.UsageConstraintsTest.testOr":77,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":302,"org.easymock.tests.UsageRangeTest.combination":252,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":284,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":238,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":33,"org.easymock.tests.UsageTest.wrongArguments":245,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":172,"org.easymock.tests.MockClassControlTest.testHashCode":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":313,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":328,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":227,"org.easymock.tests2.EasyMockSupportTest.testVerify":28,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":317,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":370,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":347,"org.easymock.tests.UsageVarargTest.varargShortAccepted":290,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":171,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":123,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":161,"org.easymock.tests2.UsageConstraintsTest.cmpTo":81,"org.easymock.tests.UsageVarargTest.varargCharAccepted":287,"org.easymock.tests2.CaptureTest.testCaptureMultiple":295,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":51,"org.easymock.tests2.UsageTest.openCallCountByLastCall":63,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":64,"org.easymock.tests.DefaultClassInstantiatorTest.object":342,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":27,"org.easymock.tests2.CaptureTest.testCaptureFromStub":120,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":375,"org.easymock.tests.UsageTest.unexpectedCallWithArray":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":318,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":190,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":216,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":206,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":159,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":236,"org.easymock.tests2.CaptureTest.testCapture":296,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":331,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":218,"org.easymock.tests2.UsageConstraintsTest.constraints":72,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":41,"org.easymock.samples.ExampleTest.addAndChangeDocument":154,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":189,"org.easymock.tests.CapturesMatcherTest.test":354,"org.easymock.tests.UsageStrictMockTest.testVerify":367,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":239,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":145,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":330,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":102,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":272,"org.easymock.tests2.UsageTest.resumeIfFailure":68,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":115,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":372,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":177,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":352,"org.easymock.tests.LimitationsTest.abstractClass":349,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":228,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":365,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":178,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":285,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":22,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":304}}]

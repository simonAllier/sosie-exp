[{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[1,2,3,4,4,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[1,50,51,52,53,54,55,8,9,10,11,12,56,13,14,15,16,17,18,19,20,57,21,22,23,25,27,28,29,58,59,60,61,62,63,32,33,35,36,38,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,40,80,81,82,83,43,44,45,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"returnedType"}},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:67","sourceCode":"return org.easymock.Mock.java.lang.String()","type":"CtReturnImpl"},"failures":[99,100,101,102,103,104,105,106,107,108,109,110],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[111],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"propertyFileName":"methodName"}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[112],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[113,114,115,116,117],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[8,118],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[6,119,7,120],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[121,122,123],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[124,125],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[126,127],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1,50,51,52,53,54,128,129,130,131,132,133,134,135,136,137,6,119,55,138,8,139,140,141,126,127,142,143,144,145,146,147,148,149,150,151,152,153,154,155,124,125,156,157,158,159,160,9,10,11,12,56,13,14,161,162,163,15,16,17,18,164,165,166,167,168,169,170,171,19,20,57,21,22,23,25,28,172,173,174,58,175,59,60,61,62,63,176,177,178,179,180,181,182,183,184,185,186,187,33,35,36,64,65,66,67,68,69,188,189,70,71,190,72,73,74,191,75,76,77,78,79,192,193,194,195,196,197,198,40,199,200,201,202,203,204,205,206,207,208,43,44,45,84,86,87,88,89,90,91,92,209,210,93,94,95,46,48,211,212,213,214,215,0,216,217,96,218,219,97,98],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[139,154,157,220],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ClassProxyFactory:230","failures":[],"status":0,"binaryOperator":"(((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Null:35","failures":[142],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:40","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"this.org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[129,136,137,221],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"capture"}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[165],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[128,222,135,141,126,144,145,223,124],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[4,5,224,138,139,140,127,142,143,144,149,151,152,154,155,158,159,160,59,80,81,82,83,225,88,89,90,91,92,210,93,96,218,219,97,98],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[226,227,228,229,230],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[231,232,233],"status":-1,"binaryOperator":"java.lang.String == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[6,119,7,120],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:114","sourceCode":"return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1,2,3,4,4,5,5,6,7,8,118,234,235,9,10,11,12,13,14,236,237,238,15,239,240,16,241,242,243,244,245,246,247,248,249,17,250,251,252,253,254,18,255,256,19,20,21,22,23,24,232,25,257,258,26,27,28,29,259,260,261,262,263,264,30,31,32,265,266,33,34,35,36,267,37,38,39,268,269,270,113,114,115,121,116,117,271,272,40,273,274,41,275,276,277,278,279,280,281,282,42,43,44,45,283,284,46,47,48,285,49,286,287],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","constructorArgs":"constructorArgs","name":"name","proxyFactory":"org.easymock.internal.MocksControl.interfaceProxyFactory"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[6,119,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"finalizeMethod"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[139,141,154,157,220],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[1,288,50,226,51,52,289,53,290,291,292,54,2,3,293,4,5,128,129,222,130,131,294,295,132,133,134,135,224,136,137,6,119,7,227,55,228,229,296,138,8,139,140,141,126,127,142,143,144,145,146,147,148,149,150,151,152,153,154,155,124,125,156,297,157,158,159,160,9,10,11,12,56,13,14,161,298,162,299,163,15,16,17,18,164,165,166,300,167,301,168,169,302,303,304,170,171,19,20,57,21,22,23,24,25,26,27,28,29,172,173,174,58,175,305,306,59,307,60,61,308,62,63,176,177,178,179,180,181,182,309,183,184,185,186,310,311,312,313,314,315,316,317,318,319,187,263,264,30,320,31,32,33,34,35,36,37,38,39,321,322,64,65,66,67,68,69,188,189,70,71,190,72,73,74,191,75,76,77,78,79,192,323,193,194,195,196,197,198,324,270,40,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,274,41,275,276,277,278,279,280,80,81,82,83,225,204,205,342,343,206,207,344,345,208,346,347,348,349,350,43,44,45,84,85,86,87,351,352,353,354,88,89,90,91,92,210,355,356,357,358,93,359,94,95,360,361,46,47,49,211,212,213,362,363,364,365,366,367,368,369,370,214,371,215,372,230,373,374,375,376,286,377,378,379,380,381,382,383,384,385,287,96,218,386,387,219,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,97,98,408,409,410],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[288,293,411,99,100,103,104,412,105,106,109,110],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"injection":"injection"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:130","sourceCode":"if (java.lang.Boolean.java.lang.Boolean.valueOf(java.lang.String)) {\n    throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"));\n} ","type":"CtIfImpl"},"failures":[232],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[113,116],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:201","failures":[1,6,16,17,18,24,27,28,260,31,32,265,33,35,36,38,39,268,269,48],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"actualTypeArgument","this":"this"}},{"position":"org.easymock.Capture:82","failures":[128,222,130,131,294,295,132,134,413,135,224,137],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[142,223,124,158],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":126,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":204,"org.easymock.tests2.UsageTest.argumentsOrdered":304,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":185,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":301,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":288,"org.easymock.tests2.DelegateToTest.testReturnException":227,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":337,"org.easymock.tests.MockingTest.testPartialClassMocking":43,"org.easymock.tests.MockClassControlTest.testToString":275,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":209,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":244,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":388,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":16,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":63,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":146,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":96,"org.easymock.tests2.UsageTest.wrongArguments":300,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":104,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":353,"org.easymock.samples.ExampleTest.answerVsDelegate":226,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":269,"org.easymock.tests2.UsageConstraintsTest.testNull":142,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":21,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":184,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":280,"org.easymock.tests2.CaptureTest.testPrimitive":130,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":219,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":407,"org.easymock.tests.UsageTest.moreThanOneArgument":205,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":57,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":82,"org.easymock.tests.UsageTest.argumentsOrdered":345,"org.easymock.tests.UsageVarargTest.varargIntAccepted":327,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":88,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":31,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":34,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":92,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":163,"org.easymock.tests.ReplayStateInvalidUsageTest.times":383,"org.easymock.tests2.DependencyTest.testClassMocking":261,"org.easymock.tests2.AnswerTest.answer":161,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":223,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":319,"org.easymock.tests2.CaptureTest.testAnd":128,"org.easymock.tests2.UsageTest.strictResetToDefault":165,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":26,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":81,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":180,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":86,"org.easymock.tests2.DelegateToTest.testDelegate":229,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":403,"org.easymock.tests.LimitationsTest.mockFinalMethod":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":340,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":350,"org.easymock.tests2.DependencyTest.testClassMockingSupport":262,"org.easymock.tests2.CaptureTest.testCapture1_2446744":131,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":232,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":401,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":317,"org.easymock.tests.UsageThrowableTest.throwError":192,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":377,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":110,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":256,"org.easymock.samples.PartialClassMockTest.testGetArea":1,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":378,"org.easymock.tests2.CompareToTest.testLessOrEqual":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":89,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":389,"org.easymock.tests2.UsageTest.niceToStrict":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":245,"org.easymock.tests2.ThreadingTest.testChangeDefault":233,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":33,"org.easymock.tests2.MockBuilderTest.testCreateMock":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":252,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":103,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":397,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":181,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":351,"org.easymock.tests.UsageOverloadedMethodTest.overloading":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":254,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":151,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":373,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":72,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":211,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":150,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":122,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":134,"org.easymock.tests2.EasyMockSupportClassTest.testAll":15,"org.easymock.tests.MockClassControlTest.testEquals":279,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":47,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":405,"org.easymock.tests2.CaptureTest.testCaptureAll":129,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":318,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":348,"org.easymock.tests2.UsageConstraintsTest.testMatches":152,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":83,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":376,"org.easymock.samples.ExampleTest.voteForRemovals":53,"org.easymock.tests.UsageVarargTest.allKinds":335,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":214,"org.easymock.samples.BasicClassMockTest.testPrintContent":3,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":349,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":197,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":305,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":108,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":341,"org.easymock.tests2.UsageConstraintsTest.greaterThan":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":239,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":85,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":29,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":117,"org.easymock.samples.ExampleTest.voteForRemoval":51,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":173,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":259,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":111,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":24,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":164,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":49,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":267,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":178,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":237,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":336,"org.easymock.tests2.CaptureTest.testCaptureFirst":137,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":179,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":171,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":375,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":189,"org.easymock.tests2.UsageTest.moreThanOneArgument":166,"org.easymock.tests2.CaptureTest.testCapture2_2446744":136,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":58,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":38,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":334,"org.easymock.tests.GenericTest.testBridgedEquals":285,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":369,"org.easymock.tests.UsageExpectAndReturnTest.longType":67,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":176,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":346,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":406,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":297,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":404,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":80,"org.easymock.tests.UsageCallCountTest.tooManyCalls":370,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":253,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":70,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":393,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":196,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":10,"org.easymock.tests.MockingTest.testNiceClassMocking":283,"org.easymock.tests.MockingTest.testClassMocking":282,"org.easymock.tests2.UsageConstraintsTest.testContains":149,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":363,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":30,"org.easymock.tests2.UsageConstraintsTest.testFind":127,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":213,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":322,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":356,"org.easymock.tests.UsageExpectAndReturnTest.object":190,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":25,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":183,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":329,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":410,"org.easymock.tests.UsageTest.exactCallCountByLastCall":208,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":210,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":118,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":76,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":325,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":230,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":105,"org.easymock.tests.MockClassControlTest.testHashCode":278,"org.easymock.tests2.EasyMockSupportTest.testVerify":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":247,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":372,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":316,"org.easymock.tests.UsageVarargTest.varargCharAccepted":328,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":203,"org.easymock.tests2.UsageTest.openCallCountByLastCall":168,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":186,"org.easymock.tests.DefaultClassInstantiatorTest.object":270,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":408,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":248,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":194,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":412,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":27,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":277,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":394,"org.easymock.tests.CapturesMatcherTest.test":221,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":18,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":276,"org.easymock.tests2.UsageTest.resumeIfFailure":170,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":268,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":339,"org.easymock.tests2.StubTest.stubWithReturnValue":138,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":157,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":71,"org.easymock.tests2.SerializationTest.testAllMockedMethod":7,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":112,"org.easymock.samples.SupportTest.voteForRemovals":54,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":284,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":400,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":120,"org.easymock.tests.UsageExpectAndThrowTest.object":398,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":125,"org.easymock.tests2.DelegateToTest.testWrongClass":228,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":97,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":98,"org.easymock.samples.ConstructorCalledMockTest.testTax":4,"org.easymock.tests.UsageStrictMockTest.range":94,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":309,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":9,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":399,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":35,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":236,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":344,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":352,"org.easymock.tests2.CaptureTest.testCaptureNone":133,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":217,"org.easymock.tests.UsageUnorderedTest.message":324,"org.easymock.tests.UsageVerifyTest.twoReturns":215,"org.easymock.tests.UsageVarargTest.varargByteAccepted":333,"org.easymock.tests2.ThreadingTest.testThreadSafe":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":250,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":367,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":2,"org.easymock.tests2.CaptureTest.testCapture_2617107":222,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":387,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":201,"org.easymock.tests2.UsageConstraintsTest.any":147,"org.easymock.tests2.StubTest.stub":296,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":382,"org.easymock.tests.UsageExpectAndThrowTest.longType":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":202,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":338,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":121,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":381,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":307,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":187,"org.easymock.tests2.SerializationTest.testClass":6,"org.easymock.tests.LimitationsTest.mockNativeMethod":40,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":48,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":79,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":100,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":308,"org.easymock.tests2.NameTest.nameForMocksControl":314,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":101,"org.easymock.tests2.MockedExceptionTest.testMockedException":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":240,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":207,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":392,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":45,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":19,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":36,"org.easymock.tests.MockingTest.testNicePartialClassMocking":44,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":23,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":411,"org.easymock.tests2.CaptureTest.testCaptureLast":132,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":145,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":14,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":156,"org.easymock.tests.MockingTest.testTwoMocks":42,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":64,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":396,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":303,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":159,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":231,"org.easymock.samples.ExampleTest.removeNonExistingDocument":290,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":102,"org.easymock.tests.UsageStrictMockTest.differentMethods":95,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":379,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":106,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":114,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":174,"org.easymock.tests2.MockBuilderTest.testCreateMockString":39,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":274,"org.easymock.tests.UsageExpectAndThrowTest.floatType":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":241,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":238,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":298,"org.easymock.tests.UsageVerifyTest.twoThrows":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":17,"org.easymock.samples.ExampleTest.voteAgainstRemoval":52,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":200,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":28,"org.easymock.tests.LimitationsTest.privateConstructor":272,"org.easymock.tests2.UsageConstraintsTest.testNotNull":158,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":198,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":263,"org.easymock.tests2.UsageTest.defaultResetToNice":302,"org.easymock.samples.ExampleTest.voteAgainstRemovals":50,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":75,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":99,"org.easymock.tests.UsageVarargTest.differentLength":330,"org.easymock.tests2.CallbackTest.callback":315,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":257,"org.easymock.tests.UsageTest.openCallCountByLastCall":206,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":139,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":386,"org.easymock.tests.UsageCallCountTest.tooFewCalls":365,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":12,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":354,"org.easymock.tests.UsageThrowableTest.throwCheckedException":195,"org.easymock.tests.MockingTest.testStrictClassMocking":281,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":13,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":355,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":11,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":384,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":56,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":299,"org.easymock.tests.ObjectMethodsTest.testHashCode":409,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":175,"org.easymock.tests2.NameTest.nameForNiceMock":313,"org.easymock.tests2.DependencyTest.testInterfaceMocking":62,"org.easymock.samples.ExampleTest.addDocument":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":251,"org.easymock.tests2.DelegateToTest.testStubDelegate":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":255,"org.easymock.tests2.AnswerTest.stubAnswer":162,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":93,"org.easymock.tests.UsageVarargTest.varargLongAccepted":332,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":199,"org.easymock.tests.UsageExpectAndReturnTest.floatType":66,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":78,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":8,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":5,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":155,"org.easymock.tests.UsageThrowableTest.noUpperLimit":323,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":140,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":234,"org.easymock.tests2.SerializationTest.test":119,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":294,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":123,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":113,"org.easymock.tests2.UsageConstraintsTest.testSame":143,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":65,"org.easymock.samples.SupportTest.addDocument":292,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":380,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":242,"org.easymock.tests.GenericTest.testPackageScope":46,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":109,"org.easymock.tests2.NameTest.nameForMock":311,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":73,"org.easymock.tests2.UsageStrictMockTest.differentMethods":61,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":258,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":68,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":402,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":87,"org.easymock.tests2.MockedExceptionTest.testRealException":320,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":59,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":218,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":287,"org.easymock.tests2.NameTest.nameForStrictMock":312,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":266,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":321,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":22,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":235,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":124,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":115,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":32,"org.easymock.tests2.UsageStrictMockTest.range":60,"org.easymock.tests2.UsageConstraintsTest.lessThan":160,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":107,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":177,"org.easymock.tests2.CaptureTest.testCaptureRightOne":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":246,"org.easymock.tests2.UsageConstraintsTest.testOr":144,"org.easymock.tests.UsageRangeTest.combination":84,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":20,"org.easymock.tests.UsageTest.wrongArguments":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":243,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":41,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":69,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":74,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":116,"org.easymock.tests.UsageVarargTest.varargShortAccepted":331,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":368,"org.easymock.tests2.UsageConstraintsTest.cmpTo":148,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":169,"org.easymock.tests2.CaptureTest.testCaptureFromStub":224,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":286,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":265,"org.easymock.tests.UsageTest.unexpectedCallWithArray":342,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":358,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":366,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":191,"org.easymock.tests2.CaptureTest.testCapture":413,"org.easymock.tests2.UsageConstraintsTest.constraints":141,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":359,"org.easymock.samples.ExampleTest.addAndChangeDocument":291,"org.easymock.tests.UsageStrictMockTest.testVerify":361,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":293,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":357,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":347,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":295,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":90,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":188,"org.easymock.tests.LimitationsTest.abstractClass":271,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":91,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":374,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":182,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":326}}]

[{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack","this":"this"}},{"position":"org.easymock.internal.LastControl:70","failures":[21,22,23,24,1,2,3,4,5,6,7,8,9,10,25,26,27,28,29,30,31,32,11,12,33,34,35,13,14,36,15,16,17,18,37,38,39,40,41,42,19,20,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[67,68,69,63,70,71,72],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[30,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,47,67,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,68,69,63,64,65,70,104],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[78,85,89,91,99,64],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:124","failures":[105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,21,22,23,24,1,2,3,4,5,6,7,8,10,25,26,27,28,29,30,31,32,11,12,33,34,35,13,14,36,129,130,131,132,133,134,135,136,15,16,17,18,37,38,39,40,41,42,19,20,43,44,137,138,139,140,141,142,143,144,145,146,147,73,74,148,149,150,151,152,75,76,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,46,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,47,206,67,88,207,208,209,210,211,212,213,48,49,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,50,51,52,252,53,54,55,56,57,253,98,99,100,254,255,101,102,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,103,68,69,280,280,281,282,283,284,285,286,287,288,289,290,291,292,293,58,59,60,61,62,294,295,296,297,298,63,299,300,64,65,301,70,104,302,303,304,305,306,66,307,308,309,310,311,312,313,314,315,316,317,318,319],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[107,109,110,112,118,120,125,126,127,128,140,143,169,170,172,173,175,177,178,179,180,181,182,46,185,186,187,188,189,190,191,192,193,194,195,196,198,47,67,88,214,215,216,217,218,219,220,221,222,225,226,228,229,230,232,233,234,235,236,237,320,238,239,51,52,53,289,58,59,60,61,62,65,70,104,308,309,310,311],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"position":"org.easymock.ConstructorArgs:54","failures":[105,106,321,322,122,323,324,325,125,326,327,126,328,329,330,331,332,333,334,335,336,127,337,338,339,340,341,128,342,343,344,345,346,347,348,349,190,194,350,198,351],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[280],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[74,75,76,67,95,99,100,101,102,68,69,293,63,64,70],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:325","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[67,68,69,63,70,71,72],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[11],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[74,75,76,67,95,99,100,101,102,68,69,293,63,64,70],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[105,106,122,344,345,346,347,348,349,352,353,354,355,198,351],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[105,105,106,106,114,115,118,122,124,125,126,127,128,168,169,356,170,171,172,173,174,175,176,177,178,180,181,182,183,46,184,185,186,187,188,189,190,191,193,194,357,198,202,358,214,215,216,240,241,359,252,289],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"failures":[73,74,75,76,360,361,362,363,47,67,88,98,100,101,102,103,68,69,63,64,65,70,104],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[122,346,347,353,354,364,365,366,367,368,369,370,371,198,351],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[67,68,69,63,70,71,72],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"buffer","i":"matches"}},{"position":"org.easymock.Capture:82","failures":[15,17,18,37,38,39,40,42,372,19,20,44],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:60","failures":[321,322,344,345,346,348,349,190,194,350,351],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[105,105,106,106,114,115,118,122,124,125,126,127,128,168,373,169,356,170,171,172,173,174,175,374,176,177,178,180,181,182,183,46,184,185,186,187,188,189,190,191,193,194,357,375,198,202,358,214,215,216,376,240,241,359,252,377,378,289],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1518","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","type":"CtInvocationImpl"},"failures":[2,7,11],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[379,380],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[105,106,107,108,109,110,111,112,381,113,114,115,116,117,118,119,120,121,122,123,124,382,383,384,385,323,324,325,125,326,327,126,328,329,330,331,332,333,334,335,336,127,337,338,339,340,341,128,342,343,21,386,22,23,24,1,2,387,3,4,5,6,7,8,9,10,25,26,27,28,29,30,31,32,11,12,33,34,35,13,14,36,129,388,389,130,131,132,133,134,135,136,15,16,17,18,37,38,39,40,41,42,19,20,43,44,137,138,139,140,141,390,142,143,144,391,145,146,147,73,74,148,149,150,151,152,75,76,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,356,392,170,171,172,173,347,174,175,176,177,178,179,180,181,182,183,393,46,355,394,184,185,186,187,395,396,188,189,190,191,192,193,194,397,398,195,196,399,400,401,402,403,197,404,405,406,407,408,409,410,360,361,362,363,198,351,411,412,413,414,415,199,416,417,418,419,420,421,200,201,202,203,204,205,47,206,67,88,207,208,209,210,211,212,213,422,48,49,423,379,424,425,426,380,427,428,429,358,214,215,430,216,431,432,433,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,96,97,434,435,436,437,438,439,440,237,320,238,239,441,376,442,443,444,445,446,447,448,240,241,359,449,450,451,452,242,243,244,453,245,246,247,248,249,250,251,50,51,52,454,252,455,456,457,458,459,460,461,462,463,464,465,466,53,54,55,56,57,253,98,99,100,254,255,101,102,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,103,68,69,467,468,469,377,470,471,378,472,473,474,475,476,281,282,283,284,285,286,287,288,477,478,289,479,290,480,291,292,481,482,293,58,59,60,61,62,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,294,295,296,297,298,507,508,509,63,299,300,64,65,301,70,104,302,510,303,304,305,306,66,307,511,512,513,514,515,308,309,310,311,312,516,517,313,314,315,316,317,318,319],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[74,75,76,67,95,99,100,101,102,68,69,63,64,70],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1916","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[121,21,22,23,38,39,147,180,181,182,187,204,205,47,206,67,88,207,208,209,428,431,237,320,238,239,242,243,244,245,246,247,248,249,250,251,50,51,299,300,64,65,301,70,104,302,510],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[116,117,399,400,401,402,403,197,404,405,406,407,408,409,411,412,413,414,415,199,416,417,418,419,420,421],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"qualifier":"qualifier","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"failures":[518],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[105,105,106,106,114,115,118,122,124,382,383,323,324,325,125,326,327,126,328,329,330,331,332,333,334,335,336,127,337,338,339,340,341,128,342,343,519,168,373,169,356,392,170,171,172,173,347,174,175,520,374,176,177,178,180,181,182,183,46,355,394,184,185,186,187,395,396,188,189,190,191,193,194,521,357,522,375,523,524,198,351,200,201,202,423,379,424,425,426,380,427,428,429,358,214,215,216,433,440,441,376,442,443,444,445,446,447,448,240,241,359,449,252,377,378,477,478,289,479],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.MockBuilder:210","failures":[105,105,106,106,122,0,347,355,198,351],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[44],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[461],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"threadSafe"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:78","sourceCode":"org.easymock.internal.ExpectedInvocation = new org.easymock.internal.ExpectedInvocation(org.easymock.internal.Invocation , java.util.List<org.easymock.IArgumentMatcher>)","type":"CtAssignmentImpl"},"failures":[105,105,106,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,21,22,23,24,1,2,3,4,5,6,7,8,9,10,25,26,27,28,29,30,31,32,11,12,33,34,35,13,14,36,129,388,389,130,131,132,15,16,17,18,37,38,39,40,41,42,19,20,43,44,137,138,139,140,141,390,142,143,144,391,145,146,147,73,74,148,149,150,151,152,75,76,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,169,170,172,173,175,177,178,179,180,181,182,46,185,186,187,188,189,190,191,192,193,194,195,196,197,360,361,362,363,198,199,200,201,202,203,204,205,47,206,67,88,207,208,209,48,49,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,96,97,237,320,238,239,240,241,359,451,242,243,244,245,246,247,248,249,250,251,50,51,52,454,252,53,54,55,56,57,253,98,100,254,255,101,102,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,103,68,69,467,468,469,474,475,476,281,282,283,284,285,286,287,288,289,290,480,291,292,481,482,58,59,60,61,62,499,505,507,508,509,63,299,300,64,65,301,70,104,302,510,303,304,305,306,66,307,512,513,308,309,310,311,312,516,313,314,315,316,318,319],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[23,31,35,525],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":2,"org.easymock.tests2.UsageTest.argumentsOrdered":76,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":253,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":165,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":416,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":493,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":149,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":117,"org.easymock.tests2.DelegateToTest.testReturnException":142,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":304,"org.easymock.tests.MockingTest.testPartialClassMocking":214,"org.easymock.tests.MockClassControlTest.testToString":442,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":410,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":502,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":396,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":331,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":126,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":257,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":196,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":365,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":8,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":53,"org.easymock.tests2.UsageTest.wrongArguments":74,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":409,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":212,"org.easymock.samples.ExampleTest.answerVsDelegate":108,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":378,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":432,"org.easymock.tests2.UsageConstraintsTest.testNull":4,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":180,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":447,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":164,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":521,"org.easymock.tests2.CaptureTest.testPrimitive":18,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":57,"org.easymock.tests.UsageTest.moreThanOneArgument":98,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":276,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":179,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":310,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":511,"org.easymock.tests.UsageTest.argumentsOrdered":102,"org.easymock.tests.UsageVarargTest.varargIntAccepted":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":498,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":86,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":58,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":168,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":370,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":420,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":485,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":62,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":81,"org.easymock.tests.ReplayStateInvalidUsageTest.times":463,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":197,"org.easymock.tests2.DependencyTest.testClassMocking":397,"org.easymock.tests2.AnswerTest.answer":129,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":9,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":500,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":136,"org.easymock.tests2.CaptureTest.testAnd":15,"org.easymock.tests2.UsageTest.strictResetToDefault":147,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":184,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":345,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":309,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":159,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":238,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":515,"org.easymock.tests2.DelegateToTest.testDelegate":145,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":272,"org.easymock.tests.LimitationsTest.mockFinalMethod":479,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":66,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":298,"org.easymock.tests2.DependencyTest.testClassMockingSupport":398,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":96,"org.easymock.tests2.CaptureTest.testCapture1_2446744":37,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":393,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":270,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":134,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":457,"org.easymock.tests.UsageThrowableTest.throwError":281,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":471,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":421,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":312,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":352,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":343,"org.easymock.samples.PartialClassMockTest.testGetArea":118,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":458,"org.easymock.tests.MockingTest.testInterfaceMocking":430,"org.easymock.tests2.CompareToTest.testLessOrEqual":525,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":59,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":468,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":440,"org.easymock.tests2.UsageTest.niceToStrict":148,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":332,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":483,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":170,"org.easymock.tests2.MockBuilderTest.testCreateMock":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":339,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":406,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":78,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":266,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":160,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":509,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":516,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":210,"org.easymock.tests.UsageOverloadedMethodTest.overloading":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":341,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":28,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":292,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":228,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":277,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":27,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":42,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":453,"org.easymock.tests.MockClassControlTest.testEquals":446,"org.easymock.tests2.EasyMockSupportClassTest.testAll":125,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":241,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":83,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":274,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":357,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":135,"org.easymock.tests2.CaptureTest.testCaptureAll":16,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":296,"org.easymock.tests.MockNameTest.defaultName":422,"org.easymock.tests2.UsageConstraintsTest.testMatches":29,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":455,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":311,"org.easymock.samples.ExampleTest.voteForRemovals":112,"org.easymock.tests.UsageVarargTest.allKinds":50,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":103,"org.easymock.samples.BasicClassMockTest.testPrintContent":115,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":297,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":287,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":204,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":417,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":391,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":307,"org.easymock.tests2.UsageConstraintsTest.greaterThan":31,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":326,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":320,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":187,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":427,"org.easymock.samples.ExampleTest.voteForRemoval":109,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":395,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":138,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":520,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":472,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":183,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":146,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":252,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":490,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":157,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":324,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":303,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":390,"org.easymock.tests2.CaptureTest.testCaptureFirst":44,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":489,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":158,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":154,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":293,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":224,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":140,"org.easymock.tests2.CaptureTest.testCapture2_2446744":43,"org.easymock.tests2.UsageTest.moreThanOneArgument":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":501,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":175,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":251,"org.easymock.tests.GenericTest.testBridgedEquals":449,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":318,"org.easymock.tests.UsageExpectAndReturnTest.longType":220,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":294,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":275,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":374,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":454,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":34,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":273,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":475,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":308,"org.easymock.tests.UsageCallCountTest.tooManyCalls":319,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":90,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":340,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":225,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":408,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":262,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":286,"org.easymock.tests.MockingTest.testNiceClassMocking":433,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":189,"org.easymock.tests.MockingTest.testClassMocking":429,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":517,"org.easymock.tests2.UsageConstraintsTest.testContains":26,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":373,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":202,"org.easymock.tests2.UsageConstraintsTest.testFind":3,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":279,"org.easymock.tests.MockTypeTest.fromEasyMockClass":470,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":22,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":299,"org.easymock.tests.UsageExpectAndReturnTest.object":227,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":407,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":163,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":246,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":366,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":438,"org.easymock.tests.UsageTest.exactCallCountByLastCall":256,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":488,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":512,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":450,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":94,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":351,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":233,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":242,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":291,"org.easymock.tests.MockClassControlTest.testHashCode":445,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":412,"org.easymock.tests2.EasyMockSupportTest.testVerify":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":334,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":80,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":513,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":508,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":290,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":133,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":45,"org.easymock.tests.UsageVarargTest.varargCharAccepted":245,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":506,"org.easymock.tests2.UsageTest.openCallCountByLastCall":150,"org.easymock.tests.DefaultClassInstantiatorTest.object":423,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":166,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":507,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":436,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":95,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":335,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":524,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":284,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":402,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":411,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":444,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":263,"org.easymock.tests.CapturesMatcherTest.test":280,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":234,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":474,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":443,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":128,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":82,"org.easymock.tests2.UsageTest.resumeIfFailure":153,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":377,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":306,"org.easymock.tests2.StubTest.stubWithReturnValue":209,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":346,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":35,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":226,"org.easymock.tests2.SerializationTest.testAllMockedMethod":124,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":499,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":354,"org.easymock.samples.SupportTest.voteForRemovals":120,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":85,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":448,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":414,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":269,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":505,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":388,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":452,"org.easymock.tests.UsageExpectAndThrowTest.object":267,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":12,"org.easymock.tests2.DelegateToTest.testWrongClass":144,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":51,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":52,"org.easymock.samples.ConstructorCalledMockTest.testTax":105,"org.easymock.tests.UsageStrictMockTest.range":70,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":384,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":162,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":188,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":268,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":172,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":465,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":323,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":211,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":89,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":469,"org.easymock.tests2.CaptureTest.testCaptureNone":41,"org.easymock.tests.UsageUnorderedTest.message":63,"org.easymock.tests.UsageVerifyTest.twoReturns":69,"org.easymock.tests.UsageVarargTest.varargByteAccepted":250,"org.easymock.tests2.ThreadingTest.testThreadSafe":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":337,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":316,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":439,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":114,"org.easymock.tests2.CaptureTest.testCapture_2617107":17,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":87,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":434,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":503,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":56,"org.easymock.tests2.UsageConstraintsTest.any":10,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":462,"org.easymock.tests2.StubTest.stub":208,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":504,"org.easymock.tests.UsageExpectAndThrowTest.longType":260,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":305,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":426,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":461,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":206,"org.easymock.tests2.SerializationTest.testClass":122,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":199,"org.easymock.tests.LimitationsTest.mockNativeMethod":289,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":236,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":359,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":523,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":401,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":207,"org.easymock.tests2.NameTest.nameForMocksControl":363,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":403,"org.easymock.tests2.MockedExceptionTest.testMockedException":201,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":327,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":255,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":386,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":216,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":261,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":177,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":173,"org.easymock.tests.MockingTest.testNicePartialClassMocking":215,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":182,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":399,"org.easymock.tests2.CaptureTest.testCaptureLast":40,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":364,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":97,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":7,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":194,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":33,"org.easymock.tests.MockingTest.testTwoMocks":358,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":350,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":217,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":265,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":75,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":14,"org.easymock.samples.ExampleTest.removeNonExistingDocument":381,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":459,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":405,"org.easymock.tests.UsageStrictMockTest.differentMethods":104,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":413,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":424,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":139,"org.easymock.tests2.ConstraintsToStringTest.andToString":84,"org.easymock.tests2.MockBuilderTest.testCreateMockString":176,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":441,"org.easymock.tests.UsageExpectAndThrowTest.floatType":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":328,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":325,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":130,"org.easymock.tests.UsageVerifyTest.twoThrows":68,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":480,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":127,"org.easymock.samples.ExampleTest.voteAgainstRemoval":110,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":494,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":467,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":186,"org.easymock.tests.LimitationsTest.privateConstructor":478,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":322,"org.easymock.tests2.UsageConstraintsTest.testNotNull":13,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":200,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":288,"org.easymock.tests2.UsageTest.defaultResetToNice":152,"org.easymock.samples.ExampleTest.voteAgainstRemovals":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":495,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":232,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":400,"org.easymock.tests.UsageVarargTest.differentLength":247,"org.easymock.tests2.CallbackTest.callback":121,"org.easymock.tests2.UsageConstraintsTest.equals":387,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":92,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":355,"org.easymock.tests.UsageTest.openCallCountByLastCall":254,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":23,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":55,"org.easymock.tests.UsageCallCountTest.tooFewCalls":314,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":191,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":213,"org.easymock.tests.UsageThrowableTest.throwCheckedException":285,"org.easymock.tests.MockingTest.testStrictClassMocking":428,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":91,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":49,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":193,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":404,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":190,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":464,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":192,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":132,"org.easymock.tests.ObjectMethodsTest.testHashCode":437,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":369,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":141,"org.easymock.tests2.NameTest.nameForNiceMock":362,"org.easymock.tests2.DependencyTest.testInterfaceMocking":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":367,"org.easymock.samples.ExampleTest.addDocument":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":338,"org.easymock.tests2.DelegateToTest.testStubDelegate":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":342,"org.easymock.tests2.AnswerTest.stubAnswer":131,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":65,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":0,"org.easymock.tests.UsageVarargTest.varargLongAccepted":249,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":302,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":492,"org.easymock.tests.UsageExpectAndReturnTest.floatType":219,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":235,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":198,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":106,"org.easymock.tests2.ConstraintsToStringTest.orToString":77,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":481,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":419,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":32,"org.easymock.tests.UsageThrowableTest.noUpperLimit":282,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":24,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":382,"org.easymock.tests2.SerializationTest.test":123,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":38,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":379,"org.easymock.tests2.UsageConstraintsTest.testSame":5,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":218,"org.easymock.samples.SupportTest.addDocument":119,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":329,"org.easymock.tests.GenericTest.testPackageScope":240,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":514,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":487,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":418,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":431,"org.easymock.tests2.NameTest.nameForMock":360,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":229,"org.easymock.tests2.UsageStrictMockTest.differentMethods":88,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":349,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":394,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":221,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":271,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":435,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":239,"org.easymock.tests2.MockedExceptionTest.testRealException":203,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":497,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":385,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":93,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":353,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":496,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":47,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":466,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":54,"org.easymock.tests2.NameTest.nameForStrictMock":361,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":392,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":21,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":181,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":383,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":425,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":11,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":71,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":169,"org.easymock.tests2.UsageStrictMockTest.range":67,"org.easymock.tests2.UsageConstraintsTest.lessThan":36,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":522,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":415,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":519,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":491,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":156,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":368,"org.easymock.tests2.CaptureTest.testCaptureRightOne":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":333,"org.easymock.tests2.UsageConstraintsTest.testOr":6,"org.easymock.tests.UsageRangeTest.combination":237,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":178,"org.easymock.tests.UsageTest.wrongArguments":100,"org.easymock.tests2.MockBuilderTest.testWithConstructor":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":330,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":376,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":484,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":230,"org.easymock.tests.UsageVarargTest.varargShortAccepted":248,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":380,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":317,"org.easymock.tests2.UsageConstraintsTest.cmpTo":25,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":389,"org.easymock.tests2.CompareToTest.testLessThan":518,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":486,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":151,"org.easymock.tests2.CaptureTest.testCaptureFromStub":20,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":456,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":356,"org.easymock.tests.UsageTest.unexpectedCallWithArray":99,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":64,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":315,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":348,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":231,"org.easymock.tests2.CaptureTest.testCapture":372,"org.easymock.tests2.UsageConstraintsTest.constraints":1,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":301,"org.easymock.samples.ExampleTest.addAndChangeDocument":113,"org.easymock.tests2.ConstraintsToStringTest.notToString":79,"org.easymock.tests.UsageStrictMockTest.testVerify":510,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":116,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":300,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":295,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":39,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":60,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":375,"org.easymock.tests.LimitationsTest.abstractClass":477,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":223,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":482,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":61,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":161,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":72,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":243}}]

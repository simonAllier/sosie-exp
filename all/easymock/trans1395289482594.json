[{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[1],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:130","sourceCode":"java.io.ObjectOutputStream.writeObject(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:121","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"failures":[2,3,4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stream":"stream"}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[5,6,7,8,9,10,11,12,13],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[14,15],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"position":"org.easymock.internal.Range:40","failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,5,6,46,47,48,49,7,8,50,9,51,52,53,54,55,56,57,58,59,10,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,11,88,12,89,90,91,92,93,94,95,13,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,2,3,4,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,1,381,382,383,384,385,386,387,388,389,390,391,392,393,0,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,15,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[489,50,55,66],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1235","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return org.easymock.internal.AndroidSupport.boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[54],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[19,20,21,22,23,24,26,27,28,29,30,31,32,41,43,44,45,5,6,47,48,49,7,8,50,51,52,53,54,55,56,57,58,59,10,60,61,62,63,64,65,66,11,88,12,89,90,91,92,93,94,95,13,96,97,98,99,100,101,102,103,104,107,113,116,117,118,119,120,121,122,123,124,130,137,138,139,140,141,142,143,144,146,147,148,149,152,153,154,161,169,170,171,173,181,182,183,186,188,192,193,194,195,196,197,198,200,201,202,203,204,208,230,233,234,235,236,237,238,239,240,241,242,3,4,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,309,310,311,312,313,322,324,325,333,335,336,337,338,340,341,342,343,344,345,346,348,349,366,370,371,373,374,375,376,377,378,379,380,381,382,384,385,386,387,411,412,413,415,416,417,418,419,420,421,422,429,430,433,435,436,437,438,439,444,445,446,447,448,452,455,458,459,460,461,462,463,464,465,466,469,470,471,472,474,475,476,477,478,479,15,480,481,482,483,484,485],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[19,20,21,22,23,24,26,27,28,29,30,31,32,41,43,44,45,5,6,47,48,49,7,8,50,51,52,53,54,55,56,57,58,59,10,60,61,62,63,64,65,66,11,88,12,89,90,91,92,93,94,95,13,96,97,98,99,100,101,102,103,104,107,116,117,118,119,120,121,122,123,124,130,137,138,139,141,142,143,144,146,148,149,152,153,154,161,169,170,171,173,181,182,183,186,188,192,193,194,195,196,197,198,200,201,202,203,204,208,230,233,234,235,237,238,239,240,241,242,3,4,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,309,310,311,312,313,322,324,325,333,335,336,337,338,341,342,343,345,346,348,349,366,370,371,373,374,375,376,377,378,379,380,381,382,384,385,386,387,411,412,413,415,416,418,419,420,421,422,429,430,433,435,436,437,438,439,444,445,446,447,448,452,455,458,459,460,461,462,463,464,465,466,469,470,471,472,474,475,476,477,479,480,481,482,483,484],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[388,389,390,391,392,393,0,394,395,396,397,398,399,400,401,402,404,405,406,407,408,410],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[14,490,491,492,339,15],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[493,494,495],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:81","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[27,30,125,126,127,129,131,132,133,134,135,136,156,157,158,160,162,163,164,165,166,167],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[2,3,4,496],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[497],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[264,265,368,369],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:127","sourceCode":"java.lang.Object[][int] = java.lang.Object","type":"CtAssignmentImpl"},"failures":[358],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[306],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[14,490,491,492,339,15],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"candidateMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"this.org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[263,264,265,307,394],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[113],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[100],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[37,38,39,40,139,140,146,147,238,241,338,340,343,344,366,465,466,15,480,483],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[5,6,7,8,9,10,11,12,13],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1569","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[110],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[121,122,123,124,137,144,182,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,325,337,342,371,373,375,376,377,378,379,380,387,437,438,458,459,460,461,462,463,465],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,43,6,8,50,51,52,54,57,10,60,61,62,63,67,68,69,70,71,73,77,78,79,81,84,85,87,11,88,12,89,91,92,93,94,95,13,98,99,100,101,102,103,104,105,107,110,112,119,120,121,122,123,130,137,138,140,141,142,145,146,147,149,152,153,154,155,161,169,171,181,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,200,201,202,203,204,208,211,221,227,230,233,236,237,238,239,240,241,242,2,3,4,245,246,248,253,258,269,270,272,277,282,290,291,293,297,298,299,300,301,302,303,304,305,306,307,308,322,324,325,327,328,330,339,340,343,344,345,346,352,353,354,355,356,358,366,373,374,375,376,377,378,379,380,381,382,385,386,411,412,413,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,433,437,438,440,441,442,443,453,454,455,465,466,467,468,469,470,471,472,473,474,475,478,479,15,480,481,482,483,484,485],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1530","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[16,17,17,19,20,21,22,23,24,25,32,33,44,45,5,6,47,48,49,7,8,50,51,52,53,54,55,56,57,58,59,10,60,61,63,64,65,66,73,77,79,81,84,85,87,11,88,89,90,93,94,95,13,97,98,99,100,101,102,103,104,107,110,111,112,113,116,117,118,119,120,121,123,130,137,138,139,141,142,143,144,145,146,148,149,152,153,154,161,170,182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,200,201,202,203,204,208,211,221,227,230,234,238,239,240,241,242,2,3,4,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,289,290,291,293,297,327,328,333,334,335,336,337,338,339,341,342,345,346,370,371,373,374,375,376,377,378,379,380,381,385,386,387,433,435,436,439,440,444,445,446,447,448,464,465,466,467,476,477,480,481,482,483,484],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[150,151],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[33,34,80,83,498,499,500,501,502,2],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1901","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","type":"CtInvocationImpl"},"failures":[57],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[503,58],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:113","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[98],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[486],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[5,6,48,7,8,9,10,64,11,12,13],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[37,38,39,40,139,140,146,147,238,240,241,338,340,343,344,366,464,465,466,15,480,482,483],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":6,"org.easymock.tests2.UsageTest.argumentsOrdered":147,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":337,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":202,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":397,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":142,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":27,"org.easymock.tests2.DelegateToTest.testReturnException":169,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":459,"org.easymock.tests.MockingTest.testPartialClassMocking":290,"org.easymock.tests.MockClassControlTest.testToString":425,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":36,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":406,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":215,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":211,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":243,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":153,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":498,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":50,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":435,"org.easymock.tests2.UsageTest.wrongArguments":140,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":167,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":442,"org.easymock.samples.ExampleTest.answerVsDelegate":20,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":319,"org.easymock.tests2.UsageConstraintsTest.testNull":48,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":295,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":102,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":430,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":201,"org.easymock.tests2.CaptureTest.testPrimitive":89,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":439,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":262,"org.easymock.tests.UsageTest.moreThanOneArgument":338,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":311,"org.easymock.tests.UsageTest.argumentsOrdered":344,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":347,"org.easymock.tests.UsageVarargTest.varargIntAccepted":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":402,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":444,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":71,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":176,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":135,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":390,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":448,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":494,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":161,"org.easymock.tests.ReplayStateInvalidUsageTest.times":305,"org.easymock.tests2.DependencyTest.testClassMocking":150,"org.easymock.tests2.AnswerTest.answer":230,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":9,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":404,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":70,"org.easymock.tests2.CaptureTest.testAnd":11,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":316,"org.easymock.tests2.UsageTest.strictResetToDefault":138,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":110,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":75,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":310,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":196,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":335,"org.easymock.tests2.DelegateToTest.testDelegate":173,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":351,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":258,"org.easymock.tests.LimitationsTest.mockFinalMethod":434,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":462,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":356,"org.easymock.tests2.DependencyTest.testClassMockingSupport":151,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":329,"org.easymock.tests2.CaptureTest.testCapture1_2446744":90,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":106,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":256,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":68,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":299,"org.easymock.tests.UsageThrowableTest.throwError":373,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":318,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":136,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":266,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":229,"org.easymock.samples.PartialClassMockTest.testGetArea":16,"org.easymock.tests.MockingTest.testInterfaceMocking":292,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":300,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":445,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":487,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":457,"org.easymock.tests2.UsageTest.niceToStrict":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":388,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":77,"org.easymock.tests2.MockBuilderTest.testCreateMock":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":224,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":164,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":14,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":252,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":197,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":315,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":369,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":467,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":440,"org.easymock.tests.UsageOverloadedMethodTest.overloading":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":226,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":55,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":325,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":385,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":278,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":54,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":95,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":414,"org.easymock.tests.MockClassControlTest.testEquals":429,"org.easymock.tests2.EasyMockSupportClassTest.testAll":208,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":382,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":260,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":497,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":69,"org.easymock.tests2.CaptureTest.testCaptureAll":88,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":354,"org.easymock.tests.MockNameTest.defaultName":372,"org.easymock.tests2.UsageConstraintsTest.testMatches":56,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":297,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":312,"org.easymock.samples.ExampleTest.voteForRemovals":24,"org.easymock.tests.UsageVarargTest.allKinds":422,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":464,"org.easymock.samples.BasicClassMockTest.testPrintContent":29,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":355,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":379,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":236,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":463,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":172,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":132,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":502,"org.easymock.tests2.UsageConstraintsTest.greaterThan":58,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":209,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":334,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":113,"org.easymock.samples.ExampleTest.voteForRemoval":21,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":365,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":117,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":114,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":320,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":177,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":105,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":137,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":346,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":394,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":194,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":375,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":458,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":168,"org.easymock.tests2.CaptureTest.testCaptureFirst":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":0,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":195,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":149,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":328,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":274,"org.easymock.tests2.UsageTest.moreThanOneArgument":139,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":119,"org.easymock.tests2.CaptureTest.testCapture2_2446744":97,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":405,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":85,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":421,"org.easymock.tests.GenericTest.testBridgedEquals":384,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":474,"org.easymock.tests.UsageExpectAndReturnTest.longType":270,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":192,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":352,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":261,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":62,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":332,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":259,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":309,"org.easymock.tests.UsageCallCountTest.tooManyCalls":475,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":495,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":469,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":225,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":275,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":166,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":248,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":378,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":184,"org.easymock.tests.MockingTest.testNiceClassMocking":296,"org.easymock.tests.MockingTest.testClassMocking":288,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":468,"org.easymock.tests2.UsageConstraintsTest.testContains":53,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":123,"org.easymock.tests2.UsageConstraintsTest.testFind":47,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":387,"org.easymock.tests.MockTypeTest.fromEasyMockClass":317,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":478,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":43,"org.easymock.tests.UsageExpectAndReturnTest.object":277,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":107,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":165,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":200,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":499,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":416,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":455,"org.easymock.tests.UsageTest.exactCallCountByLastCall":345,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":393,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":449,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":348,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":34,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":411,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":283,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":324,"org.easymock.tests.MockClassControlTest.testHashCode":428,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":126,"org.easymock.tests2.EasyMockSupportTest.testVerify":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":218,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":493,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":349,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":322,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":368,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":67,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":155,"org.easymock.tests.UsageVarargTest.varargCharAccepted":415,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":357,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":410,"org.easymock.tests2.UsageTest.openCallCountByLastCall":143,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":203,"org.easymock.tests.DefaultClassInstantiatorTest.object":358,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":367,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":453,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":219,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":250,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":376,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":159,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":125,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":427,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":111,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":249,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":284,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":263,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":227,"org.easymock.tests2.UsageTest.resumeIfFailure":148,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":314,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":175,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":461,"org.easymock.tests2.StubTest.stubWithReturnValue":182,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":80,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":63,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":276,"org.easymock.tests2.SerializationTest.testAllMockedMethod":4,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":403,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":490,"org.easymock.samples.SupportTest.voteForRemovals":32,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":1,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":128,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":255,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":496,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":409,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":231,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":451,"org.easymock.tests.UsageExpectAndThrowTest.object":253,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":60,"org.easymock.tests2.DelegateToTest.testWrongClass":171,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":476,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":477,"org.easymock.tests.UsageStrictMockTest.range":482,"org.easymock.samples.ConstructorCalledMockTest.testTax":17,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":179,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":199,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":183,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":254,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":205,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":307,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":343,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":441,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":491,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":488,"org.easymock.tests2.CaptureTest.testCaptureNone":94,"org.easymock.tests.UsageUnorderedTest.message":366,"org.easymock.tests.UsageVerifyTest.twoReturns":466,"org.easymock.tests.UsageVarargTest.varargByteAccepted":420,"org.easymock.tests2.ThreadingTest.testThreadSafe":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":222,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":472,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":456,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":28,"org.easymock.tests2.CaptureTest.testCapture_2617107":12,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":331,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":407,"org.easymock.tests2.UsageConstraintsTest.any":51,"org.easymock.tests2.StubTest.stub":181,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":304,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":265,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":460,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":408,"org.easymock.tests.UsageExpectAndThrowTest.longType":246,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":362,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":303,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":239,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":130,"org.easymock.tests2.SerializationTest.testClass":2,"org.easymock.tests.LimitationsTest.mockNativeMethod":433,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":286,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":383,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":158,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":242,"org.easymock.tests2.NameTest.nameForMocksControl":40,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":160,"org.easymock.tests2.MockedExceptionTest.testMockedException":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":210,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":342,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":42,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":247,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":293,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":99,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":81,"org.easymock.tests.MockingTest.testNicePartialClassMocking":291,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":104,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":156,"org.easymock.tests2.CaptureTest.testCaptureLast":93,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":330,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":190,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":8,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":61,"org.easymock.tests.MockingTest.testTwoMocks":289,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":191,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":267,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":251,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":146,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":65,"org.easymock.samples.ExampleTest.removeNonExistingDocument":25,"org.easymock.tests.UsageStrictMockTest.differentMethods":483,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":163,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":301,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":127,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":360,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":118,"org.easymock.tests2.MockBuilderTest.testCreateMockString":87,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":212,"org.easymock.tests.UsageExpectAndThrowTest.floatType":245,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":207,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":233,"org.easymock.tests.UsageVerifyTest.twoThrows":465,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":35,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":221,"org.easymock.samples.ExampleTest.voteAgainstRemoval":22,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":486,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":398,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":112,"org.easymock.tests.LimitationsTest.privateConstructor":432,"org.easymock.tests2.UsageConstraintsTest.testNotNull":64,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":121,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":380,"org.easymock.tests2.UsageTest.defaultResetToNice":145,"org.easymock.samples.ExampleTest.voteAgainstRemovals":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":399,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":282,"org.easymock.tests.UsageVarargTest.differentLength":417,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":157,"org.easymock.tests2.CallbackTest.callback":154,"org.easymock.tests2.UsageConstraintsTest.equals":46,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":108,"org.easymock.tests.UsageTest.openCallCountByLastCall":341,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":44,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":437,"org.easymock.tests.UsageCallCountTest.tooFewCalls":470,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":186,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":443,"org.easymock.tests.UsageThrowableTest.throwCheckedException":377,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":492,"org.easymock.tests.MockingTest.testStrictClassMocking":287,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":189,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":371,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":185,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":162,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":306,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":188,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":235,"org.easymock.tests2.CompareToTest.testGreateOrEqual":489,"org.easymock.tests.ObjectMethodsTest.testHashCode":454,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":120,"org.easymock.tests2.NameTest.nameForNiceMock":39,"org.easymock.tests2.DependencyTest.testInterfaceMocking":152,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":500,"org.easymock.samples.ExampleTest.addDocument":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":223,"org.easymock.tests2.DelegateToTest.testStubDelegate":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":228,"org.easymock.tests2.AnswerTest.stubAnswer":234,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":480,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":82,"org.easymock.tests.UsageVarargTest.varargLongAccepted":419,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":396,"org.easymock.tests.UsageExpectAndReturnTest.floatType":269,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":285,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":33,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":18,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":134,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":59,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":326,"org.easymock.tests.UsageThrowableTest.noUpperLimit":374,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":45,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":174,"org.easymock.tests2.SerializationTest.test":3,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":91,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":359,"org.easymock.tests2.UsageConstraintsTest.testSame":49,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":268,"org.easymock.samples.SupportTest.addDocument":31,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":187,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":213,"org.easymock.tests.GenericTest.testPackageScope":381,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":350,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":392,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":133,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":294,"org.easymock.tests2.NameTest.nameForMock":37,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":279,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":86,"org.easymock.tests2.UsageStrictMockTest.differentMethods":241,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":109,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":271,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":257,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":452,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":336,"org.easymock.tests2.MockedExceptionTest.testRealException":124,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":401,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":180,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":400,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":238,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":436,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":308,"org.easymock.tests2.NameTest.nameForStrictMock":38,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":76,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":41,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":103,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":178,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":10,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":361,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":73,"org.easymock.tests2.UsageStrictMockTest.range":240,"org.easymock.tests2.UsageConstraintsTest.lessThan":66,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":129,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":501,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":395,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":193,"org.easymock.tests2.CaptureTest.testCaptureRightOne":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":217,"org.easymock.tests2.UsageConstraintsTest.testOr":7,"org.easymock.tests.UsageRangeTest.combination":333,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":100,"org.easymock.tests.UsageTest.wrongArguments":340,"org.easymock.tests2.MockBuilderTest.testWithConstructor":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":214,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":424,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":389,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":280,"org.easymock.tests.UsageVarargTest.varargShortAccepted":418,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":363,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":473,"org.easymock.tests2.UsageConstraintsTest.cmpTo":52,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":391,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":144,"org.easymock.tests2.CaptureTest.testCaptureFromStub":96,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":298,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":74,"org.easymock.tests.UsageTest.unexpectedCallWithArray":339,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":15,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":471,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":281,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":481,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.samples.ExampleTest.addAndChangeDocument":26,"org.easymock.tests.UsageStrictMockTest.testVerify":485,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":30,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":479,"org.easymock.tests2.CompareToTest.testGreateThan":503,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":353,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":92,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":446,"org.easymock.tests.LimitationsTest.abstractClass":431,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":273,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":447,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":327,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":412,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":198}}]

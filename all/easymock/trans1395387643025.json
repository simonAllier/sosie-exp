[{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:109","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[5,6,7,8],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[9,10,11],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:94","failures":[12,13,14,15,16,17,5,18,19,20,21,22,23,24,6,1,7,25,8,2],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"actual","this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return this.java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"properties":"properties","key":"key"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[86,87,88,89,90,91,92,93,93,94,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,12,13,14,15,16,17,5,18,20,120,121,26,122,123,124,125,126,21,22,127,128,23,24,129,6,1,7,25,130,131,132,133,134,135,8,2,3,136,137,138,139,140,141,142,143,144,145,146,27,30,32,36,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,38,42,43,44,45,48,49,165,166,167,168,169,170,171,172,173,174,175,176,177,50,51,52,178,179,53,54,55,56,180,57,58,59,181,60,64,67,77,83,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,334,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,12,13,14,15,16,17,5,18,20,120,121,26,122,123,124,125,126,21,22,127,335,128,23,24,129,6,1,7,25,130,131,132,133,134,135,8,2,3,136,137,138,139,140,141,142,143,144,145,146,336,27,30,31,32,33,36,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,38,39,42,43,44,45,47,48,49,165,166,167,168,169,170,171,172,173,174,175,176,177,50,51,52,178,179,53,54,55,56,180,57,58,59,181,60,64,67,77,83,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,244,245,246,247,248,249,250,337,251,252,253,256,257,258,259,338,339,340,267,268,269,270,271,272,273,274,275,276,277,278,279,280,341,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,342,343,344,345],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[142,30,33,35,38,39,40,44,45,47,48,49,54,55,57,58,346,347,348,349,350,351],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"toStringMethod","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[352,353],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[354],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[108,111,112,167,207,210,211,243,244,245,355,268,333],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[165,172,192,237,244,356,252,267,272,295,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,325,327,328,329,330,331,332,357,358,359,344],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[86,88,89,91,96,99,102,103,108,110,111,117,118,119,12,13,14,15,16,17,5,18,20,120,121,26,122,123,124,125,126,21,22,127,128,23,24,129,6,1,25,130,133,134,135,8,3,136,139,141,142,143,144,145,146,27,31,32,33,36,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,39,42,44,45,48,165,166,167,169,171,172,173,176,177,52,179,53,54,55,56,180,57,58,59,181,64,67,77,83,187,192,197,360,207,209,210,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,239,240,241,242,243,245,246,248,249,250,337,251,252,253,267,268,271,272,275,286,287,288,289,290,292,293,296,297,298,325,327,328,329,330,331,332,333],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,12,13,14,15,16,17,5,18,20,120,121,26,122,123,124,125,126,21,22,127,335,128,23,24,129,6,1,7,25,130,131,132,133,134,135,8,2,3,136,137,138,139,140,141,142,143,144,145,146,336,27,30,31,32,33,36,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,38,39,42,43,44,45,47,48,49,165,166,167,168,169,170,171,172,173,174,175,176,177,50,51,52,178,179,53,54,55,56,180,57,58,59,181,60,64,67,77,83,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,244,245,246,247,248,249,250,4,4,337,251,252,253,256,257,258,259,338,339,340,267,268,269,270,271,272,273,274,275,276,277,278,279,280,341,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,342,343,344,345],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[13],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[26],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:183","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:39","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","type":"CtInvocationImpl"},"failures":[361],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[93,93,94,94,108,118,119,14,15,16,17,121,122,123,125,126,23,24,129,2,199,200,201,202,203,207,246,362,363,364,365,366,286,287,288,289,290,11,292,293,296,297,298],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[30,35,184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:58","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[367,368,369],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[370,371,372,373],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:906","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[22],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[23],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":13,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":267,"org.easymock.tests2.UsageTest.argumentsOrdered":175,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":236,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":170,"org.easymock.tests2.StubTest.stubWithReturnValue":192,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":222,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":97,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":128,"org.easymock.tests2.SerializationTest.testAllMockedMethod":60,"org.easymock.tests2.DelegateToTest.testReturnException":186,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":234,"org.easymock.tests.MockingTest.testPartialClassMocking":248,"org.easymock.samples.SupportTest.voteForRemovals":99,"org.easymock.tests.MockClassControlTest.testToString":349,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":9,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":366,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":316,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":71,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":304,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":67,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":352,"org.easymock.tests.UsageExpectAndThrowTest.object":314,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":22,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":103,"org.easymock.tests2.DelegateToTest.testWrongClass":188,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":297,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":298,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":18,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":292,"org.easymock.tests2.UsageTest.wrongArguments":168,"org.easymock.tests.UsageStrictMockTest.range":209,"org.easymock.samples.ConstructorCalledMockTest.testTax":93,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":195,"org.easymock.samples.ExampleTest.answerVsDelegate":87,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":159,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":348,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":53,"org.easymock.tests2.UsageConstraintsTest.testNull":15,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":315,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":144,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":44,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":161,"org.easymock.tests2.CaptureTest.testPrimitive":25,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":296,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":323,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":273,"org.easymock.tests.UsageTest.moreThanOneArgument":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":61,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":194,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":143,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":201,"org.easymock.tests2.CaptureTest.testCaptureNone":134,"org.easymock.tests.UsageUnorderedTest.message":324,"org.easymock.tests.UsageVerifyTest.twoReturns":245,"org.easymock.tests.UsageVarargTest.varargByteAccepted":283,"org.easymock.tests2.ThreadingTest.testThreadSafe":147,"org.easymock.tests.UsageTest.argumentsOrdered":274,"org.easymock.tests.UsageVarargTest.varargIntAccepted":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":78,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":259,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":100,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":286,"org.easymock.tests2.CaptureTest.testCapture_2617107":7,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":38,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":355,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":295,"org.easymock.tests2.UsageConstraintsTest.any":20,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":43,"org.easymock.tests2.StubTest.stub":191,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":290,"org.easymock.tests.UsageExpectAndThrowTest.longType":307,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":235,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":367,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":263,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":109,"org.easymock.tests2.SerializationTest.testClass":59,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":179,"org.easymock.tests.LimitationsTest.mockNativeMethod":253,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":117,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":360,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":232,"org.easymock.tests2.AnswerTest.answer":137,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":19,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":116,"org.easymock.tests2.CaptureTest.testAnd":6,"org.easymock.tests2.UsageTest.strictResetToDefault":166,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":30,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":112,"org.easymock.tests2.NameTest.nameForMocksControl":185,"org.easymock.tests2.MockedExceptionTest.testMockedException":51,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":200,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":66,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":156,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":272,"org.easymock.tests2.DelegateToTest.testDelegate":189,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":334,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":308,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":250,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":141,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":45,"org.easymock.tests.MockingTest.testNicePartialClassMocking":249,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":319,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":146,"org.easymock.tests2.CaptureTest.testCaptureLast":133,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":237,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":371,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":58,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":5,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":303,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":127,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":370,"org.easymock.tests2.CaptureTest.testCapture1_2446744":130,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":213,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":317,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":312,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":114,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":174,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":24,"org.easymock.tests.UsageThrowableTest.throwError":325,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":262,"org.easymock.tests.UsageStrictMockTest.differentMethods":210,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":149,"org.easymock.tests2.MockBuilderTest.testCreateMockString":49,"org.easymock.tests.UsageExpectAndThrowTest.floatType":306,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":68,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":63,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":138,"org.easymock.tests.UsageVerifyTest.twoThrows":244,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":77,"org.easymock.samples.PartialClassMockTest.testGetArea":96,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":261,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":287,"org.easymock.samples.ExampleTest.voteAgainstRemoval":89,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":10,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":32,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":346,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":72,"org.easymock.tests2.UsageTest.niceToStrict":169,"org.easymock.tests2.UsageConstraintsTest.testNotNull":23,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":332,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":362,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":42,"org.easymock.tests2.MockBuilderTest.testCreateMock":47,"org.easymock.tests2.UsageTest.defaultResetToNice":173,"org.easymock.samples.ExampleTest.voteAgainstRemovals":86,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":228,"org.easymock.tests.UsageVarargTest.differentLength":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":80,"org.easymock.tests2.CallbackTest.callback":190,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":28,"org.easymock.tests.UsageTest.openCallCountByLastCall":271,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":313,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":157,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":118,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":359,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":254,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":294,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":193,"org.easymock.tests.UsageCallCountTest.tooFewCalls":257,"org.easymock.tests.UsageOverloadedMethodTest.overloading":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":76,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":344,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":122,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":337,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":224,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":56,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":368,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":26,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":135,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":196,"org.easymock.tests.UsageThrowableTest.throwCheckedException":329,"org.easymock.tests2.EasyMockSupportClassTest.testAll":64,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":198,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":321,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":301,"org.easymock.tests2.CaptureTest.testCaptureAll":1,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":115,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":247,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":57,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":55,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":264,"org.easymock.tests2.UsageConstraintsTest.testMatches":123,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":180,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":140,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":202,"org.easymock.samples.ExampleTest.voteForRemovals":91,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":151,"org.easymock.tests2.NameTest.nameForNiceMock":184,"org.easymock.tests.UsageVarargTest.allKinds":285,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":243,"org.easymock.tests2.DependencyTest.testInterfaceMocking":102,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":302,"org.easymock.samples.BasicClassMockTest.testPrintContent":101,"org.easymock.samples.ExampleTest.addDocument":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":84,"org.easymock.tests2.DelegateToTest.testStubDelegate":187,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":331,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":106,"org.easymock.tests2.AnswerTest.stubAnswer":139,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":354,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":238,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":207,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":361,"org.easymock.tests2.UsageConstraintsTest.greaterThan":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":65,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":240,"org.easymock.tests.UsageVarargTest.varargLongAccepted":282,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":33,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":211,"org.easymock.samples.ExampleTest.voteForRemoval":88,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":34,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":148,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":231,"org.easymock.tests.UsageExpectAndReturnTest.floatType":215,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":336,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":36,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":94,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":373,"org.easymock.tests.UsageThrowableTest.noUpperLimit":326,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":126,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":291,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":119,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":165,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":131,"org.easymock.tests2.SerializationTest.test":181,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":46,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":369,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":154,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":327,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":214,"org.easymock.tests2.UsageConstraintsTest.testSame":16,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":62,"org.easymock.samples.SupportTest.addDocument":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":233,"org.easymock.tests2.CaptureTest.testCaptureFirst":136,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":155,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":177,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":345,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":69,"org.easymock.tests.GenericTest.testPackageScope":197,"org.easymock.tests2.CaptureTest.testCapture2_2446744":3,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":150,"org.easymock.tests2.UsageTest.moreThanOneArgument":167,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":363,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":284,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":339,"org.easymock.tests2.NameTest.nameForMock":182,"org.easymock.tests.UsageExpectAndReturnTest.longType":216,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":299,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":152,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":322,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":225,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":335,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":11,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":320,"org.easymock.tests2.UsageStrictMockTest.differentMethods":111,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":199,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":29,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":217,"org.easymock.tests.UsageCallCountTest.tooManyCalls":340,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":318,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":242,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":81,"org.easymock.tests2.MockedExceptionTest.testRealException":178,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":365,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":309,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":108,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":330,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":293,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":265,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":54,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":255,"org.easymock.tests2.UsageConstraintsTest.testContains":121,"org.easymock.tests2.NameTest.nameForStrictMock":183,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":52,"org.easymock.tests2.UsageConstraintsTest.testFind":14,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":252,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":41,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":104,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":145,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":204,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":105,"org.easymock.tests.UsageExpectAndReturnTest.object":223,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":21,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":27,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":39,"org.easymock.tests2.UsageStrictMockTest.range":110,"org.easymock.tests2.UsageConstraintsTest.lessThan":129,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":160,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":280,"org.easymock.tests.UsageTest.exactCallCountByLastCall":275,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":246,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":364,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":73,"org.easymock.tests2.CaptureTest.testCaptureRightOne":8,"org.easymock.tests2.UsageConstraintsTest.testOr":17,"org.easymock.tests.UsageRangeTest.combination":239,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":37,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":276,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":229,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":142,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":343,"org.easymock.tests.UsageTest.wrongArguments":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":70,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":266,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":218,"org.easymock.tests2.EasyMockSupportTest.testVerify":164,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":74,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":358,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":342,"org.easymock.tests.UsageVarargTest.varargShortAccepted":281,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":338,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":113,"org.easymock.tests2.UsageConstraintsTest.cmpTo":120,"org.easymock.tests.UsageVarargTest.varargCharAccepted":279,"org.easymock.tests2.CaptureTest.testCaptureMultiple":0,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":353,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":356,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":107,"org.easymock.tests2.UsageTest.openCallCountByLastCall":171,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":172,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":163,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":357,"org.easymock.tests2.CaptureTest.testCaptureFromStub":2,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":260,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":40,"org.easymock.tests.UsageTest.unexpectedCallWithArray":269,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":75,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":328,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":206,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":258,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":227,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":351,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":208,"org.easymock.tests2.UsageConstraintsTest.constraints":12,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":31,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":310,"org.easymock.samples.ExampleTest.addAndChangeDocument":92,"org.easymock.tests.CapturesMatcherTest.test":4,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":230,"org.easymock.tests.UsageStrictMockTest.testVerify":212,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":95,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":350,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":300,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":132,"org.easymock.tests2.UsageTest.resumeIfFailure":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":288,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":347,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":219,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":333,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":289,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":277,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":158}}]

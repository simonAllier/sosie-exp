[{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:920","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Contains:40","failures":[0],"status":-1,"binaryOperator":"(\"contains(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,27,28,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"ret":"ret"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[68],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[69],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result","method":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,30,85,86],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"position":"org.easymock.internal.BridgeMethodResolver:213","failures":[87,88],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[89],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:372","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:556","sourceCode":"final org.easymock.internal.MocksControl org.easymock.internal.MocksControl = org.easymock.internal.LastControl.org.easymock.internal.LastControl.lastControl()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:338","sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","resolvedType":"actualTypeArgument","variable":"variable"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[90,13,14,15,87,16,18,91,19,92,93,94,95,96,97,98,20,99,100,21,22,23,24,101,102,103,104,105,106,107,108,27,27,28,28,29,84,30,31,32,33,34,35,36,37,109,110,38,39,40,41,111,112,113,114,42,43,44,45,46,47,48,49,50,51,52,53,115,54,55,56,57,58,59,116,60,61,62,63,64,65,66,117,118,67],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[119,120,121,122,20,123,124,125,126,127,22,23,24,128,129,130,131,132,133,134,135,136,137,138,139,27,27,28,28,29,140,141,142,143,144,31,145,33,35,146,42,43,44,45,147,46,47,148,52,54,56,57,59,62,63,64,65,66,149],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:115","sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[103,107],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:102","sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","type":"CtIfImpl"},"failures":[150],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[48,151,152,66,117,153,154,155,156,157],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:231","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[158,159,160,161,162,163,164,165,166,167,168,169,170,171,172],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:327","failures":[80,81,173,174],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:112","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[34,175],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[176],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:68","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.InjectionPlan:51","failures":[177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[203],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:104","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[54,60],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[87,16,17,18,88],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[149,204],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[151,117,153,154,155,205,206],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[207],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.InstanceOf:40","failures":[],"status":0,"binaryOperator":"(\"isA(\" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[208],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1263","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:94","sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","type":"CtReturnImpl"},"failures":[209,210,211,212,213,214,119,120,121,215,122,216,217,218,219,70,220,221,71,72,73,74,75,76,68,222,223,224,225,226,227,228,158,159,15,229,230,231,232,160,233,234,161,235,236,237,238,239,240,16,18,241,242,243,244,245,246,247,248,162,20,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,123,124,79,80,81,270,82,125,126,271,127,272,273,274,275,276,277,22,23,24,278,279,280,128,129,130,131,132,281,282,283,133,134,284,285,286,287,288,135,136,137,138,139,289,290,165,166,291,292,167,168,293,294,295,296,297,173,174,298,27,27,28,28,29,140,299,141,142,143,300,144,1,301,2,3,4,5,6,7,302,8,10,11,303,12,83,84,30,85,304,86,31,32,145,33,34,35,37,39,40,41,305,306,307,146,308,42,43,44,45,147,46,47,309,310,311,312,313,314,169,315,316,48,317,318,319,320,321,322,323,324,325,326,327,328,329,207,330,148,331,332,333,334,335,336,337,338,339,340,341,89,342,150,343,344,345,346,347,348,175,349,350,351,352,353,354,355,356,357,358,184,52,54,56,57,59,61,196,62,63,64,65,359,360,361,362,363,364,170,365,366,367,368,369,171,172,370,371,372,373,66,374,176,375,376,149,204],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method","finalizeMethod":"method"}},{"position":"org.easymock.EasyMock:747","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[110,363],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":337,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":289,"org.easymock.tests2.UsageTest.argumentsOrdered":172,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":328,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":74,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":185,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":366,"org.easymock.tests2.StubTest.stubWithReturnValue":86,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":151,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":355,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":134,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":178,"org.easymock.tests2.SerializationTest.testAllMockedMethod":49,"org.easymock.tests2.DelegateToTest.testReturnException":330,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":72,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":68,"org.easymock.tests.MockingTest.testPartialClassMocking":22,"org.easymock.samples.SupportTest.voteForRemovals":144,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":87,"org.easymock.tests.MockClassControlTest.testToString":92,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":182,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":203,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":209,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":261,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":112,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":249,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":222,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":63,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":176,"org.easymock.tests.UsageExpectAndThrowTest.object":259,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":360,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":352,"org.easymock.tests2.DelegateToTest.testWrongClass":331,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":153,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":123,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":124,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":342,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":218,"org.easymock.tests2.UsageTest.wrongArguments":170,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":202,"org.easymock.samples.ConstructorCalledMockTest.testTax":27,"org.easymock.tests.UsageStrictMockTest.range":161,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":296,"org.easymock.samples.ExampleTest.answerVsDelegate":299,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":325,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":14,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":42,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":69,"org.easymock.tests2.UsageConstraintsTest.testNull":339,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":260,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":33,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":327,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":56,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":96,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":118,"org.easymock.tests2.CaptureTest.testPrimitive":3,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":221,"org.easymock.tests.UsageTest.moreThanOneArgument":290,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":268,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":78,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":167,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":295,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":145,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":271,"org.easymock.tests2.CaptureTest.testCaptureNone":302,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":280,"org.easymock.tests.UsageUnorderedTest.message":162,"org.easymock.tests.UsageVerifyTest.twoReturns":159,"org.easymock.tests2.ThreadingTest.testThreadSafe":305,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":210,"org.easymock.tests.UsageTest.argumentsOrdered":168,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":25,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":119,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":206,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":50,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":220,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":189,"org.easymock.tests2.UsageConstraintsTest.any":343,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":55,"org.easymock.tests2.StubTest.stub":304,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":81,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":122,"org.easymock.tests.UsageExpectAndThrowTest.longType":252,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":73,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":106,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":314,"org.easymock.tests2.SerializationTest.testClass":48,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":184,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":196,"org.easymock.tests.LimitationsTest.mockNativeMethod":20,"org.easymock.tests2.AnswerTest.answer":374,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":18,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":139,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":150,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":193,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.UsageTest.strictResetToDefault":363,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":316,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":38,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":195,"org.easymock.tests2.MockedExceptionTest.testMockedException":84,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":126,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":322,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":239,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":292,"org.easymock.tests2.DelegateToTest.testDelegate":333,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":214,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":253,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":24,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":31,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":57,"org.easymock.tests.MockingTest.testNicePartialClassMocking":23,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":264,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":35,"org.easymock.tests2.CaptureTest.testCaptureLast":7,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":75,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":217,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":89,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":47,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":353,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":227,"org.easymock.tests.MockingTest.testTwoMocks":21,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":216,"org.easymock.tests2.CaptureTest.testCapture1_2446744":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":128,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":262,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":310,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":257,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":171,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":357,"org.easymock.tests.UsageThrowableTest.throwError":241,"org.easymock.tests.UsageStrictMockTest.differentMethods":235,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":198,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":181,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":104,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":307,"org.easymock.tests2.MockBuilderTest.testCreateMockString":61,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":190,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":272,"org.easymock.tests.UsageExpectAndThrowTest.floatType":251,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":175,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":376,"org.easymock.tests.UsageVerifyTest.twoThrows":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":64,"org.easymock.samples.PartialClassMockTest.testGetArea":29,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":208,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":120,"org.easymock.samples.ExampleTest.voteAgainstRemoval":142,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":279,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":278,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":40,"org.easymock.tests2.UsageTest.niceToStrict":365,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":250,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":90,"org.easymock.tests.LimitationsTest.privateConstructor":98,"org.easymock.tests2.UsageConstraintsTest.testNotNull":356,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":248,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":83,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":54,"org.easymock.tests2.UsageTest.defaultResetToNice":369,"org.easymock.tests2.MockBuilderTest.testCreateMock":58,"org.easymock.samples.ExampleTest.voteAgainstRemovals":140,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":135,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":192,"org.easymock.tests2.CallbackTest.callback":361,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":199,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":109,"org.easymock.tests.UsageTest.openCallCountByLastCall":291,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":258,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":323,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":334,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":174,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":294,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":70,"org.easymock.tests.UsageOverloadedMethodTest.overloading":230,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":347,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":276,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":285,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":229,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":45,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":346,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":8,"org.easymock.tests.UsageThrowableTest.throwCheckedException":245,"org.easymock.tests.MockClassControlTest.testEquals":95,"org.easymock.tests2.EasyMockSupportClassTest.testAll":62,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":17,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":266,"org.easymock.tests.MockingTest.testStrictClassMocking":99,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":311,"org.easymock.tests2.CaptureTest.testCaptureAll":301,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":225,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":82,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":197,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":44,"org.easymock.tests2.UsageConstraintsTest.testMatches":348,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":147,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":204,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":127,"org.easymock.samples.ExampleTest.voteForRemovals":143,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":205,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":308,"org.easymock.tests.UsageVarargTest.allKinds":269,"org.easymock.tests2.DependencyTest.testInterfaceMocking":359,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":228,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":226,"org.easymock.samples.BasicClassMockTest.testPrintContent":26,"org.easymock.tests2.DelegateToTest.testStubDelegate":148,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":247,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":312,"org.easymock.tests2.AnswerTest.stubAnswer":149,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":332,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":76,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":186,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":233,"org.easymock.tests2.UsageConstraintsTest.greaterThan":349,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":157,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":238,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":41,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":236,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":108,"org.easymock.samples.ExampleTest.voteForRemoval":141,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":306,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":111,"org.easymock.tests.UsageExpectAndReturnTest.floatType":130,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":138,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":116,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":66,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":36,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":28,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":350,"org.easymock.tests.UsageThrowableTest.noUpperLimit":242,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":188,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":362,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":335,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":15,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":113,"org.easymock.tests2.SerializationTest.test":317,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":5,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":77,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":320,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":103,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":243,"org.easymock.tests2.UsageConstraintsTest.testSame":340,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":71,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":207,"org.easymock.tests2.CaptureTest.testCaptureFirst":12,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":321,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":371,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":163,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":283,"org.easymock.tests.GenericTest.testPackageScope":16,"org.easymock.tests2.UsageTest.moreThanOneArgument":364,"org.easymock.tests2.CaptureTest.testCapture2_2446744":303,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":146,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":213,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":59,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":187,"org.easymock.tests.GenericTest.testBridgedEquals":88,"org.easymock.tests.UsageExpectAndReturnTest.longType":131,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":318,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":223,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":286,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":267,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":60,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":354,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":298,"org.easymock.tests2.UsageStrictMockTest.differentMethods":315,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":265,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":80,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":125,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":110,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":132,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":263,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":240,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":273,"org.easymock.tests2.MockedExceptionTest.testRealException":85,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":133,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":201,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":313,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":254,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":246,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":219,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":43,"org.easymock.tests.MockingTest.testNiceClassMocking":101,"org.easymock.tests.MockingTest.testClassMocking":100,"org.easymock.tests2.UsageConstraintsTest.testContains":345,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":51,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":30,"org.easymock.tests2.UsageConstraintsTest.testFind":338,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":231,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":115,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":372,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":34,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":373,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":232,"org.easymock.tests.UsageExpectAndReturnTest.object":284,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":114,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":351,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":105,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":37,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":52,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":200,"org.easymock.tests2.UsageStrictMockTest.range":169,"org.easymock.tests2.UsageConstraintsTest.lessThan":358,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":326,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":154,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":183,"org.easymock.tests.UsageTest.exactCallCountByLastCall":293,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":270,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":319,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":156,"org.easymock.tests2.CaptureTest.testCaptureRightOne":10,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":211,"org.easymock.tests2.UsageConstraintsTest.testOr":341,"org.easymock.tests.UsageRangeTest.combination":237,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":117,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":32,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":136,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":275,"org.easymock.tests.UsageTest.wrongArguments":166,"org.easymock.tests.MockClassControlTest.testHashCode":94,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":180,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":19,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":281,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":287,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":212,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":274,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":107,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":173,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":309,"org.easymock.tests2.UsageConstraintsTest.cmpTo":344,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":375,"org.easymock.tests2.UsageTest.openCallCountByLastCall":367,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":368,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":329,"org.easymock.tests.DefaultClassInstantiatorTest.object":102,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":297,"org.easymock.tests2.CaptureTest.testCaptureFromStub":11,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":53,"org.easymock.tests.UsageTest.unexpectedCallWithArray":165,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":164,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":256,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":244,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":160,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":194,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":179,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":288,"org.easymock.tests2.CaptureTest.testCapture":9,"org.easymock.tests2.UsageConstraintsTest.constraints":336,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":234,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":93,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":39,"org.easymock.samples.ExampleTest.addAndChangeDocument":300,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":255,"org.easymock.tests2.ConstraintsToStringTest.containsToString":0,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":137,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":79,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":65,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":224,"org.easymock.tests2.UsageTest.resumeIfFailure":370,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":6,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":67,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":121,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":282,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":13,"org.easymock.tests.LimitationsTest.abstractClass":97,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":277,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":215,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":324}}]

[{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[0],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[50,51,52,53,54],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[55,56,57,58],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[55,56,57,58],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,95,96,96,97,98,99,24,100,101,102,103,104,105,106,107,25,108,26,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,56,58,142,143,29,144,145,146,147,148,149,150,30,31,151,32,152,153,154,155,156,157,158,159,160,161,162,163],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[164],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[165],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[166,166,167,168,169,170,1,2,3,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,8,208,9,10,209,210,11,12,13,211,212,213,214,215,14,216,217,218,219,220,64,221,222,67,68,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,74,75,76,15,263,264,265,266,267,16,268,269,270,271,272,273,274,93,275,17,18,19,276,20,277,21,22,23,278,94,279,280,281,282,283,284,285,95,96,286,287,288,289,97,98,99,24,290,100,101,102,103,104,107,25,108,26,114,117,127,133,136,137,138,139,291,140,141,292,293,294,295,27,296,297,298,299,300,165,301,302,303,304,305,306,307,28,308,309,310,311,312,313,314,315,316,317,56,57,58,142,29,146,147,148,149,30,31,32,33,318,319,34,35,36,320,321,322,37,38,39,40,323,324,325,326,327,328,329,330,331,332,41,333,334,335,42,43,336,337,44,338,339,340,341,154,161,162,163,342,45,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,46,370,371,47,48,49,372],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[166,166,167,168,169,170,1,2,3,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,8,208,9,10,209,210,11,12,13,211,212,213,214,215,14,216,217,218,219,220,64,221,222,67,68,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,74,75,76,15,263,264,265,266,267,16,268,269,270,271,272,273,274,93,275,17,18,19,276,20,277,21,22,23,278,94,279,280,281,282,283,284,285,95,96,286,287,288,289,97,98,99,24,290,100,101,102,103,104,107,25,108,26,114,117,127,133,136,137,138,139,291,140,141,292,293,294,295,27,296,297,298,299,300,165,301,302,303,304,305,306,307,28,308,309,310,311,312,313,314,315,316,317,56,57,58,142,29,146,147,148,149,30,31,32,33,318,319,34,35,36,320,321,322,37,38,39,40,323,324,325,326,327,328,329,330,331,332,41,333,334,335,42,43,336,337,44,338,339,340,341,154,161,162,163,342,45,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,46,370,371,47,48,49,372],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[373,374],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"failures":[59,60,69,94,103,25,108,110,117,127,133,56,142,29,144,146,147,148,149,30,31,32],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:602","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[196,197,198,199,200,201,202,221,15,263,264,265,266,277,300,302,357,363,364,369,371],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[375,376,9,20,377,378],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[165,356,358,366],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[7,9,10,11,12,15,17,18,20,22,34,37,38,48],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:44","failures":[379,380,381,382,383,167,168,169,170,1,2,3,384,385,386,59,387,388,389,390,60,391,392,164,393,394,171,172,173,395,396,397,398,399,61,400,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,401,193,194,402,403,195,196,197,5,198,199,200,201,202,203,204,205,206,207,8,208,9,10,209,210,11,12,13,211,212,213,404,214,215,14,216,217,218,219,220,405,406,407,62,63,64,65,221,222,66,67,68,69,70,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,373,426,427,428,429,430,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,71,72,73,74,75,431,76,432,433,77,15,263,264,265,266,267,434,78,79,80,81,82,83,435,84,436,437,438,439,440,441,442,443,444,445,446,447,16,448,268,269,270,271,272,273,274,449,450,451,452,85,86,87,88,89,90,91,92,93,275,17,18,453,454,374,455,456,19,276,20,277,21,22,23,278,457,94,279,280,281,282,283,284,458,285,95,96,286,287,288,289,97,98,99,24,290,100,101,102,103,459,104,105,106,107,25,108,26,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,460,291,140,141,461,292,462,293,294,295,27,296,463,297,298,299,300,165,301,464,302,303,304,305,306,307,28,308,309,310,311,312,313,314,315,316,317,56,57,58,142,465,29,144,466,145,146,147,148,467,149,468,150,30,31,469,32,33,318,319,34,35,36,320,321,322,37,38,39,40,152,470,471,472,153,473,474,323,475,476,324,325,326,327,328,329,330,477,478,479,480,481,331,482,483,484,485,486,487,332,41,333,334,335,42,43,336,337,44,338,339,340,488,489,490,491,492,493,494,495,496,497,341,498,499,500,501,502,503,154,155,504,161,162,163,342,45,343,344,345,346,347,348,349,505,506,350,351,507,352,353,354,508,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,509,46,370,371,47,48,49,372],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:83","sourceCode":"return (this.int) == (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[275,454,374,22,23,48,49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"maximum":"maximum","java.lang.Integer.MAX_VALUE":"maximum"}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[379,380,381,382,383,167,168,169,170,1,2,3,384,385,386,59,389,390,60,391,392,164,393,394,171,172,173,395,396,397,398,399,61,400,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,401,193,194,402,403,195,196,197,198,199,200,201,202,203,204,205,206,207,8,208,9,10,209,210,11,12,13,211,212,213,404,214,215,14,216,217,218,219,220,405,406,407,62,63,64,65,221,222,66,67,68,69,70,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,373,426,427,428,429,430,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,71,72,73,74,75,431,76,432,433,77,15,263,264,265,266,267,78,79,80,81,82,83,84,436,437,438,439,440,441,442,443,444,445,446,447,16,448,268,269,270,271,272,273,274,449,450,451,452,85,86,87,88,89,90,91,92,93,275,17,18,453,454,374,455,456,19,276,20,277,21,22,23,278,457,94,279,280,281,282,283,284,458,285,95,95,96,96,286,287,288,289,97,98,99,24,290,100,101,102,103,104,105,106,107,25,108,26,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,291,140,141,292,462,293,294,295,27,296,463,297,298,299,300,165,301,464,302,303,304,305,306,307,28,308,309,310,311,312,313,314,315,316,317,56,57,58,142,29,144,145,146,147,148,149,150,30,31,32,33,318,319,34,35,36,320,321,322,37,38,39,40,152,153,473,474,323,475,476,324,325,326,327,328,329,330,477,478,479,480,481,331,482,483,484,485,486,487,332,41,333,334,335,42,43,336,337,44,338,339,340,489,490,491,492,493,494,495,496,497,341,498,499,500,501,502,503,154,155,161,162,163,342,45,343,344,345,346,347,348,349,350,351,507,352,353,354,508,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,509,46,370,371,47,48,49,372],"status":-1,"binaryOperator":"(java.lang.String != null) && (!org.easymock.internal.Invocation.(org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[27,296,298,300,165,464,310,315,356,358,366],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[301,306,317,510],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,95,96,96,97,98,99,24,100,101,102,103,104,105,106,107,25,108,26,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,56,58,142,143,29,144,145,146,147,148,149,150,30,31,151,32,152,153,154,155,158,161,162,163],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"method","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.Range:83","failures":[173,176,190,8,208,10,209,210,11,12,13,220,15,264,267,275,17,18,20,277,21,22,23,298,302,28,315,33,319,34,320,321,37,38,40,323,325,489,490,491,492,45,349,353,357,358,360,361,362,363,364,369,371,47,48,49],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[56,467,150,154,155,511,512,513,514],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"candidateMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[467,155,511,512,513,53,54],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[375,376,9,20,377,378],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","type":"CtInvocationImpl"},"failures":[166],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[4,5,6,7,9,10,11,12,15,17,18,20,22,23,34,37,38,48,49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[200,279,281,282,284,289],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.MocksControl:136","failures":[59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,95,96,96,97,98,99,24,100,101,102,103,104,105,106,107,25,108,26,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,56,58,142,29,144,145,146,147,148,149,150,30,31,32,152,470,471,153,154,155,161,162,163,505,506],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:81","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[286,287,477,478,479,481,482,483,484,487,493,494,495,497,498,499,500,503],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[375,376,9,20,377,378],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[138,141,461,465,466,467,515,469,516,517,518,155],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"paramType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[414,475,325,326],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[56,467,150,154,155,511,512,513,514],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[27,296,298,300,165,464,310,315,356,358,366],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":296,"org.easymock.tests2.UsageTest.argumentsOrdered":38,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":8,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":338,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":482,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":418,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":36,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":286,"org.easymock.tests2.DelegateToTest.testReturnException":352,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":187,"org.easymock.tests.MockingTest.testPartialClassMocking":74,"org.easymock.tests.MockClassControlTest.testToString":87,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":488,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":426,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":121,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":117,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":223,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":351,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":511,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":301,"org.easymock.tests2.UsageTest.wrongArguments":34,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":263,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":503,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":184,"org.easymock.samples.ExampleTest.answerVsDelegate":280,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":60,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":433,"org.easymock.tests2.UsageConstraintsTest.testNull":298,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":100,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":44,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":92,"org.easymock.tests2.CaptureTest.testPrimitive":359,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":267,"org.easymock.tests.UsageTest.moreThanOneArgument":208,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":242,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":272,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":453,"org.easymock.tests.UsageTest.argumentsOrdered":12,"org.easymock.tests.UsageVarargTest.varargIntAccepted":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":423,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":198,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":142,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":54,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":486,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":471,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":410,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":202,"org.easymock.tests.ReplayStateInvalidUsageTest.times":444,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":341,"org.easymock.tests2.DependencyTest.testClassMocking":505,"org.easymock.tests2.AnswerTest.answer":323,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":464,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":425,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":330,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":388,"org.easymock.tests2.CaptureTest.testAnd":356,"org.easymock.tests2.UsageTest.strictResetToDefault":318,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":466,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":107,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":271,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":335,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":456,"org.easymock.tests2.DelegateToTest.testDelegate":355,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":238,"org.easymock.tests.LimitationsTest.mockFinalMethod":65,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":190,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":207,"org.easymock.tests2.DependencyTest.testClassMockingSupport":506,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":450,"org.easymock.tests2.CaptureTest.testCapture1_2446744":360,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":459,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":236,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":328,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":438,"org.easymock.tests.UsageThrowableTest.throwError":174,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":390,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":487,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":5,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":274,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":516,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":135,"org.easymock.samples.PartialClassMockTest.testGetArea":94,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":439,"org.easymock.tests.MockingTest.testInterfaceMocking":431,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":199,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":122,"org.easymock.tests2.UsageTest.niceToStrict":35,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":61,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":408,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":146,"org.easymock.tests2.MockBuilderTest.testCreateMock":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":130,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":500,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":232,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":377,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":42,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":387,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":381,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":382,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":182,"org.easymock.tests.UsageOverloadedMethodTest.overloading":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":126,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":194,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":306,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":171,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":254,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":305,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":365,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":404,"org.easymock.tests2.EasyMockSupportClassTest.testAll":114,"org.easymock.tests.MockClassControlTest.testEquals":91,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":68,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":240,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":156,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":205,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":329,"org.easymock.tests2.CaptureTest.testCaptureAll":357,"org.easymock.tests.MockNameTest.defaultName":400,"org.easymock.tests2.UsageConstraintsTest.testMatches":307,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":436,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":273,"org.easymock.samples.ExampleTest.voteForRemovals":284,"org.easymock.tests.UsageVarargTest.allKinds":220,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":275,"org.easymock.samples.BasicClassMockTest.testPrintContent":98,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":206,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":180,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":46,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":508,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":483,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":191,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":514,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":435,"org.easymock.tests2.UsageConstraintsTest.greaterThan":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":115,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":448,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":26,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":84,"org.easymock.samples.ExampleTest.voteForRemoval":281,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":109,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":344,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":391,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":472,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":103,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":33,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":93,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":150,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":415,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":333,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":112,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":186,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":507,"org.easymock.tests2.CaptureTest.testCaptureFirst":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":414,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":334,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":40,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":195,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":250,"org.easymock.tests2.UsageTest.moreThanOneArgument":319,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":346,"org.easymock.tests2.CaptureTest.testCapture2_2446744":368,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":31,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":373,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":219,"org.easymock.tests.GenericTest.testBridgedEquals":70,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":518,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":2,"org.easymock.tests.UsageExpectAndReturnTest.longType":246,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":203,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":332,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":151,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":241,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":449,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":313,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":239,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":385,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":270,"org.easymock.tests.UsageCallCountTest.tooManyCalls":3,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":131,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":251,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":502,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":228,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":179,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":137,"org.easymock.tests.MockingTest.testNiceClassMocking":77,"org.easymock.tests.MockingTest.testClassMocking":72,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":143,"org.easymock.tests2.UsageConstraintsTest.testContains":304,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":383,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":163,"org.easymock.tests2.UsageConstraintsTest.testFind":297,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":173,"org.easymock.tests.MockTypeTest.fromEasyMockClass":389,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":19,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":293,"org.easymock.tests.UsageExpectAndReturnTest.object":253,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":104,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":501,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":337,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":512,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":215,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":398,"org.easymock.tests.UsageTest.exactCallCountByLastCall":13,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":413,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":454,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":405,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":155,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":211,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":259,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":193,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":478,"org.easymock.tests.MockClassControlTest.testHashCode":90,"org.easymock.tests2.EasyMockSupportTest.testVerify":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":124,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":374,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":192,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":380,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":6,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":327,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":509,"org.easymock.tests.UsageVarargTest.varargCharAccepted":214,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":434,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":430,"org.easymock.tests2.UsageTest.openCallCountByLastCall":320,"org.easymock.tests.DefaultClassInstantiatorTest.object":78,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":339,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":379,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":396,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":125,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":230,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":177,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":160,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":496,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":477,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":25,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":89,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":229,"org.easymock.tests.CapturesMatcherTest.test":166,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":260,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":133,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":88,"org.easymock.tests2.UsageTest.resumeIfFailure":39,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":59,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":470,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":189,"org.easymock.tests2.StubTest.stubWithReturnValue":349,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":467,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":252,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":314,"org.easymock.tests2.SerializationTest.testAllMockedMethod":58,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":424,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":51,"org.easymock.samples.SupportTest.voteForRemovals":289,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":378,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":66,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":480,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":235,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":55,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":429,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":475,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":407,"org.easymock.tests.UsageExpectAndThrowTest.object":233,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":311,"org.easymock.tests2.DelegateToTest.testWrongClass":354,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":196,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":197,"org.easymock.tests.UsageStrictMockTest.range":22,"org.easymock.samples.ConstructorCalledMockTest.testTax":95,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":473,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":336,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":136,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":234,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":148,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":446,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":111,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":11,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":183,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":375,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":394,"org.easymock.tests2.CaptureTest.testCaptureNone":364,"org.easymock.tests.UsageUnorderedTest.message":15,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":4,"org.easymock.tests.UsageVerifyTest.twoReturns":18,"org.easymock.tests.UsageVarargTest.varargByteAccepted":218,"org.easymock.tests2.ThreadingTest.testThreadSafe":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":128,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":170,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":399,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":97,"org.easymock.tests2.CaptureTest.testCapture_2617107":358,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":452,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":427,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":266,"org.easymock.tests2.UsageConstraintsTest.any":302,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":443,"org.easymock.tests2.StubTest.stub":348,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":386,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":428,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":188,"org.easymock.tests.UsageExpectAndThrowTest.longType":226,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":82,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":442,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":47,"org.easymock.tests2.SerializationTest.testClass":56,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":331,"org.easymock.tests.LimitationsTest.mockNativeMethod":64,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":69,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":262,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":495,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":159,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":372,"org.easymock.tests2.NameTest.nameForMocksControl":492,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":497,"org.easymock.tests2.MockedExceptionTest.testMockedException":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":116,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":210,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":462,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":76,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":227,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":99,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":149,"org.easymock.tests.MockingTest.testNicePartialClassMocking":75,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":102,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":493,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":52,"org.easymock.tests2.CaptureTest.testCaptureLast":363,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":451,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":165,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":141,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":312,"org.easymock.tests.MockingTest.testTwoMocks":73,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":461,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":243,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":231,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":37,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":316,"org.easymock.samples.ExampleTest.removeNonExistingDocument":458,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":499,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":440,"org.easymock.tests.UsageStrictMockTest.differentMethods":23,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":479,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":80,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":345,"org.easymock.tests2.MockBuilderTest.testCreateMockString":32,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":118,"org.easymock.tests.UsageExpectAndThrowTest.floatType":225,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":113,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":324,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":504,"org.easymock.tests.UsageVerifyTest.twoThrows":17,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":127,"org.easymock.samples.ExampleTest.voteAgainstRemoval":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":419,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":164,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":108,"org.easymock.tests.LimitationsTest.privateConstructor":63,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":517,"org.easymock.tests2.UsageConstraintsTest.testNotNull":315,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":181,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":161,"org.easymock.tests2.UsageTest.defaultResetToNice":322,"org.easymock.samples.ExampleTest.voteAgainstRemovals":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":420,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":258,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":494,"org.easymock.tests.UsageVarargTest.differentLength":14,"org.easymock.tests2.CallbackTest.callback":45,"org.easymock.tests2.UsageConstraintsTest.equals":463,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":105,"org.easymock.tests.UsageTest.openCallCountByLastCall":209,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":294,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":265,"org.easymock.tests.UsageCallCountTest.tooFewCalls":168,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":139,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":185,"org.easymock.tests.UsageThrowableTest.throwCheckedException":178,"org.easymock.tests.MockingTest.testStrictClassMocking":71,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":376,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":140,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":222,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":498,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":138,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":445,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":291,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":326,"org.easymock.tests2.CompareToTest.testGreateOrEqual":510,"org.easymock.tests.ObjectMethodsTest.testHashCode":397,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":53,"org.easymock.tests2.NameTest.nameForNiceMock":491,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":347,"org.easymock.tests2.DependencyTest.testInterfaceMocking":350,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":513,"org.easymock.samples.ExampleTest.addDocument":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":134,"org.easymock.tests2.DelegateToTest.testStubDelegate":353,"org.easymock.tests2.AnswerTest.stubAnswer":325,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":277,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":468,"org.easymock.tests.UsageVarargTest.varargLongAccepted":217,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":417,"org.easymock.tests.UsageExpectAndReturnTest.floatType":245,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":261,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":154,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":96,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":485,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":402,"org.easymock.tests.UsageThrowableTest.noUpperLimit":175,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":309,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":295,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":152,"org.easymock.tests2.SerializationTest.test":57,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":361,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":0,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":79,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":244,"org.easymock.tests2.UsageConstraintsTest.testSame":299,"org.easymock.samples.SupportTest.addDocument":288,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":460,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":441,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":119,"org.easymock.tests.GenericTest.testPackageScope":67,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":455,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":412,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":484,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":432,"org.easymock.tests2.NameTest.nameForMock":489,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":255,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":469,"org.easymock.tests2.UsageStrictMockTest.differentMethods":49,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":106,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":247,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":237,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":395,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":269,"org.easymock.tests2.MockedExceptionTest.testRealException":342,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":392,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":422,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":421,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":371,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":447,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":264,"org.easymock.tests2.NameTest.nameForStrictMock":490,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":145,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":292,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":101,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":153,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":81,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":310,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":29,"org.easymock.tests2.UsageStrictMockTest.range":48,"org.easymock.tests2.UsageConstraintsTest.lessThan":317,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":157,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":416,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":123,"org.easymock.tests2.CaptureTest.testCaptureRightOne":366,"org.easymock.tests2.UsageConstraintsTest.testOr":300,"org.easymock.tests.UsageRangeTest.combination":16,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":24,"org.easymock.tests.UsageTest.wrongArguments":10,"org.easymock.tests2.MockBuilderTest.testWithConstructor":465,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":120,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":86,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":409,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":256,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":83,"org.easymock.tests.UsageVarargTest.varargShortAccepted":216,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":1,"org.easymock.tests2.UsageConstraintsTest.cmpTo":303,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":411,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":321,"org.easymock.tests2.CaptureTest.testCaptureFromStub":367,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":437,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":144,"org.easymock.tests.UsageTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":20,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":169,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":515,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":257,"org.easymock.tests2.UsageConstraintsTest.constraints":27,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":21,"org.easymock.samples.ExampleTest.addAndChangeDocument":285,"org.easymock.tests.UsageStrictMockTest.testVerify":457,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":287,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":276,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":204,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":362,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":158,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":200,"org.easymock.tests.LimitationsTest.abstractClass":62,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":249,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":403,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":201,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":43,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":212}}]

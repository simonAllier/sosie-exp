[{"failures":[0,1,2,3,4],"variableMapping":{"type":"leafClass"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:438","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:216","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:42","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","position":"org.easymock.internal.EasyMockProperties:67","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.junit.runners.model.Statement.evaluate()","position":"org.easymock.internal.EasyMockStatement:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n    if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n        java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:382","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","position":"org.easymock.internal.DefaultClassInstantiator:41","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ReflectionUtils:227","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"status":-2},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,0,1,2,3,4,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Injector.org.easymock.internal.Injector.shouldNotAssignTo(java.lang.reflect.Field)) {\n    return null;\n} ","position":"org.easymock.internal.Injector:216","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:840","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:355","type":"CtThrowImpl"},"status":-2},{"failures":[54,55,56,57,58,59,97,122,124,387,459],"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","position":"org.easymock.internal.RecordState:274","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:295","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ClassProxyFactory:107","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","position":"org.easymock.internal.MethodSerializationWrapper:38","type":"CtInvocationImpl"},"status":-2},{"failures":[150,151,152,154,156,157,158,159,160,161,175,176,177,179,181,182,183,184,185,186,466,472],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.concurrent.locks.ReentrantLock()","position":"org.easymock.internal.ReplayState:32","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:71","type":"CtInvocationImpl"},"status":-1},{"failures":[6,7,10,12,13,19,22,25,32,162,210,211,215,283,318,335,373,449,450,454,456,457],"name":"returnValue","position":"org.easymock.internal.Results:53","type":"mutation","return":"return true","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.io.IOException java.io.IOException","position":"org.easymock.internal.EasyMockProperties:66","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>(java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size())","position":"org.easymock.internal.UnorderedBehavior:83","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })))","position":"org.easymock.internal.DefaultClassInstantiator:189","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","position":"org.easymock.internal.MethodSerializationWrapper:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","position":"org.easymock.internal.ReflectionUtils:150","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n        return false;\n    } \n}","position":"org.easymock.internal.matchers.And:38","type":"CtForEachImpl"},"status":-2},{"failures":[169,403],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = !(boolean)","position":"org.easymock.internal.UnorderedBehavior:85","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","position":"org.easymock.internal.ReplayState:48","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","position":"org.easymock.internal.BridgeMethodResolver:141","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-551735356674347591L","position":"org.easymock.internal.matchers.InstanceOf:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:371","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"status":-2},{"failures":[35,475,94,476,477,478,479,480,481,482],"name":"returnValue","position":"org.easymock.internal.ReflectionUtils:181","type":"mutation","return":"return false","status":-1},{"failures":[483],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResults>()","position":"org.easymock.internal.UnorderedBehavior:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:69","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:155","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.MocksBehavior:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    org.easymock.internal.Invocation.validateCaptures();\n    org.easymock.internal.Invocation.clearCaptures();\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:107","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isVarArgs()) {\n    int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1));\n} ","position":"org.easymock.internal.Invocation:136","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"actualTypeArgument":"actualTypeArgument","typeVariableMap":"typeVariableMap","variable":"variable","this":"this"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:326","type":"CtIfImpl"},"status":-2},{"failures":[58,59],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1432","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","position":"org.easymock.internal.RecordState:166","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","position":"org.easymock.internal.DefaultClassInstantiator:89","type":"CtTryImpl"},"status":-2},{"failures":[8],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1290","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3743894206806704049L","position":"org.easymock.internal.matchers.Any:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{"i":"i","arguments":"arguments"},"name":"replace","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:118","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"status":0},{"failures":[430],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","position":"org.easymock.internal.LastControl:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","position":"org.easymock.internal.BridgeMethodResolver:266","type":"CtWhileImpl"},"status":-2},{"failures":[484],"variableMapping":{"count":"i","maximum":"i","minimum":"i"},"name":"replace","transplant":{"sourceCode":"return (int <= int) && (int <= int)","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:121","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:57","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:352","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Object[])(java.lang.Object))","position":"org.easymock.internal.Invocation:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = (java.util.Set<java.lang.reflect.Method>) == null ? new java.lang.reflect.Method[0] : java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.MockBuilder:201","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"\"Answer returning \" + java.lang.Object","name":"math","position":"org.easymock.internal.ReturningAnswer:68","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.ConstructorArgs:69","type":"CtContinueImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","position":"org.easymock.internal.RecordState:55","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.UnorderedBehavior:67","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","position":"org.easymock.EasyMock:1802","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size())","position":"org.easymock.internal.ClassProxyFactory:134","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"number":"number"},"name":"add","transplant":{"sourceCode":"return java.lang.Number.shortValue()","position":"org.easymock.internal.RecordState:197","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"status":-2},{"failures":[485,40,41,42,43,44,45,46,47,48,49,486,50,51,52,53,487],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"or(\")","position":"org.easymock.internal.matchers.Or:47","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:164","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"methodName":"mockName"},"name":"add","transplant":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.Invocation:148","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","position":"org.easymock.Capture:134","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1318","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","position":"org.easymock.internal.MethodSerializationWrapper:58","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"status":-2},{"failures":[212],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod();\n    java.lang.reflect.Method.setAccessible(true);\n    return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments());\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw java.lang.reflect.InvocationTargetException.getCause();\n}","position":"org.easymock.internal.Result:81","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1248","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = ((org.easymock.internal.Invocation)(java.lang.Object))","position":"org.easymock.internal.Invocation:97","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:800","type":"CtInvocationImpl"},"status":-2},{"failures":[11,16,26,31],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","position":"org.easymock.internal.LastControl:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(boolean.boolean, java.lang.Boolean.java.lang.Boolean)","position":"org.easymock.internal.ReflectionUtils:33","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:189","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","position":"org.easymock.EasyMock:1594","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(byte.byte, java.lang.Byte.java.lang.Byte)","position":"org.easymock.internal.ReflectionUtils:34","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:163","type":"CtIfImpl"},"status":-2},{"failures":[20],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(boolean[]))","position":"org.easymock.EasyMock:1581","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:44","type":"CtIfImpl"},"status":-2},{"failures":[5,6,7,8,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,38,39,40,41,43,44,47,48,49,50,52,53,58,60,61,62,63,64,65,66,67,68,69,70,71,83,86,88,89,92,94,95,98,99,100,101,103,104,105,107,108,109,110,111,114,128,131,141,147,155,163,166,168,169,173,180,187,188,189,190,191,192,195,199,200,201,204,205,206,208,210,211,212,215,216,226,228,237,238,240,243,245,246,247,248,249,261,262,264,268,269,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,1,3,317,319,320,321,322,323,324,333,334,335,368,369,372,373,375,392,395,400,402,403,428,431,432,445,446,449,450,453,454,455,456,457,458,460,461,463,469,471],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:137","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","position":"org.easymock.internal.RecordState:253","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","position":"org.easymock.internal.DefaultClassInstantiator:89","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[116,219],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:288","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Invocation.getMethod()","position":"org.easymock.internal.ExpectedInvocation:117","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"annotation":"annotation"},"name":"add","transplant":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock))","position":"org.easymock.internal.Injector:138","type":"CtInvocationImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.Injector:206","type":"CtLocalVariableImpl"},"status":-2},{"failures":[328],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1863","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:71","type":"CtReturnImpl"},"status":-1},{"failures":[487],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:351","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:355","type":"CtThrowImpl"},"status":-2},{"failures":[274,488,489],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1595","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.io.ByteArrayOutputStream.toByteArray()","position":"org.easymock.internal.DefaultClassInstantiator:150","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:85","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"behavior":"behavior"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:865","type":"CtInvocationImpl"},"status":-2},{"failures":[14],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:840","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.concurrent.locks.ReentrantLock()","position":"org.easymock.internal.ReplayState:32","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.ConstructorArgs:56","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","position":"org.easymock.internal.MocksControl:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"genericType":"genericType"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:720","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:212","type":"CtLocalVariableImpl"},"status":-2},{"failures":[168,169,207,213,214,374,375,399,402,403,427,447,448,451,452],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n    org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int);\n}","position":"org.easymock.internal.MocksBehavior:143","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","position":"org.easymock.internal.MockBuilder:104","type":"CtForEachImpl"},"status":-2},{"failures":[15,21,33,490],"binaryOperator":"int >= 0","name":"conditionalBoundary","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:281","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:289","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\")","position":"org.easymock.internal.DefaultClassInstantiator:156","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)","position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":320,"org.easymock.tests2.MockedExceptionTest.testRealException":174,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":132,"org.easymock.tests.UsageVarargTest.varargIntAccepted":435,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":481,"org.easymock.tests.LimitationsTest.mockFinalMethod":244,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":5,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":34,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":143,"org.easymock.tests.UsageCallCountTest.tooManyCalls":289,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":409,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":106,"org.easymock.tests2.StubTest.stubWithReturnValue":163,"org.easymock.tests.UsageVarargTest.allKinds":444,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":149,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":280,"org.easymock.tests2.CaptureTest.testCaptureAll":41,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":268,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":478,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":23,"org.easymock.tests2.CaptureTest.testAnd":40,"org.easymock.tests.UsageStrictMockTest.testVerify":405,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":356,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":389,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":325,"org.easymock.tests.MockClassControlTest.testToString":252,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":98,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":416,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":65,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":308,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":364,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":180,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":482,"org.easymock.tests.UsageThrowableTest.throwError":317,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":372,"org.easymock.samples.SupportTest.addDocument":470,"org.easymock.tests2.StubTest.stub":162,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":420,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":410,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":175,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":194,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":248,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":368,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":238,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":314,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":240,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":202,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":443,"org.easymock.tests.UsageExpectAndThrowTest.object":358,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":145,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":344,"org.easymock.tests2.UsageTest.moreThanOneArgument":206,"org.easymock.tests.UsageVarargTest.varargByteAccepted":442,"org.easymock.tests.MockClassControlTest.testEquals":256,"org.easymock.tests.UsageTest.wrongArguments":448,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":379,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":339,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":179,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":359,"org.easymock.tests2.UsageTest.defaultResetToNice":212,"org.easymock.tests.MockingTest.testNiceClassMocking":267,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":173,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":110,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":89,"org.easymock.tests2.MockBuilderTest.testCreateMock":91,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":111,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":406,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":411,"org.easymock.samples.ExampleTest.voteAgainstRemovals":458,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":164,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":178,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":388,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":456,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":333,"org.easymock.tests2.CaptureTest.testCapture1_2446744":44,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":116,"org.easymock.samples.ExampleTest.voteForRemoval":460,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":120,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":286,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":392,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":432,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":475,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":277,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":404,"org.easymock.tests2.CaptureTest.testCaptureRightOne":50,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":301,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":407,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":56,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":192,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":455,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":408,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":422,"org.easymock.tests2.UsageConstraintsTest.cmpTo":18,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":274,"org.easymock.tests.MockTypeTest.fromEasyMockClass":328,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":184,"org.easymock.tests2.MockedExceptionTest.testMockedException":172,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":30,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":292,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":367,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":373,"org.easymock.samples.PartialClassMockTest.testGetArea":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":224,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":335,"org.easymock.samples.ConstructorCalledMockTest.testTax":467,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":102,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":55,"org.easymock.tests2.UsageTest.argumentsOrdered":214,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":326,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":121,"org.easymock.samples.ExampleTest.removeNonExistingDocument":464,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":59,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":272,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":316,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":300,"org.easymock.tests2.CaptureTest.testCaptureMultiple":485,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":376,"org.easymock.tests2.AnswerTest.answer":54,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":185,"org.easymock.tests.MockingTest.testNicePartialClassMocking":262,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":400,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":249,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":477,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":294,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":421,"org.easymock.tests.UsageExpectAndThrowTest.longType":351,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":332,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":141,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":67,"org.easymock.tests.UsageTest.argumentsOrdered":452,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":8,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":88,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":313,"org.easymock.tests2.NameTest.nameForStrictMock":75,"org.easymock.tests2.MockBuilderTest.testCreateMockString":93,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":370,"org.easymock.tests2.CaptureTest.testCaptureNone":48,"org.easymock.tests2.SerializationTest.testClass":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":223,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":237,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":341,"org.easymock.tests.MockingTest.testInterfaceMocking":263,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":473,"org.easymock.tests2.EasyMockSupportTest.testVerify":72,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":337,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":182,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":87,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":353,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":266,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":29,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":204,"org.easymock.tests.GenericTest.testBridgedEquals":4,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":92,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":312,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":15,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":103,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":187,"org.easymock.tests2.UsageConstraintsTest.testOr":13,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":108,"org.easymock.tests.MockClassControlTest.testHashCode":255,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":151,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":73,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":269,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":307,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":324,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":330,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":476,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":488,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":291,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":99,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":129,"org.easymock.tests2.UsageConstraintsTest.testSame":12,"org.easymock.tests2.UsageTest.resumeIfFailure":215,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":382,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":104,"org.easymock.tests.UsageOverloadedMethodTest.overloading":334,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":196,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":331,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":154,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":137,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":386,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":468,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":136,"org.easymock.tests.UsageTest.openCallCountByLastCall":449,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":354,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":385,"org.easymock.tests2.NameTest.nameForNiceMock":76,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":413,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":181,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":457,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":290,"org.easymock.tests2.CaptureTest.testPrimitive":43,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":189,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":381,"org.easymock.samples.BasicClassMockTest.testPrintContent":474,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":245,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":198,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":122,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":288,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":282,"org.easymock.tests2.UsageStrictMockTest.differentMethods":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":138,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":62,"org.easymock.tests.MockingTest.testClassMocking":259,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":3,"org.easymock.tests2.CaptureTest.testCaptureLast":47,"org.easymock.tests2.UsageConstraintsTest.equals":9,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":287,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":349,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":285,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":39,"org.easymock.tests.UsageStrictMockTest.range":402,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":450,"org.easymock.tests.InvocationTest.testEquals":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":139,"org.easymock.tests.UsageTest.unexpectedCallWithArray":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":220,"org.easymock.tests.MatchableArgumentsTest.testEquals":483,"org.easymock.samples.ExampleTest.addDocument":462,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":265,"org.easymock.tests2.CompareToTest.testGreateOrEqual":490,"org.easymock.tests2.UsageConstraintsTest.lessThan":33,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":393,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":451,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":387,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":419,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":489,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":229,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":118,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":276,"org.easymock.tests2.UsageStrictMockTest.range":168,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":105,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":378,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":222,"org.easymock.tests.UsageTest.moreThanOneArgument":446,"org.easymock.tests2.UsageTest.openCallCountByLastCall":210,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":83,"org.easymock.tests.UsageStrictMockTest.differentMethods":403,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":226,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":119,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":352,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":430,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":295,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":346,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":130,"org.easymock.tests2.DependencyTest.testClassMockingSupport":37,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":177,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":195,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":401,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":363,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":428,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":153,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":466,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":394,"org.easymock.tests2.UsageConstraintsTest.testContains":19,"org.easymock.tests2.UsageConstraintsTest.testFind":10,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":45,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":273,"org.easymock.samples.ExampleTest.addAndChangeDocument":465,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":82,"org.easymock.tests.UsageVarargTest.varargCharAccepted":437,"org.easymock.tests2.CaptureTest.testCaptureFromStub":51,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":479,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":186,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":327,"org.easymock.tests.UsageVerifyTest.twoThrows":374,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":369,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":438,"org.easymock.tests2.DelegateToTest.testReturnException":113,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":35,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":209,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":71,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":123,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":165,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":383,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":275,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":417,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":49,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":360,"org.easymock.tests2.UsageConstraintsTest.testMatches":22,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":228,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":239,"org.easymock.tests2.UsageConstraintsTest.testNull":11,"org.easymock.tests.LimitationsTest.abstractClass":241,"org.easymock.tests2.EasyMockSupportClassTest.testAll":128,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":315,"org.easymock.tests2.UsageConstraintsTest.greaterThan":24,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":433,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":412,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":26,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":68,"org.easymock.tests.UsageExpectAndReturnTest.object":305,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":170,"org.easymock.tests2.DelegateToTest.testWrongClass":115,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":219,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":355,"org.easymock.samples.ExampleTest.voteAgainstRemoval":461,"org.easymock.tests.CapturesMatcherTest.test":487,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":323,"org.easymock.tests.UsageVarargTest.varargShortAccepted":440,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":423,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":340,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":247,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":472,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":127,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":250,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":176,"org.easymock.tests2.NameTest.nameForMocksControl":77,"org.easymock.tests2.SerializationTest.testAllMockedMethod":96,"org.easymock.tests.MockingTest.testStrictClassMocking":258,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":371,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":135,"org.easymock.tests2.DelegateToTest.testStubDelegate":114,"org.easymock.tests.LimitationsTest.mockNativeMethod":243,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":231,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":391,"org.easymock.tests.UsageUnorderedTest.message":427,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":396,"org.easymock.samples.ExampleTest.answerVsDelegate":459,"org.easymock.tests.UsageCallCountTest.tooFewCalls":284,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":304,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":144,"org.easymock.tests.UsageVerifyTest.twoReturns":375,"org.easymock.tests2.DependencyTest.testInterfaceMocking":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":230,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":299,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":357,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":60,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":232,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":343,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":63,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":81,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":14,"org.easymock.tests.MockingTest.testTwoMocks":260,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":283,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":278,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":171,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":133,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":306,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":100,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":236,"org.easymock.tests.UsageThrowableTest.throwCheckedException":321,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":329,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":319,"org.easymock.samples.ExampleTest.voteForRemovals":463,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":21,"org.easymock.tests.ReplayStateInvalidUsageTest.times":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":134,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":345,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":390,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":191,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":445,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":217,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":296,"org.easymock.tests2.UsageConstraintsTest.any":17,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":218,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":221,"org.easymock.tests2.CaptureTest.testCapture":486,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":70,"org.easymock.tests.LimitationsTest.privateConstructor":242,"org.easymock.tests2.CallbackTest.callback":97,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":124,"org.easymock.tests2.NameTest.nameForMock":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":225,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":20,"org.easymock.tests.MockNameTest.defaultName":418,"org.easymock.tests2.SerializationTest.test":95,"org.easymock.tests.UsageExpectAndReturnTest.longType":298,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":46,"org.easymock.tests2.CaptureTest.testCaptureFirst":53,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":27,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":426,"org.easymock.tests2.UsageTest.niceToStrict":208,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":342,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":380,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":395,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":397,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":125,"org.easymock.tests2.UsageTest.strictResetToDefault":205,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":361,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":200,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":429,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":348,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":302,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":78,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":85,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":193,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":25,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":190,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":434,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":347,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":264,"org.easymock.tests2.DelegateToTest.testDelegate":117,"org.easymock.tests2.UsageConstraintsTest.testNotNull":31,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":167,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":155,"org.easymock.tests2.CaptureTest.testCapture_2617107":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":234,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":415,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":157,"org.easymock.tests2.ThreadingTest.testThreadSafe":107,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":235,"org.easymock.tests.UsageThrowableTest.noUpperLimit":318,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":436,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":69,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":61,"org.easymock.tests.UsageExpectAndReturnTest.floatType":297,"org.easymock.tests2.UsageTest.wrongArguments":207,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":16,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":80,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":254,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":90,"org.easymock.tests.UsageRangeTest.combination":454,"org.easymock.samples.SupportTest.voteForRemovals":471,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":140,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":322,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":32,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":146,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":161,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":166,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":309,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":279,"org.easymock.tests.UsageExpectAndThrowTest.floatType":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":142,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":188,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":310,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":150,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":197,"org.easymock.tests.UsageTest.exactCallCountByLastCall":453,"org.easymock.tests2.AnswerTest.stubAnswer":58,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":66,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":131,"org.easymock.tests.MockingTest.testPartialClassMocking":261,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":311,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":213,"org.easymock.tests2.UsageConstraintsTest.constraints":7,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":79,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":293,"org.easymock.tests.UsageVarargTest.varargLongAccepted":441,"org.easymock.tests.ObjectMethodsTest.testHashCode":338,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":199,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":201,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":399,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":147,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":384,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":84,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":425,"org.easymock.tests2.DependencyTest.testClassMocking":36,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":246,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":257,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":336,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":159,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":64,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":480,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":6,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":251,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":86,"org.easymock.tests.DefaultClassInstantiatorTest.object":270,"org.easymock.tests.UsageVarargTest.differentLength":439,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":233,"org.easymock.tests2.CaptureTest.testCapture2_2446744":52,"org.easymock.tests.GenericTest.testPackageScope":1}}]

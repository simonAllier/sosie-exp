[{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","position":"org.easymock.internal.ClassProxyFactory:171","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","position":"org.easymock.internal.MocksBehavior:98","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocation","position":"org.easymock.internal.ExpectedInvocationAndResults:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\"))","position":"org.easymock.internal.matchers.Contains:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:88","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.ExpectedInvocationAndResult:41","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:140","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","position":"org.easymock.internal.EasyMockProperties:128","type":"CtAssignmentImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1290","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1263","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:773","type":"CtReturnImpl"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13],"variableMapping":{"values":"values"},"name":"replace","transplant":{"sourceCode":"this.java.util.List<T>.clear()","position":"org.easymock.Capture:60","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","position":"org.easymock.internal.ObjectMethodsFilter:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","position":"org.easymock.internal.RecordState:152","type":"CtInvocationImpl"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"binaryOperator":"((java.lang.String.indexOf(' ')) > (-1))","name":"negateConditional","position":"org.easymock.internal.Invocation:195","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:76","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Invocation.getArguments()","position":"org.easymock.EasyMock:2128","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4434322855124959723L","position":"org.easymock.internal.ThrowableWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.LogicalOperator:45","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","position":"org.easymock.EasyMock:1620","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","position":"org.easymock.internal.matchers.ArrayEquals:35","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:371","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","position":"org.easymock.internal.ClassProxyFactory:183","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Exception java.lang.Exception","position":"org.easymock.ConstructorArgs:71","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"methodName":"methodName"},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:353","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","position":"org.easymock.internal.ReflectionUtils:105","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"\" + (int)","position":"org.easymock.internal.Range:66","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:256","type":"CtLocalVariableImpl"},"status":-2},{"failures":[70,71],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:363","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:145","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.DefaultClassInstantiator:46","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.EasyMockProperties:129","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","position":"org.easymock.internal.DefaultClassInstantiator:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[72,73,74,75,76,77,78,79,80,81,82,83,84,85,11,86,87,88,89,90,15,16,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:95","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.ExpectedInvocation:107","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1039","type":"CtReturnImpl"},"status":-2},{"failures":[118],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.Result:86","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:127","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"captured"},"name":"add","transplant":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","position":"org.easymock.EasyMock:1915","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"default :\n    throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));","position":"org.easymock.Capture:123","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","position":"org.easymock.internal.MethodSerializationWrapper:30","type":"CtNewClassImpl"},"status":-2},{"failures":[95,114],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.UnorderedBehavior:108","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:85","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField())","position":"org.easymock.internal.Injector:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.DefaultClassInstantiator:162","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Character>(org.easymock.Capture<java.lang.Character>))","position":"org.easymock.EasyMock:1999","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","position":"org.easymock.EasyMock:1092","type":"CtInvocationImpl"},"status":-2},{"failures":[119,120,121],"variableMapping":{"method":"hashCodeMethod"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:124","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"status":0},{"failures":[91,122],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"status":-2},{"failures":[123,124],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":-1},{"failures":[125],"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","position":"org.easymock.internal.MockBuilder:223","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","position":"org.easymock.internal.ObjectMethodsFilter:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:82","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","position":"org.easymock.internal.ReflectionUtils:108","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:184","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"endPosition":"initialPosition"},"name":"replace","transplant":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = int","position":"org.easymock.internal.MocksBehavior:105","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"expected":"proxy"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:88","type":"CtIfImpl"},"status":-2},{"failures":[126,127],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:328","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.UnorderedBehavior:108","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.StackTraceElement[] java.lang.StackTraceElement[] = java.lang.Throwable.getStackTrace()","position":"org.easymock.internal.ClassProxyFactory:156","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.validateCapture();\n}","position":"org.easymock.internal.Invocation:167","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:1051","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:93","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:380","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:180","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:80","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int)","position":"org.easymock.internal.Invocation:74","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = ((org.easymock.internal.ExpectedInvocation)(java.lang.Object))","position":"org.easymock.internal.ExpectedInvocation:73","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:47","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidClassProxyFactory.MockHandler org.easymock.internal.AndroidClassProxyFactory.MockHandler = com.google.dexmaker.stock.ProxyBuilder.((org.easymock.internal.AndroidClassProxyFactory.MockHandler)(com.google.dexmaker.stock.ProxyBuilder.getInvocationHandler(java.lang.Object)))","position":"org.easymock.internal.AndroidClassProxyFactory:63","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:141","type":"CtInvocationImpl"},"status":-2},{"failures":[17,18,19,20,95,128,129,130,96,99,100,131,132,133,134,111,135,113,114,136,137,138,139,115,116,117],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Long java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.List<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.BridgeMethodResolver:441","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:105","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:131","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:2000","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:110","type":"CtIfImpl"},"status":-2},{"failures":[90],"variableMapping":{"controls":"controls"},"name":"replace","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return T","position":"org.easymock.internal.ClassProxyFactory:221","type":"CtReturnImpl"},"status":-2},{"failures":[41,53],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","position":"org.easymock.internal.InjectionPlan:60","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:48","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.junit.runners.model.Statement.evaluate()","position":"org.easymock.internal.EasyMockStatement:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:91","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","position":"org.easymock.internal.ClassProxyFactory:251","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:252","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:893","type":"CtInvocationImpl"},"status":-2},{"failures":[38,39,40,42,44,45,46,47,48,49,50,51,52,54,56,57,58,59,60,61,140,141],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1304","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<java.lang.reflect.Field>.addAll(java.util.Arrays.java.util.Arrays.asList(java.lang.Class<?>.getDeclaredFields()))","position":"org.easymock.internal.Injector:199","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:200","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"status":-2},{"failures":[72,74,142],"binaryOperator":"int <= 0","name":"removeConditional","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","position":"org.easymock.internal.matchers.Matches:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final net.sf.cglib.proxy.Enhancer net.sf.cglib.proxy.Enhancer = org.easymock.internal.ClassProxyFactory.createEnhancer(java.lang.Class<T>)","position":"org.easymock.internal.ClassProxyFactory:165","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"status":-2},{"failures":[72,73,74,143,75,144,76,77,145,146,147,148,78,149,79,80,81,82,83,150,151,152,153,154,84,85,155,156,157,2,158,4,5,8,159,9,11,160,13,161,86,162,87,88,14,89,90,15,16,91,163,164,165,166,23,119,120,26,27,167,168,169,170,28,171,172,173,174,175,176,177,125,178,179,43,93,95,128,129,55,180,62,181,182,183,184,185,186,187,188,130,97,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,101,231,103,104,105,106,107,232,108,233,109,234,235,134,135,236,114,136,137,237,238,239,240,241,139,242,243,244,245,246,247,248,249,250,251,252,253],"variableMapping":{"answer":"value","state":"state"},"name":"replace","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:284","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:257","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.DefaultClassInstantiator:58","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:286","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:538","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(org.easymock.IArgumentMatcher.matches(java.lang.Object))","position":"org.easymock.internal.matchers.Not:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:175","type":"CtAssignmentImpl"},"status":-2},{"failures":[254],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","position":"org.easymock.internal.matchers.Null:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Not:41","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","position":"org.easymock.internal.RecordState:52","type":"CtInvocationImpl"},"status":-2},{"failures":[255,256],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)) {\n    throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\");\n} ","position":"org.easymock.internal.MocksControl:105","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:643","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.lastBehaviorList().addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.MocksBehavior:61","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","position":"org.easymock.internal.MocksControl:142","type":"CtReturnImpl"},"status":0},{"failures":[257,258,259,260],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","position":"org.easymock.internal.RecordState:221","type":"CtThrowImpl"},"status":-1},{"failures":[],"binaryOperator":"((\"eq(\" + (java.lang.Number)) + \", \")","name":"removeConditional","position":"org.easymock.internal.matchers.EqualsWithDelta:45","type":"mutation","status":-2},{"failures":[143,77],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Or:40","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","position":"org.easymock.internal.BridgeMethodResolver:237","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:81","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":103,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":52,"org.easymock.tests2.MockedExceptionTest.testRealException":123,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":32,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":237,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":41,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":70,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":72,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":140,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":155,"org.easymock.tests2.UsageConstraintsTest.testContains":78,"org.easymock.tests2.UsageConstraintsTest.testFind":75,"org.easymock.tests2.StubTest.stubWithReturnValue":93,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":0,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":6,"org.easymock.tests2.CaptureTest.testCaptureAll":158,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":207,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":21,"org.easymock.tests2.CaptureTest.testCaptureFromStub":12,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":61,"org.easymock.tests.UsageVerifyTest.twoThrows":111,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":234,"org.easymock.tests2.CompareToTest.testLessOrEqual":142,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":98,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":81,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":164,"org.easymock.tests2.CaptureTest.testAnd":2,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":256,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":9,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":66,"org.easymock.tests2.UsageConstraintsTest.testMatches":80,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":127,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":194,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":26,"org.easymock.tests2.UsageConstraintsTest.testNull":144,"org.easymock.tests2.EasyMockSupportClassTest.testAll":177,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":90,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":222,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":55,"org.easymock.tests.UsageThrowableTest.throwError":101,"org.easymock.tests2.UsageConstraintsTest.greaterThan":82,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":235,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":50,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":202,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":109,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":196,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":16,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":150,"org.easymock.tests.UsageExpectAndReturnTest.object":219,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":228,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":197,"org.easymock.tests2.DelegateToTest.testWrongClass":118,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":37,"org.easymock.tests2.UsageTest.moreThanOneArgument":130,"org.easymock.tests.UsageTest.wrongArguments":115,"org.easymock.samples.ExampleTest.voteAgainstRemoval":250,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":106,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":54,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":48,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":201,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":141,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":174,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":30,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":175,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":51,"org.easymock.tests2.NameTest.nameForMocksControl":20,"org.easymock.tests2.SerializationTest.testAllMockedMethod":121,"org.easymock.samples.ExampleTest.voteAgainstRemovals":248,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":94,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":53,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":257,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":246,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":110,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":232,"org.easymock.tests2.CaptureTest.testCapture1_2446744":5,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":33,"org.easymock.tests2.DelegateToTest.testStubDelegate":176,"org.easymock.tests.LimitationsTest.mockNativeMethod":198,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":239,"org.easymock.tests.UsageUnorderedTest.message":138,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":258,"org.easymock.samples.ExampleTest.voteForRemoval":249,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":36,"org.easymock.tests.UsageVerifyTest.twoReturns":135,"org.easymock.tests2.DependencyTest.testInterfaceMocking":156,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":213,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":126,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":14,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":240,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":145,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":132,"org.easymock.tests2.CaptureTest.testCaptureRightOne":11,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":215,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":184,"org.easymock.tests2.UsageConstraintsTest.cmpTo":148,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":220,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":59,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":167,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":29,"org.easymock.tests.UsageThrowableTest.throwCheckedException":104,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":67,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":153,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":134,"org.easymock.samples.PartialClassMockTest.testGetArea":252,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":231,"org.easymock.samples.ExampleTest.voteForRemovals":251,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":233,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":79,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":124,"org.easymock.tests2.UsageTest.argumentsOrdered":100,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":183,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":241,"org.easymock.tests2.CaptureTest.testCaptureMultiple":1,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":214,"org.easymock.tests2.AnswerTest.answer":161,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":60,"org.easymock.tests.MockingTest.testNicePartialClassMocking":205,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":114,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":210,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":40,"org.easymock.tests2.UsageConstraintsTest.any":147,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":217,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":203,"org.easymock.tests2.CaptureTest.testCapture":10,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":163,"org.easymock.tests2.CallbackTest.callback":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":178,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":71,"org.easymock.tests2.ConstraintsToStringTest.notToString":254,"org.easymock.tests2.NameTest.nameForMock":17,"org.easymock.tests.UsageTest.argumentsOrdered":117,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":143,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":166,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":149,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":227,"org.easymock.tests2.NameTest.nameForStrictMock":18,"org.easymock.tests2.MockBuilderTest.testCreateMockString":25,"org.easymock.tests2.CaptureTest.testCaptureNone":159,"org.easymock.tests2.SerializationTest.test":120,"org.easymock.tests.UsageExpectAndReturnTest.longType":212,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":7,"org.easymock.tests2.SerializationTest.testClass":119,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":195,"org.easymock.tests2.CaptureTest.testCaptureFirst":13,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":151,"org.easymock.tests2.UsageTest.niceToStrict":97,"org.easymock.tests2.EasyMockSupportTest.testVerify":122,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":57,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":236,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":112,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":187,"org.easymock.tests2.UsageTest.strictResetToDefault":188,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":24,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":186,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":226,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":146,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":169,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":216,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":83,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":182,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":180,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":206,"org.easymock.tests2.UsageConstraintsTest.testOr":77,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":172,"org.easymock.tests2.UsageConstraintsTest.testNotNull":154,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":43,"org.easymock.tests2.CaptureTest.testCapture_2617107":3,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":39,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":45,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":107,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":208,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":221,"org.easymock.tests2.ThreadingTest.testThreadSafe":171,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":190,"org.easymock.tests.UsageThrowableTest.noUpperLimit":102,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":27,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":168,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":91,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":87,"org.easymock.tests.UsageExpectAndReturnTest.floatType":211,"org.easymock.tests2.UsageTest.wrongArguments":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":31,"org.easymock.tests2.UsageConstraintsTest.testSame":76,"org.easymock.tests2.UsageTest.resumeIfFailure":191,"org.easymock.tests.UsageOverloadedMethodTest.overloading":108,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":170,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":68,"org.easymock.tests.UsageRangeTest.combination":245,"org.easymock.samples.SupportTest.voteForRemovals":253,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":105,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":42,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":44,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":34,"org.easymock.tests.UsageTest.openCallCountByLastCall":242,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":69,"org.easymock.tests2.NameTest.nameForNiceMock":19,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":56,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":247,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":152,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":49,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":95,"org.easymock.tests2.CaptureTest.testPrimitive":4,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":181,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":223,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":199,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":133,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":35,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":62,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":224,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":38,"org.easymock.tests2.UsageStrictMockTest.differentMethods":129,"org.easymock.tests.UsageTest.exactCallCountByLastCall":244,"org.easymock.tests2.AnswerTest.stubAnswer":86,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":88,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":15,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":230,"org.easymock.tests2.CaptureTest.testCaptureLast":8,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":125,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":157,"org.easymock.tests.UsageStrictMockTest.range":136,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":243,"org.easymock.tests.MockingTest.testPartialClassMocking":204,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":225,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":99,"org.easymock.tests2.UsageConstraintsTest.constraints":74,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":131,"org.easymock.tests2.UsageConstraintsTest.lessThan":85,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":116,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":64,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":179,"org.easymock.tests2.UsageStrictMockTest.range":128,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":28,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":22,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":259,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":260,"org.easymock.tests.UsageTest.moreThanOneArgument":139,"org.easymock.tests2.UsageTest.openCallCountByLastCall":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":200,"org.easymock.tests.UsageStrictMockTest.differentMethods":137,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":255,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":47,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":89,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":73,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":193,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":238,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":209,"org.easymock.tests2.CaptureTest.testCapture2_2446744":160,"org.easymock.tests.GenericTest.testPackageScope":229}}]

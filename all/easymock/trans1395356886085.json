[{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"position":"org.easymock.internal.matchers.InstanceOf:40","failures":[],"status":0,"binaryOperator":"(\"isA(\" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1816","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"transplant":{"position":"org.easymock.internal.MocksControl:233","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:63","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class.java.lang.Class.forName(java.lang.String, true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[160],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1939","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","type":"CtInvocationImpl"},"failures":[146,148,151,152,153,155],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.Capture:82","failures":[145,147,148,161,149,150,151,153,162,154,163,155],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[164,165,145,146,147,148,161,149,150,151,153,162,154,163,166,155],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[167],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[168,169],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[170],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:194","sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:30","sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[171,172,173,44,174,175],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[176,176,177,177,8,16,17,178,35,36,37,53,58,59,179,67,180,101,104,106,107,108,109,110,181,182,111,183,112,113,184,185,186,115,116,117,118,120,121,136,137,139,140,141,187,142,188,189,143,190,159],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:971","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[132],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","type":"CtReturnImpl"},"failures":[191,28,29,192,30,31,32,44,193,194,195,52,196,197,92,95,96,198,199,200,201,202,203,204],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[19,20,21,22,23,24,25,26,27,205,206,61,104,105,111,112,113,124,125,137],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"expected"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":124,"org.easymock.tests2.UsageTest.argumentsOrdered":96,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":85,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":94,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":9,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":135,"org.easymock.tests2.SerializationTest.testAllMockedMethod":106,"org.easymock.tests2.DelegateToTest.testReturnException":157,"org.easymock.tests.MockingTest.testPartialClassMocking":35,"org.easymock.samples.SupportTest.voteForRemovals":7,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":175,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":168,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":108,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":170,"org.easymock.tests.UsageExpectAndThrowTest.object":65,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":89,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":132,"org.easymock.tests2.DelegateToTest.testWrongClass":158,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":126,"org.easymock.tests2.UsageTest.wrongArguments":92,"org.easymock.tests.UsageStrictMockTest.range":194,"org.easymock.samples.ConstructorCalledMockTest.testTax":176,"org.easymock.samples.ExampleTest.answerVsDelegate":11,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":115,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":139,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":84,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":112,"org.easymock.tests2.CaptureTest.testPrimitive":148,"org.easymock.tests.UsageTest.moreThanOneArgument":192,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":31,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":138,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":171,"org.easymock.tests2.CaptureTest.testCaptureNone":152,"org.easymock.tests.UsageUnorderedTest.message":196,"org.easymock.tests.UsageVerifyTest.twoReturns":29,"org.easymock.tests.UsageVarargTest.varargByteAccepted":25,"org.easymock.tests.UsageTest.argumentsOrdered":32,"org.easymock.tests.UsageVarargTest.varargIntAccepted":20,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":55,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":16,"org.easymock.tests2.CaptureTest.testCapture_2617107":147,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":181,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":47,"org.easymock.tests2.UsageConstraintsTest.any":127,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":183,"org.easymock.tests.UsageExpectAndThrowTest.longType":63,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":99,"org.easymock.tests2.SerializationTest.testClass":104,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":144,"org.easymock.tests.LimitationsTest.mockNativeMethod":67,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":156,"org.easymock.tests2.AnswerTest.answer":102,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":179,"org.easymock.tests2.CaptureTest.testAnd":145,"org.easymock.tests2.UsageTest.strictResetToDefault":91,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":100,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":188,"org.easymock.tests2.NameTest.nameForMocksControl":204,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":80,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":37,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":136,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":113,"org.easymock.tests.MockingTest.testNicePartialClassMocking":36,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":66,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":141,"org.easymock.tests2.CompareToTest.testCompareEqual":2,"org.easymock.tests2.CaptureTest.testCaptureLast":151,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":34,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":121,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":125,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":133,"org.easymock.tests.MockingTest.testTwoMocks":178,"org.easymock.tests2.CaptureTest.testCapture1_2446744":161,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":95,"org.easymock.tests.UsageThrowableTest.throwError":68,"org.easymock.tests.UsageStrictMockTest.differentMethods":195,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":48,"org.easymock.tests2.MockBuilderTest.testCreateMockString":186,"org.easymock.tests.UsageExpectAndThrowTest.floatType":62,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":130,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":103,"org.easymock.tests.UsageVerifyTest.twoThrows":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":109,"org.easymock.samples.PartialClassMockTest.testGetArea":8,"org.easymock.tests2.CompareToTest.testLessOrEqual":4,"org.easymock.samples.ExampleTest.voteAgainstRemoval":13,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":143,"org.easymock.tests2.UsageTest.niceToStrict":93,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":75,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":111,"org.easymock.tests2.MockBuilderTest.testCreateMock":184,"org.easymock.samples.ExampleTest.voteAgainstRemovals":10,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":42,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":174,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":81,"org.easymock.tests.UsageOverloadedMethodTest.overloading":61,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":51,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":60,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":118,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":129,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":153,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":167,"org.easymock.tests.UsageThrowableTest.throwCheckedException":72,"org.easymock.tests2.EasyMockSupportClassTest.testAll":107,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":59,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":172,"org.easymock.tests2.CaptureTest.testCaptureAll":146,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":120,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":117,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":119,"org.easymock.tests2.CompareToTest.testGreateOrEqual":3,"org.easymock.samples.ExampleTest.voteForRemovals":15,"org.easymock.tests2.NameTest.nameForNiceMock":203,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":123,"org.easymock.tests.UsageVarargTest.allKinds":27,"org.easymock.tests2.DependencyTest.testInterfaceMocking":88,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":191,"org.easymock.samples.BasicClassMockTest.testPrintContent":17,"org.easymock.samples.ExampleTest.addDocument":14,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":74,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":193,"org.easymock.tests.UsageVarargTest.varargLongAccepted":24,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":190,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":46,"org.easymock.samples.ExampleTest.voteForRemoval":12,"org.easymock.tests.UsageExpectAndReturnTest.floatType":38,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":101,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":187,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":177,"org.easymock.tests.UsageThrowableTest.noUpperLimit":69,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":90,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":53,"org.easymock.tests2.SerializationTest.test":105,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":149,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":78,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":70,"org.easymock.samples.SupportTest.addDocument":6,"org.easymock.tests2.CaptureTest.testCaptureFirst":155,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":79,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":97,"org.easymock.tests.GenericTest.testPackageScope":58,"org.easymock.tests2.UsageTest.moreThanOneArgument":197,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":122,"org.easymock.tests2.CaptureTest.testCapture2_2446744":166,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":185,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":26,"org.easymock.tests.GenericTest.testBridgedEquals":169,"org.easymock.tests2.NameTest.nameForMock":201,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":56,"org.easymock.tests.UsageExpectAndReturnTest.longType":39,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":76,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":134,"org.easymock.tests2.UsageStrictMockTest.differentMethods":200,"org.easymock.tests.UsageCallCountTest.tooManyCalls":57,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":198,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":64,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":206,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":73,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":116,"org.easymock.tests2.NameTest.nameForStrictMock":202,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":159,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":140,"org.easymock.tests.UsageExpectAndReturnTest.object":41,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":131,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":142,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":182,"org.easymock.tests2.UsageStrictMockTest.range":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":83,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":22,"org.easymock.tests.UsageTest.exactCallCountByLastCall":33,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":205,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":160,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":77,"org.easymock.tests2.CaptureTest.testCaptureRightOne":154,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":18,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":137,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":50,"org.easymock.tests.UsageTest.wrongArguments":30,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":180,"org.easymock.tests2.EasyMockSupportTest.testVerify":87,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":40,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":49,"org.easymock.tests.UsageVarargTest.varargShortAccepted":23,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":114,"org.easymock.tests2.UsageConstraintsTest.cmpTo":128,"org.easymock.tests.UsageVarargTest.varargCharAccepted":21,"org.easymock.tests2.CaptureTest.testCaptureMultiple":165,"org.easymock.tests2.CompareToTest.testLessThan":0,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":98,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":86,"org.easymock.tests2.CaptureTest.testCaptureFromStub":163,"org.easymock.tests.UsageTest.unexpectedCallWithArray":173,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":71,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":44,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":54,"org.easymock.tests2.CaptureTest.testCapture":162,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":45,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":189,"org.easymock.tests.CapturesMatcherTest.test":164,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":5,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":110,"org.easymock.tests2.CompareToTest.testGreateThan":1,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":150,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":82,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":19}}]

[{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[0,1,2,3,4,5,6],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1659","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(long[]))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"failures":[7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[8,9,10],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MocksControl:105","failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[49,378],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[86,211,213,234],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:124","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"failures":[379],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:50","failures":[380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,0,412,413,414,415,416,123,417,6],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[384,24,418,419],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[384,0,412,1,2,3,420,421,417,6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[97,103,104,163,422,248,249,252,253,279,280,305,343,346,349],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[423],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[380,381,11,12,13,14,15,16,17,18,424,425,19,20,426,21,22,23,384,24,418,427,428,429,430,431,25,26,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,432,410,433,434,411,435,436,437,438,0,439,440,412,441,442,414,443,444,423,121,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,415,461,462,122,463,416,123,464,465,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,417,6,466,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,467,468,469,470,471,472,473,474,475,476,477,478,479,480,175,481,176,177,482,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,483,484,485,486,487,488,489,490,491,492,493,494,495,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,496,228,497,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,498,499,500,284,285,501,286,287,288,289,290,291,292,293,294,295,296,297,298,502,503,504,505,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[380,381,11,12,13,14,15,16,17,18,424,425,19,20,426,21,22,23,384,24,418,427,428,429,430,431,25,26,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,432,410,433,434,411,435,436,437,438,0,439,440,412,441,442,414,443,444,423,121,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,415,461,462,122,463,416,123,464,465,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,417,6,466,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,467,468,469,470,471,472,473,474,475,476,477,478,479,480,175,481,176,177,482,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,483,484,485,486,487,488,489,490,491,492,493,494,495,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,496,228,497,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,498,499,500,284,285,501,286,287,288,289,290,291,292,293,294,295,296,297,298,502,503,504,505,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[384,24,418],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[380,380,381,381,413,451],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[506,507,508,509,248,346],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[384,0,412,510,511,512,1,2,3,4,5,421,417,6],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:53","failures":[48],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[48,99,446,235],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[198,199,327],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[384,24,418],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"finalizeMethod"}},{"position":"org.easymock.Capture:82","failures":[513,69,71,72,73,74,75,76,78,7,79,80,82],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:153","failures":[155,156,157,158,174,243,353,354,355,356,357,358],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[380,380,381,381,11,12,13,14,15,16,17,18,424,425,19,20,426,21,22,23,384,24,418,427,431,25,26,385,388,390,391,393,394,397,398,399,400,401,403,406,407,408,409,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,114,116,117,118,119,120,433,435,436,437,438,412,441,444,423,121,445,446,447,448,450,451,452,453,454,455,456,457,415,461,122,463,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,417,6,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,468,469,470,471,472,473,475,476,477,478,479,480,175,481,176,177,482,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,483,484,485,486,487,488,489,490,491,492,493,494,495,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,497,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,501,287,288,289,290,291,292,293,294,295,296,297,298,502,503,504,505,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:210","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,0,412,413,414,415,416,123,417,6],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[456],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:136","failures":[380,380,381,381,424,425,426,384,418,427,428,429,431,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,432,433,434,435,436,437,438,439,412,441,442,443,444,423,445,446,447,448,450,451,452,453,454,455,456,457,458,459,460,415,461,463,416,464,465,417,6,155,156,157,468,469,470,471,472,473,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,498,501,502,503,504,505],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[514],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[60,61],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,0,412,413,414,415,416,123,417,6],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[84,85],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[515],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[333],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[380,381,11,12,13,14,15,16,17,18,424,425,19,20,426,21,22,23,384,24,418,427,431,25,26,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,432,433,434,435,436,437,438,439,412,441,442,443,444,423,121,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,415,461,122,463,416,464,465,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,417,6,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,468,469,470,471,472,473,475,476,477,478,479,480,175,481,176,177,482,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,483,484,485,486,487,488,489,490,491,492,493,494,495,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,497,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,498,284,285,501,286,287,288,289,290,291,292,293,294,295,296,297,298,502,503,504,505,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[18,23,27,29,30,46,49,58,70,76,77,82,83,84,85,93,96,178,184,190,194,196,247,255,261,267,271,273,277,323,327,343],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":33,"org.easymock.tests2.UsageTest.argumentsOrdered":104,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":246,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":117,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":321,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":99,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":20,"org.easymock.tests2.DelegateToTest.testReturnException":89,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":354,"org.easymock.tests.MockingTest.testPartialClassMocking":479,"org.easymock.tests.MockClassControlTest.testToString":485,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":138,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":212,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":458,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":395,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":391,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":255,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":125,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":1,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":40,"org.easymock.tests2.UsageTest.wrongArguments":97,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":241,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":137,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":170,"org.easymock.samples.ExampleTest.answerVsDelegate":12,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":501,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":177,"org.easymock.tests2.UsageConstraintsTest.testNull":36,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":445,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":490,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":116,"org.easymock.tests2.CaptureTest.testPrimitive":72,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":245,"org.easymock.tests.UsageTest.moreThanOneArgument":247,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":274,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":121,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":366,"org.easymock.tests.UsageTest.argumentsOrdered":253,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":359,"org.easymock.tests.UsageVarargTest.varargIntAccepted":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":326,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":306,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":432,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":5,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":429,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":153,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":313,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":310,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":131,"org.easymock.tests.ReplayStateInvalidUsageTest.times":237,"org.easymock.tests2.DependencyTest.testClassMocking":464,"org.easymock.tests2.AnswerTest.answer":59,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":328,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":68,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":500,"org.easymock.tests2.CaptureTest.testAnd":69,"org.easymock.tests2.UsageTest.strictResetToDefault":95,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":453,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":411,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":365,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":111,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":209,"org.easymock.tests2.DelegateToTest.testDelegate":93,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":363,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":270,"org.easymock.tests.LimitationsTest.mockFinalMethod":505,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":357,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":339,"org.easymock.tests2.DependencyTest.testClassMockingSupport":465,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":198,"org.easymock.tests2.CaptureTest.testCapture1_2446744":73,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":449,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":268,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":66,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":231,"org.easymock.tests.UsageThrowableTest.throwError":291,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":285,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":496,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":154,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":368,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":514,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":409,"org.easymock.samples.PartialClassMockTest.testGetArea":426,"org.easymock.tests.MockingTest.testInterfaceMocking":175,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":232,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":307,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":396,"org.easymock.tests2.UsageTest.niceToStrict":98,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":206,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":256,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":311,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":436,"org.easymock.tests2.MockBuilderTest.testCreateMock":441,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":404,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":134,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":506,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":264,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":112,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":499,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":342,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":369,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":168,"org.easymock.tests.UsageOverloadedMethodTest.overloading":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":400,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":46,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":302,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":189,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":275,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":45,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":78,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":217,"org.easymock.tests.MockClassControlTest.testEquals":489,"org.easymock.tests2.EasyMockSupportClassTest.testAll":388,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":493,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":272,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":67,"org.easymock.tests2.CaptureTest.testCaptureAll":70,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":337,"org.easymock.tests.MockNameTest.defaultName":172,"org.easymock.tests2.UsageConstraintsTest.testMatches":47,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":229,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":367,"org.easymock.samples.ExampleTest.voteForRemovals":16,"org.easymock.tests.UsageVarargTest.allKinds":225,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":278,"org.easymock.samples.BasicClassMockTest.testPrintContent":425,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":338,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":297,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":159,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":150,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":92,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":358,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":474,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":421,"org.easymock.tests2.UsageConstraintsTest.greaterThan":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":389,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":208,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":456,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":475,"org.easymock.samples.ExampleTest.voteForRemoval":13,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":457,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":84,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":286,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":430,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":448,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":497,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":94,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":412,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":318,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":109,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":386,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":353,"org.easymock.tests2.CaptureTest.testCaptureFirst":82,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":88,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":317,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":110,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":106,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":305,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":185,"org.easymock.tests2.UsageTest.moreThanOneArgument":96,"org.easymock.tests2.CaptureTest.testCapture2_2446744":81,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":86,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":442,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":329,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":224,"org.easymock.tests.GenericTest.testBridgedEquals":495,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":515,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":376,"org.easymock.tests.UsageExpectAndReturnTest.longType":181,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":107,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":335,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":273,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":54,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":228,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":271,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":289,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":364,"org.easymock.tests.UsageCallCountTest.tooManyCalls":377,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":405,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":186,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":136,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":260,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":296,"org.easymock.tests.MockingTest.testNiceClassMocking":482,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":460,"org.easymock.tests.MockingTest.testClassMocking":477,"org.easymock.tests2.UsageConstraintsTest.testContains":44,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":370,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":157,"org.easymock.tests2.UsageConstraintsTest.testFind":35,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":277,"org.easymock.tests.MockTypeTest.fromEasyMockClass":284,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":29,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":344,"org.easymock.tests.UsageExpectAndReturnTest.object":188,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":450,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":135,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":115,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":2,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":219,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":204,"org.easymock.tests.UsageTest.exactCallCountByLastCall":254,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":173,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":316,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":211,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":360,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":6,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":194,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":214,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":301,"org.easymock.tests.MockClassControlTest.testHashCode":488,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":144,"org.easymock.tests2.EasyMockSupportTest.testVerify":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":398,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":361,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":299,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":341,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":65,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":120,"org.easymock.tests.UsageVarargTest.varargCharAccepted":218,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":467,"org.easymock.tests2.CaptureTest.testCaptureMultiple":513,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":334,"org.easymock.tests2.UsageTest.openCallCountByLastCall":100,"org.easymock.tests.DefaultClassInstantiatorTest.object":468,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":118,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":9,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":340,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":202,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":422,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":399,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":262,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":294,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":129,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":143,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":487,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":454,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":261,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":195,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":288,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":407,"org.easymock.tests2.UsageTest.resumeIfFailure":105,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":498,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":428,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":356,"org.easymock.tests2.StubTest.stubWithReturnValue":167,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":0,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":187,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":55,"org.easymock.tests2.SerializationTest.testAllMockedMethod":418,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":327,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":511,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":507,"org.easymock.samples.SupportTest.voteForRemovals":22,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":491,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":146,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":267,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":419,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":333,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":60,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":213,"org.easymock.tests.UsageExpectAndThrowTest.object":265,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":52,"org.easymock.tests2.DelegateToTest.testWrongClass":91,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":226,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":227,"org.easymock.tests.UsageStrictMockTest.range":349,"org.easymock.samples.ConstructorCalledMockTest.testTax":380,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":25,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":114,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":459,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":266,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":385,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":239,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":252,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":169,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":508,"org.easymock.tests2.CaptureTest.testCaptureNone":77,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":283,"org.easymock.tests.UsageUnorderedTest.message":343,"org.easymock.tests.UsageVerifyTest.twoReturns":280,"org.easymock.tests.UsageVarargTest.varargByteAccepted":223,"org.easymock.tests2.ThreadingTest.testThreadSafe":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":402,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":374,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":424,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":205,"org.easymock.tests2.CaptureTest.testCapture_2617107":71,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":200,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":331,"org.easymock.tests2.UsageConstraintsTest.any":42,"org.easymock.tests2.StubTest.stub":166,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":236,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":290,"org.easymock.tests.UsageExpectAndThrowTest.longType":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":332,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":355,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":472,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":235,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":162,"org.easymock.tests2.SerializationTest.testClass":384,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":148,"org.easymock.tests.LimitationsTest.mockNativeMethod":504,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":494,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":197,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":128,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":165,"org.easymock.tests2.NameTest.nameForMocksControl":142,"org.easymock.tests2.MockedExceptionTest.testMockedException":156,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":390,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":251,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":481,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":28,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":259,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":444,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":439,"org.easymock.tests.MockingTest.testNicePartialClassMocking":480,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":447,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":512,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":126,"org.easymock.tests2.CaptureTest.testCaptureLast":76,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":199,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":416,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":39,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":53,"org.easymock.tests.MockingTest.testTwoMocks":478,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":123,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":178,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":263,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":103,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":57,"org.easymock.samples.ExampleTest.removeNonExistingDocument":17,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":133,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":233,"org.easymock.tests.UsageStrictMockTest.differentMethods":350,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":145,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":470,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":85,"org.easymock.tests2.MockBuilderTest.testCreateMockString":443,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":483,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":392,"org.easymock.tests.UsageExpectAndThrowTest.floatType":257,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":387,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":62,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":466,"org.easymock.tests.UsageVerifyTest.twoThrows":279,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":300,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":401,"org.easymock.samples.ExampleTest.voteAgainstRemoval":14,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":281,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":322,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":455,"org.easymock.tests.LimitationsTest.privateConstructor":503,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":383,"org.easymock.tests2.UsageConstraintsTest.testNotNull":56,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":155,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":298,"org.easymock.tests2.UsageTest.defaultResetToNice":102,"org.easymock.samples.ExampleTest.voteAgainstRemovals":11,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":323,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":127,"org.easymock.tests.UsageVarargTest.differentLength":220,"org.easymock.tests2.CallbackTest.callback":23,"org.easymock.tests2.UsageConstraintsTest.equals":34,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":451,"org.easymock.tests.UsageTest.openCallCountByLastCall":250,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":30,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":243,"org.easymock.tests.UsageCallCountTest.tooFewCalls":372,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":461,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":171,"org.easymock.tests.UsageThrowableTest.throwCheckedException":295,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":509,"org.easymock.tests.MockingTest.testStrictClassMocking":476,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":463,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":174,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":415,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":132,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":238,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":122,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":64,"org.easymock.tests.ObjectMethodsTest.testHashCode":203,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":4,"org.easymock.tests2.NameTest.nameForNiceMock":141,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":87,"org.easymock.tests2.DependencyTest.testInterfaceMocking":124,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":3,"org.easymock.samples.ExampleTest.addDocument":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":408,"org.easymock.tests2.DelegateToTest.testStubDelegate":90,"org.easymock.tests2.AnswerTest.stubAnswer":63,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":347,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":440,"org.easymock.tests.UsageVarargTest.varargLongAccepted":222,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":351,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":320,"org.easymock.tests.UsageExpectAndReturnTest.floatType":180,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":196,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":417,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":381,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":152,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":50,"org.easymock.tests.UsageThrowableTest.noUpperLimit":292,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":303,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":31,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":427,"org.easymock.tests2.SerializationTest.test":24,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":74,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":379,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":469,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":179,"org.easymock.tests2.UsageConstraintsTest.testSame":37,"org.easymock.samples.SupportTest.addDocument":21,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":462,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":393,"org.easymock.tests.GenericTest.testPackageScope":492,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":315,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":151,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":176,"org.easymock.tests2.NameTest.nameForMock":139,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":190,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":414,"org.easymock.tests2.UsageStrictMockTest.differentMethods":164,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":452,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":182,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":269,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":201,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":210,"org.easymock.tests2.MockedExceptionTest.testRealException":158,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":287,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":26,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":325,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":510,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":324,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":240,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":242,"org.easymock.tests2.NameTest.nameForStrictMock":140,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":435,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":27,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":10,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":446,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":431,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":471,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":51,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":433,"org.easymock.tests2.UsageStrictMockTest.range":163,"org.easymock.tests2.UsageConstraintsTest.lessThan":58,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":147,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":420,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":397,"org.easymock.tests2.CaptureTest.testCaptureRightOne":79,"org.easymock.tests2.UsageConstraintsTest.testOr":38,"org.easymock.tests.UsageRangeTest.combination":207,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":423,"org.easymock.tests.UsageTest.wrongArguments":249,"org.easymock.tests2.MockBuilderTest.testWithConstructor":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":394,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":484,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":183,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":312,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":473,"org.easymock.tests.UsageVarargTest.varargShortAccepted":221,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":375,"org.easymock.tests2.UsageConstraintsTest.cmpTo":43,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":314,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":101,"org.easymock.tests2.CaptureTest.testCaptureFromStub":80,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":230,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":434,"org.easymock.tests.UsageTest.unexpectedCallWithArray":248,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":346,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":373,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":413,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":192,"org.easymock.tests2.CaptureTest.testCapture":7,"org.easymock.tests2.UsageConstraintsTest.constraints":32,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":348,"org.easymock.samples.ExampleTest.addAndChangeDocument":18,"org.easymock.tests.UsageStrictMockTest.testVerify":352,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":19,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":345,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":336,"org.easymock.tests2.CompareToTest.testGreateThan":378,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":75,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":308,"org.easymock.tests.LimitationsTest.abstractClass":502,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":184,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":304,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":309,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":113,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":215}}]

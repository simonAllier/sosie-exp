[{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[1,2,3,4,5,6,7,8,9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:60","failures":[26,27,28,29,30,31,32,33,34,35,36],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[37,38,39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[40],"status":-1,"binaryOperator":"(\"eq(\" + (java.lang.Number))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[41,42],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[43,12,44,45,46,47,48,49,50,51,52,17,53,54,55,18,56,57,58,59,60,19,20,61,62,21,63],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:83","failures":[43,64,12,44,65,66,67,68,69,0,70,2,71,72,73,74,75,76,77,6,78,79,11,80,51,13,81,82,14,15,83,84,85,16,52,86,17,53,87,88,18,89,90,91,60,19,20,92,63,23,93,94,24,25,95,96],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[1,2,97,71,72,73,74,98,99,3,100,76],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[101,102,103,104,69,105,106,107,108,89,109,110,111],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[112],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[1,2,97,71,72,73,74,98,99,3,100,76],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[26,27,28,113,29,30,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,31,32,33,139,34,140,141,35,36,142,143,144,145,146,147,148,149],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[36],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:193","sourceCode":"if (!(this.boolean)) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[150,151,152,153,64,12,44,154,103,117,120,130,136,155,156,157,158,159,160,161,31,162,163,164,32,165,166,167,168,169,170,171,172,173,174,175,1,70,2,97,72,73,74,75,98,3,76,139,141,176,177,77,5,8,178,78,179,180,79,10,181,182,183,184,185,13,186,187,14,15,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,16,86,17,53,206,207,208,209,210,211,212,213,214,215,216,54,55,18,217,218,219,220,58,221,222,223,224,225,226,227,228,229,230,231,90,110,232,19,233,234,235,236,237,238,23,24,25,239,240,241,242,243,244,245,246,247,248,249,96,250,251,252,253,254,255,256,257,258,259,260,261,262],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"shouldBeUsedInOneThread":"lastInvocationUsed"}},{"position":"org.easymock.internal.matchers.Equals:54","failures":[263],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[264],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1052","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[265,266,267,268,269,64,12,44,270,169,271,272,77,4,79,80,13,186,187,14,15,273,83,189,193,194,196,274,16,86,17,53,216,18,19,20,275,236,237,92,22,23,24,25,95,276],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[277,278,101,279,280],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:123","sourceCode":"if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n    java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n} else {\n    java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"type":"mockType","this":"this"}},{"position":"org.easymock.internal.RecordState:327","failures":[281,282,283,284],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[285],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[286,287,288],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[37,38,39],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[289,140,147],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[290,291,292,293,294,295],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:217","failures":[43,80,83,84,52,87,19,20,95],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[296,297,298,299,300],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[12,17,18,301,302,19,20],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[113,297,141],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"ret":"constructor","clazz":"toMock"}},{"position":"org.easymock.internal.Range:40","failures":[277,26,265,303,27,304,150,278,151,28,152,305,113,266,267,30,268,269,153,43,64,12,44,154,101,102,103,104,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,306,307,308,309,310,155,311,312,313,314,315,316,317,318,270,156,157,319,65,66,67,68,320,69,321,322,158,159,160,161,31,162,323,163,164,32,33,324,325,326,327,165,0,166,328,167,168,169,170,171,172,173,279,329,174,330,331,332,271,175,272,333,280,1,70,2,97,71,72,73,74,75,98,3,100,334,76,335,139,34,336,141,176,177,77,337,338,4,5,263,339,6,340,7,8,178,9,78,179,341,180,342,343,79,344,345,10,181,182,183,184,11,346,347,80,185,51,13,186,187,81,82,348,14,15,273,83,188,189,190,191,192,193,194,349,195,196,197,198,199,350,351,352,353,354,355,356,84,357,358,200,85,359,360,361,362,363,364,365,366,367,368,201,369,370,371,372,373,374,375,376,377,202,203,378,204,379,380,381,274,205,16,52,86,17,53,206,382,207,208,87,209,210,211,212,213,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,214,215,88,216,401,402,403,54,55,404,18,405,406,217,407,408,290,291,292,293,37,294,409,295,410,218,56,219,220,57,58,59,411,412,413,414,415,105,106,107,108,89,109,416,417,418,419,420,421,422,423,424,425,221,222,426,223,427,428,429,430,224,431,432,433,434,225,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,226,227,474,228,475,476,477,478,229,479,480,481,482,230,483,484,485,486,231,90,110,232,91,487,111,488,489,490,491,492,60,19,20,493,494,495,233,234,235,275,236,237,496,497,498,499,500,501,502,503,504,505,506,238,507,281,282,508,41,509,510,511,512,513,514,515,516,517,42,92,63,22,23,93,94,24,25,95,264,239,240,518,112,519,283,284,241,242,243,520,244,245,276,246,247,248,249,96,148,149,250,251,252,253,521,254,255,256,257,522,258,259,260,261,262],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,449],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[90,96],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[523],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[291,294],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[290,291,292,293,294,295],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:54","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[43,12,44,45,46,47,48,49,50,51,52,17,53,54,55,18,60,19,20,61,62,21,63],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[79],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[202],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.MockBuilder:235","failures":[26,27,28,113,29,30,524,296,297,330,139,34,141,148,149],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[525,344],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:82","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","type":"CtIfImpl"},"failures":[269,153,43,64,12,44,154,101,102,103,104,117,155,317,318,270,156,157,320,69,158,159,160,162,163,324,325,326,165,0,166,167,168,169,170,171,172,173,174,272,1,70,2,97,71,72,73,74,75,98,3,100,334,76,176,177,77,337,338,4,5,339,6,340,7,8,178,78,179,341,180,342,343,79,344,345,10,181,182,183,184,11,346,347,80,185,51,13,186,187,81,82,14,15,273,83,188,189,190,191,192,193,194,195,196,197,198,199,84,200,85,359,201,274,205,16,52,86,17,53,206,382,207,208,87,209,210,211,212,213,383,384,389,390,391,392,393,394,397,214,215,88,216,402,403,18,217,218,219,220,412,413,105,106,107,108,89,109,424,425,221,222,426,223,427,428,429,430,224,431,432,433,434,225,435,436,437,438,467,468,469,470,471,472,473,226,227,474,228,475,476,477,478,229,479,480,481,482,230,483,484,485,486,231,90,110,232,91,487,111,60,19,20,495,233,234,235,236,237,505,506,238,92,63,23,93,94,24,25,95,239,240,112,241,242,243,244,245,276,246,247,248,249,96,251,252,253,521,254,255,256,257,258,259,260,261,262],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":5,"org.easymock.tests2.UsageTest.argumentsOrdered":15,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":92,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":197,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":449,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":187,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":261,"org.easymock.tests2.DelegateToTest.testReturnException":165,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":106,"org.easymock.tests.MockingTest.testPartialClassMocking":202,"org.easymock.tests.MockClassControlTest.testToString":501,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":319,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":464,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":458,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":124,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":424,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":120,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":159,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":178,"org.easymock.tests2.UsageTest.wrongArguments":13,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":231,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":374,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":387,"org.easymock.samples.ExampleTest.answerVsDelegate":521,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":421,"org.easymock.tests2.UsageConstraintsTest.testNull":6,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":380,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":171,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":506,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":196,"org.easymock.tests2.CaptureTest.testPrimitive":97,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":91,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":438,"org.easymock.tests.UsageTest.moreThanOneArgument":63,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":170,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":391,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":411,"org.easymock.tests.UsageTest.argumentsOrdered":25,"org.easymock.tests.UsageVarargTest.varargIntAccepted":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":454,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":50,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":467,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":277,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":300,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":315,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":352,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":441,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":471,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":287,"org.easymock.tests.ReplayStateInvalidUsageTest.times":515,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":201,"org.easymock.tests2.DependencyTest.testClassMocking":321,"org.easymock.tests2.AnswerTest.answer":84,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":9,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":456,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":363,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":418,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.UsageTest.strictResetToDefault":185,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":27,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":332,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":390,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":192,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":415,"org.easymock.tests2.DelegateToTest.testDelegate":167,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":225,"org.easymock.tests.LimitationsTest.mockFinalMethod":407,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":89,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":492,"org.easymock.tests2.DependencyTest.testClassMockingSupport":322,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":54,"org.easymock.tests2.CaptureTest.testCapture1_2446744":71,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":329,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":433,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":361,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":509,"org.easymock.tests.UsageThrowableTest.throwError":207,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":420,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":400,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":316,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":393,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":524,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":138,"org.easymock.samples.PartialClassMockTest.testGetArea":250,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":510,"org.easymock.tests.MockingTest.testInterfaceMocking":378,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":468,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":497,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":425,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":399,"org.easymock.tests2.UsageTest.niceToStrict":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":439,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":147,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":150,"org.easymock.tests2.MockBuilderTest.testCreateMock":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":133,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":371,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":430,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":46,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":193,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":417,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":282,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":493,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":385,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":144,"org.easymock.tests.UsageOverloadedMethodTest.overloading":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":129,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":220,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":342,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":479,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":214,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":180,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":38,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":98,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":520,"org.easymock.tests.MockClassControlTest.testEquals":505,"org.easymock.tests2.EasyMockSupportClassTest.testAll":117,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":240,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":436,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":490,"org.easymock.tests2.CaptureTest.testCaptureAll":70,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":362,"org.easymock.tests.MockNameTest.defaultName":466,"org.easymock.tests2.UsageConstraintsTest.testMatches":343,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":508,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":392,"org.easymock.samples.ExampleTest.voteForRemovals":257,"org.easymock.tests.UsageVarargTest.allKinds":96,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":60,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":491,"org.easymock.samples.BasicClassMockTest.testPrintContent":260,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":212,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":269,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":109,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":312,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":328,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":409,"org.easymock.tests2.UsageConstraintsTest.greaterThan":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":118,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":401,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":272,"org.easymock.samples.ExampleTest.voteForRemoval":254,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":295,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":318,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":333,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":422,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":353,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":279,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":80,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":238,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":446,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":190,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":105,"org.easymock.tests2.CaptureTest.testCaptureFirst":76,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":445,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":191,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":83,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":59,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":476,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":156,"org.easymock.tests2.UsageTest.moreThanOneArgument":51,"org.easymock.tests2.CaptureTest.testCapture2_2446744":334,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":457,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":267,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":249,"org.easymock.tests.GenericTest.testBridgedEquals":112,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":145,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":142,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":236,"org.easymock.tests.UsageExpectAndReturnTest.longType":227,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":488,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":188,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":437,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":410,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":183,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":435,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":389,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":283,"org.easymock.tests.UsageCallCountTest.tooManyCalls":237,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":288,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":495,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":134,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":477,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":373,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":211,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":161,"org.easymock.tests.MockingTest.testNiceClassMocking":381,"org.easymock.tests.MockingTest.testClassMocking":376,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":494,"org.easymock.tests2.UsageConstraintsTest.testContains":341,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":103,"org.easymock.tests2.UsageConstraintsTest.testFind":339,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":88,"org.easymock.tests.MockTypeTest.fromEasyMockClass":419,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":274,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":326,"org.easymock.tests.UsageExpectAndReturnTest.object":229,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":174,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":372,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":40,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":195,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":245,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":397,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":146,"org.easymock.tests.UsageTest.exactCallCountByLastCall":95,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":444,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":463,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":412,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":34,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":483,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":241,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":219,"org.easymock.tests.MockClassControlTest.testHashCode":504,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":307,"org.easymock.tests2.EasyMockSupportTest.testVerify":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":127,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":286,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":413,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":218,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":360,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":335,"org.easymock.tests.UsageVarargTest.varargCharAccepted":244,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":408,"org.easymock.tests2.CaptureTest.testCaptureMultiple":285,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":462,"org.easymock.tests2.UsageTest.openCallCountByLastCall":81,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":198,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":289,"org.easymock.tests.DefaultClassInstantiatorTest.object":290,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":507,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":395,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":21,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":428,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":128,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":209,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":367,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":306,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":503,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":271,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":427,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":484,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":519,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":502,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":136,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":48,"org.easymock.tests2.UsageTest.resumeIfFailure":273,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":416,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":351,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":108,"org.easymock.tests2.StubTest.stubWithReturnValue":69,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":28,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":478,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":184,"org.easymock.tests2.SerializationTest.testAllMockedMethod":177,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":455,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":297,"org.easymock.samples.SupportTest.voteForRemovals":252,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":264,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":309,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":432,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":461,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":357,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":465,"org.easymock.tests.UsageExpectAndThrowTest.object":224,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":181,"org.easymock.tests2.DelegateToTest.testWrongClass":166,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":383,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":384,"org.easymock.samples.ConstructorCalledMockTest.testTax":148,"org.easymock.tests.UsageStrictMockTest.range":17,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":355,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":349,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":160,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":143,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":431,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":151,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":517,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":114,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":386,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":498,"org.easymock.tests2.CaptureTest.testCaptureNone":75,"org.easymock.tests.UsageUnorderedTest.message":18,"org.easymock.tests.UsageVerifyTest.twoReturns":20,"org.easymock.tests.UsageVarargTest.varargByteAccepted":248,"org.easymock.tests2.ThreadingTest.testThreadSafe":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":131,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":235,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":398,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":259,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":404,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":459,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":232,"org.easymock.tests2.UsageConstraintsTest.any":78,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":514,"org.easymock.tests2.StubTest.stub":320,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":460,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":107,"org.easymock.tests.UsageExpectAndThrowTest.longType":222,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":37,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":513,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":64,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":155,"org.easymock.tests2.SerializationTest.testClass":141,"org.easymock.tests.LimitationsTest.mockNativeMethod":217,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":518,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":486,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":366,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":154,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":523,"org.easymock.tests2.NameTest.nameForMocksControl":68,"org.easymock.tests2.MockedExceptionTest.testMockedException":102,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":119,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":94,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":426,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":204,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":325,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":168,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":152,"org.easymock.tests.MockingTest.testNicePartialClassMocking":203,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":173,"org.easymock.tests2.CaptureTest.testCaptureLast":74,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":298,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":364,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":55,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":32,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":8,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":182,"org.easymock.tests.MockingTest.testTwoMocks":377,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":33,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":472,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":429,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":346,"org.easymock.samples.ExampleTest.removeNonExistingDocument":522,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":511,"org.easymock.tests.UsageStrictMockTest.differentMethods":53,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":370,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":308,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":292,"org.easymock.tests2.ConstraintsToStringTest.andToString":49,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":270,"org.easymock.tests2.MockBuilderTest.testCreateMockString":268,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":499,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":121,"org.easymock.tests.UsageExpectAndThrowTest.floatType":221,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":116,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":200,"org.easymock.tests.UsageVerifyTest.twoThrows":19,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":336,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":130,"org.easymock.samples.ExampleTest.voteAgainstRemoval":255,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":450,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":175,"org.easymock.tests.LimitationsTest.privateConstructor":406,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":36,"org.easymock.tests2.UsageConstraintsTest.testNotNull":11,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":101,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":213,"org.easymock.tests2.UsageTest.defaultResetToNice":348,"org.easymock.samples.ExampleTest.voteAgainstRemovals":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":451,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":230,"org.easymock.tests.UsageVarargTest.differentLength":276,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":365,"org.easymock.tests2.CallbackTest.callback":77,"org.easymock.tests2.UsageConstraintsTest.equals":263,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":330,"org.easymock.tests.UsageTest.openCallCountByLastCall":93,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":337,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":110,"org.easymock.tests.UsageCallCountTest.tooFewCalls":233,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":162,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":388,"org.easymock.tests.UsageThrowableTest.throwCheckedException":210,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":61,"org.easymock.tests.MockingTest.testStrictClassMocking":375,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":164,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":111,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":31,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":369,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":516,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":163,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":359,"org.easymock.tests.ObjectMethodsTest.testHashCode":396,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":299,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":157,"org.easymock.tests2.NameTest.nameForNiceMock":67,"org.easymock.tests2.DependencyTest.testInterfaceMocking":158,"org.easymock.samples.ExampleTest.addDocument":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":137,"org.easymock.tests2.DelegateToTest.testStubDelegate":0,"org.easymock.tests2.AnswerTest.stubAnswer":85,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":52,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":305,"org.easymock.tests.UsageVarargTest.varargLongAccepted":247,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":448,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":485,"org.easymock.tests.UsageExpectAndReturnTest.floatType":226,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":139,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":149,"org.easymock.tests2.ConstraintsToStringTest.orToString":45,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":57,"org.easymock.tests.UsageThrowableTest.noUpperLimit":208,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":314,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":345,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":338,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":350,"org.easymock.tests2.SerializationTest.test":176,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":72,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":39,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":291,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":473,"org.easymock.tests2.UsageConstraintsTest.testSame":340,"org.easymock.samples.SupportTest.addDocument":251,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":323,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":512,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":122,"org.easymock.tests.GenericTest.testPackageScope":239,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":443,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":313,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":379,"org.easymock.tests2.NameTest.nameForMock":65,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":480,"org.easymock.tests2.UsageStrictMockTest.differentMethods":44,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":30,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":331,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":474,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":434,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":394,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":403,"org.easymock.tests2.MockedExceptionTest.testRealException":104,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":423,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":453,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":356,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":62,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":452,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":43,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":42,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":90,"org.easymock.tests2.NameTest.nameForStrictMock":66,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":304,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":140,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":324,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":172,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":354,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":10,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":293,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":301,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":265,"org.easymock.tests2.UsageStrictMockTest.range":12,"org.easymock.tests2.UsageConstraintsTest.lessThan":347,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":310,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":447,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":126,"org.easymock.tests2.CaptureTest.testCaptureRightOne":3,"org.easymock.tests2.UsageConstraintsTest.testOr":7,"org.easymock.tests.UsageRangeTest.combination":216,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":169,"org.easymock.tests.UsageTest.wrongArguments":23,"org.easymock.tests2.MockBuilderTest.testWithConstructor":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":123,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":500,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":228,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":440,"org.easymock.tests.UsageVarargTest.varargShortAccepted":246,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":294,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":275,"org.easymock.tests2.UsageConstraintsTest.cmpTo":179,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":442,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":82,"org.easymock.tests2.CaptureTest.testCaptureFromStub":100,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":41,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":303,"org.easymock.tests.UsageTest.unexpectedCallWithArray":22,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":16,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":234,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":29,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":482,"org.easymock.tests2.CaptureTest.testCapture":99,"org.easymock.tests2.UsageConstraintsTest.constraints":4,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":86,"org.easymock.samples.ExampleTest.addAndChangeDocument":258,"org.easymock.tests2.ConstraintsToStringTest.notToString":47,"org.easymock.tests.UsageStrictMockTest.testVerify":382,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":262,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":205,"org.easymock.tests2.CompareToTest.testGreateThan":525,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":489,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":469,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":475,"org.easymock.tests.LimitationsTest.abstractClass":405,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":470,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":58,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":194,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":242,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":302}}]

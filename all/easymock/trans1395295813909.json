[{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Any:29","sourceCode":"new org.easymock.internal.matchers.Any()","type":"CtNewClassImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"expected":"o"}},{"position":"org.easymock.internal.RecordState:183","failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,0,53,54,1,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,3,86,87,88,89,4,5,90,91,6,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,7,125,126,127,128,129,130,131,132,133,134,135,136,9,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,11,12,13,14,15,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,16,17,18,19,20,21,212,213,214,215,22,216,217,218,219,220,221,222,23,24,223,224],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[92,93,94,225],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[226,227,228],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[229,230,231,126,232,233,234,235,236,21,237,238,217,221,222],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:37","failures":[25,26,27,28,29,30,31,32,33,34,35,37,38,39,239,40,42,49,51,0,53,68,71,72,74,75,76,78,79,80,81,82,83,84,85,3,4,5,91,6,92,93,95,96,97,240,98,99,100,101,241,102,103,104,105,107,108,109,110,111,112,113,114,115,242,116,124,7,125,126,127,128,243,244,245,133,246,247,248,249,8,250,9,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,11,12,13,14,15,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,251,252,253,254,255,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,16,17,18,19,20,21,256,257,258,215,22,216,217,218,219,220,221,222,23,24,259,223,224],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[70,260],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[40],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"shouldBeUsedInOneThread"}},{"transplant":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"failures":[25,26,27,28,29,30,261,31,39,239,40,41,42,262,263,264,265,266,267,43,268,44,45,46,47,48,49,50,51,52,0,53,54,1,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,269,270,271,272,273,74,75,76,77,274,275,276,277,78,278,279,280,281,81,82,83,84,85,3,86,87,282,88,89,4,5,90,91,283,284,6,92,93,94,95,96,107,109,110,111,229,112,113,114,115,285,230,231,242,116,118,119,122,123,286,124,7,125,126,127,128,129,243,130,131,244,132,287,288,289,290,291,245,292,293,294,295,296,297,298,246,247,248,249,8,250,9,10,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,299,300,157,158,301,159,302,303,304,305,160,11,12,13,14,15,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,251,252,253,254,255,306,307,308,309,310,311,312,313,314,315,316,317,182,183,184,185,186,318,187,188,189,190,191,192,193,194,195,196,197,198,199,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,200,201,233,234,202,203,235,236,204,342,343,344,345,205,346,347,206,207,208,209,348,210,211,16,17,18,19,20,349,350,21,212,351,213,214,256,352,257,258,353,237,354,215,238,22,216,217,218,219,355,220,221,222,23,24,259,223,224],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"leafClass","type":"leafClass"}},{"position":"org.easymock.internal.MockBuilder:178","failures":[80,332],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,42,43,49,51,53,54,1,55,57,60,63,64,65,66,67,68,71,72,73,74,75,78,79,80,81,83,84,85,3,86,87,88,89,4,5,90,91,6,92,93,94,97,240,98,99,100,101,241,102,103,104,105,106,107,108,109,110,229,112,113,230,231,116,117,118,119,120,121,122,123,124,7,125,126,127,128,129,243,130,131,244,132,288,245,133,356,134,135,136,139,140,142,147,152,157,158,159,305,160,161,164,165,167,172,177,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,234,235,236,204,205,207,208,209,210,211,16,17,18,19,21,212,256,257,258,353,215,238,22,216,217,218,219,221,222,259,223],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:102","sourceCode":"this.org.easymock.internal.Result = org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult","value":"delegateTo","this":"lastResult"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[61,357],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1349","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:231","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[358],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[25,26,27,28,29,30,261,31,32,33,34,35,36,37,38,359,360,39,239,40,41,42,361,262,263,264,265,266,267,43,268,44,362,45,46,47,48,49,363,50,51,52,0,53,54,364,1,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,365,366,71,72,73,367,368,269,270,271,272,273,74,369,370,75,76,77,274,371,275,276,372,277,78,278,79,373,80,374,375,279,280,376,281,377,81,82,83,378,84,85,3,86,87,282,88,89,4,5,90,91,283,284,6,92,93,94,95,96,97,240,98,99,100,101,241,379,102,103,104,105,106,107,380,381,382,383,384,108,385,386,387,388,389,390,109,110,111,229,112,113,114,115,285,230,231,242,116,117,118,119,120,391,121,122,123,392,286,124,7,125,126,127,128,129,243,130,131,244,132,287,393,288,394,289,290,291,245,292,293,395,396,397,398,399,400,133,401,402,403,404,405,406,407,294,295,296,297,408,298,409,410,358,356,411,412,134,413,414,415,416,417,418,419,420,421,135,422,423,424,425,426,136,427,428,246,247,248,249,8,250,9,10,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,299,300,429,157,158,301,159,302,303,304,430,305,160,431,432,11,12,13,14,15,433,434,161,435,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,251,252,253,254,255,436,437,438,439,440,306,307,308,309,310,311,312,313,314,315,316,317,182,183,184,441,185,186,318,187,188,189,190,191,192,193,194,195,196,197,198,199,319,320,321,322,323,324,325,326,442,443,444,327,328,329,330,331,445,446,447,448,332,449,450,333,334,335,336,337,338,339,340,341,200,201,233,234,202,203,235,236,204,451,342,343,344,452,453,454,345,455,456,457,458,459,460,461,205,346,347,206,207,208,209,348,210,211,16,17,18,19,20,462,349,350,21,463,464,465,466,467,468,212,351,213,214,256,352,257,258,469,353,237,470,354,215,238,22,216,217,218,219,355,220,221,222,23,24,259,223,224,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[48,49,0,53,364,63,85,86,91],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[496,497,498,499,233,238],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[229,230,231,126,232,233,234,235,236,21,237,238,217,221,222],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[496,497,498,499,233,238],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[432],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","method":"m"}},{"transplant":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:130","sourceCode":"if (java.lang.Boolean.java.lang.Boolean.valueOf(java.lang.String)) {\n    throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"));\n} ","type":"CtIfImpl"},"failures":[34,35,36,359,359,360,360,266,267,43,365,366,73,367,274,275,276,277,78,278,79,80,375,279,280,281,92,94,117,118,119,120,122,123,129,243,131,244,132,287,393,288,394,289,290,291,245,292,293,395,407,294,295,297,409,410,358,356,411,412,134,413,414,415,416,417,418,419,420,421,135,422,423,424,425,426,136,427,428,299,300,429,157,158,159,304,430,305,160,431,432,433,434,161,435,319,320,321,322,323,324,325,326,332,335,345,455,456,457,458,459,461,205],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.Capture:82","failures":[85,86,87,282,88,89,4,90,500,91,283,6],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:136","failures":[359,359,360,360,46,47,50,51,52,0,56,58,59,61,62,68,69,70,283,7,9,11,12,13,14,15,251,252,253,254,255,16,17,20,22,23,24],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:85","failures":[51,364,63,68],"status":-1,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[501],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[307,317],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"candidateMethod"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[108,111,229,230,231,7,126,127,133,408,445,333,337,201,233,234,235,236,342,452,462,349,21,238,22,217,218,220,221,222],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:178","failures":[80],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[159],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[243],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[447,448,464,465],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[85,86,87,282,88,89,4,90,500,91,283,6],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[502],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[25,26,27,28,29,30,261,31,32,33,34,35,36,37,38,359,359,360,360,39,239,40,41,42,361,262,263,264,265,266,267,43,268,44,362,45,46,47,48,49,363,50,51,52,0,53,54,364,1,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,365,366,71,72,73,367,368,269,270,271,272,273,74,369,370,75,76,77,274,371,275,276,372,277,78,278,79,373,80,375,279,280,376,281,377,81,82,83,378,84,85,3,86,87,282,88,89,4,5,90,91,283,284,6,92,93,94,95,96,97,240,98,99,100,101,241,379,102,103,104,105,106,107,380,381,382,383,384,108,385,386,387,388,389,390,109,110,111,229,112,113,114,115,285,230,231,242,116,117,118,119,120,121,122,123,286,124,7,125,126,127,128,129,243,130,131,244,132,287,393,288,394,289,290,291,245,292,293,395,396,397,398,399,400,133,401,402,403,404,405,406,407,297,408,298,409,410,358,356,411,412,134,413,414,415,416,417,418,419,420,421,135,422,423,424,425,426,136,427,428,246,247,248,249,8,250,9,10,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,299,300,429,157,158,301,159,302,303,304,430,305,160,431,432,11,12,13,14,15,433,434,161,435,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,251,252,253,254,255,436,437,438,439,440,306,307,308,309,310,311,312,313,314,315,316,317,182,183,184,441,185,186,318,187,188,189,190,191,192,193,194,195,196,197,198,199,319,320,321,322,323,324,325,326,442,443,444,327,328,329,330,331,445,446,447,448,332,333,334,335,336,337,338,339,340,341,200,201,233,234,202,203,235,236,204,451,342,343,344,452,453,454,345,455,456,457,458,459,460,461,205,346,347,206,207,208,209,348,210,211,16,17,18,19,20,462,349,350,21,463,464,465,466,467,468,212,351,213,214,256,352,257,258,469,353,237,470,354,215,238,22,216,217,218,219,355,220,221,222,23,24,259,223,224,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[46,48,61,67,503],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:173","failures":[82],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":49,"org.easymock.tests.ClassInstantiatorFactoryTest.getJVM":501,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":200,"org.easymock.tests2.UsageTest.argumentsOrdered":231,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":104,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":482,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":113,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":32,"org.easymock.tests2.DelegateToTest.testReturnException":81,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":247,"org.easymock.tests.MockingTest.testPartialClassMocking":157,"org.easymock.tests.MockClassControlTest.testToString":321,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":361,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":491,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":416,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":137,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":134,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":72,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":54,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":16,"org.easymock.tests2.UsageTest.wrongArguments":229,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":406,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":340,"org.easymock.samples.ExampleTest.answerVsDelegate":26,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":335,"org.easymock.tests2.UsageConstraintsTest.testNull":51,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":303,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":131,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":103,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":326,"org.easymock.tests2.CaptureTest.testPrimitive":87,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":20,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":156,"org.easymock.tests.UsageTest.moreThanOneArgument":201,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":130,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":253,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":436,"org.easymock.tests.UsageTest.argumentsOrdered":236,"org.easymock.tests.UsageVarargTest.varargIntAccepted":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":487,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":11,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":274,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":389,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":295,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":474,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":15,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":133,"org.easymock.tests.ReplayStateInvalidUsageTest.times":314,"org.easymock.tests2.DependencyTest.testClassMocking":365,"org.easymock.tests2.AnswerTest.answer":74,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":489,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":273,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":450,"org.easymock.tests2.CaptureTest.testAnd":85,"org.easymock.tests2.UsageTest.strictResetToDefault":110,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":290,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":372,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":252,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":100,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":213,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":440,"org.easymock.tests2.DelegateToTest.testDelegate":84,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":152,"org.easymock.tests.LimitationsTest.mockFinalMethod":435,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":8,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":331,"org.easymock.tests2.DependencyTest.testClassMockingSupport":366,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":462,"org.easymock.tests2.CaptureTest.testCapture1_2446744":282,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":393,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":150,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":271,"org.easymock.tests.UsageThrowableTest.throwError":192,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":308,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":334,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":471,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":390,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":428,"org.easymock.samples.PartialClassMockTest.testGetArea":36,"org.easymock.tests.MockingTest.testInterfaceMocking":301,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":309,"org.easymock.tests2.CompareToTest.testLessOrEqual":503,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":12,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":443,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":453,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":417,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":138,"org.easymock.tests2.UsageTest.niceToStrict":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":228,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":78,"org.easymock.tests2.MockBuilderTest.testCreateMock":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":424,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":403,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":496,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":146,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":101,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":449,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":465,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":346,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":338,"org.easymock.tests.UsageOverloadedMethodTest.overloading":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":421,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":58,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":258,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":173,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":259,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":57,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":90,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":441,"org.easymock.tests.MockClassControlTest.testEquals":325,"org.easymock.tests2.EasyMockSupportClassTest.testAll":356,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":160,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":154,"org.easymock.tests2.CaptureTest.testCaptureAll":3,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":272,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":329,"org.easymock.tests.MockNameTest.defaultName":445,"org.easymock.tests2.UsageConstraintsTest.testMatches":59,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":254,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":306,"org.easymock.samples.ExampleTest.voteForRemovals":30,"org.easymock.tests.UsageVarargTest.allKinds":191,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":220,"org.easymock.samples.BasicClassMockTest.testPrintContent":35,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":330,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":198,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":286,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":386,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":250,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":378,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":460,"org.easymock.tests2.UsageConstraintsTest.greaterThan":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":411,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":351,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":292,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":461,"org.easymock.samples.ExampleTest.voteForRemoval":27,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":239,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":293,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":336,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":296,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":287,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":109,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":205,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":479,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":98,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":410,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":246,"org.easymock.tests2.CaptureTest.testCaptureFirst":6,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":478,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":99,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":116,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":237,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":169,"org.easymock.tests2.UsageTest.moreThanOneArgument":111,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":41,"org.easymock.tests2.CaptureTest.testCapture2_2446744":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":490,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":280,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":190,"org.easymock.tests.GenericTest.testBridgedEquals":432,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":210,"org.easymock.tests.UsageExpectAndReturnTest.longType":165,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":97,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":327,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":155,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":470,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":66,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":153,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":447,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":251,"org.easymock.tests.UsageCallCountTest.tooManyCalls":211,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":425,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":170,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":405,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":142,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":197,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":118,"org.easymock.tests.MockingTest.testNiceClassMocking":304,"org.easymock.tests.MockingTest.testClassMocking":300,"org.easymock.tests2.UsageConstraintsTest.testContains":56,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":347,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":43,"org.easymock.tests2.UsageConstraintsTest.testFind":50,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":224,"org.easymock.tests.MockTypeTest.fromEasyMockClass":333,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":45,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":354,"org.easymock.tests.UsageExpectAndReturnTest.object":172,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":288,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":404,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":102,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":186,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":344,"org.easymock.tests.UsageTest.exactCallCountByLastCall":204,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":9,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":477,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":466,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":437,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":367,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":182,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":178,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":257,"org.easymock.tests.MockClassControlTest.testHashCode":324,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":381,"org.easymock.tests2.EasyMockSupportTest.testVerify":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":419,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":438,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":464,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":256,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":270,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":269,"org.easymock.tests.UsageVarargTest.varargCharAccepted":185,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":454,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":495,"org.easymock.tests2.UsageTest.openCallCountByLastCall":114,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":105,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":226,"org.easymock.tests.DefaultClassInstantiatorTest.object":345,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":463,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":342,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":420,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":144,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":195,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":399,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":380,"org.easymock.tests2.ConstraintsToStringTest.anyToString":2,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":291,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":323,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":143,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":179,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":446,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":136,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":322,"org.easymock.tests2.UsageTest.resumeIfFailure":242,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":332,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":294,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":249,"org.easymock.tests2.StubTest.stubWithReturnValue":96,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":373,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":171,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":67,"org.easymock.tests2.SerializationTest.testAllMockedMethod":94,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":488,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":497,"org.easymock.samples.SupportTest.voteForRemovals":38,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":430,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":383,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":149,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":225,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":494,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":369,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":468,"org.easymock.tests.UsageExpectAndThrowTest.object":147,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":64,"org.easymock.tests2.DelegateToTest.testWrongClass":83,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":23,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":24,"org.easymock.tests.UsageStrictMockTest.range":217,"org.easymock.samples.ConstructorCalledMockTest.testTax":359,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":408,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":379,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":117,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":148,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":409,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":235,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":316,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":339,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":498,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":444,"org.easymock.tests2.CaptureTest.testCaptureNone":5,"org.easymock.tests.UsageUnorderedTest.message":21,"org.easymock.tests.UsageVerifyTest.twoReturns":222,"org.easymock.tests.UsageVarargTest.varargByteAccepted":189,"org.easymock.tests2.ThreadingTest.testThreadSafe":39,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":422,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":209,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":452,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":34,"org.easymock.tests2.CaptureTest.testCapture_2617107":86,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":350,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":492,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":19,"org.easymock.tests2.UsageConstraintsTest.any":1,"org.easymock.tests2.StubTest.stub":95,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":313,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":493,"org.easymock.tests.UsageExpectAndThrowTest.longType":140,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":248,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":458,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":312,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":125,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":108,"org.easymock.tests2.SerializationTest.testClass":92,"org.easymock.tests.LimitationsTest.mockNativeMethod":161,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":431,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":181,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":398,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":128,"org.easymock.tests2.NameTest.nameForMocksControl":265,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":400,"org.easymock.tests2.MockedExceptionTest.testMockedException":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":412,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":203,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":159,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":141,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":362,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":129,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":80,"org.easymock.tests.MockingTest.testNicePartialClassMocking":158,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":132,"org.easymock.tests2.CompareToTest.testNotComparable":502,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":396,"org.easymock.tests2.CaptureTest.testCaptureLast":4,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":349,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":123,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":53,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":65,"org.easymock.tests.MockingTest.testTwoMocks":429,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":392,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":162,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":145,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":230,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":69,"org.easymock.samples.ExampleTest.removeNonExistingDocument":261,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":402,"org.easymock.tests.UsageStrictMockTest.differentMethods":218,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":310,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":382,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":456,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":40,"org.easymock.tests2.MockBuilderTest.testCreateMockString":281,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":413,"org.easymock.tests.UsageExpectAndThrowTest.floatType":139,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":358,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":75,"org.easymock.tests.UsageVerifyTest.twoThrows":221,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":368,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":135,"org.easymock.samples.ExampleTest.voteAgainstRemoval":28,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":483,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":442,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":245,"org.easymock.tests.LimitationsTest.privateConstructor":434,"org.easymock.tests2.UsageConstraintsTest.testNotNull":68,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":199,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":266,"org.easymock.tests2.UsageTest.defaultResetToNice":285,"org.easymock.samples.ExampleTest.voteAgainstRemovals":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":484,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":177,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":397,"org.easymock.tests.UsageVarargTest.differentLength":318,"org.easymock.tests2.CallbackTest.callback":107,"org.easymock.tests2.UsageConstraintsTest.equals":363,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":394,"org.easymock.tests.UsageTest.openCallCountByLastCall":202,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":46,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":18,"org.easymock.tests.UsageCallCountTest.tooFewCalls":207,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":120,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":341,"org.easymock.tests.UsageThrowableTest.throwCheckedException":196,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":499,"org.easymock.tests.MockingTest.testStrictClassMocking":299,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":122,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":10,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":401,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":119,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":315,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":121,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":77,"org.easymock.tests.ObjectMethodsTest.testHashCode":343,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":42,"org.easymock.tests2.NameTest.nameForNiceMock":264,"org.easymock.tests2.DependencyTest.testInterfaceMocking":71,"org.easymock.samples.ExampleTest.addDocument":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":427,"org.easymock.tests2.DelegateToTest.testStubDelegate":82,"org.easymock.tests2.AnswerTest.stubAnswer":76,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":22,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":374,"org.easymock.tests.UsageVarargTest.varargLongAccepted":188,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":481,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":180,"org.easymock.tests.UsageExpectAndReturnTest.floatType":164,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":73,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":360,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":469,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":388,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":62,"org.easymock.tests.UsageThrowableTest.noUpperLimit":193,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":47,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":407,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":88,"org.easymock.tests2.SerializationTest.test":93,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":455,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":163,"org.easymock.tests2.UsageConstraintsTest.testSame":52,"org.easymock.samples.SupportTest.addDocument":37,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":391,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":414,"org.easymock.tests.GenericTest.testPackageScope":305,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":439,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":476,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":387,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":302,"org.easymock.tests2.NameTest.nameForMock":262,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":174,"org.easymock.tests2.UsageStrictMockTest.differentMethods":127,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":376,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":289,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":166,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":151,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":451,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":214,"org.easymock.tests2.MockedExceptionTest.testRealException":268,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":337,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":486,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":485,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":7,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":17,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":317,"org.easymock.tests2.NameTest.nameForStrictMock":263,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":277,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":44,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":227,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":244,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":297,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":457,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":63,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":275,"org.easymock.tests2.UsageStrictMockTest.range":126,"org.easymock.tests2.UsageConstraintsTest.lessThan":70,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":480,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":418,"org.easymock.tests2.CaptureTest.testCaptureRightOne":91,"org.easymock.tests2.UsageConstraintsTest.testOr":0,"org.easymock.tests.UsageRangeTest.combination":212,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":243,"org.easymock.tests.UsageTest.wrongArguments":234,"org.easymock.tests2.MockBuilderTest.testWithConstructor":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":415,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":320,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":473,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":175,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":459,"org.easymock.tests.UsageVarargTest.varargShortAccepted":187,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":348,"org.easymock.tests2.UsageConstraintsTest.cmpTo":55,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":370,"org.easymock.tests2.CompareToTest.testLessThan":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":475,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":115,"org.easymock.tests2.CaptureTest.testCaptureFromStub":283,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":307,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":276,"org.easymock.tests.UsageTest.unexpectedCallWithArray":233,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":238,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":208,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":176,"org.easymock.tests2.CaptureTest.testCapture":500,"org.easymock.tests2.UsageConstraintsTest.constraints":48,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":216,"org.easymock.samples.ExampleTest.addAndChangeDocument":31,"org.easymock.tests.UsageStrictMockTest.testVerify":355,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":33,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":215,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":328,"org.easymock.tests2.CompareToTest.testGreateThan":357,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":89,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":13,"org.easymock.tests.LimitationsTest.abstractClass":433,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":168,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":14,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":353,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":183,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":241}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"paramType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[53],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[54,55,56,57],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:201","failures":[58,59,60,61,62,63,63,64,64,65,66,67,68,69,70,0,71,72,73,55,74,75,76,77,78,79,80,81,82,83,84,85],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[86,87],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","failures":[88,89,90,91,92,93,94,95,96,97,98],"status":-1,"binaryOperator":"int < int","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"failures":[99,100],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[101,102,103,104],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[105,106,107],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[108],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[109],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[110],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[111,112,113,114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[115,116,117,118,60,119,120,121,106,122,123,124,125,107,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,62,143,144,63,64,145,146,147,148,149,65,150,151,152,67,68,109,153,69,154,155,156,157,158,159,160,161,162,163,57,164,165,166,167,2,168,169,3,85,170,171],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:63","failures":[],"status":0,"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:233","failures":[117,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,16,214,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,215,216,217,119,120,61,218,219,220,221,222,223,37,38,224,39,40,41,42,43,44,225,226,227,228,229,230,231,45,232,233,234,235,46,236,237,238,47,239,240,241,131,132,133,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,48,257,258,259,260,261,262,263,264,49,265,142,266,267,268,269,270,271,272,273,274,275,62,143,144,63,63,64,64,276,277,278,279,280,281,282,283,284,285,286,287,88,288,89,289,290,291,292,293,294,295,90,296,297,298,145,146,299,147,148,149,150,67,68,109,300,50,301,302,303,304,305,306,307,308,309,310,311,70,312,155,71,72,73,101,313,91,92,314,93,315,94,95,316,96,317,318,319,320,321,322,323,102,324,97,325,326,327,103,98,328,329,330,331,332,333,334,335,336,337,338,339,340,114,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,55,56,57,51,356,357,358,359,360,361,52,362,363,364,365,366,367,368,166,167,2,168,369,169,3,75,78,79,80,83,85,170,171,370,110,371,372,373,374,375],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[195,376,377,378,379],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","i":"i"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[380],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[136,140],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[381],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:52","failures":[195,196,198,199,202,203,206,208,210,37,39,46,236,237,238,47,239,240,241,242,252,253,258,264,49,265,281,301,302,303,304,307,309,310,93,315,317,318,98,328,335,51,357,358,361,52,363,364,366,110],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[102,382],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"mockClass"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:70","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[54,55,56],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:63","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[176,182,189,190,260,272],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"m"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[102,382],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:218","failures":[60,61,62,63,64,66,68,69,70,0,71,72,55,78,81,82,383,84],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[0,384,385,386,387,388,55,7,82],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[60,119,120,61,121],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[60],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[195,198,389,390,237,239,240,258,49,265,309,358,363,364],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[391,1,392],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:124","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":92,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":46,"org.easymock.tests2.UsageTest.argumentsOrdered":364,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":353,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":360,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":277,"org.easymock.tests2.DelegateToTest.testReturnException":331,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":229,"org.easymock.tests.MockingTest.testPartialClassMocking":131,"org.easymock.tests.MockClassControlTest.testToString":123,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":172,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":69,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":17,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":71,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":337,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":384,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":316,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":211,"org.easymock.tests2.UsageTest.wrongArguments":358,"org.easymock.samples.ExampleTest.answerVsDelegate":281,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":59,"org.easymock.tests2.UsageConstraintsTest.testNull":93,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":147,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":127,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":352,"org.easymock.tests2.CaptureTest.testPrimitive":289,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":214,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":36,"org.easymock.tests.UsageTest.moreThanOneArgument":236,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":299,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":261,"org.easymock.tests.UsageTest.argumentsOrdered":240,"org.easymock.tests.UsageVarargTest.varargIntAccepted":244,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":268,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":388,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":74,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":272,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":312,"org.easymock.tests2.AnswerTest.answer":110,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":96,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests2.UsageTest.strictResetToDefault":356,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":152,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":6,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":260,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":220,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":347,"org.easymock.tests2.DelegateToTest.testDelegate":335,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":32,"org.easymock.tests.LimitationsTest.mockFinalMethod":118,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":45,"org.easymock.tests2.CaptureTest.testCapture1_2446744":290,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":30,"org.easymock.tests.UsageThrowableTest.throwError":38,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":263,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":10,"org.easymock.samples.PartialClassMockTest.testGetArea":62,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":380,"org.easymock.tests2.CompareToTest.testLessOrEqual":104,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":269,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":159,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":18,"org.easymock.tests2.UsageTest.niceToStrict":359,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":392,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":78,"org.easymock.tests2.MockBuilderTest.testCreateMock":383,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":26,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":378,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":348,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":235,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":204,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":13,"org.easymock.tests.UsageOverloadedMethodTest.overloading":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":163,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":48,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":321,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":184,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":222,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":320,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":295,"org.easymock.tests2.EasyMockSupportClassTest.testAll":155,"org.easymock.tests.MockClassControlTest.testEquals":126,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":120,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":34,"org.easymock.tests2.CaptureTest.testCaptureAll":288,"org.easymock.tests2.UsageConstraintsTest.testMatches":322,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":262,"org.easymock.samples.ExampleTest.voteForRemovals":285,"org.easymock.tests.UsageVarargTest.allKinds":252,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":264,"org.easymock.samples.BasicClassMockTest.testPrintContent":144,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":43,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":305,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":232,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":334,"org.easymock.tests2.UsageConstraintsTest.greaterThan":102,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":219,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":109,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":141,"org.easymock.samples.ExampleTest.voteForRemoval":282,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":153,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":339,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":65,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":142,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":51,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":82,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":345,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":39,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":228,"org.easymock.tests2.CaptureTest.testCaptureFirst":298,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":330,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":346,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":366,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":180,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":114,"org.easymock.tests2.CaptureTest.testCapture2_2446744":297,"org.easymock.tests2.UsageTest.moreThanOneArgument":357,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":83,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":251,"org.easymock.tests.GenericTest.testBridgedEquals":121,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":14,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":209,"org.easymock.tests.UsageExpectAndReturnTest.longType":176,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":343,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":35,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":227,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":327,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":33,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":259,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":274,"org.easymock.tests.UsageCallCountTest.tooManyCalls":210,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":205,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":181,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":22,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":42,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":167,"org.easymock.tests.MockingTest.testNiceClassMocking":134,"org.easymock.tests.MockingTest.testClassMocking":129,"org.easymock.tests2.UsageConstraintsTest.testContains":319,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":171,"org.easymock.tests2.UsageConstraintsTest.testFind":314,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":37,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":193,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":368,"org.easymock.tests.UsageExpectAndReturnTest.object":183,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":150,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":351,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":385,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":246,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":15,"org.easymock.tests.UsageTest.exactCallCountByLastCall":241,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":225,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":111,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":202,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":0,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":189,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":242,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":256,"org.easymock.tests.MockClassControlTest.testHashCode":107,"org.easymock.tests2.EasyMockSupportTest.testVerify":355,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":203,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":234,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":255,"org.easymock.tests.UsageVarargTest.varargCharAccepted":245,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":306,"org.easymock.tests2.UsageTest.openCallCountByLastCall":361,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":391,"org.easymock.tests.DefaultClassInstantiatorTest.object":135,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":354,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":233,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":160,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":24,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":40,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":99,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":125,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":67,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":23,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":190,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":273,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":73,"org.easymock.tests2.UsageTest.resumeIfFailure":365,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":58,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":231,"org.easymock.tests2.StubTest.stubWithReturnValue":50,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":7,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":182,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":103,"org.easymock.tests2.SerializationTest.testAllMockedMethod":57,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":253,"org.easymock.samples.SupportTest.voteForRemovals":279,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":379,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":60,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":100,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":29,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":54,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":254,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":371,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":112,"org.easymock.tests.UsageExpectAndThrowTest.object":27,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":325,"org.easymock.tests2.DelegateToTest.testWrongClass":333,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":266,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":267,"org.easymock.samples.ConstructorCalledMockTest.testTax":63,"org.easymock.tests.UsageStrictMockTest.range":198,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":350,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":166,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":12,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":28,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":154,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":239,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":376,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":217,"org.easymock.tests2.CaptureTest.testCaptureNone":294,"org.easymock.tests.UsageUnorderedTest.message":258,"org.easymock.tests.UsageVerifyTest.twoReturns":265,"org.easymock.tests.UsageVarargTest.varargByteAccepted":250,"org.easymock.tests2.ThreadingTest.testThreadSafe":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":161,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":208,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":143,"org.easymock.tests2.CaptureTest.testCapture_2617107":89,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":108,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":16,"org.easymock.tests2.UsageConstraintsTest.any":317,"org.easymock.tests2.StubTest.stub":300,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":275,"org.easymock.tests.UsageExpectAndThrowTest.longType":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":230,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":139,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":308,"org.easymock.tests2.SerializationTest.testClass":55,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":342,"org.easymock.tests.LimitationsTest.mockNativeMethod":117,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":61,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":192,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":311,"org.easymock.tests2.NameTest.nameForMocksControl":304,"org.easymock.tests2.MockedExceptionTest.testMockedException":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":156,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":47,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":133,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":21,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":145,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":80,"org.easymock.tests.MockingTest.testNicePartialClassMocking":132,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":149,"org.easymock.tests2.CaptureTest.testCaptureLast":293,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":3,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":95,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":326,"org.easymock.tests.MockingTest.testTwoMocks":130,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":173,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":25,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":363,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":328,"org.easymock.tests.UsageStrictMockTest.differentMethods":199,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":137,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":87,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":340,"org.easymock.tests2.MockBuilderTest.testCreateMockString":84,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":157,"org.easymock.tests.UsageExpectAndThrowTest.floatType":19,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":323,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":373,"org.easymock.tests.UsageVerifyTest.twoThrows":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":72,"org.easymock.samples.ExampleTest.voteAgainstRemoval":283,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":215,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":68,"org.easymock.tests.LimitationsTest.privateConstructor":116,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":11,"org.easymock.tests2.UsageConstraintsTest.testNotNull":98,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":44,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":85,"org.easymock.tests2.UsageTest.defaultResetToNice":362,"org.easymock.samples.ExampleTest.voteAgainstRemovals":280,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":188,"org.easymock.tests.UsageVarargTest.differentLength":247,"org.easymock.tests2.CallbackTest.callback":287,"org.easymock.tests2.UsageConstraintsTest.equals":53,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":66,"org.easymock.tests.UsageTest.openCallCountByLastCall":238,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":101,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":213,"org.easymock.tests.UsageCallCountTest.tooFewCalls":206,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":168,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":381,"org.easymock.tests.UsageThrowableTest.throwCheckedException":41,"org.easymock.tests.MockingTest.testStrictClassMocking":128,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":377,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":169,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":226,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":2,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":369,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":375,"org.easymock.tests.ObjectMethodsTest.testHashCode":105,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":387,"org.easymock.tests2.NameTest.nameForNiceMock":303,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":341,"org.easymock.tests2.DependencyTest.testInterfaceMocking":336,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":386,"org.easymock.samples.ExampleTest.addDocument":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":162,"org.easymock.tests2.DelegateToTest.testStubDelegate":332,"org.easymock.tests2.AnswerTest.stubAnswer":374,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":196,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":81,"org.easymock.tests.UsageVarargTest.varargLongAccepted":249,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":200,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":191,"org.easymock.tests.UsageExpectAndReturnTest.floatType":175,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":70,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":64,"org.easymock.tests.UsageThrowableTest.noUpperLimit":224,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":324,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":313,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":164,"org.easymock.tests2.SerializationTest.test":56,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":291,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":136,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":174,"org.easymock.tests2.UsageConstraintsTest.testSame":315,"org.easymock.samples.SupportTest.addDocument":278,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":158,"org.easymock.tests.GenericTest.testPackageScope":119,"org.easymock.tests2.NameTest.nameForMock":301,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":185,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":9,"org.easymock.tests2.UsageStrictMockTest.differentMethods":310,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":151,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":177,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":31,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":221,"org.easymock.tests2.MockedExceptionTest.testRealException":370,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":307,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":212,"org.easymock.tests2.NameTest.nameForStrictMock":302,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":77,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":1,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":367,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":148,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":165,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":138,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":97,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":75,"org.easymock.tests2.UsageStrictMockTest.range":309,"org.easymock.tests2.UsageConstraintsTest.lessThan":329,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":344,"org.easymock.tests2.CaptureTest.testCaptureRightOne":90,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":86,"org.easymock.tests2.UsageConstraintsTest.testOr":94,"org.easymock.tests.UsageRangeTest.combination":218,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":146,"org.easymock.tests.UsageTest.wrongArguments":237,"org.easymock.tests2.MockBuilderTest.testWithConstructor":5,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":122,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":178,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":186,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":140,"org.easymock.tests.UsageVarargTest.varargShortAccepted":248,"org.easymock.tests2.UsageConstraintsTest.cmpTo":318,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":372,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":52,"org.easymock.tests2.CaptureTest.testCaptureFromStub":296,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":76,"org.easymock.tests.UsageTest.unexpectedCallWithArray":390,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":195,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":207,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":8,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":187,"org.easymock.tests2.UsageConstraintsTest.constraints":91,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":197,"org.easymock.samples.ExampleTest.addAndChangeDocument":286,"org.easymock.tests.UsageStrictMockTest.testVerify":201,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":276,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":194,"org.easymock.tests2.CompareToTest.testGreateThan":382,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":292,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":270,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":179,"org.easymock.tests.LimitationsTest.abstractClass":115,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":257,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":271,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":243,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":349}}]

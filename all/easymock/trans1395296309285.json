[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","state":"shouldBeUsedInOneThread","this":"this"}},{"position":"org.easymock.internal.RecordState:190","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,0,40,41,42,1,2,43,44,3,45,46,4,47,48,49,5,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,6,91,7,8,9,10,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,11,12,115,116,117,118,119,120,121,122,123],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Number)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","failures":[41,124,125,126,4,47,48,127,128,129,130,91,131,132,133,134,10,92,93,103,135,11,136,12],"status":-1,"binaryOperator":"((org.easymock.internal.ExpectedInvocation.toString()) + \": \")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[137],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[138,139],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:39","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:49","sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[15,140],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[15,21,77,141,84],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[142,143,144,145,146,134],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:230","sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[41,4,48,147,127,128,129,130,91,10,93,148,11,136,12,149,150,151],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:109","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[152,78,85,86,153],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:336","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:40","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:233","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:632","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[15,16,18,20,21,154,32,36,77,141,84],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[155,156],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[157,15,29,0,124,42,158,125,126,44,3,159,160,47,48,161,162,163,164,57,60,62,65,69,70,73,165,166,6,146,131,132,133,9,167,134,168,92,93,169,170,99,135,171,136,12,172,173,174],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:71","sourceCode":"return org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[175,176,177],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[178,179,63,180,76,181,182,183,184,185,186,187,188,189,190,191,192,193],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:321","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[194,195],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[196,197,198,199,200,201,202,203,170,204],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"shouldBeUsedInOneThread"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[192],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:60","failures":[196,205,206,207,208,209,210,211,212,213,214],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[50,209,210,211,215,212,213,216,217,218,219,214,220,221,222],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[142,143,144,145,146,134],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"value","i":"i"}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[223,224,196,225,197,205,226,227,228,229,230,231,232,233,50,234,235,155,161,236,52,237,198,238,162,163,156,164,219,239,57,240,58,241,242,59,243,60,61,62,63,244,245,246,247,248,249,250,251,252,253,254,204,221,221,222,222,255,256,257],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[124,125,126,47,166,146,131,132,133,134,92,135,136,12],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:136","failures":[13,14,17,18,19,20,25,27,28,30,31,36,37,38,4,85,258,259,260,90,261,10,262,263,94,264,95,265,266,98,104,105,106,221,221,222,222],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[267,135],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:336","sourceCode":"this.org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:332","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","threadSafe":"value"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[268,269,270,271,272,50,211,215,219,214],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[142,143,144,145,146,134],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[134],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[219,214],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[219,214],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:112","sourceCode":"if (!(org.easymock.Capture<T>.hasCaptured())) {\n    this.java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[152,78,81,82,83,86,153],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values","value":"value","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":16,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":6,"org.easymock.tests2.UsageTest.argumentsOrdered":126,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":74,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":175,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":184,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":158,"org.easymock.tests2.StubTest.stubWithReturnValue":76,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":211,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":35,"org.easymock.tests2.SerializationTest.testAllMockedMethod":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":182,"org.easymock.tests.MockingTest.testPartialClassMocking":246,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":218,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":143,"org.easymock.tests.MockClassControlTest.testToString":201,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":114,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":227,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":33,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":46,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":268,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":265,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":266,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":22,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":104,"org.easymock.tests2.UsageTest.wrongArguments":124,"org.easymock.samples.ConstructorCalledMockTest.testTax":221,"org.easymock.tests.UsageStrictMockTest.range":92,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":71,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":223,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":204,"org.easymock.tests2.UsageConstraintsTest.testNull":18,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":240,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":198,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":73,"org.easymock.tests2.CaptureTest.testPrimitive":79,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":106,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":192,"org.easymock.tests.UsageTest.moreThanOneArgument":91,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":132,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":94,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":144,"org.easymock.tests2.CaptureTest.testCaptureNone":82,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":97,"org.easymock.tests.UsageUnorderedTest.message":135,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":169,"org.easymock.tests.UsageVerifyTest.twoReturns":12,"org.easymock.tests2.ThreadingTest.testThreadSafe":53,"org.easymock.tests.UsageTest.argumentsOrdered":133,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":256,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":258,"org.easymock.tests2.CaptureTest.testCapture_2617107":141,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":235,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":195,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":237,"org.easymock.tests2.UsageConstraintsTest.any":23,"org.easymock.tests2.StubTest.stub":194,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":261,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":189,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":183,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":160,"org.easymock.tests2.SerializationTest.testClass":50,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":39,"org.easymock.tests.LimitationsTest.mockNativeMethod":244,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":49,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":252,"org.easymock.tests2.AnswerTest.answer":5,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":154,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":232,"org.easymock.tests2.CaptureTest.testAnd":77,"org.easymock.tests2.UsageTest.strictResetToDefault":40,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":243,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":210,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":147,"org.easymock.tests2.NameTest.nameForMocksControl":130,"org.easymock.tests2.MockedExceptionTest.testMockedException":179,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":263,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":68,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":101,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":8,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":248,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":137,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":239,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":238,"org.easymock.tests.MockingTest.testNicePartialClassMocking":247,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":241,"org.easymock.tests2.CaptureTest.testCaptureLast":81,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":185,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":205,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":21,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":34,"org.easymock.tests.MockingTest.testTwoMocks":245,"org.easymock.tests2.CaptureTest.testCapture1_2446744":80,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":206,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":125,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":37,"org.easymock.tests.UsageThrowableTest.throwError":107,"org.easymock.tests.UsageStrictMockTest.differentMethods":93,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":177,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":55,"org.easymock.tests2.ConstraintsToStringTest.andToString":140,"org.easymock.tests2.MockBuilderTest.testCreateMockString":164,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":170,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":95,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":29,"org.easymock.tests.UsageVerifyTest.twoThrows":136,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":216,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":228,"org.easymock.samples.PartialClassMockTest.testGetArea":255,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":259,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":96,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":61,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":200,"org.easymock.tests2.UsageTest.niceToStrict":42,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":208,"org.easymock.tests2.UsageConstraintsTest.testNotNull":36,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":113,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":178,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":52,"org.easymock.tests2.UsageTest.defaultResetToNice":43,"org.easymock.tests2.MockBuilderTest.testCreateMock":162,"org.easymock.tests.UsageVarargTest.differentLength":171,"org.easymock.tests2.CallbackTest.callback":157,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":220,"org.easymock.tests.UsageTest.openCallCountByLastCall":7,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":142,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":69,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":13,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":149,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":193,"org.easymock.tests.UsageCallCountTest.tooFewCalls":151,"org.easymock.tests.UsageOverloadedMethodTest.overloading":88,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":27,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":225,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":119,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":26,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":83,"org.easymock.tests.UsageThrowableTest.throwCheckedException":110,"org.easymock.tests2.EasyMockSupportClassTest.testAll":226,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":251,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":145,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":230,"org.easymock.tests2.CaptureTest.testCaptureAll":78,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":197,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":190,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":196,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":176,"org.easymock.tests2.UsageConstraintsTest.testMatches":28,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":264,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":56,"org.easymock.tests2.NameTest.nameForNiceMock":129,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":11,"org.easymock.tests2.DependencyTest.testInterfaceMocking":45,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":270,"org.easymock.samples.BasicClassMockTest.testPrintContent":257,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":112,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":159,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":186,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":10,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":272,"org.easymock.tests2.UsageConstraintsTest.greaterThan":30,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":100,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":62,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":148,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":54,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":242,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":219,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":222,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":31,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":253,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":14,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":0,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":199,"org.easymock.tests2.SerializationTest.test":51,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":191,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":66,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":108,"org.easymock.tests2.UsageConstraintsTest.testSame":19,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":181,"org.easymock.tests2.CaptureTest.testCaptureFirst":87,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":67,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":3,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":117,"org.easymock.tests.GenericTest.testPackageScope":250,"org.easymock.tests2.CaptureTest.testCapture2_2446744":86,"org.easymock.tests2.UsageTest.moreThanOneArgument":41,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":163,"org.easymock.tests2.NameTest.nameForMock":127,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":173,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":64,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":120,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":156,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":123,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":213,"org.easymock.tests2.UsageStrictMockTest.differentMethods":48,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":262,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":188,"org.easymock.tests.UsageCallCountTest.tooManyCalls":174,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":102,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":150,"org.easymock.tests2.MockedExceptionTest.testRealException":180,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":217,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":4,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":105,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":111,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":224,"org.easymock.tests2.UsageConstraintsTest.testContains":25,"org.easymock.tests2.NameTest.nameForStrictMock":128,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":155,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":63,"org.easymock.tests2.UsageConstraintsTest.testFind":17,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":89,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":58,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":167,"org.easymock.tests.UsageExpectAndReturnTest.object":118,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":267,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":32,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":59,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":161,"org.easymock.tests2.UsageStrictMockTest.range":47,"org.easymock.tests2.UsageConstraintsTest.lessThan":38,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":72,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":269,"org.easymock.tests.UsageTest.exactCallCountByLastCall":9,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":98,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":271,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":65,"org.easymock.tests2.CaptureTest.testCaptureRightOne":84,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":139,"org.easymock.tests2.UsageConstraintsTest.testOr":20,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":214,"org.easymock.tests.UsageRangeTest.combination":99,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":57,"org.easymock.tests.UsageTest.wrongArguments":131,"org.easymock.tests2.MockBuilderTest.testWithConstructor":209,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":249,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":115,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":121,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":138,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":165,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":172,"org.easymock.tests2.UsageConstraintsTest.cmpTo":24,"org.easymock.tests2.CaptureTest.testCaptureMultiple":152,"org.easymock.tests2.UsageTest.openCallCountByLastCall":1,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":2,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":75,"org.easymock.tests2.CaptureTest.testCaptureFromStub":85,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":236,"org.easymock.tests.UsageTest.unexpectedCallWithArray":146,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":166,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":233,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":109,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":134,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":212,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":122,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":203,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":60,"org.easymock.tests2.UsageConstraintsTest.constraints":15,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":168,"org.easymock.tests.CapturesMatcherTest.test":153,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":229,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":202,"org.easymock.tests2.UsageTest.resumeIfFailure":44,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":260,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":231,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":254,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":116,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":90,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":103,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":70}}]

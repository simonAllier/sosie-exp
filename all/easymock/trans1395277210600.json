[{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:40","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Contains:40","sourceCode":"java.lang.StringBuffer.append(((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1952","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[2,3,4,5,6,7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[8,9,10,11],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:148","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[12,13,14],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:116","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[15,16,17,18,19,20,21,22,23,23,24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,2,8,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,3,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,4,176,177,178,179,180,181,182,183,6,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,7,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:42","sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"c":"c","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[12,13,14],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:189","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:82","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"isThreadSafe":"matched"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"failures":[262],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[263,209,264,210,265],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"candidateMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[48],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[106,266,267],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:77","failures":[268,269],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[71,74,97,100,101,102,103,270,265],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[39,41,42,43,271,224],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((java.util.Comparator<? super T>) + \"(\") + (T))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:322","sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","type":"CtForEachImpl"},"failures":[201,202,231,232],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"exception":"throwableClass","throwableClass":"throwableClass"}},{"position":"org.easymock.internal.LastControl:92","failures":[272],"status":-1,"binaryOperator":"(((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[273],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[15,274,275,23,23,24,24,36,276,8,9,277,278,71,72,73,74,76,77,279,280,281,85,282,283,86,284,285,286,287,288,289,290,291,292,87,293,294,295,296,297,88,298,299,97,98,100,101,102,300,103,301,302,303,104,105,106,304,266,131,132,133,305,135,306,307,136,308,137,138,309,310,139,311,312,313,314,315,316,317,12,318,319,320,321,171,322,323,324,325,326,327,328,329,270,330,331,332,188,189,190,333,263,209,264,210,265,211,334],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:50","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long.valueOf(0))","type":"CtInvocationImpl"},"failures":[145,151,158,159,173,178,335,199,229,242,248,255,256],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[36,37,276],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[70,336],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:305","failures":[15,16,17,18,19,20,22,25,26,337,27,28,29,30,31,32,34,35,36,37,39,40,41,43,2,8,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,338,67,68,69,70,71,72,73,74,75,76,77,78,82,83,84,85,86,87,88,3,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,135,136,137,138,139,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,167,168,169,171,4,182,6,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,204,205,206,207,208,209,212,213,214,221,7,222,223,224,225,226,339,233,234,235,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[61],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[90,340,341,342,112,113,114,343,267,344,345,170,346,347,348,184,349,350,351,352,206,207,208,221,7,222],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[353,354,269],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:159","sourceCode":"final java.lang.ClassCastException java.lang.ClassCastException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[355],"status":-1,"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[356,357,358],"status":-1,"binaryOperator":"java.lang.String == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[47,61,3,340,91,359,341,342,95,96,98,104,106,360,361,113,114,118,122,123,126,129,135,310,139,311,170,362,363,364,6,365,349,350,351,187,191,366,367,368,352,369,207,208,370,371,372,7,222],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[16,17,18,19,373,20,21,25,26,337,27,28,374,375,29,30,31,32,33,34,35,36,37,276,39,40,41,43,44,2,8,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,338,67,68,69,70,72,73,76,77,78,81,82,83,3,89,90,340,91,359,92,93,341,342,95,96,97,98,99,100,101,102,103,105,107,108,109,110,111,376,112,361,113,114,377,115,129,131,132,133,134,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,378,379,380,381,382,383,384,385,386,387,172,173,174,175,4,176,177,178,179,180,181,6,184,349,185,186,350,351,187,188,189,190,191,193,194,195,196,197,198,199,204,205,388,352,206,369,207,208,389,209,264,211,212,213,214,220,390,391,392,371,372,221,7,222,223,224,225,226,233,393,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.MockBuilder:205","failures":[15,23,24,36,8,9,394,86,87,88,300,301,104,105,266,131,305,395,135,306,396,307,136,308,137,10,138,397,309,310,139,398,311,312,313,263,210],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:83","failures":[340,341,342,113,170,362,363,365,349,350,351,352,207,7,222,399],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":48,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":6,"org.easymock.tests2.UsageTest.argumentsOrdered":342,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":127,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":359,"org.easymock.tests2.DelegateToTest.testReturnException":39,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":173,"org.easymock.tests.MockingTest.testPartialClassMocking":188,"org.easymock.tests.MockClassControlTest.testToString":325,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":203,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":287,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":239,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":346,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":116,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":54,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":234,"org.easymock.tests2.UsageTest.wrongArguments":340,"org.easymock.samples.ExampleTest.answerVsDelegate":17,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":313,"org.easymock.tests2.UsageConstraintsTest.testNull":50,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":100,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":126,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":270,"org.easymock.tests2.CaptureTest.testPrimitive":27,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":238,"org.easymock.tests.UsageTest.moreThanOneArgument":184,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":258,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":99,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":179,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":215,"org.easymock.tests.UsageTest.argumentsOrdered":351,"org.easymock.tests.UsageVarargTest.varargIntAccepted":380,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":195,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":305,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":271,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":199,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":84,"org.easymock.tests2.AnswerTest.answer":78,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":272,"org.easymock.tests2.CaptureTest.testAnd":25,"org.easymock.tests2.UsageTest.strictResetToDefault":89,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":396,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":303,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":178,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":121,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":193,"org.easymock.tests2.DelegateToTest.testDelegate":43,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":219,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":254,"org.easymock.tests.LimitationsTest.mockFinalMethod":322,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":335,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":339,"org.easymock.tests2.CaptureTest.testCapture1_2446744":28,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":357,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":252,"org.easymock.tests.UsageThrowableTest.throwError":162,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":367,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":299,"org.easymock.samples.PartialClassMockTest.testGetArea":15,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":196,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":228,"org.easymock.tests2.UsageTest.niceToStrict":91,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":288,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":334,"org.easymock.tests2.ThreadingTest.testChangeDefault":358,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":269,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":136,"org.easymock.tests2.MockBuilderTest.testCreateMock":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":295,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":248,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":122,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":232,"org.easymock.tests.UsageOverloadedMethodTest.overloading":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":297,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":59,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":225,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":153,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":212,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":13,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":58,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":31,"org.easymock.tests2.EasyMockSupportClassTest.testAll":85,"org.easymock.tests.MockClassControlTest.testEquals":329,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":264,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":256,"org.easymock.tests2.CaptureTest.testCaptureAll":26,"org.easymock.tests2.UsageConstraintsTest.testMatches":60,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":180,"org.easymock.samples.ExampleTest.voteForRemovals":20,"org.easymock.tests.UsageVarargTest.allKinds":387,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":221,"org.easymock.samples.BasicClassMockTest.testPrintContent":275,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":168,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":360,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":176,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":42,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":0,"org.easymock.tests2.UsageConstraintsTest.greaterThan":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":282,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":192,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":106,"org.easymock.samples.ExampleTest.voteForRemoval":18,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":319,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":108,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":304,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":300,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":3,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":211,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":309,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":119,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":280,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":172,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":38,"org.easymock.tests2.CaptureTest.testCaptureFirst":35,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":120,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":96,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":399,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":149,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":110,"org.easymock.tests2.CaptureTest.testCapture2_2446744":34,"org.easymock.tests2.UsageTest.moreThanOneArgument":90,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":139,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":386,"org.easymock.tests.GenericTest.testBridgedEquals":265,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":371,"org.easymock.tests.UsageExpectAndReturnTest.longType":145,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":117,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":257,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":261,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":338,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":255,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":177,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":201,"org.easymock.tests.UsageCallCountTest.tooManyCalls":372,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":296,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":150,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":244,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":167,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":72,"org.easymock.tests.MockingTest.testNiceClassMocking":333,"org.easymock.tests.MockingTest.testClassMocking":331,"org.easymock.tests2.UsageConstraintsTest.testContains":57,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":133,"org.easymock.tests2.UsageConstraintsTest.testFind":49,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":214,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":141,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":368,"org.easymock.tests.UsageExpectAndReturnTest.object":152,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":103,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":125,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":382,"org.easymock.tests.UsageTest.exactCallCountByLastCall":187,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":204,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":216,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":158,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":378,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":224,"org.easymock.tests.MockClassControlTest.testHashCode":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":290,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":217,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":223,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":231,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":362,"org.easymock.tests.UsageVarargTest.varargCharAccepted":381,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":376,"org.easymock.tests2.UsageTest.openCallCountByLastCall":92,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":128,"org.easymock.tests.DefaultClassInstantiatorTest.object":314,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":353,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":230,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":363,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":291,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":165,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":104,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":327,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":245,"org.easymock.tests.CapturesMatcherTest.test":262,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":159,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":88,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":326,"org.easymock.tests2.UsageTest.resumeIfFailure":95,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":312,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":175,"org.easymock.tests2.StubTest.stubWithReturnValue":2,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":10,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":151,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":67,"org.easymock.tests2.SerializationTest.testAllMockedMethod":276,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":182,"org.easymock.samples.SupportTest.voteForRemovals":22,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":263,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":251,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":183,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":79,"org.easymock.tests.UsageExpectAndThrowTest.object":249,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":65,"org.easymock.tests2.DelegateToTest.testWrongClass":41,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":259,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":260,"org.easymock.samples.ConstructorCalledMockTest.testTax":23,"org.easymock.tests.UsageStrictMockTest.range":207,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":124,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":71,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":250,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":279,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":350,"org.easymock.tests2.CaptureTest.testCaptureNone":30,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":229,"org.easymock.tests.UsageUnorderedTest.message":170,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":366,"org.easymock.tests.UsageVerifyTest.twoReturns":222,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":355,"org.easymock.tests.UsageVarargTest.varargByteAccepted":385,"org.easymock.tests2.ThreadingTest.testThreadSafe":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":293,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":392,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":274,"org.easymock.tests2.CaptureTest.testCapture_2617107":337,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":237,"org.easymock.tests2.UsageConstraintsTest.any":55,"org.easymock.tests2.StubTest.stub":44,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":202,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":174,"org.easymock.tests.UsageExpectAndThrowTest.longType":242,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":12,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":361,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":130,"org.easymock.tests2.SerializationTest.testClass":36,"org.easymock.tests.LimitationsTest.mockNativeMethod":171,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":161,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":210,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":377,"org.easymock.tests2.NameTest.nameForMocksControl":345,"org.easymock.tests2.MockedExceptionTest.testMockedException":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":283,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":186,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":190,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":243,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":97,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":138,"org.easymock.tests.MockingTest.testNicePartialClassMocking":189,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":102,"org.easymock.tests2.CaptureTest.testCaptureLast":29,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":233,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":53,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":77,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":66,"org.easymock.tests.MockingTest.testTwoMocks":332,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":142,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":247,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":341,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":69,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":356,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":393,"org.easymock.tests.UsageStrictMockTest.differentMethods":208,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":316,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":109,"org.easymock.tests2.MockBuilderTest.testCreateMockString":311,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":323,"org.easymock.tests.UsageExpectAndThrowTest.floatType":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":284,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":281,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":81,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":394,"org.easymock.tests.UsageVerifyTest.twoThrows":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":87,"org.easymock.samples.ExampleTest.voteAgainstRemoval":19,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":227,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":105,"org.easymock.tests.LimitationsTest.privateConstructor":321,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":268,"org.easymock.tests2.UsageConstraintsTest.testNotNull":68,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":169,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":131,"org.easymock.tests2.UsageTest.defaultResetToNice":94,"org.easymock.samples.ExampleTest.voteAgainstRemovals":16,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":157,"org.easymock.tests.UsageVarargTest.differentLength":364,"org.easymock.tests2.CallbackTest.callback":129,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":301,"org.easymock.tests.UsageTest.openCallCountByLastCall":185,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":45,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":236,"org.easymock.tests.UsageCallCountTest.tooFewCalls":390,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":74,"org.easymock.tests.UsageThrowableTest.throwCheckedException":166,"org.easymock.tests.MockingTest.testStrictClassMocking":330,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":76,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":205,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":73,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":75,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":83,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":111,"org.easymock.tests2.NameTest.nameForNiceMock":344,"org.easymock.tests2.DependencyTest.testInterfaceMocking":115,"org.easymock.samples.ExampleTest.addDocument":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":294,"org.easymock.tests2.DelegateToTest.testStubDelegate":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":298,"org.easymock.tests2.AnswerTest.stubAnswer":82,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":206,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":397,"org.easymock.tests.UsageVarargTest.varargLongAccepted":384,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":389,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":160,"org.easymock.tests.UsageExpectAndReturnTest.floatType":144,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":8,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":24,"org.easymock.tests.UsageThrowableTest.noUpperLimit":163,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":63,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":46,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":277,"org.easymock.tests2.SerializationTest.test":37,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":374,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":14,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":315,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":143,"org.easymock.tests2.UsageConstraintsTest.testSame":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":285,"org.easymock.tests.GenericTest.testPackageScope":209,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":218,"org.easymock.tests2.NameTest.nameForMock":343,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":154,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":398,"org.easymock.tests2.UsageStrictMockTest.differentMethods":114,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":302,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":146,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":253,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":194,"org.easymock.tests2.MockedExceptionTest.testRealException":134,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":11,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":112,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":235,"org.easymock.tests2.NameTest.nameForStrictMock":267,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":307,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":140,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":354,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":101,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":278,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":64,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":317,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":347,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":135,"org.easymock.tests2.UsageStrictMockTest.range":113,"org.easymock.tests2.UsageConstraintsTest.lessThan":70,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":118,"org.easymock.tests2.CaptureTest.testCaptureRightOne":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":289,"org.easymock.tests2.UsageConstraintsTest.testOr":52,"org.easymock.tests.UsageRangeTest.combination":191,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":98,"org.easymock.tests.UsageTest.wrongArguments":349,"org.easymock.tests2.MockBuilderTest.testWithConstructor":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":286,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":324,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":147,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":155,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":318,"org.easymock.tests.UsageVarargTest.varargShortAccepted":383,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":370,"org.easymock.tests2.UsageConstraintsTest.cmpTo":56,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":80,"org.easymock.tests2.CompareToTest.testLessThan":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":5,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":93,"org.easymock.tests2.CaptureTest.testCaptureFromStub":33,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":306,"org.easymock.tests.UsageTest.unexpectedCallWithArray":365,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":352,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":391,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":273,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":156,"org.easymock.tests2.UsageConstraintsTest.constraints":47,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":369,"org.easymock.samples.ExampleTest.addAndChangeDocument":21,"org.easymock.tests2.ConstraintsToStringTest.containsToString":1,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":388,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":375,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":197,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":148,"org.easymock.tests.LimitationsTest.abstractClass":320,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":198,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":226,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":123,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":348,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":379}}]

[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"binaryOperator":"(java.util.List<T>.size()) > 1","name":"removeConditional","position":"org.easymock.Capture:82","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer returning \" + java.lang.Object","position":"org.easymock.internal.Result:68","type":"CtReturnImpl"},"status":-2},{"failures":[12,13],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.ClassProxyFactory:216","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","position":"org.easymock.internal.ErrorMessage:53","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:125","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.io.ObjectInputStream.readObject()","position":"org.easymock.internal.DefaultClassInstantiator:203","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:279","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","position":"org.easymock.internal.Invocation:180","type":"CtTryImpl"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22,23],"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"removeConditional","position":"org.easymock.internal.ReflectionUtils:180","type":"mutation","status":-1},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:946","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","position":"org.easymock.internal.DefaultClassInstantiator:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","position":"org.easymock.internal.MethodSerializationWrapper:68","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","position":"org.easymock.internal.MocksControl:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"status":-2},{"failures":[14,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,70,71,71,72,73],"variableMapping":{"number":"number"},"name":"replace","transplant":{"sourceCode":"return java.lang.Number.floatValue()","position":"org.easymock.internal.RecordState:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:194","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n    java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n} else {\n    java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n}","position":"org.easymock.internal.Injector:123","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:520","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.ClassProxyFactory:77","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl"},"status":-2},{"failures":[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,14,15,102,103,104,105,106,0,107,1,2,3,4,5,6,108,7,9,10,109,11,110,111,112,113,24,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,25,139,140,141,26,142,27,16,28,17,143,29,144,145,18,146,147,148,30,31,32,33,34,35,36,149,150,151,37,152,153,154,38,155,156,157,158,159,160,161,162,163,164,165,166,39,167,168,40,169,170,171,172,173,174,175,176,177,41,178,179,180,181,182,42,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,43,217,44,45,218,46,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,47,48,49,50,246,51,247,248,249,250,251,252,253,254,255,256,257,52,53,258,54,259,260,261,262,55,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,56,286,57,287,58,59,288,60,289,290,291,292,61,62,293,294,295,296,297,63,64,65,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,13,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,66,441,67,68,442,69,443,444,445,70,70,71,71,72,446,73,447,448,449],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1349","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.InjectionTarget:62","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResults>()","position":"org.easymock.internal.UnorderedBehavior:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.matchers.Or:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:583","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:59","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:51","type":"CtClassImpl"},"status":-2},{"failures":[77],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short.valueOf(((short)(0))))","position":"org.easymock.internal.RecordState:47","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:41","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Results:60","type":"CtReturnImpl"},"status":-2},{"failures":[394],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.ExpectedInvocationAndResult:41","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.ClassProxyFactory:89","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:434","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Exception java.lang.Exception","position":"org.easymock.ConstructorArgs:71","type":"CtLocalVariableImpl"},"status":0},{"failures":[143,145,282,380,430],"binaryOperator":"(70 * ((int - int) + 1))","name":"math","position":"org.easymock.internal.MocksBehavior:119","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String).append(\", actual: \")","position":"org.easymock.internal.ErrorMessage:48","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Proxy.java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object)","position":"org.easymock.internal.JavaProxyFactory:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:90","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.UnorderedBehavior:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ClassProxyFactory.MockMethodInterceptor org.easymock.internal.ClassProxyFactory.MockMethodInterceptor = new org.easymock.internal.ClassProxyFactory.MockMethodInterceptor(java.lang.reflect.InvocationHandler)","position":"org.easymock.internal.ClassProxyFactory:167","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","position":"org.easymock.internal.matchers.Matches:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:67","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:170","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ClassProxyFactory:194","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2067","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:336","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.EasyMockSupport:480","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"expected","expected":"actual","this":"this"},"name":"add","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result","bound":"result"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)))","position":"org.easymock.internal.BridgeMethodResolver:359","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","position":"org.easymock.internal.RecordState:256","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"new org.easymock.internal.Range(1)","position":"org.easymock.internal.MocksControl:380","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResult org.easymock.internal.ExpectedInvocationAndResult : java.util.List<org.easymock.internal.ExpectedInvocationAndResult>) {\n    if (org.easymock.internal.ExpectedInvocationAndResult.getExpectedInvocation().matches(org.easymock.internal.Invocation)) {\n        return org.easymock.internal.ExpectedInvocationAndResult.getResult();\n    } \n}","position":"org.easymock.internal.MocksBehavior:65","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:328","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass()","position":"org.easymock.internal.Injector:80","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:184","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:87","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.ConstructorArgs:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer returning \" + java.lang.Object","position":"org.easymock.internal.Result:68","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:283","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1080","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int]","position":"org.easymock.internal.BridgeMethodResolver:323","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","position":"org.easymock.internal.RecordState:63","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))))","position":"org.easymock.internal.MocksBehavior:199","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","position":"org.easymock.internal.ClassProxyFactory:214","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\")","position":"org.easymock.internal.AndroidSupport:26","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:785","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"\"Answer throwing \" + java.lang.Throwable","name":"removeConditional","position":"org.easymock.internal.ThrowingAnswer:51","type":"mutation","status":-2},{"failures":[199,239,450,360,361,362,385,405,406,13,434],"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","position":"org.easymock.internal.ExpectedInvocation:69","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n    java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n}","position":"org.easymock.internal.ClassProxyFactory:136","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"values":"values","this":"this"},"name":"add","transplant":{"sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","position":"org.easymock.Capture:134","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","position":"org.easymock.Capture:135","type":"CtReturnImpl"},"status":0},{"failures":[264,272],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n    if (java.lang.Class<?>[][int].isPrimitive()) {\n        java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n    } else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n        java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n    } else {\n        final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n        org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n        java.lang.Object[][int] = java.lang.Object;\n    }\n}","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"CtForImpl"},"status":-1},{"failures":[],"binaryOperator":"\"Answer returning \" + java.lang.Object","name":"math","position":"org.easymock.internal.ReturningAnswer:68","type":"mutation","status":-2},{"failures":[96],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:986","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ObjectMethodsFilter:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:123","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:189","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:999","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocation","position":"org.easymock.internal.ExpectedInvocationAndResult:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.add(new org.easymock.internal.matchers.Equals(java.lang.Object))","position":"org.easymock.internal.ExpectedInvocation:62","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.io.IOException java.io.IOException","position":"org.easymock.internal.DefaultClassInstantiator:44","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:170","type":"CtIfImpl"},"status":0},{"failures":[14,451,137,25,139,26,27,28,29,452,145,18,453,454,455,456,457,39,40,41,42,218,219,221,225,226,47,52,53,54,301,303,305,315,318,70,70,71,71,72],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","position":"org.easymock.internal.ReflectionUtils:105","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:148","type":"CtInvocationImpl"},"status":-2},{"failures":[88],"variableMapping":{"actual":"expected","expected":"actual","this":"this"},"name":"replace","transplant":{"sourceCode":"return java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:41","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<T>.add(T)","position":"org.easymock.Capture:120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MockInvocationHandler:43","type":"CtLocalVariableImpl"},"status":-2},{"failures":[74,75,76,77,458,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,14,15,103,104,105,106,0,107,1,2,3,4,5,6,108,7,9,10,109,11,110,111,112,113,24,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,25,139,141,26,142,27,28,17,143,29,145,18,146,147,148,30,31,32,33,459,34,35,36,460,149,150,151,37,152,153,154,38,155,156,157,158,159,160,161,162,461,163,164,165,166,39,167,168,40,169,170,171,172,173,174,175,176,177,41,178,179,180,181,182,42,183,184,186,187,188,462,189,190,191,192,193,463,464,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,465,211,212,213,214,215,466,467,216,43,217,44,45,218,46,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,243,484,485,486,487,488,244,489,245,490,47,491,48,49,50,246,51,247,248,249,250,251,252,253,254,255,256,257,52,53,258,54,259,260,261,262,55,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,56,286,57,287,58,59,288,60,289,290,291,292,61,62,293,294,295,296,297,63,64,65,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,492,493,316,317,318,319,320,321,322,323,324,325,326,327,328,494,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,495,381,496,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,13,412,413,414,415,416,417,418,419,497,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,66,441,67,68,442,69,443,444,445,70,71,72,446,73,447,448,449],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl"},"status":-1},{"failures":[417,418,419,420,421,422,423,424,425,426,427,428,66,69,73],"binaryOperator":"int + int","name":"math","position":"org.easymock.internal.Invocation:62","type":"mutation","status":-1},{"failures":[79,85,99,110,199,230,236,237,242,309,323,360,362,385,428,432,433,436],"binaryOperator":"int > (int)","name":"conditionalBoundary","position":"org.easymock.internal.Results:72","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.SecurityException java.lang.SecurityException","position":"org.easymock.internal.Invocation:183","type":"CtLocalVariableImpl"},"status":-2},{"failures":[142,40,204,219],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:894","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:415","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"proxy":"proxy","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:88","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injector.org.easymock.internal.Injector.shouldNotAssignTo(java.lang.reflect.Field)) {\n    return null;\n} ","position":"org.easymock.internal.Injector:216","type":"CtIfImpl"},"status":0},{"failures":[462,189,190,191,192,463,464,465,211,212,213,214,466,467,445,447],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","position":"org.easymock.internal.LastControl:37","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:65","type":"CtWhileImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:280","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-2},{"failures":[154,155,156,157,470,376,441],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.asStub()","position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:285","type":"CtInvocationImpl"},"status":-1},{"failures":[91,498,499,500,501],"variableMapping":{"delegateTo":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"status":-1},{"failures":[96],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1708","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:987","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","position":"org.easymock.internal.DefaultClassInstantiator:89","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.ClassProxyFactory:216","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.ExpectedInvocation:98","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:323","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n    java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n} else {\n    java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n}","position":"org.easymock.internal.Injector:123","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","position":"org.easymock.internal.RecordState:322","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"java.lang.reflect.Modifier.FINAL":"position","java.lang.reflect.Modifier.STATIC":"position"},"name":"add","transplant":{"sourceCode":"final int int = (this.int) | (this.int)","position":"org.easymock.internal.DefaultClassInstantiator:157","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[244],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"status":-1},{"failures":[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,106,0,107,1,2,3,4,5,6,108,7,9,10,109,11,152,162,163,185,199,221,48,49,50,246,51,262,55,333,355,356,357,358,359,384,385,13,412,413,427],"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","position":"org.easymock.internal.LastControl:70","type":"mutation","status":-1},{"failures":[451],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"status":-1},{"failures":[],"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"mutation","status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":310,"org.easymock.tests2.MockedExceptionTest.testRealException":207,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":169,"org.easymock.tests.UsageVarargTest.varargIntAccepted":419,"org.easymock.tests.LimitationsTest.mockFinalMethod":491,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":74,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":14,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":179,"org.easymock.tests.UsageCallCountTest.tooManyCalls":284,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":394,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":460,"org.easymock.tests2.StubTest.stubWithReturnValue":196,"org.easymock.tests.UsageVarargTest.allKinds":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":184,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":275,"org.easymock.tests2.CaptureTest.testCaptureAll":107,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":262,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":20,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":91,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":454,"org.easymock.tests2.CaptureTest.testAnd":0,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":102,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":453,"org.easymock.tests.UsageStrictMockTest.testVerify":390,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":343,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":376,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":315,"org.easymock.tests.MockClassControlTest.testToString":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":30,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":401,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":120,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":296,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":351,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":212,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":23,"org.easymock.tests.UsageThrowableTest.throwError":307,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":359,"org.easymock.samples.SupportTest.addDocument":446,"org.easymock.tests2.StubTest.stub":195,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":405,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":395,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":208,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":246,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":355,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":488,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":299,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":229,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":489,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":228,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":426,"org.easymock.tests.UsageExpectAndThrowTest.object":345,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":181,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":331,"org.easymock.tests2.UsageTest.moreThanOneArgument":232,"org.easymock.tests.UsageVarargTest.varargByteAccepted":425,"org.easymock.tests.MockClassControlTest.testEquals":253,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":455,"org.easymock.tests.UsageTest.wrongArguments":431,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":366,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":327,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":211,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":346,"org.easymock.tests2.UsageTest.defaultResetToNice":238,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":500,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":498,"org.easymock.tests.MockingTest.testNiceClassMocking":261,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":206,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":37,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":28,"org.easymock.tests2.MockBuilderTest.testCreateMock":143,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":152,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":391,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":396,"org.easymock.samples.ExampleTest.voteAgainstRemovals":66,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":197,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":375,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":465,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":439,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":321,"org.easymock.tests2.CaptureTest.testCapture1_2446744":3,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":156,"org.easymock.samples.ExampleTest.voteForRemoval":67,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":160,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":281,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":379,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":416,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":16,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":272,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":389,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":12,"org.easymock.tests2.CaptureTest.testCaptureRightOne":9,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":291,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":392,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":112,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":46,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":438,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":393,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":407,"org.easymock.tests2.UsageConstraintsTest.cmpTo":86,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":268,"org.easymock.tests.MockTypeTest.fromEasyMockClass":316,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":466,"org.easymock.tests2.MockedExceptionTest.testMockedException":205,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":98,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":286,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":354,"org.easymock.samples.PartialClassMockTest.testGetArea":72,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":475,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":323,"org.easymock.samples.ConstructorCalledMockTest.testTax":70,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":459,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":111,"org.easymock.tests2.UsageTest.argumentsOrdered":240,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":492,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":161,"org.easymock.samples.ExampleTest.removeNonExistingDocument":443,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":114,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":266,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":306,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":290,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":457,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":363,"org.easymock.tests2.AnswerTest.answer":110,"org.easymock.tests.MockingTest.testNicePartialClassMocking":53,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":467,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":385,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":19,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":51,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":287,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":406,"org.easymock.tests.UsageExpectAndThrowTest.longType":338,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":320,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":41,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":122,"org.easymock.tests.UsageTest.argumentsOrdered":435,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":27,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":77,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":298,"org.easymock.tests2.NameTest.nameForStrictMock":130,"org.easymock.tests2.MockBuilderTest.testCreateMockString":145,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":357,"org.easymock.tests2.CaptureTest.testCaptureNone":108,"org.easymock.tests2.SerializationTest.testClass":18,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":487,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":494,"org.easymock.tests.MockingTest.testInterfaceMocking":258,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":448,"org.easymock.tests2.EasyMockSupportTest.testVerify":127,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":325,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":214,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":142,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":340,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":260,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":97,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":230,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":29,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":65,"org.easymock.tests.GenericTest.testBridgedEquals":304,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":83,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":34,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":43,"org.easymock.tests2.UsageConstraintsTest.testOr":81,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":451,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":150,"org.easymock.tests.MockClassControlTest.testHashCode":252,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":187,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":128,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":55,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":295,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":314,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":318,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":56,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":31,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":167,"org.easymock.tests2.UsageConstraintsTest.testSame":80,"org.easymock.tests2.UsageTest.resumeIfFailure":241,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":369,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":35,"org.easymock.tests.UsageOverloadedMethodTest.overloading":322,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":222,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":319,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":189,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":174,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":373,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":173,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":302,"org.easymock.tests.UsageTest.openCallCountByLastCall":432,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":341,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":372,"org.easymock.tests2.NameTest.nameForNiceMock":131,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":398,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":213,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":440,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":285,"org.easymock.tests2.CaptureTest.testPrimitive":2,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":44,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":368,"org.easymock.samples.BasicClassMockTest.testPrintContent":449,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":48,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":224,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":162,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":283,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":277,"org.easymock.tests2.UsageStrictMockTest.differentMethods":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":175,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":117,"org.easymock.tests.MockingTest.testClassMocking":256,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":303,"org.easymock.tests2.CaptureTest.testCaptureLast":6,"org.easymock.tests2.UsageConstraintsTest.equals":458,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":282,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":336,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":280,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":106,"org.easymock.tests.UsageStrictMockTest.range":387,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":433,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":176,"org.easymock.tests.UsageTest.unexpectedCallWithArray":430,"org.easymock.tests.MatchableArgumentsTest.testEquals":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":471,"org.easymock.samples.ExampleTest.addDocument":442,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":259,"org.easymock.tests2.UsageConstraintsTest.lessThan":101,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":380,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":434,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":374,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":404,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":480,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":158,"org.easymock.tests2.MockBuilderTest.testWithConstructor":138,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":271,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":499,"org.easymock.tests2.UsageStrictMockTest.range":201,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":36,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":365,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":473,"org.easymock.tests.UsageTest.moreThanOneArgument":429,"org.easymock.tests2.UsageTest.openCallCountByLastCall":236,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":25,"org.easymock.tests.UsageStrictMockTest.differentMethods":388,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":477,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":159,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":339,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":414,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":58,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":168,"org.easymock.tests2.DependencyTest.testClassMockingSupport":104,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":210,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":221,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":386,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":350,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":412,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":462,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":445,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":495,"org.easymock.tests2.UsageConstraintsTest.testContains":87,"org.easymock.tests2.UsageConstraintsTest.testFind":78,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":4,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":267,"org.easymock.samples.ExampleTest.addAndChangeDocument":444,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":137,"org.easymock.tests.UsageVarargTest.varargCharAccepted":420,"org.easymock.tests2.CaptureTest.testCaptureFromStub":10,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":21,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":216,"org.easymock.tests.UsageVerifyTest.twoThrows":361,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":493,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":356,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":421,"org.easymock.tests2.DelegateToTest.testReturnException":154,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":15,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":235,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":126,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":198,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":300,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":461,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":370,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":269,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":402,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":7,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":347,"org.easymock.tests2.UsageConstraintsTest.testMatches":90,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":364,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":452,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":478,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":479,"org.easymock.tests2.UsageConstraintsTest.testNull":79,"org.easymock.tests.LimitationsTest.abstractClass":245,"org.easymock.tests2.EasyMockSupportClassTest.testAll":39,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":270,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":305,"org.easymock.tests2.UsageConstraintsTest.greaterThan":92,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":417,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":397,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":94,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":123,"org.easymock.tests.UsageExpectAndReturnTest.object":293,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":203,"org.easymock.tests2.DelegateToTest.testWrongClass":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":470,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":342,"org.easymock.samples.ExampleTest.voteAgainstRemoval":68,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":313,"org.easymock.tests.UsageVarargTest.varargShortAccepted":423,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":408,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":328,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":464,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":50,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":447,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":166,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":247,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":209,"org.easymock.tests2.NameTest.nameForMocksControl":132,"org.easymock.tests2.SerializationTest.testAllMockedMethod":147,"org.easymock.tests.MockingTest.testStrictClassMocking":255,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":358,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":172,"org.easymock.tests2.DelegateToTest.testStubDelegate":38,"org.easymock.tests.LimitationsTest.mockNativeMethod":47,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":415,"org.easymock.tests.UsageUnorderedTest.message":13,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":482,"org.easymock.samples.ExampleTest.answerVsDelegate":441,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":496,"org.easymock.tests.UsageCallCountTest.tooFewCalls":279,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":62,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":180,"org.easymock.tests.UsageVerifyTest.twoReturns":362,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":22,"org.easymock.tests2.DependencyTest.testInterfaceMocking":105,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":289,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":481,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":330,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":483,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":118,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":136,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":82,"org.easymock.tests.MockingTest.testTwoMocks":257,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":278,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":273,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":204,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":170,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":294,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":32,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":165,"org.easymock.tests.UsageThrowableTest.throwCheckedException":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":486,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":317,"org.easymock.samples.ExampleTest.voteForRemovals":69,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":309,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":89,"org.easymock.tests.ReplayStateInvalidUsageTest.times":399,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":171,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":332,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":377,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":218,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":428,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":468,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":59,"org.easymock.tests2.UsageConstraintsTest.any":85,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":469,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":61,"org.easymock.tests2.CaptureTest.testCapture":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":125,"org.easymock.tests.LimitationsTest.privateConstructor":490,"org.easymock.tests2.CallbackTest.callback":148,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":163,"org.easymock.tests2.NameTest.nameForMock":129,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":476,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":88,"org.easymock.tests.MockNameTest.defaultName":403,"org.easymock.tests2.SerializationTest.test":146,"org.easymock.tests.UsageExpectAndReturnTest.longType":60,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":5,"org.easymock.tests2.CaptureTest.testCaptureFirst":11,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":95,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":411,"org.easymock.tests2.UsageTest.niceToStrict":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":329,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":367,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":381,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":263,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":164,"org.easymock.tests2.UsageTest.strictResetToDefault":231,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":348,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":226,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":413,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":335,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":292,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":133,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":141,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":219,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":45,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":93,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":418,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":334,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":54,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":501,"org.easymock.tests2.DelegateToTest.testDelegate":157,"org.easymock.tests2.UsageConstraintsTest.testNotNull":99,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":140,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":200,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":190,"org.easymock.tests2.CaptureTest.testCapture_2617107":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":484,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":400,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":192,"org.easymock.tests2.ThreadingTest.testThreadSafe":149,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":485,"org.easymock.tests.UsageThrowableTest.noUpperLimit":308,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":497,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":124,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":116,"org.easymock.tests.UsageExpectAndReturnTest.floatType":288,"org.easymock.tests2.UsageTest.wrongArguments":233,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":84,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":135,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":251,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":17,"org.easymock.samples.SupportTest.voteForRemovals":73,"org.easymock.tests.UsageRangeTest.combination":437,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":177,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":312,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":100,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":182,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":194,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":199,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":297,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":349,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":274,"org.easymock.tests.UsageExpectAndThrowTest.floatType":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":178,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":63,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":217,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":186,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":223,"org.easymock.tests.UsageTest.exactCallCountByLastCall":436,"org.easymock.tests2.AnswerTest.stubAnswer":24,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":121,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":40,"org.easymock.tests.MockingTest.testPartialClassMocking":52,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":64,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":239,"org.easymock.tests2.UsageConstraintsTest.constraints":76,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":134,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":185,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":57,"org.easymock.tests.UsageVarargTest.varargLongAccepted":424,"org.easymock.tests.ObjectMethodsTest.testHashCode":326,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":225,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":227,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":384,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":42,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":371,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":139,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":410,"org.easymock.tests2.DependencyTest.testClassMocking":103,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":49,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":254,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":324,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":463,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":119,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":75,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":248,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":26,"org.easymock.tests.DefaultClassInstantiatorTest.object":264,"org.easymock.tests.UsageVarargTest.differentLength":422,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":243,"org.easymock.tests2.CaptureTest.testCapture2_2446744":109,"org.easymock.tests.GenericTest.testPackageScope":301}}]

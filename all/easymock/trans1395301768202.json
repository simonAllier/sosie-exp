[{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[1,2,3,4,5,6,7,8,9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[12],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[1,2,13,14,15,16,17,18,19,3,20,21],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[22,23,24,25,26,27,28,29,30,31],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[32],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[],"status":0,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[33,34],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1555","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"failures":[35,36,37,38,39,40,41,42,43,44,45,46],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[47],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[48,49,50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[60,61,62,63,64,65,66,48,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,22,85,52,86,87,88,89,90,91,92,23,93,24,94,95,96,97,98,99,100,25,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,54,127,55,56,128,129,26,27,28,130,131,132,29,133,134,135,136,33,137,138,139,34,140,30,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,58,58,59,59,158],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[159,160,161,162,163,164,165,166,167],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,60,61,189,62,63,64,65,190,66,48,67,68,69,70,71,72,73,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,74,75,76,215,216,217,218,219,1,220,2,13,14,15,16,17,221,18,3,20,222,21,78,49,80,81,50,82,83,84,22,51,85,52,86,87,53,90,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,35,239,240,241,242,243,47,244,245,246,247,248,249,4,5,250,251,6,252,7,8,253,9,254,255,256,257,258,259,260,261,262,10,263,264,265,266,11,267,268,269,91,92,23,93,270,24,94,271,272,36,273,274,37,38,275,276,277,25,101,278,279,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,54,280,127,55,56,57,281,282,283,284,285,286,287,288,289,0,290,291,292,293,294,295,296,297,298,159,299,160,300,301,302,303,304,305,306,307,161,162,308,163,128,129,26,27,28,130,131,132,309,310,311,312,313,29,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,133,134,135,136,33,137,138,139,34,335,336,337,338,339,140,340,341,30,342,343,164,165,166,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,39,40,41,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,42,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,43,450,451,452,453,454,455,456,141,142,143,144,145,457,146,458,459,147,148,460,461,462,44,463,464,45,46,465,466,467,468,469,167,470,471,472,473,474,475,476,149,150,151,152,153,154,477,155,478,479,480,481,482,483,484,485,486,487,488,156,157,58,58,59,59,158,489,490,491,492],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:37","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"failures":[493,494,495,496,35,239,244,245,497,498,499,43,450,451,454,455,462],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[304],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:54","sourceCode":"try {\n    return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[]);\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:54","sourceCode":"try {\n    return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[]);\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[153,500,501],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[168,169,61,73],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[49,50,51,52,502,53,503,504,505,506,507,508,509,510,23,94,511,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,54,55,56,512,58,59],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[63,241,260],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"state","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[61,69,71,192,196,197,200,212,80,86,87,90,237,239,240,241,244,245,246,247,4,260,271,273,274,37,281,344,378,40,41,421,446,447,448,449,450,451,454,455,456,460,462,463,464,45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,60,61,189,62,63,64,65,190,66,48,67,68,69,70,71,72,73,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,74,75,76,215,216,217,218,219,1,220,2,13,14,15,16,17,221,18,3,20,222,21,78,49,80,81,50,82,83,84,22,51,85,513,52,86,87,53,90,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,35,239,240,241,242,243,47,244,245,246,247,248,249,4,5,250,251,6,252,7,8,253,9,254,255,256,257,258,259,260,261,262,10,263,264,265,266,11,267,268,269,91,92,23,93,514,270,24,94,511,271,272,36,273,274,37,38,275,276,277,25,515,516,517,101,278,279,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,54,280,127,55,56,57,281,282,283,284,285,286,287,288,289,0,290,291,292,293,294,295,296,297,298,159,299,160,300,301,302,303,304,305,306,307,161,162,308,163,128,129,26,27,28,130,131,132,309,310,311,312,313,29,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,133,134,135,136,33,137,138,139,34,335,336,337,338,339,140,518,519,340,341,30,342,343,164,165,166,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,39,40,41,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,31,421,422,423,424,425,426,427,428,429,430,42,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,43,450,451,452,453,454,455,456,141,142,143,144,145,457,146,458,459,147,148,460,461,462,44,463,464,45,46,465,466,467,468,469,167,470,471,472,473,474,475,476,149,150,151,152,153,154,477,155,478,479,480,481,482,483,484,485,486,487,488,156,157,58,59,158,489,490,491,492],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[67,240],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"failures":[65,84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.Capture:82","failures":[1,2,13,14,15,16,17,18,19,3,20,21],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[510,520,512],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.MockBuilder:80","failures":[65,78,79,80,81,83,84,22,85,86,87,88,89,90,54,139,140,30,158],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[165,425,167],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:178","failures":[85,140],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":5,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":449,"org.easymock.tests2.UsageTest.argumentsOrdered":245,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":201,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":299,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":241,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":492,"org.easymock.tests2.DelegateToTest.testReturnException":283,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":433,"org.easymock.tests.MockingTest.testPartialClassMocking":144,"org.easymock.tests.MockClassControlTest.testToString":26,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":168,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":167,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":112,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":108,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":352,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":219,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":253,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":471,"org.easymock.tests2.UsageTest.wrongArguments":239,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":234,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":347,"org.easymock.samples.ExampleTest.answerVsDelegate":482,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":30,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":459,"org.easymock.tests2.UsageConstraintsTest.testNull":6,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":62,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":132,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":200,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":95,"org.easymock.tests2.CaptureTest.testPrimitive":13,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":475,"org.easymock.tests.UsageTest.moreThanOneArgument":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":371,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":189,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":388,"org.easymock.tests.UsageTest.argumentsOrdered":455,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":391,"org.easymock.tests.UsageVarargTest.varargIntAccepted":374,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":303,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":335,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":78,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":516,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":187,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":292,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":339,"org.easymock.tests.ReplayStateInvalidUsageTest.times":409,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":228,"org.easymock.tests2.DependencyTest.testClassMocking":216,"org.easymock.tests2.AnswerTest.answer":204,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":9,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":305,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":176,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":519,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.UsageTest.strictResetToDefault":238,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":50,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":68,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":387,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":423,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":195,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":395,"org.easymock.tests2.DelegateToTest.testDelegate":287,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":367,"org.easymock.tests.LimitationsTest.mockFinalMethod":136,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":436,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":400,"org.easymock.tests2.DependencyTest.testClassMockingSupport":217,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":288,"org.easymock.tests2.CaptureTest.testCapture1_2446744":14,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":190,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":365,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":174,"org.easymock.tests.UsageThrowableTest.throwError":413,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":403,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":341,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":188,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":31,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":390,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":503,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":126,"org.easymock.samples.PartialClassMockTest.testGetArea":158,"org.easymock.tests.MockingTest.testInterfaceMocking":457,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":404,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":336,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":113,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":29,"org.easymock.tests2.UsageTest.niceToStrict":240,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":353,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":510,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":290,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":83,"org.easymock.tests2.MockBuilderTest.testCreateMock":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":121,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":231,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":493,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":361,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":196,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":518,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":351,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":440,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":345,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":507,"org.easymock.tests.UsageOverloadedMethodTest.overloading":479,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":117,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":429,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":258,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":478,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":325,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":500,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":257,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":18,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":375,"org.easymock.tests.MockClassControlTest.testEquals":131,"org.easymock.tests2.EasyMockSupportClassTest.testAll":105,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":138,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":494,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":369,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":96,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":398,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":175,"org.easymock.tests2.CaptureTest.testCaptureAll":220,"org.easymock.tests.MockNameTest.defaultName":334,"org.easymock.tests2.UsageConstraintsTest.testMatches":259,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":401,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":389,"org.easymock.samples.ExampleTest.voteForRemovals":486,"org.easymock.tests.UsageVarargTest.allKinds":383,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":39,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":399,"org.easymock.samples.BasicClassMockTest.testPrintContent":157,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":419,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":271,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":437,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":184,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":286,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":477,"org.easymock.tests2.UsageConstraintsTest.greaterThan":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":106,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":422,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":71,"org.easymock.samples.ExampleTest.voteForRemoval":483,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":155,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":72,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":211,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":88,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":342,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":517,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":65,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":148,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":237,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":297,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":193,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":415,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":103,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":432,"org.easymock.tests2.CaptureTest.testCaptureFirst":21,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":296,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":194,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":247,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":431,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":321,"org.easymock.tests2.UsageTest.moreThanOneArgument":35,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":213,"org.easymock.tests2.CaptureTest.testCapture2_2446744":222,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":306,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":382,"org.easymock.tests.GenericTest.testBridgedEquals":34,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":508,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":505,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":447,"org.easymock.tests.UsageExpectAndReturnTest.longType":317,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":396,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":191,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":89,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":370,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":425,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":265,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":368,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":467,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":386,"org.easymock.tests.UsageCallCountTest.tooManyCalls":448,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":442,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":122,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":322,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":233,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":357,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":418,"org.easymock.tests.MockingTest.testNiceClassMocking":147,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":92,"org.easymock.tests.MockingTest.testClassMocking":142,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":441,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":79,"org.easymock.tests2.UsageConstraintsTest.testContains":256,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":76,"org.easymock.tests2.UsageConstraintsTest.testFind":251,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":480,"org.easymock.tests.MockTypeTest.fromEasyMockClass":340,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":460,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":277,"org.easymock.tests.UsageExpectAndReturnTest.object":324,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":66,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":232,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":199,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":377,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":312,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":509,"org.easymock.tests.UsageTest.exactCallCountByLastCall":456,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":295,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":469,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":392,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":499,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":56,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":330,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":372,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":428,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":178,"org.easymock.tests.MockClassControlTest.testHashCode":130,"org.easymock.tests2.EasyMockSupportTest.testVerify":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":115,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":393,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":426,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":350,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":173,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":269,"org.easymock.tests.UsageVarargTest.varargCharAccepted":376,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":476,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":163,"org.easymock.tests2.UsageTest.openCallCountByLastCall":242,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":520,"org.easymock.tests.DefaultClassInstantiatorTest.object":149,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":202,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":349,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":116,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":359,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":416,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":100,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":226,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":177,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":28,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":69,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":358,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":331,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":466,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":124,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":27,"org.easymock.tests2.UsageTest.resumeIfFailure":246,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":140,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":515,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":435,"org.easymock.tests2.StubTest.stubWithReturnValue":236,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":51,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":266,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":323,"org.easymock.tests2.SerializationTest.testAllMockedMethod":127,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":304,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":495,"org.easymock.samples.SupportTest.voteForRemovals":491,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":33,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":180,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":364,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":308,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":205,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":470,"org.easymock.tests.UsageExpectAndThrowTest.object":362,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":263,"org.easymock.tests2.DelegateToTest.testWrongClass":285,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":438,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":439,"org.easymock.tests.UsageStrictMockTest.range":464,"org.easymock.samples.ConstructorCalledMockTest.testTax":58,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":278,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":198,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":91,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":506,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":363,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":22,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":454,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":102,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":346,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":497,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":166,"org.easymock.tests2.CaptureTest.testCaptureNone":221,"org.easymock.tests.UsageUnorderedTest.message":344,"org.easymock.tests.UsageVerifyTest.twoReturns":41,"org.easymock.tests.UsageVarargTest.varargByteAccepted":381,"org.easymock.tests2.ThreadingTest.testThreadSafe":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":119,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":445,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":156,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":313,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":496,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":161,"org.easymock.tests2.UsageConstraintsTest.any":254,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":408,"org.easymock.tests2.StubTest.stub":235,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":468,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":434,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":162,"org.easymock.tests.UsageExpectAndThrowTest.longType":355,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":153,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":407,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":273,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":182,"org.easymock.tests2.SerializationTest.testClass":54,"org.easymock.tests.LimitationsTest.mockNativeMethod":135,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":139,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":333,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":99,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":225,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":38,"org.easymock.tests2.NameTest.nameForMocksControl":172,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":32,"org.easymock.tests2.MockedExceptionTest.testMockedException":75,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":107,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":453,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":146,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":276,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":356,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":60,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":85,"org.easymock.tests.MockingTest.testNicePartialClassMocking":145,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":64,"org.easymock.tests2.CompareToTest.testNotComparable":12,"org.easymock.tests2.CaptureTest.testCaptureLast":17,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":223,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":289,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":8,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":94,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":264,"org.easymock.tests.MockingTest.testTwoMocks":143,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":511,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":314,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":360,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":244,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":267,"org.easymock.samples.ExampleTest.removeNonExistingDocument":487,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":405,"org.easymock.tests.UsageStrictMockTest.differentMethods":45,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":230,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":179,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":151,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":212,"org.easymock.tests2.MockBuilderTest.testCreateMockString":90,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":109,"org.easymock.tests.UsageExpectAndThrowTest.floatType":354,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":104,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":207,"org.easymock.tests.UsageVerifyTest.twoThrows":40,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":57,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":118,"org.easymock.samples.ExampleTest.voteAgainstRemoval":484,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":164,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":160,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":70,"org.easymock.tests.LimitationsTest.privateConstructor":134,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":504,"org.easymock.tests2.UsageConstraintsTest.testNotNull":11,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":420,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":74,"org.easymock.tests2.UsageTest.defaultResetToNice":47,"org.easymock.samples.ExampleTest.voteAgainstRemovals":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":300,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":329,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":224,"org.easymock.tests.UsageVarargTest.differentLength":378,"org.easymock.tests2.CallbackTest.callback":281,"org.easymock.tests2.UsageConstraintsTest.equals":250,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":48,"org.easymock.tests.UsageTest.openCallCountByLastCall":452,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":248,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":473,"org.easymock.tests.UsageCallCountTest.tooFewCalls":443,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":93,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":348,"org.easymock.tests.UsageThrowableTest.throwCheckedException":417,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":498,"org.easymock.tests.MockingTest.testStrictClassMocking":141,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":385,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":24,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":23,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":229,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":410,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":270,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":209,"org.easymock.tests.ObjectMethodsTest.testHashCode":311,"org.easymock.tests2.NameTest.nameForNiceMock":171,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":214,"org.easymock.tests2.DependencyTest.testInterfaceMocking":218,"org.easymock.samples.ExampleTest.addDocument":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":125,"org.easymock.tests2.DelegateToTest.testStubDelegate":284,"org.easymock.tests2.AnswerTest.stubAnswer":208,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":44,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":513,"org.easymock.tests.UsageVarargTest.varargLongAccepted":380,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":159,"org.easymock.tests.UsageExpectAndReturnTest.floatType":316,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":332,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":55,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":59,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":430,"org.easymock.tests.UsageThrowableTest.noUpperLimit":414,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":186,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":262,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":249,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":25,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":15,"org.easymock.tests2.SerializationTest.test":280,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":501,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":150,"org.easymock.tests2.UsageConstraintsTest.testSame":252,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":315,"org.easymock.samples.SupportTest.addDocument":490,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":514,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":110,"org.easymock.tests.GenericTest.testPackageScope":137,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":394,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":294,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":185,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":458,"org.easymock.tests2.NameTest.nameForMock":169,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":326,"org.easymock.tests2.UsageStrictMockTest.differentMethods":37,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":53,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":67,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":318,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":366,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":309,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":424,"org.easymock.tests2.MockedExceptionTest.testRealException":215,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":343,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":302,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":301,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":472,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":412,"org.easymock.tests2.NameTest.nameForStrictMock":170,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":82,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":512,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":275,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":63,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":101,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":152,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":10,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":80,"org.easymock.tests2.UsageStrictMockTest.range":274,"org.easymock.tests2.UsageConstraintsTest.lessThan":268,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":97,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":181,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":77,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":192,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":114,"org.easymock.tests2.CaptureTest.testCaptureRightOne":3,"org.easymock.tests2.UsageConstraintsTest.testOr":7,"org.easymock.tests.UsageRangeTest.combination":421,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":61,"org.easymock.tests.UsageTest.wrongArguments":451,"org.easymock.tests2.MockBuilderTest.testWithConstructor":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":111,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":129,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":291,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":327,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":154,"org.easymock.tests.UsageVarargTest.varargShortAccepted":379,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":446,"org.easymock.tests2.UsageConstraintsTest.cmpTo":255,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":293,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":243,"org.easymock.tests2.CaptureTest.testCaptureFromStub":20,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":402,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":81,"org.easymock.tests.UsageTest.unexpectedCallWithArray":450,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":462,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":444,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":502,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":328,"org.easymock.tests2.CaptureTest.testCapture":19,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":463,"org.easymock.tests2.UsageConstraintsTest.constraints":4,"org.easymock.samples.ExampleTest.addAndChangeDocument":488,"org.easymock.tests.UsageStrictMockTest.testVerify":465,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":489,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":461,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":397,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":16,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":98,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":337,"org.easymock.tests.LimitationsTest.abstractClass":133,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":320,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":42,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":338,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":197,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":373}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[3,4,5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:192","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.StartsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[6],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1235","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[8,9,10,11],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,8,27,28,29,30,31,32,33,34,35,36,37,38,39,10,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:130","failures":[208],"status":-1,"binaryOperator":"(((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:229","failures":[209,48,210,211,103],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"failures":[3,4,5],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[212,213,214,215,216],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[217,218,219,220,221,202],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[29,30],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[222],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[217,218,219,220,221,202],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:201","failures":[12,223,223,224,224,19,225,226,209,227,228,45,46,47,229,230,48,231,232,233,210,234,211,235,103,104,105,116,222,236,237,208],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[238],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[14,20,21,81,106,107,109,239],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1726","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[24,25,8,28,29,9,10,11,49,51,57],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"position":"org.easymock.internal.matchers.Same:37","failures":[27],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"removeConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[49,51,52,53,54,55,240,56,241,57,242,243],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:210","failures":[223,223,224,224,19,225,229,230,233,116],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[212,215],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:613","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[244],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[245,175],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":25,"org.easymock.tests2.UsageTest.argumentsOrdered":77,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":165,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":101,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":73,"org.easymock.tests2.StubTest.stubWithReturnValue":87,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":42,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":147,"org.easymock.tests2.DelegateToTest.testReturnException":83,"org.easymock.tests.MockingTest.testPartialClassMocking":158,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":218,"org.easymock.samples.SupportTest.voteForRemovals":18,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":237,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":211,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":130,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":103,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":118,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":7,"org.easymock.tests.UsageExpectAndThrowTest.object":128,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":80,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":40,"org.easymock.tests2.DelegateToTest.testWrongClass":85,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":199,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":200,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":30,"org.easymock.tests2.UsageTest.wrongArguments":71,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":187,"org.easymock.samples.ConstructorCalledMockTest.testTax":223,"org.easymock.tests.UsageStrictMockTest.range":205,"org.easymock.samples.ExampleTest.answerVsDelegate":14,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":236,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":88,"org.easymock.tests2.UsageConstraintsTest.testNull":8,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":60,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":129,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":46,"org.easymock.tests2.CaptureTest.testPrimitive":52,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":190,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":137,"org.easymock.tests.UsageTest.moreThanOneArgument":166,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":170,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":59,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":219,"org.easymock.tests.UsageUnorderedTest.message":175,"org.easymock.tests.UsageVerifyTest.twoReturns":198,"org.easymock.tests2.ThreadingTest.testThreadSafe":62,"org.easymock.tests.UsageTest.argumentsOrdered":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":244,"org.easymock.tests2.CaptureTest.testCapture_2617107":51,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":191,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":226,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":189,"org.easymock.tests2.UsageConstraintsTest.any":31,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":195,"org.easymock.tests.UsageExpectAndThrowTest.longType":121,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":3,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":112,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":67,"org.easymock.tests2.SerializationTest.testClass":116,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":82,"org.easymock.tests.LimitationsTest.mockNativeMethod":186,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":208,"org.easymock.tests2.AnswerTest.answer":106,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":157,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":9,"org.easymock.tests2.CaptureTest.testAnd":49,"org.easymock.tests2.UsageTest.strictResetToDefault":69,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":115,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":98,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":163,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":169,"org.easymock.tests2.DelegateToTest.testDelegate":86,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":122,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":160,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":58,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":47,"org.easymock.tests.MockingTest.testNicePartialClassMocking":159,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":133,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":61,"org.easymock.tests2.CaptureTest.testCaptureLast":240,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":94,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":29,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":41,"org.easymock.tests2.CaptureTest.testCapture1_2446744":53,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":138,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":131,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":126,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":76,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":43,"org.easymock.tests.UsageThrowableTest.throwError":177,"org.easymock.tests.UsageStrictMockTest.differentMethods":206,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":213,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":63,"org.easymock.tests2.MockBuilderTest.testCreateMockString":231,"org.easymock.tests.UsageExpectAndThrowTest.floatType":120,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":37,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":107,"org.easymock.tests.UsageVerifyTest.twoThrows":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":104,"org.easymock.samples.PartialClassMockTest.testGetArea":12,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":192,"org.easymock.samples.ExampleTest.voteAgainstRemoval":16,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":234,"org.easymock.tests2.UsageTest.niceToStrict":72,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":119,"org.easymock.tests2.UsageConstraintsTest.testNotNull":11,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":235,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":183,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":45,"org.easymock.samples.ExampleTest.voteAgainstRemovals":13,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":153,"org.easymock.tests2.CallbackTest.callback":81,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":233,"org.easymock.tests.UsageTest.openCallCountByLastCall":168,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":217,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":127,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":99,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":22,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":6,"org.easymock.tests.UsageOverloadedMethodTest.overloading":184,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":35,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":91,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":149,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":4,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":34,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":56,"org.easymock.tests.UsageThrowableTest.throwCheckedException":180,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":220,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":135,"org.easymock.tests2.CaptureTest.testCaptureAll":50,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":93,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":90,"org.easymock.tests2.UsageConstraintsTest.testMatches":36,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":92,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":109,"org.easymock.samples.ExampleTest.voteForRemovals":17,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":65,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":196,"org.easymock.tests2.DependencyTest.testInterfaceMocking":79,"org.easymock.tests2.DelegateToTest.testStubDelegate":84,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":182,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":110,"org.easymock.tests2.AnswerTest.stubAnswer":108,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":2,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":203,"org.easymock.tests2.UsageConstraintsTest.greaterThan":38,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":229,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":207,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":216,"org.easymock.samples.ExampleTest.voteForRemoval":15,"org.easymock.tests.UsageExpectAndReturnTest.floatType":140,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":156,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":232,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":19,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":224,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":39,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":68,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":23,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":54,"org.easymock.tests2.SerializationTest.test":117,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":230,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":5,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":96,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":178,"org.easymock.tests2.UsageConstraintsTest.testSame":27,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":139,"org.easymock.tests2.CaptureTest.testCaptureFirst":243,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":1,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":97,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":78,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":145,"org.easymock.tests2.UsageTest.moreThanOneArgument":70,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":64,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":48,"org.easymock.tests.GenericTest.testBridgedEquals":0,"org.easymock.tests.UsageExpectAndReturnTest.longType":141,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":95,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":136,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":150,"org.easymock.tests2.UsageStrictMockTest.differentMethods":114,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":134,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":142,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":132,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":164,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":146,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":238,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":111,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":123,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":181,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":188,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":89,"org.easymock.tests2.UsageConstraintsTest.testContains":33,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":66,"org.easymock.tests2.UsageConstraintsTest.testFind":26,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":185,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":228,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":20,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":201,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":21,"org.easymock.tests.UsageExpectAndReturnTest.object":148,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":245,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":214,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":10,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":209,"org.easymock.tests2.UsageStrictMockTest.range":113,"org.easymock.tests2.UsageConstraintsTest.lessThan":44,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":100,"org.easymock.tests.UsageTest.exactCallCountByLastCall":172,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":176,"org.easymock.tests2.CaptureTest.testCaptureRightOne":57,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":173,"org.easymock.tests2.UsageConstraintsTest.testOr":28,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":225,"org.easymock.tests.UsageRangeTest.combination":162,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":154,"org.easymock.tests.UsageTest.wrongArguments":167,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":143,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":151,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":174,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":239,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":215,"org.easymock.tests2.UsageConstraintsTest.cmpTo":32,"org.easymock.tests2.UsageTest.openCallCountByLastCall":74,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":75,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":102,"org.easymock.tests2.CaptureTest.testCaptureFromStub":242,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":227,"org.easymock.tests.UsageTest.unexpectedCallWithArray":221,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":125,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":202,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":179,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":152,"org.easymock.tests2.CaptureTest.testCapture":241,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":210,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":204,"org.easymock.tests2.UsageConstraintsTest.constraints":24,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":124,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":105,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":55,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":193,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":222,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":194,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":161}}]

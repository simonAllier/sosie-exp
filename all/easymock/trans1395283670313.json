[{"position":"org.easymock.ConstructorArgs:54","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1660","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[41,42],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:325","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[43,44,45,46,47,48,49,50,51,52,53],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[54,55,56,57,58,59,60,61,41,62,63,42,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,0,1,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,13,16,18,20,21,24,27,30,31,34,106,107,38,108,109,39],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:79","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"m"}},{"transplant":{"position":"org.easymock.EasyMock:1709","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[87],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[97],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[110,111],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[4,112,113,114,115,116,12],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[117],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"java.lang.reflect.Field.getType()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"targetField":"targetField"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[44,46],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[118,119,120,121,122,123,124,125,126,127,128,129,130,131],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,118,150,151,152,119,120,153,121,154,155,122,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,54,172,173,174,175,176,177,178,179,180,181,182,58,59,60,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,123,210,211,212,124,125,213,126,214,215,127,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,62,63,234,235,236,237,238,239,66,240,241,242,243,244,245,246,247,248,249,250,251,68,252,253,254,255,256,257,258,259,260,261,262,263,128,129,264,265,266,267,75,76,77,78,79,80,81,82,268,269,270,271,272,273,83,274,275,276,277,278,279,280,281,282,0,0,1,1,84,85,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,86,87,309,88,89,90,91,92,94,95,96,97,310,311,43,44,312,45,313,46,47,314,315,316,317,318,319,320,321,322,323,49,324,325,326,327,50,328,110,329,330,331,332,333,334,335,336,100,101,102,337,338,339,340,341,342,343,344,345,346,347,348,349,350,10,351,103,11,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,16,19,29,35,369,370,371,372,373,130,131,374,375,376,106,107,38,108,377,109,39,51,378,52,379,380,381,382,383,384,385,53,386,387,388],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:827","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[389],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"transplant":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[390,391,51,378,52,379,380,381,382,383,384,385,392,53,386,387,388],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[393,394,395],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:91","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[132,133,134,135,136,137,138,139,140,141,142,143,144,145,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,146,147,148,149,118,150,151,152,119,120,153,121,154,155,122,156,157,158,159,160,161,162,163,413,164,165,166,167,168,169,170,171,54,172,173,174,175,176,177,178,179,180,414,181,182,55,56,57,58,59,415,60,416,417,61,183,184,185,186,187,188,189,190,418,191,192,193,194,195,419,196,420,197,198,199,200,201,202,203,204,205,206,207,208,209,123,210,211,212,124,125,213,126,214,215,127,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,41,62,63,421,42,234,235,236,237,238,239,64,65,66,67,240,241,242,243,244,245,246,247,248,249,250,251,422,68,69,70,71,72,73,423,74,424,425,426,427,428,429,430,431,432,433,389,434,435,436,437,438,439,440,441,442,443,444,445,446,252,253,254,255,447,256,257,258,448,449,259,260,261,262,263,128,129,264,265,266,267,450,451,452,453,454,455,456,457,458,459,75,76,77,78,79,80,81,82,268,269,270,271,272,273,83,274,275,276,277,278,279,280,281,282,0,1,84,85,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,2,299,460,3,461,300,301,302,4,303,462,5,304,305,7,306,463,464,307,308,86,87,309,88,89,90,91,393,92,465,93,94,95,96,97,98,99,310,311,43,44,466,312,45,313,46,47,314,48,315,316,317,318,319,320,321,322,323,49,324,325,326,327,50,328,110,329,467,468,330,331,332,333,334,335,336,100,101,102,337,338,469,339,340,341,342,343,344,345,470,471,472,473,474,346,475,476,477,478,479,480,481,347,348,349,482,350,10,351,103,11,12,483,352,353,354,355,356,357,358,359,360,361,362,363,364,484,365,366,367,368,104,485,486,487,105,488,489,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,490,491,492,493,494,369,495,496,497,498,499,500,370,371,372,373,130,131,374,375,376,501,106,107,38,108,502,377,109,39,40,51,378,52,379,380,381,382,383,384,385,53,386,387,388],"status":-1,"binaryOperator":"(int >= 1)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[397,433,434,443,444,446,450,451,452],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[132,133,134,135,136,137,138,139,140,141,142,143,144,145,397,407,408,409,410,411,412,146,147,148,149,118,150,151,152,119,120,153,121,154,155,122,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,54,172,173,174,175,176,177,178,179,180,181,182,57,58,59,60,183,184,185,186,187,188,189,190,418,191,192,193,194,195,419,196,197,198,199,200,201,202,203,204,205,206,207,208,209,123,210,211,212,124,125,213,126,214,215,127,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,62,63,421,234,235,236,237,238,239,66,439,445,252,253,254,255,259,260,261,262,263,128,129,264,265,266,267,450,451,452,453,454,455,456,457,458,268,269,270,271,272,273,83,274,275,276,277,278,279,280,282,0,0,1,1,84,85,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,86,87,309,88,89,90,91,92,94,95,96,97,310,311,43,44,312,45,313,46,47,314,48,315,316,317,318,319,320,321,322,323,49,324,325,326,327,50,328,110,329,467,468,330,331,332,333,334,335,336,100,101,102,337,338,339,340,341,342,343,344,345,346,481,347,348,349,482,350,10,351,103,11,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,16,19,29,35,369,370,371,372,373,130,131,374,375,376,106,107,38,108,377,109,39,51,378,52,379,380,381,382,383,384,385,53,386,387,388],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[503],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[69,73],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1747","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[132,133,134,135,136,137,138,139,140,141,142,143,144,145,397,407,408,409,410,411,412,146,147,148,149,118,150,151,152,119,120,153,121,154,155,122,156,157,158,159,160,54,172,173,174,175,176,177,178,179,180,414,181,182,56,57,58,415,187,188,189,190,418,191,192,193,194,195,419,196,420,197,198,199,200,201,202,203,204,205,206,207,208,209,123,210,211,212,124,125,213,126,214,215,127,216,217,218,219,220,221,222,223,224,225,226,227,228,229,62,63,42,234,235,236,237,238,239,64,66,240,241,242,243,244,245,246,247,248,249,250,251,422,68,69,70,71,72,73,423,74,447,256,257,258,448,266,267,450,451,452,453,454,455,456,457,458,75,76,77,78,79,80,81,82,268,269,270,271,272,275,276,277,278,279,280,281,282,285,287,288,290,291,292,293,294,295,296,297,463,307,86,87,309,393,92,93,94,98,310,311,43,44,312,45,313,46,47,314,48,315,316,317,318,319,320,321,322,323,49,324,325,326,327,50,328,110,329,467,468,330,331,332,333,100,101,102,337,340,341,342,344,481,347,348,349,482,350,351,103,104,105,488,489,501,106,51,378,52,379,380,381,382,383,384,385,53,386,387,388],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"failures":[43,47,49,52],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[375],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,118,150,151,152,119,120,153,121,154,155,122,156,157,158,159,160,181,182,58,59,60,183,191,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,123,210,211,212,124,125,213,126,214,215,127,216,217,218,219,220,221,223,224,225,226,227,228,234,235,236,237,239,66,244,259,261,262,263,128,129,264,266,267,268,269,270,271,272,276,277,280,285,286,287,288,289,290,291,292,294,295,297,300,305,306,307,86,309,88,90,310,311,43,44,312,45,313,46,47,314,315,316,317,318,319,320,321,322,323,49,324,325,327,50,328,110,329,330,331,332,338,339,340,342,343,344,345,347,348,349,350,10,351,11,370,372,373,130,131,374,376,107,38,109,39,51,378,52,379,380,381,382,383,385,53,386,387,388],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[40],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":44,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":137,"org.easymock.tests2.UsageTest.argumentsOrdered":295,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":362,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":475,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":389,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":290,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":274,"org.easymock.tests2.DelegateToTest.testReturnException":347,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":235,"org.easymock.tests.MockingTest.testPartialClassMocking":58,"org.easymock.tests.MockClassControlTest.testToString":77,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":484,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":442,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":23,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":146,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":19,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":308,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":112,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":314,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":198,"org.easymock.tests2.UsageTest.wrongArguments":288,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":500,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":254,"org.easymock.samples.ExampleTest.answerVsDelegate":276,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":404,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":417,"org.easymock.tests2.UsageConstraintsTest.testNull":45,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":88,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":82,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":361,"org.easymock.tests2.CaptureTest.testPrimitive":379,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":202,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":160,"org.easymock.tests.UsageTest.moreThanOneArgument":138,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":309,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":134,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":454,"org.easymock.tests.UsageTest.argumentsOrdered":144,"org.easymock.tests.UsageVarargTest.varargIntAccepted":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":438,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":268,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":116,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":298,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":486,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":479,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":426,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":272,"org.easymock.tests.ReplayStateInvalidUsageTest.times":248,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":369,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":503,"org.easymock.tests2.DependencyTest.testClassMocking":463,"org.easymock.tests2.AnswerTest.answer":329,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":440,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":336,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":401,"org.easymock.tests2.CaptureTest.testAnd":51,"org.easymock.tests2.UsageTest.strictResetToDefault":286,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":3,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":94,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":133,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":185,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":356,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":458,"org.easymock.tests2.DelegateToTest.testDelegate":350,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":156,"org.easymock.tests.LimitationsTest.mockFinalMethod":67,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":238,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":233,"org.easymock.tests2.DependencyTest.testClassMockingSupport":464,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":419,"org.easymock.tests2.CaptureTest.testCapture1_2446744":380,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":393,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":155,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":334,"org.easymock.tests.UsageThrowableTest.throwError":221,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":242,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":403,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":480,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":459,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":136,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":37,"org.easymock.samples.PartialClassMockTest.testGetArea":83,"org.easymock.tests.MockingTest.testInterfaceMocking":415,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":243,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":269,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":451,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":449,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":24,"org.easymock.tests2.UsageTest.niceToStrict":289,"org.easymock.tests2.ThreadingTest.testChangeDefault":395,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":424,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":300,"org.easymock.tests2.MockBuilderTest.testCreateMock":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":32,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":497,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":120,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":357,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":400,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":412,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":172,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":252,"org.easymock.tests.UsageOverloadedMethodTest.overloading":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":28,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":190,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":319,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":126,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":193,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":318,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":385,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":413,"org.easymock.tests2.EasyMockSupportClassTest.testAll":16,"org.easymock.tests.MockClassControlTest.testEquals":81,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":63,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":158,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":231,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":335,"org.easymock.tests2.CaptureTest.testCaptureAll":378,"org.easymock.tests.MockNameTest.defaultName":414,"org.easymock.tests2.UsageConstraintsTest.testMatches":320,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":135,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":240,"org.easymock.samples.ExampleTest.voteForRemovals":280,"org.easymock.tests.UsageVarargTest.allKinds":171,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":203,"org.easymock.samples.BasicClassMockTest.testPrintContent":85,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":232,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":227,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":370,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":482,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":476,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":239,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":423,"org.easymock.tests2.UsageConstraintsTest.greaterThan":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":17,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":184,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":97,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":74,"org.easymock.samples.ExampleTest.voteForRemoval":277,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":98,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":341,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":117,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":405,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":487,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":91,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":54,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":285,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":431,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":354,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":14,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":234,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":481,"org.easymock.tests2.CaptureTest.testCaptureFirst":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":430,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":355,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":297,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":192,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":212,"org.easymock.tests2.CaptureTest.testCapture2_2446744":387,"org.easymock.tests2.UsageTest.moreThanOneArgument":287,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":441,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":305,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":170,"org.easymock.tests.GenericTest.testBridgedEquals":42,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":179,"org.easymock.tests.UsageExpectAndReturnTest.longType":209,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":229,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":352,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":159,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":453,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":326,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":157,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":408,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":132,"org.easymock.tests.UsageCallCountTest.tooManyCalls":180,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":33,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":124,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":499,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":150,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":226,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":107,"org.easymock.tests.MockingTest.testNiceClassMocking":61,"org.easymock.tests.MockingTest.testClassMocking":56,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":173,"org.easymock.tests2.UsageConstraintsTest.testContains":317,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":102,"org.easymock.tests2.UsageConstraintsTest.testFind":312,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":195,"org.easymock.tests.MockTypeTest.fromEasyMockClass":402,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":259,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":339,"org.easymock.tests.UsageExpectAndReturnTest.object":213,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":92,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":498,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":360,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":165,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":113,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":258,"org.easymock.tests.UsageTest.exactCallCountByLastCall":145,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":429,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":455,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":396,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":12,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":161,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":217,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":189,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":471,"org.easymock.tests.MockClassControlTest.testHashCode":80,"org.easymock.tests2.EasyMockSupportTest.testVerify":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":26,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":456,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":411,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":187,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":333,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":501,"org.easymock.tests.UsageVarargTest.varargCharAccepted":164,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":422,"org.easymock.tests2.CaptureTest.testCaptureMultiple":391,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":446,"org.easymock.tests2.UsageTest.openCallCountByLastCall":291,"org.easymock.tests.DefaultClassInstantiatorTest.object":68,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":363,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":410,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":256,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":27,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":224,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":493,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":470,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":79,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":95,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":151,"org.easymock.tests.CapturesMatcherTest.test":390,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":218,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":407,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":35,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":78,"org.easymock.tests2.UsageTest.resumeIfFailure":296,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":399,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":485,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":237,"org.easymock.tests2.StubTest.stubWithReturnValue":376,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":4,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":125,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":327,"org.easymock.tests2.SerializationTest.testAllMockedMethod":103,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":439,"org.easymock.samples.SupportTest.voteForRemovals":284,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":41,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":473,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":154,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":445,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":467,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":398,"org.easymock.tests.UsageExpectAndThrowTest.object":153,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":324,"org.easymock.tests2.DelegateToTest.testWrongClass":349,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":266,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":267,"org.easymock.tests.UsageStrictMockTest.range":128,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":488,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":359,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":106,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":121,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":302,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":13,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":250,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":253,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":452,"org.easymock.tests2.CaptureTest.testCaptureNone":384,"org.easymock.tests.UsageUnorderedTest.message":197,"org.easymock.tests.UsageVerifyTest.twoReturns":205,"org.easymock.tests.UsageVarargTest.varargByteAccepted":169,"org.easymock.tests2.ThreadingTest.testThreadSafe":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":30,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":177,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":448,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":84,"org.easymock.tests2.CaptureTest.testCapture_2617107":52,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":443,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":201,"org.easymock.tests2.UsageConstraintsTest.any":315,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":247,"org.easymock.tests2.StubTest.stub":375,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":444,"org.easymock.tests.UsageExpectAndThrowTest.longType":149,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":236,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":72,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":246,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":373,"org.easymock.tests2.SerializationTest.testClass":10,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":346,"org.easymock.tests.LimitationsTest.mockNativeMethod":66,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":421,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":220,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":492,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":374,"org.easymock.tests2.NameTest.nameForMocksControl":368,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":494,"org.easymock.tests2.MockedExceptionTest.testMockedException":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":18,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":142,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":469,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":118,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":60,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":86,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":303,"org.easymock.tests.MockingTest.testNicePartialClassMocking":59,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":90,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":490,"org.easymock.tests2.CaptureTest.testCaptureLast":383,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":196,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":47,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":39,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":325,"org.easymock.tests.MockingTest.testTwoMocks":57,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":40,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":206,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":119,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":294,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":328,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":394,"org.easymock.samples.ExampleTest.removeNonExistingDocument":281,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":496,"org.easymock.tests.UsageStrictMockTest.differentMethods":129,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":244,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":472,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":70,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":342,"org.easymock.tests2.MockBuilderTest.testCreateMockString":306,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":75,"org.easymock.tests.UsageExpectAndThrowTest.floatType":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":20,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":15,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":330,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":483,"org.easymock.tests.UsageVerifyTest.twoThrows":204,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":29,"org.easymock.samples.ExampleTest.voteAgainstRemoval":278,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":434,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":96,"org.easymock.tests.LimitationsTest.privateConstructor":65,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":9,"org.easymock.tests2.UsageConstraintsTest.testNotNull":50,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":100,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":228,"org.easymock.tests2.UsageTest.defaultResetToNice":293,"org.easymock.samples.ExampleTest.voteAgainstRemovals":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":435,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":216,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":491,"org.easymock.tests.UsageVarargTest.differentLength":166,"org.easymock.tests2.CallbackTest.callback":345,"org.easymock.tests2.UsageConstraintsTest.equals":466,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":465,"org.easymock.tests.UsageTest.openCallCountByLastCall":141,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":310,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":200,"org.easymock.tests.UsageCallCountTest.tooFewCalls":175,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":108,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":255,"org.easymock.tests.UsageThrowableTest.throwCheckedException":225,"org.easymock.tests.MockingTest.testStrictClassMocking":55,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":182,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":109,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":495,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":38,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":377,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":332,"org.easymock.tests.ObjectMethodsTest.testHashCode":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":115,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":344,"org.easymock.tests2.NameTest.nameForNiceMock":367,"org.easymock.tests2.DependencyTest.testInterfaceMocking":307,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":114,"org.easymock.samples.ExampleTest.addDocument":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":36,"org.easymock.tests2.DelegateToTest.testStubDelegate":348,"org.easymock.tests2.AnswerTest.stubAnswer":331,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":262,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":462,"org.easymock.tests.UsageVarargTest.varargLongAccepted":168,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":264,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":433,"org.easymock.tests.UsageExpectAndReturnTest.floatType":208,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":219,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":11,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":478,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":418,"org.easymock.tests.UsageThrowableTest.noUpperLimit":222,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":323,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":311,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":104,"org.easymock.tests2.SerializationTest.test":351,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":381,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":69,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":207,"org.easymock.tests2.UsageConstraintsTest.testSame":313,"org.easymock.samples.SupportTest.addDocument":283,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":502,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":21,"org.easymock.tests.GenericTest.testPackageScope":62,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":428,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":477,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":416,"org.easymock.tests2.NameTest.nameForMock":365,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":214,"org.easymock.tests2.UsageStrictMockTest.differentMethods":131,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":7,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":93,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":123,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":122,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":447,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":186,"org.easymock.tests2.MockedExceptionTest.testRealException":337,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":406,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":436,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":372,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":199,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":251,"org.easymock.tests2.NameTest.nameForStrictMock":366,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":461,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":338,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":89,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":105,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":49,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":71,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":299,"org.easymock.tests2.UsageStrictMockTest.range":130,"org.easymock.tests2.UsageConstraintsTest.lessThan":110,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":432,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":25,"org.easymock.tests2.CaptureTest.testCaptureRightOne":53,"org.easymock.tests2.UsageConstraintsTest.testOr":46,"org.easymock.tests.UsageRangeTest.combination":183,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":87,"org.easymock.tests.UsageTest.wrongArguments":140,"org.easymock.tests2.MockBuilderTest.testWithConstructor":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":22,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":76,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":425,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":215,"org.easymock.tests.UsageVarargTest.varargShortAccepted":167,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":73,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":178,"org.easymock.tests2.UsageConstraintsTest.cmpTo":316,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":468,"org.easymock.tests2.CompareToTest.testLessThan":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":427,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":292,"org.easymock.tests2.CaptureTest.testCaptureFromStub":386,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":241,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":460,"org.easymock.tests.UsageTest.unexpectedCallWithArray":139,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":261,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":176,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":6,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":127,"org.easymock.tests2.CaptureTest.testCapture":392,"org.easymock.tests2.UsageConstraintsTest.constraints":43,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":263,"org.easymock.samples.ExampleTest.addAndChangeDocument":282,"org.easymock.tests.UsageStrictMockTest.testVerify":265,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":273,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":260,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":230,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":382,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":270,"org.easymock.tests.LimitationsTest.abstractClass":64,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":211,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":191,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":271,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":162,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":358}}]

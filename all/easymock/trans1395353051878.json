[{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((this.java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + (org.easymock.Capture<T>.getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1902","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,18,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,43,44,45,46,47,48,49,50,301,51,53,54,55,56,302,303,304,305,306,307,308,309,310,311,312],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[313,314,315,70,71,72,74,76,79,80,316,317,318,319,193,236,237,242,243,320,321,322,323,324,325,326],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:191","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:106","sourceCode":"return org.easymock.IAnswer<?>.answer()","type":"CtReturnImpl"},"failures":[327,328,329,0,57,58,59,60,62,70,71,72,73,74,77,78,81,330,331,332,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,317,318,319,112,113,114,115,116,117,118,131,333,334,335,132,134,135,140,141,142,143,144,145,146,147,148,149,150,336,337,338,339,340,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,216,218,219,220,221,222,223,228,229,230,231,232,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,234,359,360,235,361,236,362,239,240,241,244,245,320,321,322,363,246,249,250,251,364,365,366,367,4,252,368,369,370,371,5,9,10,11,12,255,372,373,374,375,376,377,256,257,258,378,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,284,285,286,287,288,289,290,291,379,380,17,293,295,381,382,43,44,46,47,50,301,51,53,54,55,56,302,304,305,306,308,309,310,311,312],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[42,43,45,46,47,48,49,50,51,52,53,54,56],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[383,384,385,386,387,388,373,377,389,390,391,392],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:48","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:49","sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[393],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:44","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:45","sourceCode":"synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n    if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n        org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n    } \n}","type":"CtSynchronizedImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:63","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[91,97,104,105,150,229],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:49","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer.valueOf(0))","type":"CtInvocationImpl"},"failures":[394,327,328,395,329,0,396,57,58,59,60,61,62,63,64,397,398,65,66,67,399,400,401,402,403,404,405,406,407,408,409,410,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,1,411,412,413,414,2,415,416,417,85,86,330,331,87,332,418,419,420,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,421,422,316,317,423,318,319,424,425,108,109,110,426,111,427,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,333,334,335,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,336,337,338,339,340,151,152,153,154,155,156,157,158,159,160,161,162,428,163,164,3,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,429,190,430,191,192,193,194,195,196,197,198,199,200,201,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,202,203,204,205,206,207,208,209,210,211,212,213,214,215,455,216,217,218,219,220,221,222,223,224,225,226,227,18,228,229,230,231,232,341,456,342,343,344,457,345,458,346,347,348,349,350,351,352,353,354,355,356,357,358,459,233,460,234,359,360,235,361,236,237,362,238,239,240,241,242,243,244,245,461,462,320,463,321,322,464,363,383,465,466,323,324,325,326,246,247,248,249,250,251,364,365,366,367,4,252,253,467,468,469,368,470,471,369,472,473,474,475,476,477,478,479,480,370,481,482,483,484,485,371,486,487,5,384,7,8,385,488,9,10,11,386,12,489,490,13,14,388,16,254,255,372,373,374,491,375,376,377,389,256,257,258,378,259,260,261,262,263,492,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,379,380,17,292,293,493,294,295,494,381,495,296,496,497,498,499,500,501,382,502,503,504,505,506,507,297,298,299,300,43,44,45,46,47,48,49,50,301,51,53,54,55,56,508,509,510,511,512,302,513,514,515,516,517,518,303,304,305,306,307,308,309,310,311,312],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[327,327,328,328,329,0,57,59,60,62,69,70,72,73,74,77,78,81,330,331,332,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,317,318,319,109,110,111,112,114,115,118,137,146,147,148,149,150,163,3,166,167,168,190,191,192,216,218,219,220,221,222,223,228,229,230,231,232,341,456,342,343,346,347,348,349,350,351,352,353,354,355,356,357,358,234,359,235,361,236,362,239,240,241,244,245,320,321,322,363,246,250,4,252,368,369,370,371,7,9,11,12,14,255,372,373,374,375,376,377,256,257,258,378,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,284,285,286,287,288,289,290,291,379,380,293,494,381,495,382,43,44,46,47,50,301,51,53,54,55,56,302,305,311],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[113,116,129,140,141,142,143,144,145,151,152,153,438,346,309,310,311,312],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.RecordState:262","failures":[65,66,67,71,73,78,113,116,117,135,140,141,142,143,144,145,151,152,153,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,216,218,219,220,221,222,223,346,235,240,309,310,311,312],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[519,4,252,253],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"parameterTypeNames":"parameterTypeNames","i":"i","parameterTypes":"parameterTypes"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"failures":[394,327,328,395,329,0,396,57,58,59,60,61,62,64,397,398,399,400,401,403,404,405,406,407,408,409,410,70,71,72,73,74,75,76,77,78,79,80,81,330,331,332,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,421,422,316,317,423,318,319,424,112,113,114,115,116,117,118,131,333,334,335,132,134,135,138,139,140,141,142,143,144,145,146,147,148,149,150,336,337,338,339,340,156,157,158,159,160,161,162,163,164,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,41,41,190,191,192,193,216,217,218,219,220,221,222,223,228,229,230,231,232,341,342,343,344,345,458,346,347,348,349,350,351,352,353,354,355,356,357,358,459,234,359,360,235,361,236,237,362,238,239,240,241,242,243,244,245,461,462,320,463,321,322,464,363,246,249,250,251,364,365,366,367,4,252,253,368,369,370,371,5,7,9,10,11,12,13,14,16,255,372,373,374,375,376,377,256,257,258,378,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,379,380,17,293,295,494,381,495,382,43,44,45,46,47,48,49,50,301,51,53,54,55,56,302,304,305,306,308,309,310,311,312],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[520,521,522,523],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[524,71,72,75,76,79,80,316,318,138,193,237,242,243,321],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[4,252,253],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[362],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[265,270,280,285],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[394,395,329,396,57,58,59,60,61,62,64,397,398,399,400,401,403,404,405,406,407,408,409,410,70,71,72,73,74,76,77,78,79,80,81,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,421,422,316,317,423,318,319,424,425,112,113,114,115,116,117,118,132,134,135,139,140,141,142,143,144,145,146,147,148,149,150,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,200,201,211,214,216,217,218,219,220,221,222,223,225,226,228,229,230,231,232,341,342,343,344,345,458,346,347,348,349,350,351,352,353,355,356,357,358,459,234,359,360,235,361,236,237,362,238,239,240,242,243,244,245,461,462,320,463,321,322,464,246,249,250,251,252,253,368,255,374,375,256,257,258,378,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,379,380,293,495,382,43,44,45,46,47,48,49,50,301,51,53,54,55,56,302,304,305,306,308,309,310,311,312],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:193","sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[434],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:508","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:172","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:642","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[112,271],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":263,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":73,"org.easymock.tests2.UsageTest.argumentsOrdered":243,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":357,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":441,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":238,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":396,"org.easymock.tests2.DelegateToTest.testReturnException":304,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":141,"org.easymock.tests.MockingTest.testPartialClassMocking":330,"org.easymock.tests.MockClassControlTest.testToString":196,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":466,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":111,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":475,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":169,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":369,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":313,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":359,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":40,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":269,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":114,"org.easymock.tests2.UsageTest.wrongArguments":237,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":518,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":334,"org.easymock.samples.ExampleTest.answerVsDelegate":58,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":2,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":419,"org.easymock.tests2.UsageConstraintsTest.testNull":265,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":291,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":201,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":356,"org.easymock.tests2.CaptureTest.testPrimitive":46,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":118,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":188,"org.easymock.tests.UsageTest.moreThanOneArgument":74,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":230,"org.easymock.tests.UsageTest.argumentsOrdered":80,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":224,"org.easymock.tests.UsageVarargTest.varargIntAccepted":401,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":446,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":146,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":5,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":506,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":433,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":150,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":24,"org.easymock.tests.ReplayStateInvalidUsageTest.times":127,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":302,"org.easymock.tests2.DependencyTest.testClassMocking":233,"org.easymock.tests2.AnswerTest.answer":246,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":448,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":367,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":412,"org.easymock.tests2.CaptureTest.testAnd":43,"org.easymock.tests2.UsageTest.strictResetToDefault":361,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":385,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":295,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":229,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":342,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":351,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":18,"org.easymock.tests2.DelegateToTest.testDelegate":308,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":23,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":184,"org.easymock.tests.LimitationsTest.mockFinalMethod":430,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":144,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":340,"org.easymock.tests2.DependencyTest.testClassMockingSupport":460,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":82,"org.easymock.tests2.CaptureTest.testCapture1_2446744":47,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":292,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":182,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":365,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":121,"org.easymock.tests.UsageThrowableTest.throwError":216,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":414,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":507,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":232,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":487,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":27,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":122,"org.easymock.tests.MockingTest.testInterfaceMocking":87,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":147,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":476,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":455,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":170,"org.easymock.tests2.UsageTest.niceToStrict":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":431,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":9,"org.easymock.tests2.MockBuilderTest.testCreateMock":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":483,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":515,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":178,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":352,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":411,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":67,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":154,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":131,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":521,"org.easymock.tests.UsageOverloadedMethodTest.overloading":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":480,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":135,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":275,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":166,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":99,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":274,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":51,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":402,"org.easymock.tests.MockClassControlTest.testEquals":200,"org.easymock.tests2.EasyMockSupportClassTest.testAll":368,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":164,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":186,"org.easymock.tests2.CaptureTest.testCaptureAll":44,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":338,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":366,"org.easymock.tests.MockNameTest.defaultName":68,"org.easymock.tests2.UsageConstraintsTest.testMatches":276,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":119,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":231,"org.easymock.samples.ExampleTest.voteForRemovals":62,"org.easymock.tests.UsageVarargTest.allKinds":410,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":70,"org.easymock.samples.BasicClassMockTest.testPrintContent":398,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":339,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":222,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":461,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":503,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":145,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":307,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":209,"org.easymock.tests2.UsageConstraintsTest.greaterThan":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":470,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":456,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":495,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":28,"org.easymock.samples.ExampleTest.voteForRemoval":59,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":210,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":257,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":296,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":415,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":17,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":20,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":139,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":235,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":438,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":349,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":468,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":140,"org.easymock.tests2.CaptureTest.testCaptureFirst":56,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":437,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":350,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":245,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":138,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":95,"org.easymock.tests2.CaptureTest.testCapture2_2446744":55,"org.easymock.tests2.UsageTest.moreThanOneArgument":236,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":449,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":14,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":409,"org.easymock.tests.GenericTest.testBridgedEquals":165,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":522,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":392,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":161,"org.easymock.tests.UsageExpectAndReturnTest.longType":91,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":336,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":347,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":187,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":15,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":69,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":283,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":185,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":152,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":228,"org.easymock.tests.UsageCallCountTest.tooManyCalls":162,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":484,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":96,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":517,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":174,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":221,"org.easymock.tests.MockingTest.testNiceClassMocking":420,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":372,"org.easymock.tests.MockingTest.testClassMocking":85,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":155,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":6,"org.easymock.tests2.UsageConstraintsTest.testContains":273,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":311,"org.easymock.tests2.UsageConstraintsTest.testFind":264,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":168,"org.easymock.tests.MockTypeTest.fromEasyMockClass":413,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":421,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":345,"org.easymock.tests.UsageExpectAndReturnTest.object":98,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":293,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":516,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":355,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":404,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":214,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":523,"org.easymock.tests.UsageTest.exactCallCountByLastCall":81,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":436,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":426,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":225,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":383,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":399,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":104,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":134,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":498,"org.easymock.tests.MockClassControlTest.testHashCode":199,"org.easymock.tests2.EasyMockSupportTest.testVerify":459,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":478,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":226,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":132,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":66,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":364,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":254,"org.easymock.tests.UsageVarargTest.varargCharAccepted":403,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":202,"org.easymock.tests2.CaptureTest.testCaptureMultiple":42,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":462,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":454,"org.easymock.tests2.UsageTest.openCallCountByLastCall":239,"org.easymock.tests.DefaultClassInstantiatorTest.object":203,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":358,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":65,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":212,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":524,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":479,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":176,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":219,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":511,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":497,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":494,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":26,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":198,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":175,"org.easymock.tests.CapturesMatcherTest.test":41,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":105,"org.easymock.tests.ReplayStateInvalidCallsTest.times":32,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":151,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":33,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":371,"org.easymock.tests2.UsageTest.resumeIfFailure":244,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":143,"org.easymock.tests2.StubTest.stubWithReturnValue":346,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":386,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":97,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":284,"org.easymock.tests2.SerializationTest.testAllMockedMethod":253,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":447,"org.easymock.samples.SupportTest.voteForRemovals":329,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":428,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":500,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":181,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":519,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":453,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":247,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":427,"org.easymock.tests.UsageExpectAndThrowTest.object":179,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":281,"org.easymock.tests2.DelegateToTest.testWrongClass":306,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":191,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":30,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":192,"org.easymock.tests.UsageStrictMockTest.range":318,"org.easymock.samples.ConstructorCalledMockTest.testTax":327,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":299,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":354,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":255,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":180,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":467,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":129,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":79,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":333,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":22,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":110,"org.easymock.tests2.CaptureTest.testCaptureNone":301,"org.easymock.tests.UsageUnorderedTest.message":193,"org.easymock.tests.UsageVerifyTest.twoReturns":72,"org.easymock.tests.UsageVarargTest.varargByteAccepted":408,"org.easymock.tests2.ThreadingTest.testThreadSafe":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":481,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":159,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":397,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":215,"org.easymock.tests2.CaptureTest.testCapture_2617107":45,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":451,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":117,"org.easymock.tests2.UsageConstraintsTest.any":271,"org.easymock.tests2.StubTest.stub":458,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":126,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":452,"org.easymock.tests.UsageExpectAndThrowTest.longType":172,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":142,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":207,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":125,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":463,"org.easymock.tests2.SerializationTest.testClass":4,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":382,"org.easymock.tests.LimitationsTest.mockNativeMethod":190,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":107,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":3,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":510,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":38,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":464,"org.easymock.tests2.NameTest.nameForMocksControl":326,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":512,"org.easymock.tests2.MockedExceptionTest.testMockedException":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":471,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":78,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":457,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":173,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":332,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":288,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":12,"org.easymock.tests.MockingTest.testNicePartialClassMocking":331,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":380,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":508,"org.easymock.tests2.CaptureTest.testCaptureLast":50,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":83,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":37,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":268,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":377,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":282,"org.easymock.tests.MockingTest.testTwoMocks":86,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":34,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":389,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":88,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":177,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":242,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":286,"org.easymock.samples.ExampleTest.removeNonExistingDocument":63,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":514,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":123,"org.easymock.tests.UsageStrictMockTest.differentMethods":319,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":499,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":205,"org.easymock.tests2.ConstraintsToStringTest.andToString":393,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":258,"org.easymock.tests2.MockBuilderTest.testCreateMockString":16,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":472,"org.easymock.tests.UsageExpectAndThrowTest.floatType":171,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":469,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":249,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":465,"org.easymock.tests.UsageVerifyTest.twoThrows":71,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":370,"org.easymock.samples.ExampleTest.voteAgainstRemoval":60,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":442,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":108,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":381,"org.easymock.tests.LimitationsTest.privateConstructor":429,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":391,"org.easymock.tests2.UsageConstraintsTest.testNotNull":285,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":223,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":309,"org.easymock.tests2.UsageTest.defaultResetToNice":241,"org.easymock.samples.ExampleTest.voteAgainstRemovals":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":443,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":103,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":509,"org.easymock.tests.UsageVarargTest.differentLength":405,"org.easymock.tests2.CallbackTest.callback":360,"org.easymock.tests2.UsageConstraintsTest.equals":492,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":493,"org.easymock.tests.UsageTest.openCallCountByLastCall":77,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":260,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":116,"org.easymock.tests.UsageCallCountTest.tooFewCalls":157,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":374,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":335,"org.easymock.tests.UsageThrowableTest.throwCheckedException":220,"org.easymock.tests.MockingTest.testStrictClassMocking":417,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":113,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":376,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":513,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":373,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":128,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":375,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":251,"org.easymock.tests.ObjectMethodsTest.testHashCode":213,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":36,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":259,"org.easymock.tests2.NameTest.nameForNiceMock":325,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":31,"org.easymock.tests2.DependencyTest.testInterfaceMocking":234,"org.easymock.samples.ExampleTest.addDocument":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":482,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":486,"org.easymock.tests2.DelegateToTest.testStubDelegate":305,"org.easymock.tests2.AnswerTest.stubAnswer":250,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":317,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":489,"org.easymock.tests.UsageVarargTest.varargLongAccepted":407,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":440,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":106,"org.easymock.tests.UsageExpectAndReturnTest.floatType":90,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":363,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":328,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":505,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":136,"org.easymock.tests.UsageThrowableTest.noUpperLimit":217,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":279,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":261,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":297,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":48,"org.easymock.tests2.SerializationTest.test":252,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":204,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":89,"org.easymock.tests2.UsageConstraintsTest.testSame":266,"org.easymock.samples.SupportTest.addDocument":395,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":491,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":21,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":473,"org.easymock.tests.GenericTest.testPackageScope":163,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":435,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":504,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":418,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":19,"org.easymock.tests2.NameTest.nameForMock":323,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":100,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":388,"org.easymock.tests2.UsageStrictMockTest.differentMethods":322,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":294,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":92,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":183,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":211,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":343,"org.easymock.tests2.MockedExceptionTest.testRealException":312,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":416,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":445,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":444,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":320,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":130,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":115,"org.easymock.tests2.NameTest.nameForStrictMock":324,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":488,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":520,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":344,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":379,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":298,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":206,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":280,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":314,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":7,"org.easymock.tests2.UsageStrictMockTest.range":321,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":25,"org.easymock.tests2.UsageConstraintsTest.lessThan":287,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":501,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":439,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":477,"org.easymock.tests2.CaptureTest.testCaptureRightOne":53,"org.easymock.tests2.UsageConstraintsTest.testOr":267,"org.easymock.tests.UsageRangeTest.combination":341,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":289,"org.easymock.tests.UsageTest.wrongArguments":76,"org.easymock.tests2.MockBuilderTest.testWithConstructor":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":474,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":195,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":432,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":101,"org.easymock.tests.UsageVarargTest.varargShortAccepted":406,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":208,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":160,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":39,"org.easymock.tests2.UsageConstraintsTest.cmpTo":272,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":248,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":434,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":240,"org.easymock.tests2.CaptureTest.testCaptureFromStub":54,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":120,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":8,"org.easymock.tests.UsageTest.unexpectedCallWithArray":75,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":35,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":316,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":158,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":387,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":102,"org.easymock.tests2.CaptureTest.testCapture":52,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":423,"org.easymock.tests2.UsageConstraintsTest.constraints":262,"org.easymock.samples.ExampleTest.addAndChangeDocument":64,"org.easymock.tests.UsageStrictMockTest.testVerify":425,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":394,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":422,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":337,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":49,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":148,"org.easymock.tests.LimitationsTest.abstractClass":189,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":94,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":149,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":137,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":400,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":315,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":353}}]

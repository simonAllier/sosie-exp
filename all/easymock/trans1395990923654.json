[{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0)","position":"org.easymock.internal.MocksBehavior:169","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.LogicalOperator:62","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = (java.util.Set<java.lang.reflect.Method>) == null ? new java.lang.reflect.Method[0] : java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.MockBuilder:201","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.matchers.Or:48","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((int) < (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation);\n    if (org.easymock.internal.Result != null) {\n        return org.easymock.internal.Result;\n    } \n    if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n        break;\n    } \n    (int)++;\n}","position":"org.easymock.internal.MocksBehavior:86","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"replace","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"status":-2},{"failures":[0,1],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:337","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((org.easymock.IExpectationSetters<T>)(org.easymock.internal.MocksControl))","position":"org.easymock.EasyMock:562","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:1038","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:49","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","position":"org.easymock.internal.ReflectionUtils:161","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer throwing \" + java.lang.Throwable","position":"org.easymock.internal.Result:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","position":"org.easymock.internal.RecordState:321","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"org.easymock.internal.LastControl.NO_MATCHERS_FOUND","key":"org.easymock.internal.LastControl.NO_MATCHERS_FOUND"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(this.org.easymock.internal.LastControl.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (this.org.easymock.internal.LastControl.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:85","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:328","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"status":0},{"failures":[2],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1248","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int == (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","position":"org.easymock.internal.LastControl:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:231","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:304","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1421","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,74,75,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"variableMapping":{"method":"method","this":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","position":"org.easymock.internal.MockBuilder:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:98","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","position":"org.easymock.ConstructorArgs:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"]\")","position":"org.easymock.internal.ArgumentToString:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Byte>(org.easymock.Capture<java.lang.Byte>))","position":"org.easymock.EasyMock:1987","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","position":"org.easymock.Capture:83","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","position":"org.easymock.internal.ClassProxyFactory:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String)","position":"org.easymock.internal.MockBuilder:98","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(char.char, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.ReflectionUtils:36","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:106","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","position":"org.easymock.internal.DefaultClassInstantiator:188","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer returning \" + java.lang.Object","position":"org.easymock.internal.Result:68","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:336","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.T = T","position":"org.easymock.internal.matchers.Captures:47","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.Results:77","type":"CtReturnImpl"},"status":-2},{"failures":[106,110],"variableMapping":{"type":"type"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:385","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","position":"org.easymock.internal.MocksBehavior:98","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"method":"method"},"name":"add","transplant":{"sourceCode":"final java.lang.String java.lang.String = java.lang.reflect.Method.getName()","position":"org.easymock.internal.Invocation:143","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()))","position":"org.easymock.internal.AndroidClassProxyFactory:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[111,112,113,114,115],"variableMapping":{"i":"i","buffer":"buffer"},"name":"add","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:47","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:50","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[32,39,52,116,53,54,56,57,58,59,61,62,117,63,76,77,78,109],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","position":"org.easymock.internal.MockBuilder:79","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = java.lang.reflect.Method.isAccessible()","position":"org.easymock.internal.DefaultClassInstantiator:185","type":"CtLocalVariableImpl"},"status":-2},{"failures":[2,118],"variableMapping":{"actual":"actual"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n        return true;\n    } \n}","position":"org.easymock.internal.matchers.Or:38","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:51","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:105","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1725","type":"CtInvocationImpl"},"status":-2},{"failures":[107,109,110],"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","position":"org.easymock.internal.BridgeMethodResolver:439","type":"mutation","status":-1},{"failures":[119,120,121,122,123,124,125,126,127,128,129,62,130,131,132,133,134,135,136,137,115,138,139,140,141,142,143,144,145,146,147,148,149,150],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"status":-2},{"failures":[32,151,33],"variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"},"name":"replace","transplant":{"sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:110","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"binaryOperator":"(\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method)","name":"math","position":"org.easymock.internal.BridgeMethodResolver:94","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"delegateTo":"this"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n} catch (final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException) {\n    net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader());\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n}","position":"org.easymock.internal.ClassProxyFactory:174","type":"CtTryImpl"},"status":-2},{"failures":[152,153,154,155,8,11,21,27,30,156,157,158,159,160,161,32,151,33,162,163,164,2,165,166,167,118,168,169,170,171,172,173,174,175,119,176,177,178,179,180,181,182,183,184,185,120,186,121,187,122,123,124,34,35,188,36,37,38,39,40,43,44,45,46,189,190,49,50,51,191,192,125,193,194,195,126,127,196,197,128,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,129,221,222,223,224,225,226,227,52,53,56,57,58,59,61,62,63,64,65,66,67,228,68,69,229,230,130,131,132,133,231,232,233,134,135,234,235,72,73,236,237,238,239,240,241,242,74,75,76,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,79,279,280,281,282,283,283,284,285,286,287,288,289,290,291,292,293,294,83,84,85,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,89,137,313,115,138,314,139,140,141,315,316,317,318,319,320,321,142,143,144,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,145,346,146,347,147,348,349,148,149,350,150,351,352,107,108,353,354,355,356,357,358,359,360,361,362,363],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","position":"org.easymock.internal.LastControl:125","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType())","position":"org.easymock.internal.BridgeMethodResolver:329","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<T>.clear()","position":"org.easymock.Capture:60","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":0},{"failures":[154,8,11,21,27,30,159,34,188,36,38,219,53,56,58,59,62,64,65,66,67,228,68,69,236,238,239,241,74,74,75,75,76,244,259,260,261,262,263,267,268,274,275,276,277,278,83,84,85,295,296,298,299,301,89,315,316,318],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Number.shortValue()","position":"org.easymock.internal.RecordState:197","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:194","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","position":"org.easymock.internal.ReplayState:45","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:105","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:98","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","position":"org.easymock.internal.MockBuilder:68","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1459","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"obj":"obj","this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectByType(java.lang.Object, java.util.List<java.lang.reflect.Field>, org.easymock.internal.InjectionPlan.getUnqualifiedInjections())","position":"org.easymock.internal.Injector:153","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","position":"org.easymock.internal.MethodSerializationWrapper:38","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:127","type":"CtReturnImpl"},"status":-2},{"failures":[178],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1408","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.UnorderedBehavior:67","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName()))","name":"removeConditional","position":"org.easymock.internal.ReflectionUtils:166","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.TypeVariable<?>.getBounds()","position":"org.easymock.internal.BridgeMethodResolver:350","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"status":-2},{"failures":[364],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.matchers.And:51","type":"CtInvocationImpl"},"status":-1},{"failures":[106,110],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1248","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","position":"org.easymock.internal.BridgeMethodResolver:141","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.add(org.easymock.internal.matchers.Captures<java.lang.Object>)","position":"org.easymock.internal.Invocation:163","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.Invocation:148","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.MocksControl:276","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:110","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ClassProxyFactory:197","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:163","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:520","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","position":"org.easymock.internal.ReplayState:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:35","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:88","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    org.easymock.internal.Invocation.validateCaptures();\n    org.easymock.internal.Invocation.clearCaptures();\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:107","type":"CtIfImpl"},"status":-2},{"failures":[365,366],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()))","position":"org.easymock.internal.Injector:233","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>.getName(), java.lang.Boolean.java.lang.Class<java.lang.Boolean>)","position":"org.easymock.internal.MethodSerializationWrapper:33","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory().getInvocationHandler(java.lang.Object)","position":"org.easymock.internal.MocksControl:165","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.DefaultClassInstantiator:58","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"org.easymock.internal.LastControl.NO_MATCHERS_FOUND","key":"org.easymock.internal.LastControl.NO_MATCHERS_FOUND"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(this.org.easymock.internal.LastControl.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (this.org.easymock.internal.LastControl.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:85","type":"CtInvocationImpl"},"status":-2},{"failures":[103,367,368],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","position":"org.easymock.internal.DefaultClassInstantiator:136","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.IMocksControl>(5)","position":"org.easymock.EasyMockSupport:52","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(int.int, java.lang.Integer.java.lang.Integer)","position":"org.easymock.internal.ReflectionUtils:37","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:133","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"status":-2},{"failures":[369,365,370,366,245,246],"variableMapping":{"fieldName":"this","this":"this","injection":"injection"},"name":"add","transplant":{"sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","position":"org.easymock.internal.Injector:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>))","position":"org.easymock.internal.DefaultClassInstantiator:42","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","position":"org.easymock.internal.ReplayState:48","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.AndroidSupport.org.easymock.internal.AndroidSupport.isAndroid()) {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory();\n} ","position":"org.easymock.internal.MocksControl:141","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName()))","name":"math","position":"org.easymock.internal.ReflectionUtils:152","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ClassProxyFactory:127","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\":\")","position":"org.easymock.internal.MocksBehavior:140","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:999","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"lastInvocation":"lastInvocation"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:126","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","position":"org.easymock.internal.EasyMockProperties:64","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:250","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-2722051869610289637L","position":"org.easymock.internal.Results:28","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>(java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size())","position":"org.easymock.internal.UnorderedBehavior:83","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.matchers.Equals.matches(java.lang.Object)","position":"org.easymock.internal.matchers.ArrayEquals:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:207","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":287,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":40,"org.easymock.tests2.MockedExceptionTest.testRealException":191,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":314,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":12,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":341,"org.easymock.tests.UsageVarargTest.varargIntAccepted":355,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":320,"org.easymock.tests.LimitationsTest.mockFinalMethod":90,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":162,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":30,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":93,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":246,"org.easymock.tests2.UsageConstraintsTest.testContains":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":23,"org.easymock.tests.UsageCallCountTest.tooManyCalls":253,"org.easymock.tests2.UsageConstraintsTest.testFind":165,"org.easymock.tests2.StubTest.stubWithReturnValue":157,"org.easymock.tests.UsageVarargTest.allKinds":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":29,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":206,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":325,"org.easymock.tests2.CaptureTest.testCaptureAll":202,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":102,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":295,"org.easymock.samples.ExampleTest.addAndChangeDocument":242,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":52,"org.easymock.tests.UsageVarargTest.varargCharAccepted":356,"org.easymock.tests2.CaptureTest.testCaptureFromStub":212,"org.easymock.tests.UsageVerifyTest.twoThrows":143,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":309,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":357,"org.easymock.tests2.DelegateToTest.testReturnException":158,"org.easymock.tests2.ConstraintsToStringTest.andToString":364,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":31,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":133,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":119,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":199,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":106,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":186,"org.easymock.tests2.CaptureTest.testAnd":201,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":70,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":334,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":210,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":280,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":77,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":338,"org.easymock.tests2.UsageConstraintsTest.testMatches":175,"org.easymock.tests.MockClassControlTest.testToString":92,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":255,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":64,"org.easymock.tests.LimitationsTest.abstractClass":87,"org.easymock.tests2.UsageConstraintsTest.testNull":166,"org.easymock.tests2.EasyMockSupportClassTest.testAll":8,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":126,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":272,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":342,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":225,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":79,"org.easymock.tests.UsageThrowableTest.throwError":284,"org.easymock.tests2.UsageConstraintsTest.greaterThan":176,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":353,"org.easymock.samples.SupportTest.addDocument":243,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":312,"org.easymock.tests2.StubTest.stub":156,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":370,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":300,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":308,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":178,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":197,"org.easymock.tests.UsageExpectAndReturnTest.object":269,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":278,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":48,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":47,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":362,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":124,"org.easymock.tests.UsageExpectAndThrowTest.object":336,"org.easymock.tests2.DelegateToTest.testWrongClass":160,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":25,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":113,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":304,"org.easymock.tests2.UsageTest.moreThanOneArgument":130,"org.easymock.tests.UsageVarargTest.varargByteAccepted":361,"org.easymock.tests.MockClassControlTest.testEquals":96,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":333,"org.easymock.tests.UsageTest.wrongArguments":147,"org.easymock.samples.ExampleTest.voteAgainstRemoval":239,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":257,"org.easymock.tests.CapturesMatcherTest.test":283,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":290,"org.easymock.tests.UsageVarargTest.varargShortAccepted":359,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":337,"org.easymock.tests2.UsageTest.defaultResetToNice":233,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":114,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":111,"org.easymock.tests.MockingTest.testNiceClassMocking":86,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":51,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":299,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":219,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":7,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":59,"org.easymock.tests2.MockBuilderTest.testCreateMock":61,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":91,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":116,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":220,"org.easymock.tests2.SerializationTest.testAllMockedMethod":33,"org.easymock.samples.ExampleTest.voteAgainstRemovals":236,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":120,"org.easymock.tests.MockingTest.testStrictClassMocking":80,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":351,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":311,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":292,"org.easymock.tests2.CaptureTest.testCapture1_2446744":205,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":15,"org.easymock.tests.LimitationsTest.mockNativeMethod":89,"org.easymock.tests2.DelegateToTest.testStubDelegate":159,"org.easymock.tests.UsageUnorderedTest.message":145,"org.easymock.samples.ExampleTest.answerVsDelegate":237,"org.easymock.samples.ExampleTest.voteForRemoval":238,"org.easymock.tests.UsageCallCountTest.tooFewCalls":248,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":268,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":153,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":24,"org.easymock.tests.UsageVerifyTest.twoReturns":144,"org.easymock.tests2.DependencyTest.testInterfaceMocking":226,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":263,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":335,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":136,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":303,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":194,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":224,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":168,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":141,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":322,"org.easymock.tests.MockingTest.testTwoMocks":82,"org.easymock.tests2.CaptureTest.testCaptureRightOne":211,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":265,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":247,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":323,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":49,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":38,"org.easymock.tests2.UsageConstraintsTest.cmpTo":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":13,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":103,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":270,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":66,"org.easymock.tests2.MockedExceptionTest.testMockedException":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":6,"org.easymock.tests.UsageThrowableTest.throwCheckedException":288,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":182,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":317,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":345,"org.easymock.samples.PartialClassMockTest.testGetArea":76,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":142,"org.easymock.samples.ExampleTest.voteForRemovals":241,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":286,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":294,"org.easymock.samples.ConstructorCalledMockTest.testTax":74,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":14,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":281,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":305,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":37,"org.easymock.tests2.UsageTest.argumentsOrdered":135,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":346,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":101,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":155,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":71,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":264,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":254,"org.easymock.tests2.AnswerTest.answer":152,"org.easymock.tests.MockingTest.testNicePartialClassMocking":84,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":138,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":260,"org.easymock.tests2.UsageConstraintsTest.any":170,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":267,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":301,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":319,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":198,"org.easymock.tests.LimitationsTest.privateConstructor":88,"org.easymock.tests.UsageExpectAndThrowTest.longType":329,"org.easymock.tests2.CallbackTest.callback":129,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":190,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":21,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":196,"org.easymock.tests.UsageTest.argumentsOrdered":149,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":2,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":58,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":277,"org.easymock.tests2.MockBuilderTest.testCreateMockString":63,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":310,"org.easymock.tests2.CaptureTest.testCaptureNone":209,"org.easymock.tests2.SerializationTest.test":151,"org.easymock.tests.UsageExpectAndReturnTest.longType":262,"org.easymock.tests2.SerializationTest.testClass":32,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":207,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":98,"org.easymock.tests2.CaptureTest.testCaptureFirst":214,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":179,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":72,"org.easymock.tests2.UsageTest.niceToStrict":132,"org.easymock.tests2.EasyMockSupportTest.testVerify":200,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":302,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":258,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":57,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":137,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":331,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":181,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":5,"org.easymock.tests2.UsageTest.strictResetToDefault":230,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":339,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":45,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":62,"org.easymock.tests.GenericTest.testBridgedEquals":110,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":276,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":321,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":326,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":169,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":228,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":266,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":221,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":39,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":55,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":36,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":177,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":354,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":34,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":307,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":85,"org.easymock.tests2.UsageConstraintsTest.testOr":118,"org.easymock.tests2.DelegateToTest.testDelegate":161,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":217,"org.easymock.tests2.UsageConstraintsTest.testNotNull":183,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":187,"org.easymock.tests.MockClassControlTest.testHashCode":95,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":215,"org.easymock.tests2.CaptureTest.testCapture_2617107":203,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":78,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":271,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":291,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":296,"org.easymock.tests2.ThreadingTest.testThreadSafe":216,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":232,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":367,"org.easymock.tests.UsageThrowableTest.noUpperLimit":285,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":316,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":28,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":65,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":67,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":128,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":125,"org.easymock.tests.UsageExpectAndReturnTest.floatType":261,"org.easymock.tests2.UsageTest.wrongArguments":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":9,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":223,"org.easymock.tests2.UsageConstraintsTest.testSame":167,"org.easymock.tests2.UsageTest.resumeIfFailure":234,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":94,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":60,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":68,"org.easymock.tests.UsageOverloadedMethodTest.overloading":293,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":41,"org.easymock.tests.UsageRangeTest.combination":150,"org.easymock.samples.SupportTest.voteForRemovals":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":20,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":289,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":17,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":75,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":16,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":108,"org.easymock.tests.UsageTest.openCallCountByLastCall":348,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":366,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":352,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":26,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":315,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":121,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":188,"org.easymock.tests2.CaptureTest.testPrimitive":204,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":273,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":340,"org.easymock.samples.BasicClassMockTest.testPrintContent":73,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":324,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":297,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":43,"org.easymock.tests.UsageExpectAndThrowTest.floatType":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":22,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":35,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":189,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":252,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":274,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":369,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":42,"org.easymock.tests2.UsageStrictMockTest.differentMethods":123,"org.easymock.tests.UsageTest.exactCallCountByLastCall":350,"org.easymock.tests2.AnswerTest.stubAnswer":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":18,"org.easymock.tests.MockingTest.testClassMocking":81,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":193,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":109,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":127,"org.easymock.tests2.CaptureTest.testCaptureLast":208,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":117,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":251,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":327,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":249,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":11,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":227,"org.easymock.tests.UsageStrictMockTest.range":139,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":19,"org.easymock.tests.UsageTest.unexpectedCallWithArray":347,"org.easymock.tests.MockingTest.testPartialClassMocking":83,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":275,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":134,"org.easymock.tests2.UsageConstraintsTest.constraints":164,"org.easymock.samples.ExampleTest.addDocument":240,"org.easymock.tests2.UsageConstraintsTest.lessThan":185,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":282,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":222,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":148,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":279,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":318,"org.easymock.tests.UsageVarargTest.varargLongAccepted":360,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":368,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":44,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":0,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":3,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":105,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":115,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":112,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":27,"org.easymock.tests2.UsageStrictMockTest.range":122,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":69,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":54,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":256,"org.easymock.tests.UsageTest.moreThanOneArgument":146,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":97,"org.easymock.tests2.UsageTest.openCallCountByLastCall":231,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":298,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":53,"org.easymock.tests.UsageStrictMockTest.differentMethods":140,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":100,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":195,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":163,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":56,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":4,"org.easymock.tests.DefaultClassInstantiatorTest.object":99,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":330,"org.easymock.tests.UsageVarargTest.differentLength":358,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":1,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":259,"org.easymock.tests2.CaptureTest.testCapture2_2446744":213,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":10,"org.easymock.tests.GenericTest.testPackageScope":107}}]

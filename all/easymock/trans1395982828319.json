[{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","position":"org.easymock.EasyMock:1620","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ClassProxyFactory:120","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException)","position":"org.easymock.internal.DefaultClassInstantiator:47","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-4859402739599754147L","position":"org.easymock.internal.matchers.Compare:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","position":"org.easymock.internal.Range:75","type":"CtReturnImpl"},"status":-2},{"failures":[0,1,2,3],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:370","type":"CtInvocationImpl"},"status":-1},{"failures":[4,5],"variableMapping":{"constructorArgs":"constructorArgs"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","position":"org.easymock.EasyMock:1901","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    try {\n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n            continue;\n        } \n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n            continue;\n        } \n        final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n        org.easymock.internal.Invocation.validateCaptures();\n        return org.easymock.internal.Result;\n    } finally {\n        org.easymock.internal.Invocation.clearCaptures();\n    }\n}","position":"org.easymock.internal.UnorderedBehavior:50","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream()","position":"org.easymock.internal.DefaultClassInstantiator:134","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:603","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","position":"org.easymock.internal.BridgeMethodResolver:266","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","position":"org.easymock.internal.ErrorMessage:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:906","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,2,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,3,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,4,284,285,286,287,288,289,290,291,292,293,294,295,296],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1276","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"status":-2},{"failures":[297],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","position":"org.easymock.internal.EasyMockProperties:128","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","position":"org.easymock.internal.BridgeMethodResolver:88","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"verified":"checkOrder"},"name":"add","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.reflect.Array.java.lang.reflect.Array.getLength(java.lang.Object)]","position":"org.easymock.internal.Invocation:72","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.EasyMockSupport:508","type":"CtLocalVariableImpl"},"status":-2},{"failures":[298,299,300],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","position":"org.easymock.internal.DefaultClassInstantiator:140","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"(\"Fail to instantiate mock for \" + java.lang.Class<T>)","name":"math","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"mutation","status":-2},{"failures":[],"variableMapping":{"control":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MocksControl","position":"org.easymock.internal.MockInvocationHandler:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","position":"org.easymock.internal.InjectionTarget:46","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:356","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1234","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.Result:46","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","type":"type"},"name":"add","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.EasyMockSupport:508","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1746","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1747","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:380","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:120","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1832","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"args":"result","org.easymock.internal.Invocation.NO_ARGS":"result"},"name":"add","transplant":{"sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:76","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:304","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","position":"org.easymock.EasyMock:1672","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\")","name":"math","position":"org.easymock.internal.EasyMockProperties:116","type":"mutation","status":-2},{"failures":[301,302,303,304,305,306,307,308,309],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:261","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","position":"org.easymock.internal.MockBuilder:79","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:226","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:130","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:81","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"status":-2},{"failures":[310,311],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:420","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2110","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","name":"math","position":"org.easymock.internal.Invocation:110","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","position":"org.easymock.internal.LastControl:96","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.Method.getGenericParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:188","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:207","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new net.sf.cglib.core.DefaultNamingPolicy() {\n    @java.lang.Override\n    public java.lang.String getClassName(final java.lang.String prefix, final java.lang.String source, final java.lang.Object key, final net.sf.cglib.core.Predicate names) {\n        return \"codegen.\" + (net.sf.cglib.core.DefaultNamingPolicy.getClassName(java.lang.String, java.lang.String, java.lang.Object, net.sf.cglib.core.Predicate));\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:145","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor });\n    if (org.easymock.ConstructorArgs != null) {\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n        try {\n            java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n        } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n            throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n        }\n        T T;\n        try {\n            java.lang.reflect.Constructor<?>.setAccessible(true);\n            T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n        } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n        } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n        }\n        return T;\n    } else {\n        net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n        try {\n            net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n        }\n        net.sf.cglib.proxy.Factory.getCallback(0);\n        return ((T)(net.sf.cglib.proxy.Factory));\n    }\n} finally {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null);\n}","position":"org.easymock.internal.ClassProxyFactory:188","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"bridgeMethod"},"name":"add","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","position":"org.easymock.internal.BridgeMethodResolver:237","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.IMocksControl.replay()","position":"org.easymock.EasyMockSupport:542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread()","position":"org.easymock.internal.MocksBehavior:197","type":"CtAssignmentImpl"},"status":-2},{"failures":[312,39,41,44,45,107,108,110,111,115,116,117,125,188,189,195,196,215,217,218,313,314,315,316],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.AndroidSupport.org.easymock.internal.AndroidSupport.isAndroid()) {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory();\n} ","position":"org.easymock.internal.MocksControl:141","type":"CtIfImpl"},"status":-2},{"failures":[317],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<T>.toString()","position":"org.easymock.Capture:137","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","position":"org.easymock.ConstructorArgs:66","type":"CtLocalVariableImpl"},"status":-2},{"failures":[180],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:1025","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ClassProxyFactory:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:284","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:257","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"constructorArgs":"args"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.ConstructorArgs == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","position":"org.easymock.internal.ClassProxyFactory:204","type":"CtTryImpl"},"status":-2},{"failures":[318,319,320],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:122","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:42","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1940","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:296","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:720","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"delegateTo":"mock"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\");\n    org.easymock.internal.AndroidSupport.boolean = true;\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    org.easymock.internal.AndroidSupport.boolean = false;\n}","position":"org.easymock.internal.AndroidSupport:25","type":"CtTryImpl"},"status":0},{"failures":[],"binaryOperator":"(((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size()))","name":"math","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","position":"org.easymock.internal.ReflectionUtils:35","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties","position":"org.easymock.internal.EasyMockProperties:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","position":"org.easymock.EasyMock:1470","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","position":"org.easymock.EasyMock:1847","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","position":"org.easymock.EasyMock:1482","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:334","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.DefaultClassInstantiator:58","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>)","position":"org.easymock.internal.AndroidClassProxyFactory:48","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"throwable":"throwable"},"name":"add","transplant":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.Result:46","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","position":"org.easymock.internal.RecordState:269","type":"CtThrowImpl"},"status":-2},{"failures":[40,41,44,45,107,110,111,116,117,125,189,195,196,217,218],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n    org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int);\n}","position":"org.easymock.internal.MocksBehavior:143","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"checkOrder"},"name":"replace","transplant":{"sourceCode":"return this.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:104","type":"CtIfImpl"},"status":-2},{"failures":[184],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":-1},{"failures":[238],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","position":"org.easymock.Capture:82","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","position":"org.easymock.internal.BridgeMethodResolver:237","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","position":"org.easymock.internal.ReplayState:63","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:827","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.AndroidSupport:28","type":"CtLocalVariableImpl"},"status":-2},{"failures":[11,12,14,15,17,97],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:103","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","position":"org.easymock.internal.LastControl:39","type":"CtNewClassImpl"},"status":-2},{"failures":[39,108,111,112,115,116,117,188,215,218,219],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder.toString()))","position":"org.easymock.internal.MocksBehavior:173","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:269","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:221","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:168","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-9054190871232972342L","position":"org.easymock.internal.ClassProxyFactory:53","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\")","position":"org.easymock.internal.AndroidSupport:26","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:826","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1052","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField())","position":"org.easymock.internal.Injector:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Results:57","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","position":"org.easymock.internal.ErrorMessage:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.Properties()","position":"org.easymock.internal.EasyMockProperties:41","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"expected"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Same:42","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:633","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:254","type":"CtWhileImpl"},"status":-2},{"failures":[40,107,321,322,323,324],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ArgumentToString:46","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:707","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":131,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":109,"org.easymock.tests2.MockedExceptionTest.testRealException":202,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":273,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":106,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":73,"org.easymock.tests.UsageVarargTest.varargIntAccepted":80,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":36,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":159,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":4,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":6,"org.easymock.tests2.UsageConstraintsTest.testContains":171,"org.easymock.tests.UsageCallCountTest.tooManyCalls":124,"org.easymock.tests2.UsageConstraintsTest.testFind":163,"org.easymock.tests.UsageVarargTest.allKinds":88,"org.easymock.tests2.StubTest.stubWithReturnValue":283,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":230,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":35,"org.easymock.tests2.CaptureTest.testCaptureAll":226,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":126,"org.easymock.samples.ExampleTest.addAndChangeDocument":18,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":257,"org.easymock.tests.UsageVarargTest.varargCharAccepted":81,"org.easymock.tests2.CaptureTest.testCaptureFromStub":236,"org.easymock.tests.UsageVerifyTest.twoThrows":116,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":28,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":82,"org.easymock.tests2.DelegateToTest.testReturnException":209,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":5,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":191,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":175,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":295,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":214,"org.easymock.tests2.CaptureTest.testAnd":225,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":66,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":23,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":234,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":70,"org.easymock.tests2.UsageConstraintsTest.testMatches":174,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":306,"org.easymock.tests2.UsageConstraintsTest.testNull":164,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":248,"org.easymock.tests2.EasyMockSupportClassTest.testAll":278,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":289,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":74,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":152,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":224,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":26,"org.easymock.tests.UsageThrowableTest.throwError":128,"org.easymock.tests2.UsageConstraintsTest.greaterThan":176,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":78,"org.easymock.samples.SupportTest.addDocument":10,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":31,"org.easymock.tests2.StubTest.stub":282,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":98,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":319,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":308,"org.easymock.tests.UsageExpectAndReturnTest.object":149,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":158,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":178,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":292,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":309,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":87,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":219,"org.easymock.tests.UsageExpectAndThrowTest.object":68,"org.easymock.tests2.DelegateToTest.testWrongClass":211,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":241,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":54,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":321,"org.easymock.tests2.UsageTest.moreThanOneArgument":188,"org.easymock.tests.UsageVarargTest.varargByteAccepted":86,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":65,"org.easymock.samples.ExampleTest.voteAgainstRemoval":15,"org.easymock.tests.UsageTest.wrongArguments":41,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":50,"org.easymock.tests.CapturesMatcherTest.test":317,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":134,"org.easymock.tests.UsageVarargTest.varargShortAccepted":84,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":69,"org.easymock.tests2.UsageTest.defaultResetToNice":194,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":322,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":323,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":201,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":97,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":9,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":242,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":262,"org.easymock.tests2.MockBuilderTest.testCreateMock":263,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":243,"org.easymock.tests2.SerializationTest.testAllMockedMethod":222,"org.easymock.tests2.NameTest.nameForMocksControl":316,"org.easymock.samples.ExampleTest.voteAgainstRemovals":12,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":213,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":114,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":30,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":89,"org.easymock.tests2.CaptureTest.testCapture1_2446744":229,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":197,"org.easymock.tests.LimitationsTest.mockNativeMethod":136,"org.easymock.tests2.DelegateToTest.testStubDelegate":210,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":302,"org.easymock.tests.UsageUnorderedTest.message":125,"org.easymock.samples.ExampleTest.answerVsDelegate":13,"org.easymock.samples.ExampleTest.voteForRemoval":14,"org.easymock.tests.UsageCallCountTest.tooFewCalls":119,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":148,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":121,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":245,"org.easymock.tests.UsageVerifyTest.twoReturns":117,"org.easymock.tests2.ThreadingTest.testChangeDefault":318,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":67,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":143,"org.easymock.tests2.DependencyTest.testInterfaceMocking":255,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":284,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":312,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":53,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":287,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":303,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":206,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":167,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":32,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":112,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":145,"org.easymock.tests2.CaptureTest.testCaptureRightOne":235,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":118,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":33,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":199,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":271,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":1,"org.easymock.tests2.UsageConstraintsTest.cmpTo":170,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":150,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":298,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":250,"org.easymock.tests2.MockedExceptionTest.testMockedException":200,"org.easymock.tests.UsageThrowableTest.throwCheckedException":132,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":102,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":182,"org.easymock.samples.PartialClassMockTest.testGetArea":19,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":115,"org.easymock.samples.ExampleTest.voteForRemovals":17,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":130,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":91,"org.easymock.samples.ConstructorCalledMockTest.testTax":7,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":173,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":24,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":55,"org.easymock.tests2.UsageTest.argumentsOrdered":196,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":270,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":38,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":247,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":144,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":47,"org.easymock.tests2.AnswerTest.answer":244,"org.easymock.tests.MockingTest.testNicePartialClassMocking":93,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":108,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":140,"org.easymock.tests2.UsageConstraintsTest.any":169,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":147,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":99,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":104,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":294,"org.easymock.tests.UsageExpectAndThrowTest.longType":61,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":75,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":208,"org.easymock.tests2.CallbackTest.callback":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":280,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":291,"org.easymock.tests2.NameTest.nameForMock":313,"org.easymock.tests.UsageTest.argumentsOrdered":45,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":162,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":261,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":172,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":157,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":29,"org.easymock.tests2.MockBuilderTest.testCreateMockString":265,"org.easymock.tests2.NameTest.nameForStrictMock":314,"org.easymock.tests2.CaptureTest.testCaptureNone":233,"org.easymock.tests2.SerializationTest.test":221,"org.easymock.tests.UsageExpectAndReturnTest.longType":142,"org.easymock.tests2.SerializationTest.testClass":220,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":307,"org.easymock.tests2.CaptureTest.testCaptureFirst":238,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":179,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":52,"org.easymock.tests2.UsageTest.niceToStrict":190,"org.easymock.tests2.EasyMockSupportTest.testVerify":296,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":51,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":260,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":304,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":105,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":63,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":181,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":186,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":71,"org.easymock.tests2.UsageTest.strictResetToDefault":187,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":156,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":264,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":276,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":37,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":58,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":168,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":146,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":252,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":203,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":272,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":79,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":177,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":269,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":266,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":57,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":94,"org.easymock.tests2.UsageConstraintsTest.testOr":166,"org.easymock.tests2.DelegateToTest.testDelegate":212,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":240,"org.easymock.tests2.UsageConstraintsTest.testNotNull":183,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":216,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":198,"org.easymock.tests2.CaptureTest.testCapture_2617107":227,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":0,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":127,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":135,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":151,"org.easymock.tests2.ThreadingTest.testThreadSafe":239,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":193,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":299,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":101,"org.easymock.tests.UsageThrowableTest.noUpperLimit":129,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":251,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":297,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":293,"org.easymock.tests.UsageExpectAndReturnTest.floatType":141,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":285,"org.easymock.tests2.UsageTest.wrongArguments":189,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":205,"org.easymock.tests2.UsageTest.resumeIfFailure":3,"org.easymock.tests2.UsageConstraintsTest.testSame":165,"org.easymock.tests.UsageOverloadedMethodTest.overloading":90,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":253,"org.easymock.samples.SupportTest.voteForRemovals":11,"org.easymock.tests.UsageRangeTest.combination":113,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":133,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":8,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":184,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":138,"org.easymock.tests.UsageTest.openCallCountByLastCall":42,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":64,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":310,"org.easymock.tests2.NameTest.nameForNiceMock":315,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":2,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":180,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":100,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":215,"org.easymock.tests2.CaptureTest.testPrimitive":228,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":268,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":153,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":72,"org.easymock.samples.BasicClassMockTest.testPrintContent":21,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":34,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":95,"org.easymock.tests.UsageExpectAndThrowTest.floatType":60,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":274,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":123,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":154,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":207,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":267,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":320,"org.easymock.tests2.UsageStrictMockTest.differentMethods":218,"org.easymock.tests.UsageTest.exactCallCountByLastCall":46,"org.easymock.tests2.AnswerTest.stubAnswer":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":286,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":290,"org.easymock.tests2.CaptureTest.testCaptureLast":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":59,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":122,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":120,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":256,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":279,"org.easymock.tests.UsageStrictMockTest.range":110,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":43,"org.easymock.tests.UsageTest.unexpectedCallWithArray":40,"org.easymock.tests.MockingTest.testPartialClassMocking":92,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":155,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":195,"org.easymock.tests2.UsageConstraintsTest.constraints":161,"org.easymock.samples.ExampleTest.addDocument":16,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":25,"org.easymock.tests2.UsageConstraintsTest.lessThan":185,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":204,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":44,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":22,"org.easymock.tests.UsageVarargTest.varargLongAccepted":85,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":103,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":300,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":275,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":277,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":107,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":76,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":281,"org.easymock.tests2.UsageStrictMockTest.range":217,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":254,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":49,"org.easymock.tests.UsageTest.moreThanOneArgument":39,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":96,"org.easymock.tests2.UsageTest.openCallCountByLastCall":192,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":258,"org.easymock.tests.UsageStrictMockTest.differentMethods":111,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":288,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":160,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":305,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":62,"org.easymock.tests.UsageVarargTest.differentLength":83,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":301,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":139,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":56,"org.easymock.tests2.CaptureTest.testCapture2_2446744":237,"org.easymock.tests.GenericTest.testPackageScope":137}}]

[{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[1,2,3,4,5,6,7,8,9],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:34","failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[55],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,7,110,8],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1764","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[71,71,72,72,111,112,113,5,6,114,7,8,9,115],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[116,7,117,110],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[11,12,13,14,16,17,24,30,31,32,34,37,38,39,53],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[15,34,35,53,54],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[116,7,117,110],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[118,119],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"type"}},{"position":"org.easymock.internal.RecordState:327","failures":[120,121,122,123],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[124,125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:439","failures":[65,67,119],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[126],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[127],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[128],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[129,130],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[131,132,133,134,135,136,137,138,139,16,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1790","sourceCode":"return null","type":"CtReturnImpl"},"failures":[167,40],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:46","sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[10,12,13,14,15,16,17,168,169,170,31,32,33,34,35,36,37,38,39,171,172,173,174,52,53,54],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[175,176,177],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[178,128,179,180,0,181,182,183,184,185,186],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"name":"name"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:435","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[118,65,66,67,119],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[179,181,182,183],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[187],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[188,120,121],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[189,190,191,192,193,194],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"exception":"clazz","throwableClass":"clazz"}},{"position":"org.easymock.internal.MockBuilder:80","failures":[60,61,67,70,88,97,98,99,100,101,102,103,104,105,106,195,107,108,7],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":128,"org.easymock.tests2.UsageTest.argumentsOrdered":39,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":131,"org.easymock.tests2.StubTest.stubWithReturnValue":166,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":5,"org.easymock.tests2.SerializationTest.testAllMockedMethod":110,"org.easymock.tests.MockingTest.testPartialClassMocking":57,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":49,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":118,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":152,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":116,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":140,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":125,"org.easymock.tests.UsageExpectAndThrowTest.object":150,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":168,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":1,"org.easymock.tests2.UsageTest.wrongArguments":37,"org.easymock.samples.ConstructorCalledMockTest.testTax":71,"org.easymock.tests.UsageStrictMockTest.range":34,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":73,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":61,"org.easymock.tests2.UsageConstraintsTest.testNull":179,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":85,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":151,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":103,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests.UsageTest.moreThanOneArgument":10,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":159,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":18,"org.easymock.tests.UsageUnorderedTest.message":31,"org.easymock.tests.UsageVerifyTest.twoReturns":17,"org.easymock.tests.UsageTest.argumentsOrdered":14,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":68,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":50,"org.easymock.tests2.CaptureTest.testCapture_2617107":185,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":51,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":97,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":163,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":102,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":121,"org.easymock.tests.UsageExpectAndThrowTest.longType":143,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":45,"org.easymock.tests2.SerializationTest.testClass":7,"org.easymock.tests.LimitationsTest.mockNativeMethod":64,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":67,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":181,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":96,"org.easymock.tests2.CaptureTest.testAnd":184,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":90,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":113,"org.easymock.tests2.NameTest.nameForMocksControl":174,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":132,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":59,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":144,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":83,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":104,"org.easymock.tests.MockingTest.testNicePartialClassMocking":58,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":155,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":87,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":160,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":26,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":78,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":0,"org.easymock.tests.MockingTest.testTwoMocks":56,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":25,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":55,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":153,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":148,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":38,"org.easymock.tests.UsageThrowableTest.throwError":133,"org.easymock.tests.UsageStrictMockTest.differentMethods":35,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":191,"org.easymock.tests2.ConstraintsToStringTest.andToString":48,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":130,"org.easymock.tests2.MockBuilderTest.testCreateMockString":108,"org.easymock.tests.UsageExpectAndThrowTest.floatType":142,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":40,"org.easymock.tests.UsageVerifyTest.twoThrows":16,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":115,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":81,"org.easymock.samples.PartialClassMockTest.testGetArea":70,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":127,"org.easymock.tests2.CompareToTest.testLessOrEqual":187,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":92,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":141,"org.easymock.tests2.UsageConstraintsTest.testNotNull":183,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":139,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":175,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":101,"org.easymock.tests2.MockBuilderTest.testCreateMock":105,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":21,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":111,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":42,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":149,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":123,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":162,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":76,"org.easymock.tests.UsageThrowableTest.throwCheckedException":136,"org.easymock.tests2.EasyMockSupportClassTest.testAll":79,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":66,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":20,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":47,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":157,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":94,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":77,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":75,"org.easymock.tests2.UsageConstraintsTest.testMatches":167,"org.easymock.tests2.NameTest.nameForNiceMock":173,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":15,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":3,"org.easymock.samples.BasicClassMockTest.testPrintContent":69,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":138,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":33,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":4,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":93,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":194,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":129,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":88,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":8,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":72,"org.easymock.tests2.ConstraintsToStringTest.orToString":41,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":28,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":62,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":164,"org.easymock.tests2.SerializationTest.test":117,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":6,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":190,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":124,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":30,"org.easymock.tests.GenericTest.testPackageScope":65,"org.easymock.tests2.UsageTest.moreThanOneArgument":36,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":106,"org.easymock.tests.GenericTest.testBridgedEquals":119,"org.easymock.tests2.NameTest.nameForMock":171,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":107,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":158,"org.easymock.tests2.UsageStrictMockTest.differentMethods":54,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":114,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":156,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":120,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":19,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":154,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":22,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":52,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":145,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":137,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":74,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":98,"org.easymock.tests2.NameTest.nameForStrictMock":172,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":109,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":161,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":177,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":86,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":192,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":169,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":182,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":89,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":99,"org.easymock.tests2.UsageStrictMockTest.range":53,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":2,"org.easymock.tests2.CaptureTest.testCaptureRightOne":186,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":23,"org.easymock.tests2.UsageConstraintsTest.testOr":180,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":84,"org.easymock.tests.UsageTest.wrongArguments":12,"org.easymock.tests2.MockBuilderTest.testWithConstructor":112,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":63,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":44,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":193,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":122,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":126,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":165,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":176,"org.easymock.tests.DefaultClassInstantiatorTest.object":189,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":100,"org.easymock.tests.UsageTest.unexpectedCallWithArray":11,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":24,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":147,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":32,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":135,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":91,"org.easymock.tests2.UsageConstraintsTest.constraints":178,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":146,"org.easymock.tests2.ConstraintsToStringTest.notToString":43,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":82,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":46,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":95,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":60,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":29,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":170}}]

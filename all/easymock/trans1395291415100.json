[{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.internal.RecordState:117","failures":[15,16,17,18,19,20,21,22],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[23,24],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[14,25,26,27],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,14,26,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[14,25,26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","bridgeMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1494","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","type":"CtInvocationImpl"},"failures":[108,109,110],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[14,25,26],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:201","failures":[111,112,113,114,115,116,117,118,119,120,32,33,36,55,65,71,14,81,82,94],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[121],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[91],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[122,123,124,125],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[108,126,127],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:210","failures":[128,128,129,129,0,1,130,3,29,14],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[108,127],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[131,132,133,134,135,136,137,138,3,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,14],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[139,140,141,142,143],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[144],"status":-1,"binaryOperator":"(int <= int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[3,14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:439","failures":[92,94,95],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Matches:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[95],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[145,146,147],"status":-1,"binaryOperator":"(java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"shouldBeUsedInOneThread"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":108,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":47,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":45,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":21,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":124,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":2,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":11,"org.easymock.tests2.SerializationTest.testAllMockedMethod":26,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":5,"org.easymock.tests.MockingTest.testPartialClassMocking":77,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":9,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":91,"org.easymock.tests.MockClassControlTest.testToString":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":67,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":72,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":59,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":27,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":55,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":13,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":53,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":34,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":7,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":90,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":35,"org.easymock.tests.UsageStrictMockTest.range":143,"org.easymock.samples.ConstructorCalledMockTest.testTax":128,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":120,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":0,"org.easymock.samples.ExampleTest.answerVsDelegate":15,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":129,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":43,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":82,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":83,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":40,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":134,"org.easymock.tests2.SerializationTest.test":25,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":116,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":103,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":3,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":85,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":57,"org.easymock.tests.GenericTest.testPackageScope":92,"org.easymock.tests.UsageVerifyTest.twoReturns":142,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":66,"org.easymock.tests.GenericTest.testBridgedEquals":95,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":136,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":133,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":112,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":12,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":30,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":88,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":125,"org.easymock.tests2.SerializationTest.testClass":14,"org.easymock.tests.LimitationsTest.mockNativeMethod":106,"org.easymock.tests2.AnswerTest.answer":19,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":94,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":69,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":31,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":4,"org.easymock.tests2.MockedExceptionTest.testMockedException":38,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":44,"org.easymock.tests.MockingTest.testNiceClassMocking":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":54,"org.easymock.tests.MockingTest.testClassMocking":75,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":144,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":79,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":39,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":117,"org.easymock.tests.MockingTest.testNicePartialClassMocking":78,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":132,"org.easymock.tests.LimitationsTest.mockFinalMethod":107,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":16,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":123,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":6,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":17,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":42,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":110,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":109,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":48,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":87,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":28,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":113,"org.easymock.tests2.UsageStrictMockTest.range":139,"org.easymock.tests.MockingTest.testTwoMocks":76,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":8,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":137,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":146,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":61,"org.easymock.tests2.UsageConstraintsTest.testOr":126,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":1,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":86,"org.easymock.tests2.MockBuilderTest.testCreateMockString":119,"org.easymock.tests.MockClassControlTest.testHashCode":101,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":58,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":56,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":51,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":62,"org.easymock.tests.UsageVerifyTest.twoThrows":141,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":22,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":65,"org.easymock.samples.PartialClassMockTest.testGetArea":111,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":33,"org.easymock.tests2.UsageTest.niceToStrict":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":60,"org.easymock.tests.LimitationsTest.privateConstructor":105,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":37,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":131,"org.easymock.tests.DefaultClassInstantiatorTest.object":84,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":138,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":24,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":68,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":114,"org.easymock.tests2.CallbackTest.callback":18,"org.easymock.tests2.UsageConstraintsTest.equals":145,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":63,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":135,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":100,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":70,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":46,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":23,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":71,"org.easymock.tests.MockClassControlTest.testEquals":102,"org.easymock.tests2.EasyMockSupportClassTest.testAll":52,"org.easymock.tests.LimitationsTest.abstractClass":104,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":81,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":93,"org.easymock.tests.MockingTest.testStrictClassMocking":74,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":140,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":41}}]

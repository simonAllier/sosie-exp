[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.MockBuilder:129","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","position":"org.easymock.internal.MockBuilder:128","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:365","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:327","type":"CtInvocationImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:80","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:132","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"break","position":"org.easymock.Capture:107","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:865","type":"CtInvocationImpl"},"status":-2},{"failures":[88,89,90,91,92,93,94,95,97,98,99,100,101],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.setPotentialValue(null)","position":"org.easymock.internal.Invocation:174","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.validateCapture()","position":"org.easymock.internal.Invocation:168","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","position":"org.easymock.EasyMock:1542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\"))","position":"org.easymock.internal.matchers.EqualsWithDelta:45","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.callLongMethod(java.lang.Class<?>, (org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.is1_3Specifications() ? \"computeSerialVersionUID\" : \"computeDefaultSUID\"))","position":"org.easymock.internal.DefaultClassInstantiator:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"status":-2},{"failures":[39,50,54,55,76,80,81,84,108,117,133,134,239,244,245,297],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:91","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"stack":"stack"},"name":"add","transplant":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","position":"org.easymock.internal.EasyMockProperties:64","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:49","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:434","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","position":"org.easymock.internal.EasyMockProperties:119","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","position":"org.easymock.internal.ReflectionUtils:108","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.io.IOException java.io.IOException","position":"org.easymock.internal.EasyMockProperties:71","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(byte[]))","position":"org.easymock.internal.DefaultClassInstantiator:202","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Constructor<?>.getParameterTypes()","position":"org.easymock.internal.ReflectionUtils:179","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","position":"org.easymock.internal.LastControl:95","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.DefaultClassInstantiator:162","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","position":"org.easymock.internal.ReflectionUtils:189","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","position":"org.easymock.internal.InjectionPlan:55","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:40","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.Invocation:211","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"paramType":"clazz","argType":"clazz"},"name":"add","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:141","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.Invocation:105","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"status":-2},{"failures":[14,15,16,18,145],"variableMapping":{"method":"m","finalizeMethod":"m"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments())","position":"org.easymock.internal.Result:84","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this","mocks":"mocks"},"name":"add","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","position":"org.easymock.EasyMock:1646","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.internal.MockBuilder:214","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>()","position":"org.easymock.internal.BridgeMethodResolver:380","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"typeVariableMap":"typeVariableMap","this":"this","candidateParameter":"candidateParameter","genericParameter":"rawType"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:209","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"status":0},{"failures":[315,88,89,90,91,92,93,94,95,97,316,98,99,100,101,317],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.util.List<T>.clear()","position":"org.easymock.Capture:60","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-1},{"failures":[0,4,6,7,8,9,10,12,15,19,20,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,54,55,57,58,59,60,61,62,64,66,67,68,73,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,95,96,97,98,100,101,102,103,104,105,106,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,130,131,133,135,136,137,140,141,144,146,147,149,153,155,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,200,202,203,204,205,206,207,208,209,210,212,213,214,215,216,217,220,221,222,223,224,231,232,235,236,242,244,245,253,254,255,257,289,290,292,293,296,297,298,299,300,301],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","position":"org.easymock.internal.RecordState:102","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue()))","name":"conditionalBoundary","position":"org.easymock.internal.matchers.EqualsWithDelta:40","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:119","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:94","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[])))","name":"math","position":"org.easymock.internal.Invocation:110","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:682","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw java.lang.reflect.InvocationTargetException.getCause()","position":"org.easymock.internal.Result:89","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.matchers.Equals org.easymock.internal.matchers.Equals = ((org.easymock.internal.matchers.Equals)(java.lang.Object))","position":"org.easymock.internal.matchers.Equals:56","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Same:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:140","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","position":"org.easymock.internal.RecordState:156","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"this","key":"this"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    if (org.easymock.internal.Injection != null) {\n        throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n    } \n    org.easymock.internal.Injection = org.easymock.internal.Injection;\n} ","position":"org.easymock.internal.Injector:231","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(org.easymock.internal.Invocation.getMockAndMethodName())","position":"org.easymock.internal.ExpectedInvocation:104","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:119","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","position":"org.easymock.internal.MocksControl:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.Class<?>[].int]","position":"org.easymock.internal.DefaultClassInstantiator:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.ObjectMethodsFilter:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","position":"org.easymock.internal.RecordState:213","type":"CtReturnImpl"},"status":-2},{"failures":[318,319,320],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","position":"org.easymock.internal.DefaultClassInstantiator:144","type":"CtInvocationImpl"},"status":-1},{"failures":[54,55,244,245],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","position":"org.easymock.internal.Range:70","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","position":"org.easymock.internal.LastControl:124","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.Injection:74","type":"CtAssignmentImpl"},"status":-2},{"failures":[0,3,4,11,12,14,15,16,18,19,20,51,52,53,54,55,56,58,61,67,75,76,77,78,79,80,81,83,84,85,86,98,102,103,104,105,107,108,110,111,112,114,115,116,129,130,131,132,133,134,135,136,138,139,140,141,142,143,144,145,146,147,148,149,150,154,155,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,189,190,191,192,193,194,200,201,202,203,204,205,206,207,208,209,210,215,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,240,242,243,244,245,246,248,249,250,251,252,253,255,256,257,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,289,290,291,292,293,294,295,296,302,304,305,306,307,308,310,311,312,313,314],"variableMapping":{"actual":"invocation"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : org.easymock.internal.Invocation.getArguments()) {\n    java.util.List<org.easymock.IArgumentMatcher>.add(new org.easymock.internal.matchers.Equals(java.lang.Object));\n}","position":"org.easymock.internal.ExpectedInvocation:61","type":"CtForEachImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.ClassProxyFactory:212","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:707","type":"CtInvocationImpl"},"status":-2},{"failures":[317],"variableMapping":{"buffer":"buffer"},"name":"replace","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:37","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-1},{"failures":[321],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"status":-1},{"failures":[52,54,55,125,126,127,128,131,132,138,139,194,241,242,244,245,255,256,257,287,290,291,294,295],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","position":"org.easymock.internal.DefaultClassInstantiator:155","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1531","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"paramType":"mockClass","argType":"mockClass"},"name":"add","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ClassProxyFactory:194","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","position":"org.easymock.internal.MocksBehavior:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:113","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    try {\n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n            continue;\n        } \n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n            continue;\n        } \n        final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n        org.easymock.internal.Invocation.validateCaptures();\n        return org.easymock.internal.Result;\n    } finally {\n        org.easymock.internal.Invocation.clearCaptures();\n    }\n}","position":"org.easymock.internal.UnorderedBehavior:50","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:75","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","position":"org.easymock.Capture:82","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.internal.BridgeMethodResolver:191","type":"mutation","return":"return false","status":0},{"failures":[],"variableMapping":{"expected":"obj"},"name":"add","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n    return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Object java.lang.Object","position":"org.easymock.internal.Injector:72","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:256","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:339","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.DefaultClassInstantiator:182","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = java.lang.reflect.Method.getName()","position":"org.easymock.internal.Invocation:143","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:681","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","position":"org.easymock.internal.MethodSerializationWrapper:58","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))","position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:324","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:249","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\")","name":"math","position":"org.easymock.internal.matchers.CompareTo:49","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:893","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>.getName(), java.lang.Byte.java.lang.Class<java.lang.Byte>)","position":"org.easymock.internal.MethodSerializationWrapper:34","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:34","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1120","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:612","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","position":"org.easymock.internal.EasyMockProperties:67","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:234","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"verified":"lastInvocationUsed"},"name":"add","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.reflect.Type[].int) > 0) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0];\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.lang.reflect.Type = java.lang.reflect.Type;\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:352","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1235","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"otherArgument":"expected","myArgument":"expected"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:126","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:281","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"status":-2},{"failures":[10,322,19,323,324,325,326,327,328,329],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.ReflectionUtils:157","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass()","position":"org.easymock.internal.Injector:64","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","position":"org.easymock.EasyMock:1633","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl() : org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1107","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:288","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:112","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:75","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:83","type":"CtInvocationImpl"},"status":-2},{"failures":[6,7,8,9,10,19,21,57,58,60,61,62,63,64,65,66,67,68,73,330,331,113,332,114,333,115,116,334,117,335,336,118,119,120,121,123,124,337,142,143,151,151,152,152,153,338,339,188,211,212,213,214,236,340,301,302,303],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:118","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","position":"org.easymock.EasyMock:1847","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[317],"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","position":"org.easymock.Capture:134","type":"mutation","status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:127","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.Invocation:220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type == null) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:335","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"isThreadSafe":"org.easymock.internal.AndroidSupport.isAndroid"},"name":"replace","transplant":{"sourceCode":"return this.org.easymock.internal.AndroidSupport.boolean","position":"org.easymock.internal.MocksBehavior:189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.AndroidSupport.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":203,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":64,"org.easymock.tests2.MockedExceptionTest.testRealException":74,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":243,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":240,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":280,"org.easymock.tests.UsageVarargTest.varargIntAccepted":306,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":253,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":22,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":10,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":157,"org.easymock.tests2.UsageConstraintsTest.testContains":35,"org.easymock.tests.UsageCallCountTest.tooManyCalls":167,"org.easymock.tests2.UsageConstraintsTest.testFind":26,"org.easymock.tests2.StubTest.stubWithReturnValue":12,"org.easymock.tests.UsageVarargTest.allKinds":314,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":93,"org.easymock.tests2.CaptureTest.testCaptureAll":89,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":215,"org.easymock.samples.ExampleTest.addAndChangeDocument":150,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":330,"org.easymock.tests.UsageVarargTest.varargCharAccepted":307,"org.easymock.tests2.CaptureTest.testCaptureFromStub":99,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":327,"org.easymock.tests.UsageVerifyTest.twoThrows":256,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":326,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":232,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":308,"org.easymock.tests2.DelegateToTest.testReturnException":14,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":134,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":322,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":39,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":86,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":51,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":160,"org.easymock.tests.UsageStrictMockTest.testVerify":247,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":273,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":97,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":277,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":338,"org.easymock.tests2.UsageConstraintsTest.testMatches":38,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":199,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":321,"org.easymock.tests2.UsageConstraintsTest.testNull":27,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":118,"org.easymock.tests2.EasyMockSupportClassTest.testAll":6,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":80,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":181,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":281,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":110,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":329,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":188,"org.easymock.tests.UsageThrowableTest.throwError":200,"org.easymock.tests2.UsageConstraintsTest.greaterThan":40,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":304,"org.easymock.samples.SupportTest.addDocument":154,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":235,"org.easymock.tests2.StubTest.stub":11,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":261,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":223,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":231,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":42,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":83,"org.easymock.tests.UsageExpectAndReturnTest.object":178,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":187,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":313,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":56,"org.easymock.tests.UsageExpectAndThrowTest.object":275,"org.easymock.tests2.DelegateToTest.testWrongClass":16,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":105,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":227,"org.easymock.tests2.UsageTest.moreThanOneArgument":131,"org.easymock.tests.UsageVarargTest.varargByteAccepted":312,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":272,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":337,"org.easymock.samples.ExampleTest.voteAgainstRemoval":147,"org.easymock.tests.UsageTest.wrongArguments":291,"org.easymock.tests.CapturesMatcherTest.test":317,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":206,"org.easymock.tests.UsageVarargTest.varargShortAccepted":310,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":264,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":276,"org.easymock.tests2.UsageTest.defaultResetToNice":137,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":222,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":106,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":156,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":116,"org.easymock.tests2.MockBuilderTest.testCreateMock":334,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":107,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":331,"org.easymock.tests2.SerializationTest.testAllMockedMethod":21,"org.easymock.tests2.NameTest.nameForMocksControl":128,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":238,"org.easymock.samples.ExampleTest.voteAgainstRemovals":144,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":50,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":190,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":299,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":234,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":208,"org.easymock.tests2.CaptureTest.testCapture1_2446744":92,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":141,"org.easymock.tests2.DelegateToTest.testStubDelegate":15,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":218,"org.easymock.tests.LimitationsTest.mockNativeMethod":236,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":193,"org.easymock.tests.UsageUnorderedTest.message":287,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":17,"org.easymock.samples.ExampleTest.answerVsDelegate":145,"org.easymock.samples.ExampleTest.voteForRemoval":146,"org.easymock.tests.UsageCallCountTest.tooFewCalls":163,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":177,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":3,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":165,"org.easymock.tests.UsageVerifyTest.twoReturns":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":328,"org.easymock.tests2.DependencyTest.testInterfaceMocking":111,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":172,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":274,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":75,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":226,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":78,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":219,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":323,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":30,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":246,"org.easymock.tests.MockingTest.testTwoMocks":211,"org.easymock.tests2.CaptureTest.testCaptureRightOne":98,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":174,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":162,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":71,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":2,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":62,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":298,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":263,"org.easymock.tests2.UsageConstraintsTest.cmpTo":34,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":161,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":179,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":318,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":120,"org.easymock.tests2.MockedExceptionTest.testMockedException":72,"org.easymock.tests.UsageThrowableTest.throwCheckedException":204,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":46,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":250,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":284,"org.easymock.samples.PartialClassMockTest.testGetArea":153,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":255,"org.easymock.samples.ExampleTest.voteForRemovals":149,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":202,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":210,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":37,"org.easymock.samples.ConstructorCalledMockTest.testTax":151,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":228,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":1,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":61,"org.easymock.tests2.UsageTest.argumentsOrdered":139,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":289,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":5,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":237,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":173,"org.easymock.tests2.CaptureTest.testCaptureMultiple":315,"org.easymock.tests2.AnswerTest.answer":0,"org.easymock.tests.MockingTest.testNicePartialClassMocking":213,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":242,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":169,"org.easymock.tests2.UsageConstraintsTest.any":33,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":224,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":325,"org.easymock.tests2.CaptureTest.testCapture":316,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":252,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":262,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":85,"org.easymock.tests.UsageExpectAndThrowTest.longType":268,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":70,"org.easymock.tests2.CallbackTest.callback":108,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":8,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":82,"org.easymock.tests2.NameTest.nameForMock":125,"org.easymock.tests.UsageTest.argumentsOrdered":295,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":25,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":115,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":36,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":186,"org.easymock.tests2.NameTest.nameForStrictMock":126,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":233,"org.easymock.tests2.MockBuilderTest.testCreateMockString":336,"org.easymock.tests2.CaptureTest.testCaptureNone":96,"org.easymock.tests2.SerializationTest.test":20,"org.easymock.tests.UsageExpectAndReturnTest.longType":171,"org.easymock.tests2.SerializationTest.testClass":19,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":94,"org.easymock.tests2.CaptureTest.testCaptureFirst":101,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":43,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":142,"org.easymock.tests2.EasyMockSupportTest.testVerify":87,"org.easymock.tests2.UsageTest.niceToStrict":133,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":225,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":258,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":259,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":333,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":239,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":270,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":45,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":129,"org.easymock.tests2.UsageTest.strictResetToDefault":130,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":278,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":67,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":117,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":185,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":254,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":265,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":31,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":122,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":175,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":109,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":63,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":41,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":60,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":305,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":57,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":230,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":214,"org.easymock.tests2.UsageConstraintsTest.testOr":29,"org.easymock.tests2.DelegateToTest.testDelegate":18,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":104,"org.easymock.tests2.UsageConstraintsTest.testNotNull":47,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":53,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":102,"org.easymock.tests2.CaptureTest.testCapture_2617107":90,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":180,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":207,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":216,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":339,"org.easymock.tests2.ThreadingTest.testThreadSafe":103,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":136,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":319,"org.easymock.tests.UsageThrowableTest.noUpperLimit":201,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":249,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":119,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":121,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":84,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":76,"org.easymock.tests.UsageExpectAndReturnTest.floatType":170,"org.easymock.tests2.UsageTest.wrongArguments":132,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":32,"org.easymock.tests2.UsageConstraintsTest.testSame":28,"org.easymock.tests2.UsageTest.resumeIfFailure":140,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":324,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":159,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":123,"org.easymock.tests.UsageOverloadedMethodTest.overloading":209,"org.easymock.samples.SupportTest.voteForRemovals":155,"org.easymock.tests.UsageRangeTest.combination":297,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":205,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":197,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":152,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":48,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":302,"org.easymock.tests.UsageTest.openCallCountByLastCall":292,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":271,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":196,"org.easymock.tests2.NameTest.nameForNiceMock":127,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":300,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":44,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":248,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":52,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":59,"org.easymock.tests2.CaptureTest.testPrimitive":91,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":182,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":279,"org.easymock.samples.BasicClassMockTest.testPrintContent":143,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":158,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":220,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":65,"org.easymock.tests.UsageExpectAndThrowTest.floatType":267,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":58,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":69,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":166,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":183,"org.easymock.tests2.UsageStrictMockTest.differentMethods":55,"org.easymock.tests.UsageTest.exactCallCountByLastCall":296,"org.easymock.tests2.AnswerTest.stubAnswer":4,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":77,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":81,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":303,"org.easymock.tests2.CaptureTest.testCaptureLast":95,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":335,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":266,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":164,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":7,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":112,"org.easymock.tests.UsageStrictMockTest.range":244,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":293,"org.easymock.tests.MockingTest.testPartialClassMocking":212,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":184,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":138,"org.easymock.tests2.UsageConstraintsTest.constraints":24,"org.easymock.samples.ExampleTest.addDocument":148,"org.easymock.tests2.UsageConstraintsTest.lessThan":49,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":294,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":189,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":251,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":260,"org.easymock.tests.UsageVarargTest.varargLongAccepted":311,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":320,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":66,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":68,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":13,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":241,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":9,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":195,"org.easymock.tests2.UsageStrictMockTest.range":54,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":124,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":285,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":286,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":332,"org.easymock.tests.UsageTest.moreThanOneArgument":290,"org.easymock.tests2.UsageTest.openCallCountByLastCall":135,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":221,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":113,"org.easymock.tests.UsageStrictMockTest.differentMethods":245,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":79,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":23,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":340,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":114,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":269,"org.easymock.tests.DefaultClassInstantiatorTest.object":288,"org.easymock.tests.UsageVarargTest.differentLength":309,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":198,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":217,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":168,"org.easymock.tests2.CaptureTest.testCapture2_2446744":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":229,"org.easymock.tests.GenericTest.testPackageScope":301}}]

[{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"propertyFileName","this":"propertyFileName"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[19,20,21,22,23,0,1,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,2,3,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"regex"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[55,110,111,112,113],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[114,115,116,117],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"failures":[118,119,120,121,122,123,124,125,126,127],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"toStringMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[128],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[129],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[130],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"failMessage":"methodName"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":55,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":52,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":54,"org.easymock.tests.MockNameTest.defaultName":72,"org.easymock.tests2.UsageTest.argumentsOrdered":47,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":86,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":26,"org.easymock.tests2.CompareToTest.testGreateOrEqual":117,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":45,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":118,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":7,"org.easymock.tests2.NameTest.nameForNiceMock":64,"org.easymock.tests.MockingTest.testPartialClassMocking":111,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":82,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":125,"org.easymock.tests.MockClassControlTest.testToString":69,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":61,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":21,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":79,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":127,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":60,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":123,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":81,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":114,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":130,"org.easymock.tests2.UsageTest.wrongArguments":43,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":103,"org.easymock.tests.UsageStrictMockTest.range":2,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":121,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":102,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":74,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":41,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":16,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":119,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":36,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":32,"org.easymock.tests.UsageTest.moreThanOneArgument":87,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":90,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":28,"org.easymock.tests.UsageUnorderedTest.message":106,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":49,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":76,"org.easymock.tests2.UsageTest.moreThanOneArgument":42,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":11,"org.easymock.tests.UsageVerifyTest.twoReturns":84,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":39,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":10,"org.easymock.tests.UsageTest.argumentsOrdered":91,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":67,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":97,"org.easymock.tests2.NameTest.nameForMock":62,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":33,"org.easymock.tests2.UsageStrictMockTest.differentMethods":1,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":5,"org.easymock.tests.UsageCallCountTest.tooManyCalls":98,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":17,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":23,"org.easymock.tests2.SerializationTest.testClass":120,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":25,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":51,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":94,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":104,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":6,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":24,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":59,"org.easymock.tests2.NameTest.nameForMocksControl":65,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":22,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":53,"org.easymock.tests2.NameTest.nameForStrictMock":63,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":12,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":113,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":13,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":57,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":37,"org.easymock.tests.MockingTest.testNicePartialClassMocking":112,"org.easymock.tests2.UsageConstraintsTest.testFind":109,"org.easymock.tests.MockTypeTest.fromEasyMockClass":100,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":77,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":108,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":129,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":56,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":34,"org.easymock.tests2.UsageStrictMockTest.range":0,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":107,"org.easymock.tests2.UsageConstraintsTest.lessThan":116,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":110,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":31,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":124,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":14,"org.easymock.tests.UsageTest.exactCallCountByLastCall":92,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":46,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":126,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":4,"org.easymock.tests.UsageStrictMockTest.differentMethods":3,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":101,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":18,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":122,"org.easymock.tests.UsageRangeTest.combination":85,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":58,"org.easymock.tests.UsageTest.wrongArguments":89,"org.easymock.tests2.MockBuilderTest.testCreateMockString":40,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":20,"org.easymock.tests.UsageVerifyTest.twoThrows":83,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":73,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":96,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":128,"org.easymock.tests2.UsageTest.niceToStrict":44,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":68,"org.easymock.tests2.MockBuilderTest.testCreateMock":38,"org.easymock.tests.UsageVarargTest.differentLength":105,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":35,"org.easymock.tests2.CallbackTest.callback":50,"org.easymock.tests.UsageTest.unexpectedCallWithArray":88,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":66,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":15,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":29,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":78,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":93,"org.easymock.tests.UsageCallCountTest.tooFewCalls":95,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":9,"org.easymock.tests2.UsageConstraintsTest.constraints":19,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":71,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":80,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":115,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":8,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":70,"org.easymock.tests2.UsageTest.resumeIfFailure":48,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":99,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":75,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":30}}]

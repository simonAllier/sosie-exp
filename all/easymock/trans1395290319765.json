[{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:70","failures":[1,2,3,4],"status":-1,"binaryOperator":"(\"between \" + (int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Or:47","sourceCode":"java.lang.StringBuffer.append(\"or(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[5,6,7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[8,9,10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[11],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"failures":[12,1,2,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,27,28,29,30],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[31,32,33],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[34,35,36,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.LastControl:71","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:79","sourceCode":"return java.util.List<java.lang.reflect.Field>","type":"CtReturnImpl"},"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[64,65,66,67,68,69,70],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:90","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()))","type":"CtThrowImpl"},"failures":[44,47,49,50,56,59,61,62],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"value","i":"i"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[71,8,72,9,73,10,0,74,75,76,77],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[78,79],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[80,81,82,83,84,85,86,87,45,88,89,90,91,92,93,94,95,96,57,12,1,2,97,98,13,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,71,8,11,72,117,9,73,118,119,120,121,122,123,124,125,79,126,0,127,128,129,130,74,131,132,133,75,65,76,134,135,66,67,68,77,69,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,35,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,21,22,24,26,3,4,177,27,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[71,8,72,9,73,10,0,74,75,76,77],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[116],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[223,224],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"message":"key"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[149,150,225,226],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[227,12,228,1,2,229,230,97,13,14,99,231,15,16,104,71,125,17,18,19,20,138,142,143,146,152,156,164,166,170,21,22,23,24,232,25,26,233,3,4,234,177,27,28,29,30,180,235,236,237,238,239,240,241,242,243],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[244,245],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[97,101,105,169,246,247,248,23,177,179,249,250,213,214,215,216,217,218,219,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"actual"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[271],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:161","sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : java.util.List<org.easymock.internal.Injection>) {\n    final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier());\n    final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field);\n    if (org.easymock.internal.InjectionTarget == null) {\n        continue;\n    } \n    if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n        org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n        java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n    } \n}","type":"CtForEachImpl"},"failures":[41,42,44,47,48,51,53,54,56,59,60,63],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:126","failures":[272,273,274,275,276],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1263","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[176,191,192,199,206,277],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[166],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[278,149,279,280,281,282,283,284,285,286],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[80,272,81,82,287,83,288,289,290,86,291,87,88,91,92,95,96,292,12,228,1,2,229,293,294,295,296,230,97,98,13,14,99,231,100,101,102,15,16,103,104,297,105,110,111,112,113,114,115,116,71,8,11,72,117,9,73,118,119,120,121,122,123,124,125,79,126,0,127,128,129,130,74,131,132,298,299,273,133,274,275,75,65,76,134,135,300,301,66,67,68,77,302,69,136,149,150,225,151,303,35,36,304,153,305,157,158,159,160,161,162,306,163,307,165,167,168,169,308,309,310,311,170,172,173,174,312,313,314,315,316,317,175,176,21,22,23,24,318,25,26,233,3,4,234,177,27,28,178,179,29,30,180,181,319,320,321,322,249,323,324,325,326,276,250,182,183,184,327,328,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,329,330,331,332,333,334,335,336,337,338,213,339,214,215,216,217,218,219,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,220,221,222,240,241,340,341,242,243,342,343,344,277,345,33],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[1,2,25,3,4,346],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":8,"org.easymock.tests2.UsageTest.argumentsOrdered":16,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":177,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":147,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":322,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":58,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":231,"org.easymock.tests2.StubTest.stubWithReturnValue":105,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":286,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":200,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":38,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":130,"org.easymock.tests2.SerializationTest.testAllMockedMethod":225,"org.easymock.tests2.DelegateToTest.testReturnException":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":320,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":31,"org.easymock.tests.MockingTest.testPartialClassMocking":220,"org.easymock.samples.SupportTest.voteForRemovals":84,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":271,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":55,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":263,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":226,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":251,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":107,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":34,"org.easymock.tests.UsageExpectAndThrowTest.object":261,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":236,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":89,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":127,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":280,"org.easymock.tests2.DelegateToTest.testWrongClass":274,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":175,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":176,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":118,"org.easymock.tests2.UsageTest.wrongArguments":14,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":183,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":51,"org.easymock.tests.UsageStrictMockTest.range":3,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":310,"org.easymock.samples.ExampleTest.answerVsDelegate":272,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":144,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":90,"org.easymock.tests2.UsageConstraintsTest.testNull":72,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":262,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":160,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":146,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":154,"org.easymock.tests2.CaptureTest.testPrimitive":134,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":185,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":270,"org.easymock.tests.UsageTest.moreThanOneArgument":27,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":29,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":309,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":159,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":344,"org.easymock.tests2.CaptureTest.testCaptureNone":67,"org.easymock.tests.UsageUnorderedTest.message":21,"org.easymock.tests.UsageVerifyTest.twoReturns":24,"org.easymock.tests.UsageVarargTest.varargByteAccepted":336,"org.easymock.tests2.ThreadingTest.testThreadSafe":110,"org.easymock.tests.UsageTest.argumentsOrdered":30,"org.easymock.tests.UsageVarargTest.varargIntAccepted":331,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":341,"org.easymock.tests2.CaptureTest.testCapture_2617107":76,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":186,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":304,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":284,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":328,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":62,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":305,"org.easymock.tests2.UsageConstraintsTest.any":119,"org.easymock.tests2.StubTest.stub":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":245,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":190,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":321,"org.easymock.tests.UsageExpectAndThrowTest.longType":254,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":6,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":228,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":57,"org.easymock.tests2.SerializationTest.testClass":149,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":45,"org.easymock.tests.LimitationsTest.mockNativeMethod":181,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":210,"org.easymock.tests2.AnswerTest.answer":151,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":10,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":296,"org.easymock.tests2.CaptureTest.testAnd":75,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":42,"org.easymock.tests2.UsageTest.strictResetToDefault":98,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":307,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":229,"org.easymock.tests2.NameTest.nameForMocksControl":20,"org.easymock.tests2.MockedExceptionTest.testMockedException":290,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":44,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":343,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":141,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":172,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":179,"org.easymock.tests2.DelegateToTest.testDelegate":275,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":255,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":222,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":157,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":155,"org.easymock.tests.MockingTest.testNicePartialClassMocking":221,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":266,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":162,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":279,"org.easymock.tests2.CaptureTest.testCaptureLast":66,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":40,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":249,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":33,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":73,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":96,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":317,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":128,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":32,"org.easymock.tests2.CaptureTest.testCapture1_2446744":135,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":264,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":294,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":259,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":131,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":223,"org.easymock.tests.UsageThrowableTest.throwError":213,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":325,"org.easymock.tests.UsageStrictMockTest.differentMethods":4,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":47,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":54,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":112,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":63,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":345,"org.easymock.tests.UsageExpectAndThrowTest.floatType":253,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":125,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":303,"org.easymock.tests.UsageVerifyTest.twoThrows":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":108,"org.easymock.samples.PartialClassMockTest.testGetArea":85,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":187,"org.easymock.samples.ExampleTest.voteAgainstRemoval":82,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":165,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":252,"org.easymock.tests2.UsageTest.niceToStrict":99,"org.easymock.tests2.ThreadingTest.testChangeDefault":224,"org.easymock.tests2.UsageConstraintsTest.testNotNull":74,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":289,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":219,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":153,"org.easymock.tests2.UsageTest.defaultResetToNice":102,"org.easymock.samples.ExampleTest.voteAgainstRemovals":80,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":206,"org.easymock.tests.UsageVarargTest.differentLength":235,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":41,"org.easymock.tests2.CallbackTest.callback":230,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":48,"org.easymock.tests.UsageTest.openCallCountByLastCall":178,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":260,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":142,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":115,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":248,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":239,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":327,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":308,"org.easymock.tests.UsageCallCountTest.tooFewCalls":241,"org.easymock.tests.UsageOverloadedMethodTest.overloading":168,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":250,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":123,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":202,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":93,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":167,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":122,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":68,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":311,"org.easymock.tests.UsageThrowableTest.throwCheckedException":216,"org.easymock.tests2.EasyMockSupportClassTest.testAll":106,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":312,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":268,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":315,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":295,"org.easymock.tests2.CaptureTest.testCaptureAll":65,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":212,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":95,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":92,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":46,"org.easymock.tests2.UsageConstraintsTest.testMatches":124,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":94,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":36,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":277,"org.easymock.samples.ExampleTest.voteForRemovals":83,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":283,"org.easymock.tests2.NameTest.nameForNiceMock":19,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":114,"org.easymock.tests.UsageVarargTest.allKinds":338,"org.easymock.tests2.DependencyTest.testInterfaceMocking":88,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":22,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":282,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":316,"org.easymock.samples.ExampleTest.addDocument":287,"org.easymock.tests2.DelegateToTest.testStubDelegate":133,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":218,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":227,"org.easymock.tests2.AnswerTest.stubAnswer":35,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":323,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":244,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":59,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":26,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":285,"org.easymock.tests2.UsageConstraintsTest.greaterThan":79,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":171,"org.easymock.tests.UsageVarargTest.varargLongAccepted":335,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":166,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":234,"org.easymock.samples.ExampleTest.voteForRemoval":81,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":111,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":209,"org.easymock.tests.UsageExpectAndReturnTest.floatType":193,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":306,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":87,"org.easymock.tests.UsageThrowableTest.noUpperLimit":339,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":61,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":126,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":324,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":97,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":116,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":300,"org.easymock.tests2.SerializationTest.test":150,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":139,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":214,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":192,"org.easymock.tests2.UsageConstraintsTest.testSame":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":319,"org.easymock.tests2.CaptureTest.testCaptureFirst":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":37,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":140,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":104,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":198,"org.easymock.tests.GenericTest.testPackageScope":174,"org.easymock.tests2.CaptureTest.testCapture2_2446744":69,"org.easymock.tests2.UsageTest.moreThanOneArgument":13,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":113,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":156,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":60,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":337,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":242,"org.easymock.tests2.NameTest.nameForMock":17,"org.easymock.tests.UsageExpectAndReturnTest.longType":194,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":313,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":137,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":269,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":203,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":129,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":267,"org.easymock.tests2.UsageStrictMockTest.differentMethods":2,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":342,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":195,"org.easymock.tests.UsageCallCountTest.tooManyCalls":243,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":265,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":7,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":173,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":240,"org.easymock.tests2.MockedExceptionTest.testRealException":291,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":199,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":50,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":256,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":12,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":217,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":184,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":91,"org.easymock.tests2.NameTest.nameForStrictMock":18,"org.easymock.tests2.UsageConstraintsTest.testContains":121,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":86,"org.easymock.tests2.UsageConstraintsTest.testFind":11,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":169,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":298,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":161,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":299,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":232,"org.easymock.tests.UsageExpectAndReturnTest.object":201,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":237,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":0,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":163,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":152,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":49,"org.easymock.tests2.UsageStrictMockTest.range":1,"org.easymock.tests2.UsageConstraintsTest.lessThan":132,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":145,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":333,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":281,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":56,"org.easymock.tests.UsageTest.exactCallCountByLastCall":180,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":211,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":138,"org.easymock.tests2.CaptureTest.testCaptureRightOne":77,"org.easymock.tests2.UsageConstraintsTest.testOr":9,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":278,"org.easymock.tests.UsageRangeTest.combination":170,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":329,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":207,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":158,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":276,"org.easymock.tests.UsageTest.wrongArguments":28,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":53,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":196,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":204,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":5,"org.easymock.tests.UsageVarargTest.varargShortAccepted":334,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":326,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":247,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":293,"org.easymock.tests2.UsageConstraintsTest.cmpTo":120,"org.easymock.tests.UsageVarargTest.varargCharAccepted":332,"org.easymock.tests2.CaptureTest.testCaptureMultiple":64,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":292,"org.easymock.tests2.UsageTest.openCallCountByLastCall":100,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":101,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":148,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":246,"org.easymock.tests2.CaptureTest.testCaptureFromStub":302,"org.easymock.tests.UsageTest.unexpectedCallWithArray":346,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":258,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":215,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":25,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":340,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":43,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":52,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":205,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":233,"org.easymock.tests2.UsageConstraintsTest.constraints":71,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":164,"org.easymock.samples.ExampleTest.addAndChangeDocument":288,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":257,"org.easymock.tests.CapturesMatcherTest.test":70,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":208,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":39,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":109,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":314,"org.easymock.tests2.CompareToTest.testGreateThan":78,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":301,"org.easymock.tests2.UsageTest.resumeIfFailure":103,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":188,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":197,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":182,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":189,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":330,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":238,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":143}}]

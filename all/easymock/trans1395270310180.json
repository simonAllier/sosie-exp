[{"position":"org.easymock.internal.matchers.Equals:53","failures":[0,1,2],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"failures":[3,4,5],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[6,7,8,9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:85","failures":[12,13,5,14],"status":-1,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.RecordState:314","failures":[15,16,17,18],"status":-1,"binaryOperator":"java.lang.Throwable instanceof java.lang.RuntimeException","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[94,95],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[53,54,56,59,60,96,19,20,8,11,97,26,27,98],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"failures":[99,100],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Matches:40","failures":[101],"status":-1,"binaryOperator":"(\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[102],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[103,104,105,106,107,108],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"parameterType","type":"parameterType"}},{"position":"org.easymock.internal.MockBuilder:210","failures":[109,110,111,112,113,108,114,114,115,115],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[116,117],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[109,118,51],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"equalsMethod"}},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:720","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[119],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[37,120,121,38,122,123,39,124,125,40,126,41,127,42,43,128,129,44,130,131,45,132,133,46,47,134,135,48,136,137,138,49,50,109,51,52,53,54,55,56,139,57,110,58,59,140,141,60,61,62,142,63,64,143,144,145,146,147,148,149,150,151,112,152,153,154,155,156,157,113,108,158,65,66,159,67,68,69,70,71,160,72,73,74,75,76,77,78,79,80,161,162,81,82,83,163,164,165,84,85,86,87,88,89,90,91,92,93,166,114,114,115,115],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"m":"result","methodName":"name"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:67","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"failures":[167,168,169],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[119,170,171,172],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[110,173,174,175,114,115],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs","constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"failures":[176,177,142,63,64,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,21,193,194,195,22,23,196,24,197,198,25,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[216,217,218],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[219],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[109,118,51],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[119,170,171,172],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[220,176,221,222,223,0,224,225,226,227,228,229,230,53,140,60,231,232,233,234,19,20,145,152,153,155,219,235,186,8,236,2,237,238,99,239,11,240,26,27,212,241,242,243,244,245],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[109,139,143,144,145,146,148,149,150,151,152,153,154,155,159,161,162,166],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.InstanceOf:40","failures":[],"status":0,"binaryOperator":"(\"isA(\" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[60],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[37,120,38,122,39,124,40,41,127,42,43,128,44,130,131,45,133,46,47,134,135,48,136,49,50,51,52,53,54,55,56,139,57,58,59,140,141,60,61,62,142,63,64,143,145,146,147,148,149,150,151,152,153,155,158,65,66,159,67,68,69,70,71,72,73,74,75,76,77,78,79,80,161,162,81,82,83,163,164,165,84,85,86,87,88,89,90,91,92,93,166],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":3,"org.easymock.tests2.UsageTest.argumentsOrdered":224,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":186,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":183,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":223,"org.easymock.tests2.StubTest.stubWithReturnValue":179,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":103,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":34,"org.easymock.tests2.SerializationTest.testAllMockedMethod":51,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":181,"org.easymock.tests.MockingTest.testPartialClassMocking":163,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":7,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":158,"org.easymock.tests.MockClassControlTest.testToString":74,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":129,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":102,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":127,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":189,"org.easymock.tests.UsageExpectAndThrowTest.object":196,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":104,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":119,"org.easymock.tests2.UsageTest.wrongArguments":221,"org.easymock.tests.UsageStrictMockTest.range":26,"org.easymock.samples.ConstructorCalledMockTest.testTax":114,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":37,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":162,"org.easymock.tests2.UsageConstraintsTest.testNull":12,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":54,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":24,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":230,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":79,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":150,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":203,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":39,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":9,"org.easymock.tests.UsageUnorderedTest.message":99,"org.easymock.tests.UsageVerifyTest.twoReturns":241,"org.easymock.tests.UsageTest.argumentsOrdered":237,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":46,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":92,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":143,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":215,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":149,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":16,"org.easymock.tests.UsageExpectAndThrowTest.longType":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":182,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":89,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":234,"org.easymock.tests2.SerializationTest.testClass":109,"org.easymock.tests.LimitationsTest.mockNativeMethod":70,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":159,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":13,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":59,"org.easymock.tests2.MockedExceptionTest.testMockedException":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":41,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":187,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":30,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":21,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":165,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":52,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":151,"org.easymock.tests.MockingTest.testNicePartialClassMocking":164,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":199,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":56,"org.easymock.tests.LimitationsTest.mockFinalMethod":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":184,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":4,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":123,"org.easymock.tests.MockingTest.testTwoMocks":83,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":198,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":22,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":0,"org.easymock.tests.UsageThrowableTest.throwError":204,"org.easymock.tests.UsageStrictMockTest.differentMethods":27,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":87,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":219,"org.easymock.tests2.MockBuilderTest.testCreateMockString":155,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":42,"org.easymock.tests.UsageExpectAndThrowTest.floatType":191,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":125,"org.easymock.tests.UsageVerifyTest.twoThrows":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":133,"org.easymock.samples.PartialClassMockTest.testGetArea":166,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":141,"org.easymock.tests2.UsageTest.niceToStrict":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":44,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":160,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":190,"org.easymock.tests.LimitationsTest.privateConstructor":69,"org.easymock.tests2.UsageConstraintsTest.testNotNull":14,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":210,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":142,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":218,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":148,"org.easymock.tests2.MockBuilderTest.testCreateMock":152,"org.easymock.tests.UsageVarargTest.differentLength":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":134,"org.easymock.tests2.CallbackTest.callback":220,"org.easymock.tests2.UsageConstraintsTest.equals":1,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":110,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":23,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":6,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":228,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":18,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":132,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":213,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":170,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":35,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":38,"org.easymock.tests.UsageThrowableTest.throwCheckedException":207,"org.easymock.tests.MockClassControlTest.testEquals":78,"org.easymock.tests2.EasyMockSupportClassTest.testAll":40,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":66,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":201,"org.easymock.tests.MockingTest.testStrictClassMocking":81,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":10,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":169,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":122,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":188,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":121,"org.easymock.tests2.CompareToTest.testGreateOrEqual":172,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":101,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":106,"org.easymock.samples.BasicClassMockTest.testPrintContent":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":137,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":209,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":233,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":185,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":97,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":107,"org.easymock.tests2.UsageConstraintsTest.greaterThan":116,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":126,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":60,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":91,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":61,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":113,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":139,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":115,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":80,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":176,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":49,"org.easymock.tests2.SerializationTest.test":118,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":112,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":86,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":180,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":43,"org.easymock.tests.GenericTest.testPackageScope":65,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":29,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":153,"org.easymock.tests.GenericTest.testBridgedEquals":67,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":243,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":202,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":154,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":200,"org.easymock.tests2.UsageStrictMockTest.differentMethods":20,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":175,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":15,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":58,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":32,"org.easymock.tests.UsageCallCountTest.tooManyCalls":244,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":135,"org.easymock.tests2.MockedExceptionTest.testRealException":178,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":33,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":193,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":96,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":208,"org.easymock.tests.MockingTest.testNiceClassMocking":84,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":120,"org.easymock.tests.MockingTest.testClassMocking":82,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":144,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":64,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":211,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":147,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":217,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":55,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":239,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":50,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":88,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":5,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":100,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":57,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":145,"org.easymock.tests2.UsageStrictMockTest.range":19,"org.easymock.tests2.UsageConstraintsTest.lessThan":171,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":156,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":105,"org.easymock.tests.UsageTest.exactCallCountByLastCall":238,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":130,"org.easymock.tests.UsageRangeTest.combination":245,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":108,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":53,"org.easymock.tests.UsageTest.wrongArguments":236,"org.easymock.tests2.MockBuilderTest.testWithConstructor":173,"org.easymock.tests.MockClassControlTest.testHashCode":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":128,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":131,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":167,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":90,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":17,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":242,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":177,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":216,"org.easymock.tests.DefaultClassInstantiatorTest.object":85,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":146,"org.easymock.tests.UsageTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":45,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":206,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":11,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":174,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":36,"org.easymock.tests2.CaptureTest.testCapture":94,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":240,"org.easymock.tests2.UsageConstraintsTest.constraints":231,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":76,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":140,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":194,"org.easymock.tests.CapturesMatcherTest.test":95,"org.easymock.tests.UsageStrictMockTest.testVerify":98,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":136,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":168,"org.easymock.tests2.CompareToTest.testGreateThan":117,"org.easymock.tests2.UsageTest.resumeIfFailure":225,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":157,"org.easymock.tests.LimitationsTest.abstractClass":68,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":161,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":229}}]

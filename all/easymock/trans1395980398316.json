[{"failures":[0],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer throwing \" + java.lang.Throwable","position":"org.easymock.internal.Result:51","type":"CtReturnImpl"},"status":-1},{"failures":[1],"variableMapping":{"genericType":"genericType"},"name":"replace","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"status":-1},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1832","type":"mutation","return":"return 0","status":0},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","position":"org.easymock.internal.RecordState:45","type":"CtInvocationImpl"},"status":-1},{"failures":[29,30,31],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","position":"org.easymock.internal.ClassInstantiatorFactory:48","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","position":"org.easymock.internal.MockBuilder:79","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:420","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.IMocksControl.replay()","position":"org.easymock.EasyMockSupport:542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:284","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1673","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:121","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","position":"org.easymock.internal.RecordState:220","type":"CtIfImpl"},"status":-2},{"failures":[32,33],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:318","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","position":"org.easymock.internal.ArgumentToString:67","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.SecurityException java.lang.SecurityException","position":"org.easymock.internal.Injector:208","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.JavaProxyFactory()","position":"org.easymock.internal.MocksControl:35","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.AndroidSupport:28","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:241","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:103","type":"CtReturnImpl"},"status":0},{"failures":[34],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","position":"org.easymock.internal.ArgumentToString:83","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","position":"org.easymock.internal.Injector:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        return true;\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        return true;\n    } \n}","position":"org.easymock.internal.Results:50","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n}","position":"org.easymock.internal.Results:65","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:666","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","position":"org.easymock.internal.RecordState:321","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","position":"org.easymock.internal.EasyMockProperties:119","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","position":"org.easymock.internal.EasyMockProperties:89","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"type":"org.easymock.MockType.DEFAULT"},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:509","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:959","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods()","position":"org.easymock.internal.ReflectionUtils:94","type":"CtLocalVariableImpl"},"status":-2},{"failures":[2,4,35,36,37,16,18,38,39,40,41,42],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper","position":"org.easymock.internal.MockInvocationHandler:45","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n        boolean = false;\n        break;\n    } \n}","position":"org.easymock.internal.MocksBehavior:154","type":"CtForEachImpl"},"status":-1},{"failures":[3,4,43,44,45,46,17,18,40,41,47,48,49,50],"variableMapping":{"result":"errorMessage","i":"matches"},"name":"replace","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","position":"org.easymock.internal.MethodSerializationWrapper:58","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:57","type":"CtIfImpl"},"status":-2},{"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63],"variableMapping":{"values":"values"},"name":"replace","transplant":{"sourceCode":"this.java.util.List<T>.clear()","position":"org.easymock.Capture:60","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","position":"org.easymock.internal.BridgeMethodResolver:353","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((T)(net.sf.cglib.proxy.Factory))","position":"org.easymock.internal.ClassProxyFactory:247","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier())","position":"org.easymock.internal.Injector:163","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"status":-2},{"failures":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,102,103,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:56","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:865","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:987","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","position":"org.easymock.internal.MockBuilder:132","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","position":"org.easymock.internal.matchers.StartsWith:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]))","position":"org.easymock.internal.ClassProxyFactory:101","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()))","position":"org.easymock.internal.AndroidClassProxyFactory:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[126],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","position":"org.easymock.internal.ClassProxyFactory:183","type":"CtInvocationImpl"},"status":-2},{"failures":[80,85,87],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:92","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n    return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:67","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)))","position":"org.easymock.internal.ClassProxyFactory:227","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","position":"org.easymock.EasyMock:1847","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n        return false;\n    } \n}","position":"org.easymock.internal.UnorderedBehavior:74","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:185","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n    return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:88","type":"CtIfImpl"},"status":-2},{"failures":[29,127,30],"variableMapping":{"data":"data"},"name":"add","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:642","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Number.shortValue()","position":"org.easymock.internal.RecordState:197","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.floatValue()","position":"org.easymock.internal.RecordState:203","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Equals:44","type":"CtInvocationImpl"},"status":-2},{"failures":[128],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int < 0","position":"org.easymock.LogicalOperator:27","type":"CtReturnImpl"},"status":-1},{"failures":[2,4,129,130,131,132,36,16,18,39,40,41,42],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0)","position":"org.easymock.internal.MocksBehavior:169","type":"CtInvocationImpl"},"status":-1},{"failures":[133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"failMessage","key":"failMessage"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","position":"org.easymock.internal.RecordState:233","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","position":"org.easymock.internal.MocksControl:160","type":"CtThrowImpl"},"status":-2},{"failures":[40],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"status":-1},{"failures":[125],"variableMapping":{"result":"genericType","bound":"genericType"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:260","type":"CtAssignmentImpl"},"status":-1},{"failures":[63],"variableMapping":{"values":"values"},"name":"replace","transplant":{"sourceCode":"this.java.util.List<T>.clear()","position":"org.easymock.Capture:60","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"status":-1},{"failures":[155,61],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"status":-1},{"failures":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,102,103,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ObjectMethodsFilter:55","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.IllegalArgumentException java.lang.IllegalArgumentException","position":"org.easymock.internal.Result:85","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1013","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:121","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"status":-2},{"failures":[156,157,158,102,103],"binaryOperator":"(org.easymock.ConstructorArgs) != null","name":"negateConditional","position":"org.easymock.internal.MockBuilder:163","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1803","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.io.IOException java.io.IOException","position":"org.easymock.internal.AndroidClassProxyFactory:57","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Injection org.easymock.internal.Injection = org.easymock.internal.Injector.org.easymock.internal.Injector.findUniqueAssignable(java.util.List<org.easymock.internal.Injection>, org.easymock.internal.InjectionTarget)","position":"org.easymock.internal.Injector:188","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.InjectionTarget:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.InjectionTarget(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:219","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.IAnswer<?>.answer()","position":"org.easymock.internal.Result:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[])","position":"org.easymock.internal.DefaultClassInstantiator:55","type":"CtReturnImpl"},"status":-2},{"failures":[3,17,40,41,159],"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","position":"org.easymock.internal.ErrorMessage:51","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","position":"org.easymock.internal.RecordState:172","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * ((int - int) + 1)))","position":"org.easymock.internal.MocksBehavior:119","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.MocksControl:310","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1928","type":"CtReturnImpl"},"status":-2},{"failures":[1],"variableMapping":{"method":"bridgeMethod"},"name":"replace","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:67","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:538","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.AndroidSupport.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"status":-2},{"failures":[160,161,162,163],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:193","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:866","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return !(org.easymock.IArgumentMatcher.matches(java.lang.Object))","position":"org.easymock.internal.matchers.Not:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:83","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","position":"org.easymock.internal.EasyMockProperties:89","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ArgumentToString:69","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"status":-2},{"failures":[128,74,164],"variableMapping":{"this":"this","value":"state"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","position":"org.easymock.EasyMock:1470","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","position":"org.easymock.EasyMock:2096","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","position":"org.easymock.EasyMock:557","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","position":"org.easymock.internal.matchers.EndsWith:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","position":"org.easymock.internal.InjectionPlan:32","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","position":"org.easymock.internal.LastControl:61","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Results org.easymock.internal.Results = new org.easymock.internal.Results()","position":"org.easymock.internal.UnorderedBehavior:44","type":"CtLocalVariableImpl"},"status":-2},{"failures":[165,166,167,168,64,65,66,67,68,169,170,171,172,173,174,69,175,70,176,177,155,178,179,180,181,182,183,184,185,186,187,188,189,190,128,191,192,193,194,195,196,197,198,199,200,201,202,2,203,3,4,35,71,72,204,73,74,75,76,77,78,79,80,81,205,206,207,208,83,209,210,211,212,213,214,215,216,217,218,219,220,221,222,52,223,53,54,55,56,57,58,224,59,61,62,225,63,226,227,228,229,230,231,232,5,233,234,235,236,6,7,84,85,87,88,89,90,91,92,93,94,95,96,97,237,98,99,238,239,36,43,240,164,241,242,243,44,45,244,245,100,101,246,247,248,249,250,251,252,102,103,104,253,254,162,163,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,8,272,273,274,275,276,9,10,11,277,278,279,280,281,282,107,283,284,285,286,287,287,32,288,289,33,290,291,292,293,294,295,296,109,110,111,297,298,299,300,301,302,303,304,305,14,306,307,308,15,309,310,311,312,112,313,314,46,16,315,17,18,38,316,317,19,318,319,320,321,39,40,41,20,322,323,324,325,326,327,328,329,21,330,331,332,333,334,22,23,24,335,336,337,338,339,340,47,31,42,341,48,342,343,49,50,344,25,27,28,122,123,345,346,347,348,349,350,351,352,353,354,355],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","position":"org.easymock.internal.LastControl:125","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters()","position":"org.easymock.internal.BridgeMethodResolver:320","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.Invocation:135","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Proxy.java.lang.reflect.Proxy.isProxyClass(V.getClass())) {\n    return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]));\n} ","position":"org.easymock.internal.MocksControl:182","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:141","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:144","type":"CtLocalVariableImpl"},"status":-2},{"failures":[198],"variableMapping":{"actual":"actual","expected":"actual"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:415","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"add","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:153","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1234","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:280","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.ClassProxyFactory:196","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:321","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int));\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:342","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.junit.runners.model.Statement.evaluate()","position":"org.easymock.internal.EasyMockStatement:43","type":"CtInvocationImpl"},"status":-2},{"failures":[3,43,44,45,286,356,46,17,40,41,47,341,48,49,50],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","position":"org.easymock.internal.ArgumentToString:93","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:100","type":"CtInvocationImpl"},"status":0},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":33,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":77,"org.easymock.tests2.MockedExceptionTest.testRealException":209,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":315,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":314,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":336,"org.easymock.tests.UsageVarargTest.varargIntAccepted":347,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":320,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":176,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":68,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":116,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":163,"org.easymock.tests2.UsageConstraintsTest.testContains":187,"org.easymock.tests.UsageCallCountTest.tooManyCalls":261,"org.easymock.tests2.UsageConstraintsTest.testFind":179,"org.easymock.tests2.StubTest.stubWithReturnValue":170,"org.easymock.tests.UsageVarargTest.allKinds":355,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":56,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":324,"org.easymock.tests2.CaptureTest.testCaptureAll":223,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":297,"org.easymock.samples.ExampleTest.addAndChangeDocument":252,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":84,"org.easymock.tests.UsageVarargTest.varargCharAccepted":348,"org.easymock.tests2.CaptureTest.testCaptureFromStub":62,"org.easymock.tests.UsageVerifyTest.twoThrows":40,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":309,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":349,"org.easymock.tests2.DelegateToTest.testReturnException":171,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":164,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":128,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":221,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":1,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":202,"org.easymock.tests2.CaptureTest.testAnd":52,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":332,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":59,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":284,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":23,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":105,"org.easymock.tests2.UsageConstraintsTest.testMatches":190,"org.easymock.tests.MockClassControlTest.testToString":115,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":143,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":13,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":144,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":94,"org.easymock.tests2.UsageConstraintsTest.testNull":180,"org.easymock.tests2.EasyMockSupportClassTest.testAll":64,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":215,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":11,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":337,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":236,"org.easymock.tests.UsageThrowableTest.throwError":32,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":107,"org.easymock.tests2.UsageConstraintsTest.greaterThan":191,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":345,"org.easymock.samples.SupportTest.addDocument":253,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":312,"org.easymock.tests2.StubTest.stub":169,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":161,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":302,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":153,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":193,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":218,"org.easymock.tests.UsageExpectAndReturnTest.object":276,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":282,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":154,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":354,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":35,"org.easymock.tests.UsageExpectAndThrowTest.object":334,"org.easymock.tests2.DelegateToTest.testWrongClass":173,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":229,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":135,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":14,"org.easymock.tests2.UsageTest.moreThanOneArgument":36,"org.easymock.tests.UsageVarargTest.varargByteAccepted":353,"org.easymock.tests.MockClassControlTest.testEquals":119,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":331,"org.easymock.tests.UsageTest.wrongArguments":48,"org.easymock.samples.ExampleTest.voteAgainstRemoval":249,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":265,"org.easymock.tests.CapturesMatcherTest.test":287,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":292,"org.easymock.tests.UsageVarargTest.varargShortAccepted":351,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":22,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":126,"org.easymock.tests2.UsageTest.defaultResetToNice":243,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":301,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":162,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":230,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":90,"org.easymock.tests2.MockBuilderTest.testCreateMock":91,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":113,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":231,"org.easymock.tests2.SerializationTest.testAllMockedMethod":70,"org.easymock.tests2.NameTest.nameForMocksControl":132,"org.easymock.samples.ExampleTest.voteAgainstRemovals":246,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":201,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":27,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":311,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":294,"org.easymock.tests2.CaptureTest.testCapture1_2446744":55,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":245,"org.easymock.tests.LimitationsTest.mockNativeMethod":112,"org.easymock.tests2.DelegateToTest.testStubDelegate":172,"org.easymock.tests.UsageUnorderedTest.message":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":147,"org.easymock.samples.ExampleTest.answerVsDelegate":247,"org.easymock.samples.ExampleTest.voteForRemoval":248,"org.easymock.tests.UsageCallCountTest.tooFewCalls":256,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":275,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":166,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":258,"org.easymock.tests.UsageVerifyTest.twoReturns":41,"org.easymock.tests2.DependencyTest.testInterfaceMocking":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":146,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":271,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":333,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":37,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":148,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":305,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":213,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":235,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":183,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":20,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":38,"org.easymock.tests.MockingTest.testTwoMocks":108,"org.easymock.tests2.CaptureTest.testCaptureRightOne":61,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":272,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":255,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":322,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":207,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":75,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":26,"org.easymock.tests2.UsageConstraintsTest.cmpTo":186,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":9,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":29,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":96,"org.easymock.tests2.MockedExceptionTest.testMockedException":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":151,"org.easymock.tests.UsageThrowableTest.throwCheckedException":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":19,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":197,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":340,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":39,"org.easymock.samples.PartialClassMockTest.testGetArea":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":140,"org.easymock.samples.ExampleTest.voteForRemovals":251,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":289,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":296,"org.easymock.samples.ConstructorCalledMockTest.testTax":102,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":189,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":285,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":306,"org.easymock.tests2.UsageTest.argumentsOrdered":45,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":74,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":31,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":168,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":8,"org.easymock.tests2.CaptureTest.testCaptureMultiple":51,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":133,"org.easymock.tests2.AnswerTest.answer":165,"org.easymock.tests.MockingTest.testNicePartialClassMocking":110,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":16,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":34,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":134,"org.easymock.tests2.UsageConstraintsTest.any":185,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":274,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":303,"org.easymock.tests2.CaptureTest.testCapture":60,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":137,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":319,"org.easymock.tests.ResultTest.createThrowResultToString":0,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":220,"org.easymock.tests.UsageExpectAndThrowTest.longType":328,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":206,"org.easymock.tests2.CallbackTest.callback":232,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":66,"org.easymock.tests2.NameTest.nameForMock":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":141,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":158,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":217,"org.easymock.tests.UsageTest.argumentsOrdered":50,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":89,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":178,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":188,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":281,"org.easymock.tests2.MockBuilderTest.testCreateMockString":93,"org.easymock.tests2.NameTest.nameForStrictMock":130,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":310,"org.easymock.tests2.CaptureTest.testCaptureNone":224,"org.easymock.tests2.SerializationTest.test":175,"org.easymock.tests.UsageExpectAndReturnTest.longType":270,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":57,"org.easymock.tests2.SerializationTest.testClass":69,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":152,"org.easymock.tests2.CaptureTest.testCaptureFirst":63,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":121,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":194,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":100,"org.easymock.tests2.EasyMockSupportTest.testVerify":222,"org.easymock.tests2.UsageTest.niceToStrict":240,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":304,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":266,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":88,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":313,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":21,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":196,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":238,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":24,"org.easymock.tests2.UsageTest.strictResetToDefault":239,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":80,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":92,"org.easymock.tests.GenericTest.testBridgedEquals":125,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":280,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":356,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":321,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":325,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":184,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":237,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":273,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":5,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":76,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":73,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":192,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":346,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":308,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":111,"org.easymock.tests2.UsageConstraintsTest.testOr":182,"org.easymock.tests2.DelegateToTest.testDelegate":174,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":228,"org.easymock.tests2.UsageConstraintsTest.testNotNull":198,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":203,"org.easymock.tests.MockClassControlTest.testHashCode":118,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":226,"org.easymock.tests2.CaptureTest.testCapture_2617107":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":149,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":10,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":106,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":293,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":298,"org.easymock.tests2.ThreadingTest.testThreadSafe":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":150,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":242,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":127,"org.easymock.tests.UsageThrowableTest.noUpperLimit":288,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":317,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":95,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":97,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":219,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":211,"org.easymock.tests.UsageExpectAndReturnTest.floatType":269,"org.easymock.tests2.UsageTest.wrongArguments":43,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":234,"org.easymock.tests2.UsageConstraintsTest.testSame":181,"org.easymock.tests2.UsageTest.resumeIfFailure":244,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":117,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":98,"org.easymock.tests.UsageOverloadedMethodTest.overloading":295,"org.easymock.tests.UsageRangeTest.combination":25,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":156,"org.easymock.samples.SupportTest.voteForRemovals":254,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":291,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":103,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":199,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":123,"org.easymock.tests.UsageTest.openCallCountByLastCall":342,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":330,"org.easymock.tests2.NameTest.nameForNiceMock":131,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":28,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":195,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":316,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":2,"org.easymock.tests2.CaptureTest.testPrimitive":54,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":204,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":277,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":335,"org.easymock.samples.BasicClassMockTest.testPrintContent":101,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":323,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":299,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":159,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":78,"org.easymock.tests.UsageExpectAndThrowTest.floatType":327,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":72,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":205,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":260,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":278,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":160,"org.easymock.tests2.UsageStrictMockTest.differentMethods":4,"org.easymock.tests.UsageTest.exactCallCountByLastCall":344,"org.easymock.tests2.AnswerTest.stubAnswer":167,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":212,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":124,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":216,"org.easymock.tests2.CaptureTest.testCaptureLast":58,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":259,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":326,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":257,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":7,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":65,"org.easymock.tests.UsageStrictMockTest.range":17,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":343,"org.easymock.tests.UsageTest.unexpectedCallWithArray":341,"org.easymock.tests.MockingTest.testPartialClassMocking":109,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":136,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":44,"org.easymock.tests2.UsageConstraintsTest.constraints":155,"org.easymock.samples.ExampleTest.addDocument":250,"org.easymock.tests2.UsageConstraintsTest.lessThan":200,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":286,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":233,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":49,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":283,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":318,"org.easymock.tests.UsageVarargTest.varargLongAccepted":352,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":30,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":79,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":145,"org.easymock.tests2.MockBuilderTest.testWithConstructor":157,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":46,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":67,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":99,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":86,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":264,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":138,"org.easymock.tests.UsageTest.moreThanOneArgument":42,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":120,"org.easymock.tests2.UsageTest.openCallCountByLastCall":241,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":300,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":85,"org.easymock.tests.UsageStrictMockTest.differentMethods":18,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":214,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":114,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":177,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":142,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":329,"org.easymock.tests.UsageVarargTest.differentLength":350,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":12,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":267,"org.easymock.tests2.CaptureTest.testCapture2_2446744":225,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":307,"org.easymock.tests.GenericTest.testPackageScope":122}}]

[{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[262,263,264,265,266,267,268],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[269,270],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[271],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[272],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.RecordState:85","failures":[4,5,273,6,7,8,9,10,11,274,12,13,14,275,275,276,276,15,16,277,278,279,280,281,18,19,20,22,23,0,1,2,282,24,25,26,27,28,29,30,31,32,33,34,283,35,284,285,36,286,287,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,288,289,290,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,291,292,293,294,295,114,296,115,116,297,298,299,300,301,302,303,304,305,306,307,308,309,310,117,118,119,120,121,122,123,124,125,126,127,128,129,311,312,313,314,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,315,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,316,317,318,319,320,321,322,323,324,195,196,197,325,326,327,328,329,330,331,332,333,198,199,200,201,202,208,209,210,211,212,213,214,215,216,334,335,336,337,338,339,340,341,342,343,344,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,345,346,347,240,241,242,244,245,247,348,248,249,250,251,252,253,349,350,351,271,352,353,354,355,356,357,358,359,254,255,360,256,257,258,259,260,261],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[361,362,159,363,364,360],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:172","failures":[115,365],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[30,127,162,260],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:190","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:345","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[57,60,61,366],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[4,5,273,6,7,8,9,10,11,274,12,13,14,275,276,15,16,367,277,278,279,280,281,17,18,19,20,21,22,23,0,1,2,282,262,368,369,370,371,269,372,24,373,374,375,376,377,378,379,380,381,270,382,25,383,384,385,386,387,388,26,27,28,29,30,31,32,389,390,33,34,283,35,284,285,36,286,287,391,37,392,393,38,39,40,41,394,395,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,288,289,290,70,396,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,397,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,291,292,293,294,398,295,399,272,400,114,296,115,263,116,401,402,297,298,403,299,300,301,302,303,404,304,305,306,405,406,407,408,307,409,410,308,411,412,413,414,415,416,417,418,419,309,420,421,422,423,424,310,425,426,427,428,429,430,431,432,433,117,118,119,120,121,122,123,124,125,126,127,128,129,311,312,313,314,130,434,435,436,437,438,439,366,440,441,442,443,444,445,446,447,448,131,449,450,451,452,453,132,454,455,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,456,149,150,151,152,153,154,155,156,457,458,459,460,461,365,462,463,157,158,159,160,161,162,163,164,165,166,464,167,168,465,466,169,170,171,315,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,316,317,318,319,467,192,468,320,321,322,323,324,193,194,469,195,196,197,325,326,327,328,329,330,331,332,470,333,471,472,473,474,475,476,477,198,199,200,201,202,203,204,205,478,206,207,208,209,210,211,212,479,480,213,481,214,215,216,334,335,336,337,338,339,340,341,482,342,343,344,483,484,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,485,486,487,488,345,346,489,347,490,491,492,237,238,239,240,241,493,494,495,496,497,242,243,244,245,246,247,348,248,249,250,251,252,253,349,350,351,271,352,353,354,355,356,357,358,359,254,255,360,256,257,258,259,260,261],"status":-1,"binaryOperator":"(int <= int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Null:35","failures":[65,90,108,156],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[471,475],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:162","sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[7,23,56,59,60,61,70,71,242],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[18,20,56,242,244],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[112,498],"status":-1,"binaryOperator":"int < 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:693","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[499,17,500,63],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[0,282,262,263,402,264,265,266,501],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[193],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[394,64,271],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.LastControl:95","failures":[42,44,52,87,88,90,92,93,95,105,110],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[325,330,343],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[4,5,273,6,7,8,9,10,11,12,13,14,275,276,15,16,277,278,279,280,18,19,22,23,0,1,2,282,24,25,27,28,31,32,33,34,283,284,285,36,286,37,38,40,42,43,44,45,47,48,49,50,51,52,55,56,59,60,61,62,63,66,67,68,69,288,289,290,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,291,292,293,294,114,296,115,116,300,301,302,303,304,305,306,307,308,309,310,118,119,121,122,125,128,311,312,313,314,134,135,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,158,160,163,164,165,167,168,170,171,315,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,316,317,318,319,320,321,322,323,324,469,195,196,197,326,198,199,202,208,209,210,211,212,213,214,216,334,335,336,337,338,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,345,346,347,240,241,247,248,249,250,251,252,253,255],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.MockBuilder:159","failures":[275,276,392,398,502,503,403],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:299","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[43,44,46,47,48,49,50,55,102,108],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:508","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:78","sourceCode":"org.easymock.internal.ExpectedInvocation = new org.easymock.internal.ExpectedInvocation(org.easymock.internal.Invocation , java.util.List<org.easymock.IArgumentMatcher>)","type":"CtAssignmentImpl"},"failures":[4,5,273,6,7,8,9,10,11,12,13,14,275,275,276,276,15,16,277,278,279,280,17,18,19,20,21,22,23,0,1,2,282,24,25,26,27,28,29,30,31,32,33,34,283,35,284,285,36,286,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,291,292,293,295,114,115,116,298,300,301,302,303,304,305,306,307,308,309,310,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,465,169,170,171,315,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,316,317,318,319,192,193,194,195,196,197,198,199,200,201,202,203,204,205,478,206,207,208,209,210,211,212,213,214,215,216,335,336,337,338,340,341,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,345,346,347,237,238,239,240,241,494,495,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"failures":[474,504,505],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:78","sourceCode":"org.easymock.internal.ExpectedInvocation = new org.easymock.internal.ExpectedInvocation(org.easymock.internal.Invocation , java.util.List<org.easymock.IArgumentMatcher>)","type":"CtAssignmentImpl"},"failures":[4,5,273,6,7,8,9,10,11,12,13,14,275,275,276,276,15,16,277,278,279,280,17,18,19,20,21,22,23,0,1,2,282,24,25,26,27,28,29,30,31,32,33,34,283,35,284,285,36,286,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,291,292,293,295,114,115,116,298,300,301,302,303,304,305,306,307,308,309,310,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,465,169,170,171,315,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,316,317,318,319,192,193,194,195,196,197,198,199,200,201,202,203,204,205,478,206,207,208,209,210,211,212,213,214,215,216,335,336,337,338,340,341,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,488,345,346,347,237,238,239,240,241,493,494,495,496,497,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[369,374,379,384],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[42,44,45,46,47,48,49,51,506,52,53,55],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[59,88,93,156,199],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"expected"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":88,"org.easymock.tests2.UsageTest.argumentsOrdered":127,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":254,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":82,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":383,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":443,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":122,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":4,"org.easymock.tests2.DelegateToTest.testReturnException":18,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":249,"org.easymock.tests.MockingTest.testPartialClassMocking":345,"org.easymock.tests.MockClassControlTest.testToString":327,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":367,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":192,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":451,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":414,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":217,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":308,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":34,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":264,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":94,"org.easymock.tests2.UsageTest.wrongArguments":120,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":198,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":378,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":313,"org.easymock.samples.ExampleTest.answerVsDelegate":7,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":365,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":491,"org.easymock.tests2.UsageConstraintsTest.testNull":90,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":285,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":81,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":332,"org.easymock.tests2.CaptureTest.testPrimitive":45,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":202,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":236,"org.easymock.tests.UsageTest.moreThanOneArgument":255,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":284,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":143,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":493,"org.easymock.tests.UsageTest.argumentsOrdered":260,"org.easymock.tests.UsageVarargTest.varargIntAccepted":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":448,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":208,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":268,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":294,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":429,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":387,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":436,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":212,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":24,"org.easymock.tests.ReplayStateInvalidUsageTest.times":356,"org.easymock.tests2.DependencyTest.testClassMocking":389,"org.easymock.tests2.AnswerTest.answer":56,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":449,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":290,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":459,"org.easymock.tests2.CaptureTest.testAnd":42,"org.easymock.tests2.UsageTest.strictResetToDefault":118,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":38,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":272,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":142,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":76,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":318,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":497,"org.easymock.tests2.DelegateToTest.testDelegate":22,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":232,"org.easymock.tests.LimitationsTest.mockFinalMethod":481,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":252,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":324,"org.easymock.tests2.DependencyTest.testClassMockingSupport":390,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":193,"org.easymock.tests2.CaptureTest.testCapture1_2446744":46,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":391,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":230,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":288,"org.easymock.tests.UsageThrowableTest.throwError":133,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":351,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":461,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":455,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":388,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":426,"org.easymock.samples.PartialClassMockTest.testGetArea":273,"org.easymock.tests.MockingTest.testInterfaceMocking":489,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":271,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":209,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":206,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":415,"org.easymock.tests2.UsageTest.niceToStrict":121,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":218,"org.easymock.tests2.ThreadingTest.testChangeDefault":500,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":434,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":114,"org.easymock.tests2.MockBuilderTest.testCreateMock":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":422,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":375,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":226,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":361,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":77,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":458,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":239,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":216,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":311,"org.easymock.tests.UsageOverloadedMethodTest.overloading":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":419,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":100,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":245,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":183,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":169,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":504,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":99,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":51,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":456,"org.easymock.tests2.EasyMockSupportClassTest.testAll":307,"org.easymock.tests.MockClassControlTest.testEquals":331,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":168,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":234,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":503,"org.easymock.tests2.CaptureTest.testCaptureAll":43,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":289,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":322,"org.easymock.tests.MockNameTest.defaultName":485,"org.easymock.tests2.UsageConstraintsTest.testMatches":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":144,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":349,"org.easymock.samples.ExampleTest.voteForRemovals":11,"org.easymock.tests.UsageVarargTest.allKinds":156,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":195,"org.easymock.samples.BasicClassMockTest.testPrintContent":16,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":323,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":139,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":26,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":384,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":21,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":253,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":501,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":476,"org.easymock.tests2.UsageConstraintsTest.greaterThan":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":409,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":317,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":41,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":477,"org.easymock.samples.ExampleTest.voteForRemoval":8,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":394,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":63,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":462,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":430,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":287,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":117,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":315,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":440,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":74,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":407,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":248,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":17,"org.easymock.tests2.CaptureTest.testCaptureFirst":55,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":366,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":75,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":129,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":348,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":179,"org.easymock.tests2.UsageTest.moreThanOneArgument":119,"org.easymock.tests2.CaptureTest.testCapture2_2446744":54,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":450,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":298,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":155,"org.easymock.tests.GenericTest.testBridgedEquals":466,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":340,"org.easymock.tests.UsageExpectAndReturnTest.longType":175,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":72,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":320,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":235,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":130,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":108,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":233,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":141,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":204,"org.easymock.tests.UsageCallCountTest.tooManyCalls":341,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":423,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":180,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":377,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":222,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":138,"org.easymock.tests.MockingTest.testNiceClassMocking":492,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":301,"org.easymock.tests.MockingTest.testClassMocking":487,"org.easymock.tests2.UsageConstraintsTest.testContains":98,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":334,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":292,"org.easymock.tests2.UsageConstraintsTest.testFind":89,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":171,"org.easymock.tests.MockTypeTest.fromEasyMockClass":460,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":157,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":71,"org.easymock.tests.UsageExpectAndReturnTest.object":182,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":37,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":376,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":80,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":150,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":265,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":344,"org.easymock.tests.UsageTest.exactCallCountByLastCall":261,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":439,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":494,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":467,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":262,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":188,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":146,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":244,"org.easymock.tests.MockClassControlTest.testHashCode":330,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":380,"org.easymock.tests2.EasyMockSupportTest.testVerify":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":417,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":495,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":238,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":242,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":69,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":281,"org.easymock.tests.UsageVarargTest.varargCharAccepted":149,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":470,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":454,"org.easymock.tests2.UsageTest.openCallCountByLastCall":123,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":83,"org.easymock.tests.DefaultClassInstantiatorTest.object":333,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":237,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":418,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":224,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":136,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":269,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":379,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":39,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":329,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":223,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":189,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":310,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":328,"org.easymock.tests2.UsageTest.resumeIfFailure":128,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":457,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":428,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":251,"org.easymock.tests2.StubTest.stubWithReturnValue":68,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":263,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":181,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":109,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":131,"org.easymock.samples.SupportTest.voteForRemovals":14,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":362,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":464,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":270,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":229,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":3,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":132,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":57,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":468,"org.easymock.tests.UsageExpectAndThrowTest.object":227,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":106,"org.easymock.tests2.DelegateToTest.testWrongClass":20,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":240,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":241,"org.easymock.tests.UsageStrictMockTest.range":162,"org.easymock.samples.ConstructorCalledMockTest.testTax":275,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":432,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":79,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":300,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":228,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":406,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":259,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":358,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":312,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":363,"org.easymock.tests2.CaptureTest.testCaptureNone":50,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":207,"org.easymock.tests.UsageUnorderedTest.message":166,"org.easymock.tests.UsageVerifyTest.twoReturns":197,"org.easymock.tests.UsageVarargTest.varargByteAccepted":154,"org.easymock.tests2.ThreadingTest.testThreadSafe":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":420,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":338,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":483,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":15,"org.easymock.tests2.CaptureTest.testCapture_2617107":44,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":452,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":201,"org.easymock.tests2.UsageConstraintsTest.any":96,"org.easymock.tests2.StubTest.stub":67,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":355,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":453,"org.easymock.tests.UsageExpectAndThrowTest.longType":220,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":250,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":474,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":354,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":29,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":25,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests.LimitationsTest.mockNativeMethod":213,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":465,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":191,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":371,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":32,"org.easymock.tests2.NameTest.nameForMocksControl":280,"org.easymock.tests2.MockedExceptionTest.testMockedException":291,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":410,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":258,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":396,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":221,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":347,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":283,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":116,"org.easymock.tests.MockingTest.testNicePartialClassMocking":346,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":286,"org.easymock.tests2.CaptureTest.testCaptureLast":49,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":369,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":194,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":93,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":306,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":107,"org.easymock.tests.MockingTest.testTwoMocks":488,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":405,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":172,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":225,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":126,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":111,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":499,"org.easymock.samples.ExampleTest.removeNonExistingDocument":274,"org.easymock.tests.UsageStrictMockTest.differentMethods":163,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":352,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":374,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":381,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":472,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":64,"org.easymock.tests2.MockBuilderTest.testCreateMockString":299,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":411,"org.easymock.tests.UsageExpectAndThrowTest.floatType":219,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":408,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":59,"org.easymock.tests.UsageVerifyTest.twoThrows":196,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":368,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":309,"org.easymock.samples.ExampleTest.voteAgainstRemoval":9,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":478,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":444,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":40,"org.easymock.tests.LimitationsTest.privateConstructor":480,"org.easymock.tests2.UsageConstraintsTest.testNotNull":110,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":140,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":113,"org.easymock.tests2.UsageTest.defaultResetToNice":125,"org.easymock.samples.ExampleTest.voteAgainstRemovals":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":445,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":187,"org.easymock.tests.UsageVarargTest.differentLength":151,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":370,"org.easymock.tests2.CallbackTest.callback":23,"org.easymock.tests2.UsageConstraintsTest.equals":397,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":392,"org.easymock.tests.UsageTest.openCallCountByLastCall":257,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":85,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":200,"org.easymock.tests.UsageCallCountTest.tooFewCalls":336,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":303,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":314,"org.easymock.tests.UsageThrowableTest.throwCheckedException":137,"org.easymock.tests.MockingTest.testStrictClassMocking":486,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":364,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":215,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":305,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":302,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":373,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":357,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":304,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":61,"org.easymock.tests.ObjectMethodsTest.testHashCode":343,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":267,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":66,"org.easymock.tests2.NameTest.nameForNiceMock":279,"org.easymock.tests2.DependencyTest.testInterfaceMocking":33,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":266,"org.easymock.samples.ExampleTest.addDocument":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":421,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":425,"org.easymock.tests2.DelegateToTest.testStubDelegate":19,"org.easymock.tests2.AnswerTest.stubAnswer":60,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":160,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":401,"org.easymock.tests.UsageVarargTest.varargLongAccepted":153,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":164,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":442,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":190,"org.easymock.tests.UsageExpectAndReturnTest.floatType":174,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":282,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":276,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":386,"org.easymock.tests.UsageThrowableTest.noUpperLimit":134,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":104,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":246,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":86,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":427,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":47,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":505,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":471,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":173,"org.easymock.tests2.UsageConstraintsTest.testSame":91,"org.easymock.samples.SupportTest.addDocument":13,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":404,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":412,"org.easymock.tests.GenericTest.testPackageScope":167,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":438,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":385,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":490,"org.easymock.tests2.NameTest.nameForMock":277,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":184,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":403,"org.easymock.tests2.UsageStrictMockTest.differentMethods":31,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":393,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":176,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":231,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":482,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":319,"org.easymock.tests2.MockedExceptionTest.testRealException":293,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":447,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":433,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":446,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":28,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":199,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":359,"org.easymock.tests2.NameTest.nameForStrictMock":278,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":400,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":70,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":36,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":431,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":473,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":105,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":295,"org.easymock.tests2.UsageStrictMockTest.range":30,"org.easymock.tests2.UsageConstraintsTest.lessThan":112,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":441,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":416,"org.easymock.tests2.CaptureTest.testCaptureRightOne":52,"org.easymock.tests2.UsageConstraintsTest.testOr":92,"org.easymock.tests.UsageRangeTest.combination":316,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":35,"org.easymock.tests.UsageTest.wrongArguments":256,"org.easymock.tests2.MockBuilderTest.testWithConstructor":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":413,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":326,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":177,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":435,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":185,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":475,"org.easymock.tests.UsageVarargTest.varargShortAccepted":152,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":339,"org.easymock.tests2.UsageConstraintsTest.cmpTo":97,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":58,"org.easymock.tests2.CompareToTest.testLessThan":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":437,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":124,"org.easymock.tests2.CaptureTest.testCaptureFromStub":53,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":350,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":399,"org.easymock.tests.UsageTest.unexpectedCallWithArray":360,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":159,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":337,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":502,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":186,"org.easymock.tests2.CaptureTest.testCapture":506,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":161,"org.easymock.tests2.UsageConstraintsTest.constraints":87,"org.easymock.samples.ExampleTest.addAndChangeDocument":12,"org.easymock.tests.UsageStrictMockTest.testVerify":165,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":5,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":158,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":321,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":48,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":210,"org.easymock.tests.LimitationsTest.abstractClass":479,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":178,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":211,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":247,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":147,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":78}}]

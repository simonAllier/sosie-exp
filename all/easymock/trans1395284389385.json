[{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:156","sourceCode":"final java.lang.StackTraceElement[] java.lang.StackTraceElement[] = java.lang.Throwable.getStackTrace()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:49","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:71","sourceCode":"final java.lang.Exception java.lang.Exception","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[26],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"expected"}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[27,28],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[29],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:327","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[46,46,47,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,31,34,35,39,41,42,43,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,0,140,141,142,143,144,145,146,147,148,26,149,150,151,152,153,1,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[29],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[300,301,302],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[120,121,303,304],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:163","failures":[118,119],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[27,28],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[305,306,307,308,309,310,311,109,312,120],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[46,46,47,47,48,313,314,53,54,56,57,58,59,60,61,62,63,64,315,67,101,316,317,102,103,104,105,106,107,108,109,110,111,112,113,115,116,120,303,123,124,125,126,318,167,168,169,319,320,231,232,233,234,321,322,270,323,324,277],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[46,46,47,47,48,313,314,53,54,56,57,58,59,60,325,326,61,62,63,64,327,315,65,66,67,101,316,317,328,102,103,104,105,306,106,107,108,109,312,110,111,112,113,115,116,329,330,331,332,120,303,333,334,335,123,336,337,124,338,339,340,341,342,343,344,345,346,125,347,348,349,350,351,126,352,353,354,355,356,357,318,167,168,169,358,319,320,230,231,232,233,234,235,236,237,248,359,360,361,300,362,363,322,27,270,323,324,28,364,365,277,366],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[120,121,303,304],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:48","failures":[46,46,47,47,48,49,50,367,51,368,369,370,53,54,55,56,57,58,60,62,63,64,65,66,67,68,70,72,73,31,32,34,35,38,371,39,41,42,43,44,74,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,316,102,104,105,107,109,110,111,112,113,114,115,116,117,372,373,374,118,119,120,121,122,123,124,125,126,375,376,127,377,128,129,130,378,131,132,133,134,135,136,137,138,139,0,140,141,142,143,144,145,146,147,148,26,149,150,151,152,153,1,154,155,156,157,158,159,160,161,379,380,162,163,164,165,167,168,169,171,173,174,176,177,381,382,178,179,180,383,384,385,386,387,388,389,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,225,390,238,239,240,241,391,392,242,243,244,393,394,395,249,250,251,252,253,396,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,322,270,324,397,271,272,273,274,275,276,277,398,399,400,401,402,403,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[46,47,48,2,313,314,49,50,367,51,404,368,52,369,405,370,3,53,54,55,56,57,58,59,406,60,325,326,61,62,63,64,327,315,65,66,67,68,69,407,70,71,72,73,408,409,410,411,412,413,31,32,33,34,35,36,37,38,371,39,41,42,43,44,4,5,6,7,8,74,9,10,11,12,13,14,75,76,77,78,79,80,81,414,82,415,83,84,85,416,417,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,316,317,328,102,103,104,105,418,306,106,107,108,109,312,110,111,112,113,419,114,115,116,420,329,332,421,422,117,372,373,374,118,119,423,120,121,303,15,16,17,18,19,122,20,21,22,23,24,25,333,334,335,123,336,337,124,338,339,340,341,342,343,344,345,346,125,347,348,349,350,351,126,352,353,375,376,127,377,128,129,130,378,131,132,133,134,135,136,137,138,139,0,424,140,141,142,143,144,145,425,146,147,148,26,149,150,151,152,153,1,154,155,426,156,157,158,159,354,355,160,161,379,427,380,162,428,163,164,429,165,166,356,357,318,167,168,430,169,431,432,358,170,433,434,171,172,173,174,435,175,176,177,381,382,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,436,193,383,437,438,439,194,440,441,384,385,386,387,388,442,389,443,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,444,223,224,445,446,225,319,447,448,449,450,320,451,452,390,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,391,469,470,471,472,473,392,474,242,243,244,475,245,246,247,476,321,248,359,360,361,300,362,363,477,478,479,480,481,482,483,484,485,486,487,488,489,393,394,395,249,250,251,252,253,396,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,322,27,270,323,324,28,490,397,491,271,272,273,274,275,276,364,365,277,366,398,399,400,401,402,403,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"control"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[492,139,145,149,159],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[46,46,47,47,48,313,314,53,54,56,57,58,59,60,61,62,63,64,67,101,493,316,317,102,103,104,105,106,107,494,108,495,496,497,109,110,111,112,113,115,116,120,303,123,124,125,126,318,167,168,169,319,320,231,322,270,323,324,277],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[54,61,64,112,420],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[72,73,173,174,250],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[326,85],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[144],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:124","failures":[379],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[140],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"position":"org.easymock.internal.RecordState:305","failures":[442,389,391],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[392],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:159","failures":[46,47,325,498,499,500],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[65,66,67,68,460,271,272,273,274,275,276,401,402,403,279],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":0,"org.easymock.tests2.UsageTest.argumentsOrdered":417,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":220,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":98,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":463,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":415,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":2,"org.easymock.tests2.DelegateToTest.testReturnException":128,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":272,"org.easymock.tests.MockingTest.testPartialClassMocking":167,"org.easymock.tests.MockClassControlTest.testToString":232,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":409,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":471,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":315,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":341,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":124,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":200,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":161,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":307,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":145,"org.easymock.tests2.UsageTest.wrongArguments":414,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":176,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":14,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":228,"org.easymock.samples.ExampleTest.answerVsDelegate":50,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":320,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":432,"org.easymock.tests2.UsageConstraintsTest.testNull":141,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":56,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":97,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":237,"org.easymock.tests2.CaptureTest.testPrimitive":34,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":178,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":219,"org.easymock.tests.UsageTest.moreThanOneArgument":221,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":55,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":262,"org.easymock.tests.UsageTest.argumentsOrdered":446,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":384,"org.easymock.tests.UsageVarargTest.varargIntAccepted":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":468,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":265,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":101,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":24,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":331,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":103,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":455,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":269,"org.easymock.tests.ReplayStateInvalidUsageTest.times":189,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":74,"org.easymock.tests2.DependencyTest.testClassMocking":354,"org.easymock.tests2.AnswerTest.answer":117,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":425,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":469,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":78,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":448,"org.easymock.tests2.CaptureTest.testAnd":31,"org.easymock.tests2.UsageTest.strictResetToDefault":80,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":29,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":61,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":261,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":92,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":240,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":388,"org.easymock.tests2.DelegateToTest.testDelegate":131,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":215,"org.easymock.tests.LimitationsTest.mockFinalMethod":366,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":275,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":199,"org.easymock.tests2.DependencyTest.testClassMockingSupport":355,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":442,"org.easymock.tests2.CaptureTest.testCapture1_2446744":35,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":406,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":213,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":76,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":183,"org.easymock.tests.UsageThrowableTest.throwError":253,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":450,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":25,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":353,"org.easymock.samples.PartialClassMockTest.testGetArea":48,"org.easymock.tests.MockingTest.testInterfaceMocking":430,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":184,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":266,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":399,"org.easymock.tests2.UsageTest.niceToStrict":82,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":201,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":342,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":453,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":102,"org.easymock.tests2.MockBuilderTest.testCreateMock":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":349,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":11,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":209,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":93,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":447,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":395,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":436,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":226,"org.easymock.tests.UsageOverloadedMethodTest.overloading":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":346,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":351,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":164,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":149,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":242,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":291,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":26,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":301,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":39,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":481,"org.easymock.tests2.EasyMockSupportClassTest.testAll":123,"org.easymock.tests.MockClassControlTest.testEquals":236,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":323,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":217,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":495,"org.easymock.tests2.CaptureTest.testCaptureAll":32,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":77,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":197,"org.easymock.tests.MockNameTest.defaultName":477,"org.easymock.tests2.UsageConstraintsTest.testMatches":150,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":181,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":263,"org.easymock.samples.ExampleTest.voteForRemovals":368,"org.easymock.tests.UsageVarargTest.allKinds":489,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":250,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":198,"org.easymock.samples.BasicClassMockTest.testPrintContent":314,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":258,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":69,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":21,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":276,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":378,"org.easymock.tests2.UsageConstraintsTest.greaterThan":152,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":336,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":239,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":64,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":363,"org.easymock.samples.ExampleTest.voteForRemoval":367,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":133,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":327,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":451,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":59,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":79,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":322,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":460,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":90,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":334,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":271,"org.easymock.tests2.CaptureTest.testCaptureFirst":44,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":459,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":91,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":87,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":166,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":287,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":135,"org.easymock.tests2.CaptureTest.testCapture2_2446744":43,"org.easymock.tests2.UsageTest.moreThanOneArgument":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":470,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":107,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":488,"org.easymock.tests.GenericTest.testBridgedEquals":28,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":440,"org.easymock.tests.UsageExpectAndReturnTest.longType":283,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":88,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":195,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":494,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":218,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":426,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":390,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":216,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":402,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":260,"org.easymock.tests.UsageCallCountTest.tooManyCalls":441,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":350,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":288,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":13,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":205,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":257,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":111,"org.easymock.tests.MockingTest.testNiceClassMocking":358,"org.easymock.tests.MockingTest.testClassMocking":357,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":493,"org.easymock.tests2.UsageConstraintsTest.testContains":148,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":193,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":67,"org.easymock.tests2.UsageConstraintsTest.testFind":140,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":244,"org.easymock.tests.MockTypeTest.fromEasyMockClass":449,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":170,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":380,"org.easymock.tests.UsageExpectAndReturnTest.object":290,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":60,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":12,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":96,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":483,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":308,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":247,"org.easymock.tests.UsageTest.exactCallCountByLastCall":225,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":458,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":490,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":385,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":312,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":478,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":296,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":163,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":16,"org.easymock.tests.MockClassControlTest.testHashCode":235,"org.easymock.tests2.EasyMockSupportTest.testVerify":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":344,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":386,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":394,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":162,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":75,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":423,"org.easymock.tests.UsageVarargTest.varargCharAccepted":482,"org.easymock.tests2.CaptureTest.testCaptureMultiple":30,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":407,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":474,"org.easymock.tests2.UsageTest.openCallCountByLastCall":83,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":99,"org.easymock.tests.DefaultClassInstantiatorTest.object":248,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":393,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":245,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":345,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":255,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":7,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":15,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":62,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":234,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":206,"org.easymock.tests.CapturesMatcherTest.test":45,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":297,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":126,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":233,"org.easymock.tests2.UsageTest.resumeIfFailure":86,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":319,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":330,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":274,"org.easymock.tests2.StubTest.stubWithReturnValue":127,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":305,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":156,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":289,"org.easymock.tests2.SerializationTest.testAllMockedMethod":303,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":391,"org.easymock.samples.SupportTest.voteForRemovals":370,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":27,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":18,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":212,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":304,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":392,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":372,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":491,"org.easymock.tests.UsageExpectAndThrowTest.object":210,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":154,"org.easymock.tests2.DelegateToTest.testWrongClass":130,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":179,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":180,"org.easymock.tests.UsageStrictMockTest.range":173,"org.easymock.samples.ConstructorCalledMockTest.testTax":46,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":421,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":95,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":110,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":211,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":104,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":445,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":333,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":227,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":400,"org.easymock.tests2.CaptureTest.testCaptureNone":371,"org.easymock.tests.UsageUnorderedTest.message":249,"org.easymock.tests.UsageVerifyTest.twoReturns":252,"org.easymock.tests.UsageVarargTest.varargByteAccepted":487,"org.easymock.tests2.ThreadingTest.testThreadSafe":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":347,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":439,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":476,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":313,"org.easymock.tests2.CaptureTest.testCapture_2617107":33,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":443,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":472,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":382,"org.easymock.tests2.UsageConstraintsTest.any":146,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":188,"org.easymock.tests2.StubTest.stub":376,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":403,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":473,"org.easymock.tests.UsageExpectAndThrowTest.longType":203,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":273,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":300,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":187,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":71,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":122,"org.easymock.tests2.SerializationTest.testClass":120,"org.easymock.tests.LimitationsTest.mockNativeMethod":277,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":299,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":324,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":497,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":6,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":408,"org.easymock.tests2.NameTest.nameForMocksControl":413,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":8,"org.easymock.tests2.MockedExceptionTest.testMockedException":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":337,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":224,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":427,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":169,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":204,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":53,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":105,"org.easymock.tests.MockingTest.testNicePartialClassMocking":168,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":58,"org.easymock.tests2.CaptureTest.testCaptureLast":38,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":4,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":389,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":144,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":116,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":155,"org.easymock.tests.MockingTest.testTwoMocks":318,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":420,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":280,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":208,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":416,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":158,"org.easymock.samples.ExampleTest.removeNonExistingDocument":52,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":185,"org.easymock.tests.UsageStrictMockTest.differentMethods":174,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":10,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":17,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":360,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":134,"org.easymock.tests2.MockBuilderTest.testCreateMockString":108,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":230,"org.easymock.tests.UsageExpectAndThrowTest.floatType":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":338,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":335,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":374,"org.easymock.tests.UsageVerifyTest.twoThrows":251,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":428,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":125,"org.easymock.samples.ExampleTest.voteAgainstRemoval":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":464,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":398,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":63,"org.easymock.tests.LimitationsTest.privateConstructor":365,"org.easymock.tests2.UsageConstraintsTest.testNotNull":157,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":65,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":259,"org.easymock.tests2.UsageTest.defaultResetToNice":85,"org.easymock.samples.ExampleTest.voteAgainstRemovals":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":465,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":295,"org.easymock.tests.UsageVarargTest.differentLength":484,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":5,"org.easymock.tests2.CallbackTest.callback":375,"org.easymock.tests2.UsageConstraintsTest.equals":424,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":325,"org.easymock.tests.UsageTest.openCallCountByLastCall":223,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":137,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":381,"org.easymock.tests.UsageCallCountTest.tooFewCalls":437,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":113,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":229,"org.easymock.tests.UsageThrowableTest.throwCheckedException":256,"org.easymock.tests.MockingTest.testStrictClassMocking":356,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":115,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":279,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":112,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":9,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":190,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":114,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":119,"org.easymock.tests2.CompareToTest.testGreateOrEqual":492,"org.easymock.tests.ObjectMethodsTest.testHashCode":246,"org.easymock.tests2.NameTest.nameForNiceMock":412,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":136,"org.easymock.tests2.DependencyTest.testInterfaceMocking":160,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":309,"org.easymock.samples.ExampleTest.addDocument":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":348,"org.easymock.tests2.DelegateToTest.testStubDelegate":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":352,"org.easymock.tests2.AnswerTest.stubAnswer":118,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":171,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":418,"org.easymock.tests.UsageVarargTest.varargLongAccepted":486,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":435,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":462,"org.easymock.tests.UsageExpectAndReturnTest.floatType":282,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":298,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":109,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":47,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":429,"org.easymock.tests.UsageThrowableTest.noUpperLimit":396,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":153,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":23,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":138,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":329,"org.easymock.tests2.SerializationTest.test":121,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":36,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":302,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":359,"org.easymock.tests2.UsageConstraintsTest.testSame":142,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":281,"org.easymock.samples.SupportTest.addDocument":405,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":419,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":339,"org.easymock.tests.GenericTest.testPackageScope":270,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":387,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":457,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":22,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":431,"org.easymock.tests2.NameTest.nameForMock":410,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":292,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":500,"org.easymock.tests2.UsageStrictMockTest.differentMethods":73,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":326,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":284,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":214,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":475,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":241,"org.easymock.tests2.MockedExceptionTest.testRealException":68,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":452,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":467,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":422,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":466,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":70,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":177,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":192,"org.easymock.tests2.NameTest.nameForStrictMock":411,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":328,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":379,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":57,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":332,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":1,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":361,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":316,"org.easymock.tests2.UsageStrictMockTest.range":72,"org.easymock.tests2.UsageConstraintsTest.lessThan":159,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":461,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":89,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":310,"org.easymock.tests2.CaptureTest.testCaptureRightOne":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":343,"org.easymock.tests2.UsageConstraintsTest.testOr":143,"org.easymock.tests.UsageRangeTest.combination":238,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":54,"org.easymock.tests.UsageTest.wrongArguments":444,"org.easymock.tests2.MockBuilderTest.testWithConstructor":498,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":340,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":231,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":454,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":293,"org.easymock.tests.UsageVarargTest.varargShortAccepted":485,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":362,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":194,"org.easymock.tests2.UsageConstraintsTest.cmpTo":147,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":456,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":84,"org.easymock.tests2.CaptureTest.testCaptureFromStub":42,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":182,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":317,"org.easymock.tests.UsageTest.unexpectedCallWithArray":222,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":434,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":438,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":499,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":294,"org.easymock.tests2.CaptureTest.testCapture":40,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":172,"org.easymock.tests2.UsageConstraintsTest.constraints":139,"org.easymock.samples.ExampleTest.addAndChangeDocument":369,"org.easymock.tests.UsageStrictMockTest.testVerify":175,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":3,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":433,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":196,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":37,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":496,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":267,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":286,"org.easymock.tests.LimitationsTest.abstractClass":364,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":165,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":268,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":479,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":94}}]

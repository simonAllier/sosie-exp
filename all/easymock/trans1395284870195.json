[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:44","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Void.java.lang.Class<java.lang.Void>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[0,1,2,3,4],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[5],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[6,7],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"position":"org.easymock.internal.RecordState:163","failures":[8,9],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[10,1,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:153","failures":[58,59,60,61,62,63,64,65,66,67,68,69],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[70,71],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[72],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[73,74],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[75,76,77,78,42,51],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:613","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:173","failures":[79],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[80,81],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cstr":"cstr"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[79],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"failures":[82,83,84,85,86,87,88,89,90,91,92,93,94,95],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:136","failures":[96,96,97,97,0,98,81,99,100,101,102,103,104,2,105,106,107,108,92,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[127,128,129,130],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[131],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[132,133,134,135],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[136,29,137,138,139,140],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[141,142,143],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[144,109,34,145,146,147,148,149,150,151,152,153,47,48,154,121,54,155],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:205","failures":[96,97,127,156,157,158,159,160,161,162,163,164,165],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:56","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"parameterTypes":"paramTypes","i":"i"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[166,167,168,169],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":80,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":62,"org.easymock.tests2.UsageConstraintsTest.testMatches":104,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":41,"org.easymock.tests2.UsageTest.argumentsOrdered":17,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":9,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":125,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":67,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":15,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":158,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":3,"org.easymock.tests2.SerializationTest.testAllMockedMethod":129,"org.easymock.tests.UsageVarargTest.allKinds":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":65,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":153,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":76,"org.easymock.tests2.DelegateToTest.testStubDelegate":79,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":31,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":130,"org.easymock.tests2.AnswerTest.stubAnswer":8,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":131,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":69,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":121,"org.easymock.tests2.UsageConstraintsTest.greaterThan":2,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":159,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":30,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":155,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":111,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":112,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":73,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":113,"org.easymock.tests2.UsageTest.wrongArguments":13,"org.easymock.samples.ConstructorCalledMockTest.testTax":96,"org.easymock.tests.UsageStrictMockTest.range":53,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":163,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":97,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":169,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":105,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":98,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":12,"org.easymock.tests2.UsageConstraintsTest.testNull":99,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":151,"org.easymock.tests2.SerializationTest.test":128,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":87,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":160,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":23,"org.easymock.tests2.CaptureTest.testPrimitive":85,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":5,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":115,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":6,"org.easymock.tests.UsageTest.moreThanOneArgument":147,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":44,"org.easymock.tests2.UsageConstraintsTest.testSame":100,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":124,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":77,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":64,"org.easymock.tests2.CaptureTest.testCaptureFirst":94,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":19,"org.easymock.tests.UsageUnorderedTest.message":49,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":39,"org.easymock.tests2.UsageTest.moreThanOneArgument":144,"org.easymock.tests2.CaptureTest.testCapture2_2446744":93,"org.easymock.tests.UsageVerifyTest.twoReturns":48,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":26,"org.easymock.tests.UsageTest.argumentsOrdered":45,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":116,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":56,"org.easymock.tests2.CaptureTest.testCapture_2617107":84,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":146,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":161,"org.easymock.tests2.UsageStrictMockTest.differentMethods":34,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":133,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":132,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":122,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":66,"org.easymock.tests.UsageCallCountTest.tooManyCalls":57,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":152,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":32,"org.easymock.tests2.SerializationTest.testClass":127,"org.easymock.tests2.MockedExceptionTest.testRealException":61,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":139,"org.easymock.tests2.CaptureTest.testAnd":82,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":157,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":145,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":109,"org.easymock.tests2.MockedExceptionTest.testMockedException":59,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":123,"org.easymock.tests2.UsageConstraintsTest.testContains":102,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":148,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":60,"org.easymock.tests2.UsageConstraintsTest.testFind":81,"org.easymock.tests2.CompareToTest.testCompareEqual":72,"org.easymock.tests2.CaptureTest.testCaptureLast":89,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":68,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":50,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":167,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":24,"org.easymock.tests2.UsageStrictMockTest.range":33,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":166,"org.easymock.tests2.UsageConstraintsTest.lessThan":108,"org.easymock.tests2.CaptureTest.testCapture1_2446744":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":149,"org.easymock.tests.UsageTest.exactCallCountByLastCall":46,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":110,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":16,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":107,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":20,"org.easymock.tests.UsageStrictMockTest.differentMethods":54,"org.easymock.tests2.CaptureTest.testCaptureRightOne":91,"org.easymock.tests2.UsageConstraintsTest.testOr":101,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":164,"org.easymock.tests.UsageRangeTest.combination":37,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":28,"org.easymock.tests.UsageTest.wrongArguments":43,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":74,"org.easymock.tests2.MockBuilderTest.testWithConstructor":156,"org.easymock.tests.ResultTest.createThrowResultToString":143,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":40,"org.easymock.tests2.MockBuilderTest.testCreateMockString":27,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":126,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":11,"org.easymock.tests.ResultTest.createReturnResultToString":142,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":165,"org.easymock.tests.UsageVerifyTest.twoThrows":47,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":134,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":7,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":168,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":35,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":55,"org.easymock.tests2.CompareToTest.testLessOrEqual":4,"org.easymock.tests.ResultTest.createDelegateResultToString":141,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":117,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":137,"org.easymock.tests2.UsageTest.niceToStrict":14,"org.easymock.tests2.UsageConstraintsTest.testNotNull":106,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":58,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":136,"org.easymock.tests2.CaptureTest.testCaptureFromStub":92,"org.easymock.tests2.MockBuilderTest.testCreateMock":25,"org.easymock.tests.UsageVarargTest.differentLength":38,"org.easymock.tests2.CallbackTest.callback":10,"org.easymock.tests.UsageTest.unexpectedCallWithArray":42,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":162,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":36,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":150,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":75,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":140,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":21,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":51,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":0,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":135,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":63,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":29,"org.easymock.tests2.UsageConstraintsTest.constraints":1,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":52,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":103,"org.easymock.tests.CapturesMatcherTest.test":95,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":70,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":90,"org.easymock.tests2.UsageTest.resumeIfFailure":18,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":88,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":118,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":154,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":119,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":78,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":138,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":22,"org.easymock.tests2.CaptureTest.testCaptureAll":83}}]

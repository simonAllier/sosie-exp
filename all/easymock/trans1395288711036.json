[{"transplant":{"position":"org.easymock.internal.MocksControl:241","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"failures":[0],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[1,2,3,4,5,6,7,8,9,10],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[11,12],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[13],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[1,2,3,4,5,6,7,8,10],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:157","failures":[],"status":0,"binaryOperator":"(((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[14],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"failures":[15],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:243","failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,4,94,95,96,97,98,99,100],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[101,102,103,104,105,106,107,108,109,110,111],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[112,113,114,115,116,117,118,18,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,19,20,21,22,23,24,25,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,27,168,169,28,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,30,31,32,33,34,35,191,192,36,37,193,38,39,40,194,41,42,43,44,45,46,47,48,195,49,196,197,198,199,50,52,53,54,55,56,57,200,201,202,203,204,205,206,207,59,208,60,61,209,62,63,210,64,65,211,66,212,213,214,215,216,217,67,218,219,68,69,70,71,72,73,220,74,221,75,76,77,78,79,80,81,82,83,84,85,86,87,88,222,223,224,225,101,102,226,103,227,104,105,228,229,230,231,14,232,233,234,235,236,107,237,238,239,240,108,241,242,1,243,244,245,89,90,246,91,92,247,93,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,4,285,286,287,288,289,290,291,292,94,293,294,295,95,96,296,97,297,298,109,299,110,300,301,302,303,304,305,306,111,307,308,309,310,311,98,312,99,100,313],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:280","failures":[140,210,314,296,97,297,315,298],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[316,317,264,265],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EndsWith:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","type":"CtReturnImpl"},"failures":[225],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Matches:40","failures":[318],"status":-1,"binaryOperator":"((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[319],"status":-1,"binaryOperator":"((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[316,317,264,265],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[139,210,222,223,262,263,265,289],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:178","failures":[320,92],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:245","sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","type":"CtInvocationImpl"},"failures":[320,321,27,28,170,29,322,323,324,46,47,48,325,326,327,328,329,330,331,332,333,201,62,218,219,68,69,71,72,73,220,74,334,221,75,76,77,335,336,78,79,80,81,82,83,85,87,244,245,89,337,338,90,246,91,92,247,93,248,339,285,286,287],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[340],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1149","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[341,342],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"failures":[343,344],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[345,346,347,142,348,349,350,149,195,351,352,202,203,204,59,60,61,251,353,354,355,356,357,358,98,99,100],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[74,230,359],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[121,124],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[360,361,109,299,110,300,301,302,303,304,305,306,362,111,307,308,309],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[363,1,243,244],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[142,350,150,151,154,155,195,203,204,207,60,252,258,259,99],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:99","failures":[18,119,120,121,123,124,125,126,127,128,347,19,20,21,22,23,24,25,148,149,152,153,156,27,168,28,29,30,31,32,33,34,35,191,192,36,37,193,38,39,40,194,41,42,43,44,45,46,47,48,49,196,199,50,51,52,53,202,204,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,224,225,101,102,226,103,227,104,105,228,229,230,231,14,232,233,234,235,236,107,237,238,240,108,241,242,1,243,89,90,91,92,93,249,250,251,253,255,256,257,260,261,262,264,270,271,272,273,274,275,276,277,278,279,280,281,282,284,4,287,290,291,292,94,293,295,95,96,97,109,299,300,301,304,305,306,111,308,309,98,99,100],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[109,110,300,301,302,303,304,306,362,111,307,309],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","type":"CtIfImpl"},"failures":[364,291,292],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[365,366,367,368,369,370,316,371,372,373,374,375,376,11,377,378,379,380,381,382,383,384],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[1,2,3,4,5,6,7,8,9,10],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:205","failures":[320,321,343,29,62,213,214,220,385,75,76,336,79,80,81,1,245,386,89,337,387,338,90,246,91,2,92,388,3,247,93,389,248,4,5,390,285],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[242,15],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[374,314,97],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":102,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":148,"org.easymock.tests2.UsageTest.argumentsOrdered":259,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":281,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":374,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":254,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":215,"org.easymock.tests2.DelegateToTest.testReturnException":296,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":134,"org.easymock.tests.MockingTest.testPartialClassMocking":46,"org.easymock.tests.MockClassControlTest.testToString":328,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":26,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":381,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":171,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":79,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":96,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":6,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":228,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":49,"org.easymock.tests2.UsageTest.wrongArguments":252,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":131,"org.easymock.samples.ExampleTest.answerVsDelegate":210,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":321,"org.easymock.tests2.UsageConstraintsTest.testNull":103,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":71,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":280,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":333,"org.easymock.tests2.CaptureTest.testPrimitive":300,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":199,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":190,"org.easymock.tests.UsageTest.moreThanOneArgument":149,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":70,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":56,"org.easymock.tests.UsageTest.argumentsOrdered":155,"org.easymock.tests.UsageVarargTest.varargIntAccepted":159,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":378,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":21,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":245,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":246,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":367,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":25,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":284,"org.easymock.tests2.AnswerTest.answer":262,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":379,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":269,"org.easymock.tests2.CaptureTest.testAnd":109,"org.easymock.tests2.UsageTest.strictResetToDefault":250,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":387,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":221,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":55,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":275,"org.easymock.tests2.DelegateToTest.testDelegate":298,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":186,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":147,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":351,"org.easymock.tests2.CaptureTest.testCapture1_2446744":301,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":184,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":267,"org.easymock.tests.UsageThrowableTest.throwError":121,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":200,"org.easymock.samples.PartialClassMockTest.testGetArea":62,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":22,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":16,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":172,"org.easymock.tests2.UsageTest.niceToStrict":253,"org.easymock.tests2.ThreadingTest.testChangeDefault":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":365,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":90,"org.easymock.tests2.MockBuilderTest.testCreateMock":247,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":180,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":354,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":276,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":129,"org.easymock.tests.UsageOverloadedMethodTest.overloading":119,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":141,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":232,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":38,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":18,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":14,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":306,"org.easymock.tests2.EasyMockSupportClassTest.testAll":78,"org.easymock.tests.MockClassControlTest.testEquals":332,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":170,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":188,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":145,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":268,"org.easymock.tests2.CaptureTest.testCaptureAll":299,"org.easymock.tests2.UsageConstraintsTest.testMatches":233,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":57,"org.easymock.samples.ExampleTest.voteForRemovals":66,"org.easymock.tests.UsageVarargTest.allKinds":167,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":202,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":146,"org.easymock.samples.BasicClassMockTest.testPrintContent":219,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":127,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":310,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":138,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":315,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":10,"org.easymock.tests2.UsageConstraintsTest.greaterThan":235,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":51,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":77,"org.easymock.samples.ExampleTest.voteForRemoval":64,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":291,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":335,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":340,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":220,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":201,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":249,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":3,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":371,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":273,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":123,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":133,"org.easymock.tests2.CaptureTest.testCaptureFirst":309,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":314,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":316,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":274,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":261,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":142,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":192,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":94,"org.easymock.tests2.UsageTest.moreThanOneArgument":251,"org.easymock.tests2.CaptureTest.testCapture2_2446744":308,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":380,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":166,"org.easymock.tests.GenericTest.testBridgedEquals":344,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":117,"org.easymock.tests.UsageExpectAndReturnTest.longType":33,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":143,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":271,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":189,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":58,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":239,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":187,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":54,"org.easymock.tests.UsageCallCountTest.tooManyCalls":118,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":112,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":36,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":176,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":126,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":83,"org.easymock.tests.MockingTest.testNiceClassMocking":325,"org.easymock.tests.MockingTest.testClassMocking":323,"org.easymock.tests2.UsageConstraintsTest.testContains":231,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":287,"org.easymock.tests2.UsageConstraintsTest.testFind":226,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":120,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":205,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":223,"org.easymock.tests.UsageExpectAndReturnTest.object":193,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":74,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":319,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":279,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":161,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":7,"org.easymock.tests.UsageTest.exactCallCountByLastCall":156,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":370,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":5,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":157,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":42,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":140,"org.easymock.tests.MockClassControlTest.testHashCode":331,"org.easymock.tests2.EasyMockSupportTest.testVerify":283,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":139,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":0,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":266,"org.easymock.tests.UsageVarargTest.varargCharAccepted":160,"org.easymock.tests2.CaptureTest.testCaptureMultiple":361,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":384,"org.easymock.tests2.UsageTest.openCallCountByLastCall":255,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":282,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":350,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":178,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":124,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":342,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":75,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":330,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":177,"org.easymock.tests.CapturesMatcherTest.test":360,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":81,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":329,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":356,"org.easymock.tests2.UsageTest.resumeIfFailure":260,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":320,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":136,"org.easymock.tests2.StubTest.stubWithReturnValue":295,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":2,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":37,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":240,"org.easymock.tests2.SerializationTest.testAllMockedMethod":244,"org.easymock.samples.SupportTest.voteForRemovals":67,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":343,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":341,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":183,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":363,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":317,"org.easymock.tests.UsageExpectAndThrowTest.object":181,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":237,"org.easymock.tests2.DelegateToTest.testWrongClass":297,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":19,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":20,"org.easymock.tests.UsageStrictMockTest.range":60,"org.easymock.samples.ConstructorCalledMockTest.testTax":213,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":278,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":82,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":182,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":91,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":154,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":13,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":130,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":17,"org.easymock.tests2.CaptureTest.testCaptureNone":305,"org.easymock.tests.UsageUnorderedTest.message":195,"org.easymock.tests.UsageVerifyTest.twoReturns":204,"org.easymock.tests.UsageVarargTest.varargByteAccepted":165,"org.easymock.tests2.ThreadingTest.testThreadSafe":290,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":115,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":218,"org.easymock.tests2.CaptureTest.testCapture_2617107":110,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":198,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":382,"org.easymock.tests2.UsageConstraintsTest.any":229,"org.easymock.tests2.StubTest.stub":294,"org.easymock.tests.UsageExpectAndThrowTest.longType":174,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":383,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":312,"org.easymock.tests2.SerializationTest.testClass":1,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":270,"org.easymock.tests.LimitationsTest.mockNativeMethod":27,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":45,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":29,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":313,"org.easymock.tests2.MockedExceptionTest.testMockedException":286,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":153,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":175,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":48,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":68,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":92,"org.easymock.tests.MockingTest.testNicePartialClassMocking":47,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":73,"org.easymock.tests2.CaptureTest.testCaptureLast":304,"org.easymock.tests2.CompareToTest.testCompareEqual":359,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":352,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":105,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":88,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":238,"org.easymock.tests.MockingTest.testTwoMocks":324,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":30,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":179,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":258,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":241,"org.easymock.tests.UsageStrictMockTest.differentMethods":61,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":292,"org.easymock.tests2.ConstraintsToStringTest.andToString":357,"org.easymock.tests2.MockBuilderTest.testCreateMockString":248,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":326,"org.easymock.tests.UsageExpectAndThrowTest.floatType":173,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":234,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":263,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":390,"org.easymock.tests.UsageVerifyTest.twoThrows":203,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":345,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":80,"org.easymock.samples.ExampleTest.voteAgainstRemoval":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":375,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":76,"org.easymock.tests2.UsageConstraintsTest.testNotNull":108,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":128,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":285,"org.easymock.tests2.UsageTest.defaultResetToNice":257,"org.easymock.samples.ExampleTest.voteAgainstRemovals":63,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":376,"org.easymock.tests.UsageVarargTest.differentLength":162,"org.easymock.tests2.CallbackTest.callback":289,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":385,"org.easymock.tests.UsageTest.openCallCountByLastCall":152,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":224,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":197,"org.easymock.tests.UsageCallCountTest.tooFewCalls":113,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":85,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":132,"org.easymock.tests.UsageThrowableTest.throwCheckedException":125,"org.easymock.tests.MockingTest.testStrictClassMocking":322,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":348,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":169,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":87,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":84,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":86,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":265,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":318,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":293,"org.easymock.tests2.DependencyTest.testInterfaceMocking":95,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":8,"org.easymock.samples.ExampleTest.addDocument":211,"org.easymock.tests2.DelegateToTest.testStubDelegate":97,"org.easymock.tests2.AnswerTest.stubAnswer":264,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":59,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":388,"org.easymock.tests.UsageVarargTest.varargLongAccepted":164,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":373,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":44,"org.easymock.tests.UsageExpectAndReturnTest.floatType":32,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":4,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":214,"org.easymock.tests2.ConstraintsToStringTest.orToString":353,"org.easymock.tests.UsageThrowableTest.noUpperLimit":122,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":236,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":346,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":225,"org.easymock.tests2.SerializationTest.test":243,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":302,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":31,"org.easymock.tests2.UsageConstraintsTest.testSame":227,"org.easymock.samples.SupportTest.addDocument":217,"org.easymock.tests.GenericTest.testPackageScope":28,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":369,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":39,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":389,"org.easymock.tests2.UsageStrictMockTest.differentMethods":100,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":334,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":34,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":185,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":53,"org.easymock.tests2.MockedExceptionTest.testRealException":288,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":377,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":349,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":196,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":338,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":222,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":72,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":339,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":107,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":89,"org.easymock.tests2.UsageStrictMockTest.range":99,"org.easymock.tests2.UsageConstraintsTest.lessThan":242,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":9,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":372,"org.easymock.tests2.CaptureTest.testCaptureRightOne":111,"org.easymock.tests2.UsageConstraintsTest.testOr":104,"org.easymock.tests.UsageRangeTest.combination":50,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":69,"org.easymock.tests.UsageTest.wrongArguments":151,"org.easymock.tests2.MockBuilderTest.testWithConstructor":386,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":327,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":35,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":366,"org.easymock.tests.UsageVarargTest.varargShortAccepted":163,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":116,"org.easymock.tests2.UsageConstraintsTest.cmpTo":230,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":12,"org.easymock.tests2.CompareToTest.testLessThan":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":368,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":256,"org.easymock.tests2.CaptureTest.testCaptureFromStub":307,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":337,"org.easymock.tests.UsageTest.unexpectedCallWithArray":150,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":207,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":114,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":194,"org.easymock.tests2.CaptureTest.testCapture":362,"org.easymock.tests2.UsageConstraintsTest.constraints":101,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":208,"org.easymock.samples.ExampleTest.addAndChangeDocument":212,"org.easymock.tests2.ConstraintsToStringTest.notToString":355,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":216,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":206,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":144,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":303,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":23,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":191,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":24,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":347,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":158,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":277}}]

[{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:47","sourceCode":"org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[3,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.Capture:107","sourceCode":"break","type":"CtBreakImpl"},"failures":[60],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:224","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[79],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[80,81],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[82,83,84,85,86],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:182","sourceCode":"if (java.lang.reflect.Proxy.java.lang.reflect.Proxy.isProxyClass(V.getClass())) {\n    return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]));\n} ","type":"CtIfImpl"},"failures":[87,61,88,62,89,64,90,91,92,93,94,65,95,66,68,69,70,96,97,98,99,100,101,72,102,103,104,105,106,107],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[108,109,110,111,112,113,114,3,4,115,5,116,117,118,6,7,119,120,121,122,123,124,61,125,88,62,63,126,127,128,129,89,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,79,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,60,164,165,166,167,168,169,170,171,172,8,9,173,10,11,12,13,14,15,16,17,18,20,174,175,80,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,21,22,24,25,26,27,28,29,30,191,192,64,90,193,194,195,196,197,91,92,198,199,200,201,31,202,93,32,33,34,35,203,36,37,38,204,39,40,41,42,43,205,206,207,208,209,210,211,212,213,214,215,44,45,216,217,218,219,220,221,222,94,65,223,95,66,67,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,68,69,70,253,254,48,49,50,255,255,256,257,258,54,259,260,261,262,263,264,265,266,72,102,103,267,268,104,105,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,59,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,73,302,303,304,74,75,305,76,306,307,77,308,309,310,311,312,107,313,314,315,316,317,318,319,320,321,322,323,324],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"methodArgs","args":"methodArgs"}},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[87,61,88,62,89,64,90,91,92,93,94,65,95,66,68,69,70,96,97,98,99,100,101,72,102,103,104,105,106,107],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[325],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[326,327],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"java.lang.reflect.Field.getType()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"targetField":"targetField"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[20,328,329,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[38,204,39,330],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1080","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:183","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[331],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:49","sourceCode":"org.easymock.internal.Injection.getAnnotation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:53","sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"equalsMethod","bridgeMethod":"equalsMethod"}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"failures":[133,138,79],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[208],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":133,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":266,"org.easymock.tests2.UsageTest.argumentsOrdered":92,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":188,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":247,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":194,"org.easymock.tests2.StubTest.stubWithReturnValue":211,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":329,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":233,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":116,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":152,"org.easymock.tests2.SerializationTest.testAllMockedMethod":39,"org.easymock.tests2.DelegateToTest.testReturnException":205,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":245,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":83,"org.easymock.tests.MockingTest.testPartialClassMocking":48,"org.easymock.samples.SupportTest.voteForRemovals":118,"org.easymock.tests.MockClassControlTest.testToString":56,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":306,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":19,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":330,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":298,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":41,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":326,"org.easymock.tests.UsageExpectAndThrowTest.object":305,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":120,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":149,"org.easymock.tests2.DelegateToTest.testWrongClass":207,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":291,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":292,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":139,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":286,"org.easymock.tests2.UsageTest.wrongArguments":90,"org.easymock.tests.UsageStrictMockTest.range":95,"org.easymock.samples.ConstructorCalledMockTest.testTax":3,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":214,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":87,"org.easymock.samples.ExampleTest.answerVsDelegate":109,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":185,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":53,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":32,"org.easymock.tests2.UsageConstraintsTest.testNull":135,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":76,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":10,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":26,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":187,"org.easymock.tests2.CaptureTest.testPrimitive":159,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":290,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":312,"org.easymock.tests.UsageTest.moreThanOneArgument":72,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":104,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":213,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":173,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":218,"org.easymock.tests2.CaptureTest.testCaptureNone":60,"org.easymock.tests.UsageUnorderedTest.message":107,"org.easymock.tests.UsageVerifyTest.twoReturns":70,"org.easymock.tests.UsageVarargTest.varargByteAccepted":278,"org.easymock.tests2.ThreadingTest.testThreadSafe":174,"org.easymock.tests.UsageTest.argumentsOrdered":105,"org.easymock.tests.UsageVarargTest.varargIntAccepted":272,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":262,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":6,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":99,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":281,"org.easymock.tests2.CaptureTest.testCapture_2617107":158,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":86,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":21,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":71,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":289,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":25,"org.easymock.tests2.UsageConstraintsTest.any":140,"org.easymock.tests2.StubTest.stub":210,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":285,"org.easymock.tests.UsageExpectAndThrowTest.longType":301,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":246,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":0,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":125,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":93,"org.easymock.tests2.SerializationTest.testClass":38,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":89,"org.easymock.tests.LimitationsTest.mockNativeMethod":54,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":243,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":46,"org.easymock.tests2.AnswerTest.answer":169,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":129,"org.easymock.tests2.CaptureTest.testAnd":156,"org.easymock.tests2.UsageTest.strictResetToDefault":192,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":63,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":15,"org.easymock.tests2.MockedExceptionTest.testMockedException":201,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":217,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":251,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":182,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":268,"org.easymock.tests2.DelegateToTest.testDelegate":208,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":73,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":50,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":8,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":27,"org.easymock.tests.MockingTest.testNicePartialClassMocking":49,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":308,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":12,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":84,"org.easymock.tests2.CaptureTest.testCaptureLast":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":248,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":97,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":37,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":138,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":297,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":150,"org.easymock.tests.MockingTest.testTwoMocks":47,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":96,"org.easymock.tests2.CaptureTest.testCapture1_2446744":160,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":224,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":307,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":74,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":127,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":91,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":154,"org.easymock.tests.UsageThrowableTest.throwError":313,"org.easymock.tests.UsageStrictMockTest.differentMethods":66,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":80,"org.easymock.tests2.MockBuilderTest.testCreateMockString":30,"org.easymock.tests.UsageExpectAndThrowTest.floatType":300,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":220,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":146,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":170,"org.easymock.tests.UsageVerifyTest.twoThrows":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":42,"org.easymock.samples.PartialClassMockTest.testGetArea":5,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":325,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":282,"org.easymock.samples.ExampleTest.voteAgainstRemoval":111,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":17,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":299,"org.easymock.tests2.UsageTest.niceToStrict":193,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":51,"org.easymock.tests2.UsageConstraintsTest.testNotNull":153,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":320,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":200,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":24,"org.easymock.tests2.UsageTest.defaultResetToNice":197,"org.easymock.tests2.MockBuilderTest.testCreateMock":28,"org.easymock.samples.ExampleTest.voteAgainstRemovals":108,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":331,"org.easymock.tests.UsageVarargTest.differentLength":275,"org.easymock.tests2.CallbackTest.callback":209,"org.easymock.tests.UsageTest.openCallCountByLastCall":267,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":75,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":183,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":130,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":288,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":212,"org.easymock.tests.UsageCallCountTest.tooFewCalls":260,"org.easymock.tests.UsageOverloadedMethodTest.overloading":257,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":323,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":144,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":256,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":235,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":35,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":1,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":143,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":164,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":215,"org.easymock.tests.UsageThrowableTest.throwCheckedException":317,"org.easymock.tests2.EasyMockSupportClassTest.testAll":40,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":45,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":310,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":295,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":128,"org.easymock.tests2.CaptureTest.testCaptureAll":157,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":254,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":36,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":34,"org.easymock.tests.MockNameTest.defaultName":106,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":81,"org.easymock.tests2.UsageConstraintsTest.testMatches":145,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":203,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":172,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":219,"org.easymock.samples.ExampleTest.voteForRemovals":113,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":85,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":177,"org.easymock.tests.UsageVarargTest.allKinds":280,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":68,"org.easymock.tests2.DependencyTest.testInterfaceMocking":119,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":296,"org.easymock.samples.BasicClassMockTest.testPrintContent":7,"org.easymock.samples.ExampleTest.addDocument":112,"org.easymock.tests2.DelegateToTest.testStubDelegate":206,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":319,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":123,"org.easymock.tests2.AnswerTest.stubAnswer":171,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":249,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":65,"org.easymock.tests2.UsageConstraintsTest.greaterThan":147,"org.easymock.tests.UsageVarargTest.varargLongAccepted":277,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":18,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":67,"org.easymock.samples.ExampleTest.voteForRemoval":110,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":175,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":242,"org.easymock.tests.UsageExpectAndReturnTest.floatType":226,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":20,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":13,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":4,"org.easymock.tests.UsageThrowableTest.noUpperLimit":314,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":148,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":59,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":131,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":191,"org.easymock.tests2.SerializationTest.test":204,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":161,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":2,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":180,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":315,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":225,"org.easymock.tests2.UsageConstraintsTest.testSame":136,"org.easymock.samples.SupportTest.addDocument":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":244,"org.easymock.tests2.CaptureTest.testCaptureFirst":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":327,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":181,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":199,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":324,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":231,"org.easymock.tests.GenericTest.testPackageScope":44,"org.easymock.tests2.UsageTest.moreThanOneArgument":64,"org.easymock.tests2.CaptureTest.testCapture2_2446744":167,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":176,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":29,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":279,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":264,"org.easymock.tests.UsageExpectAndReturnTest.longType":227,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":293,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":178,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":311,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":236,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":151,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":309,"org.easymock.tests2.UsageStrictMockTest.differentMethods":62,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":216,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":228,"org.easymock.tests.UsageCallCountTest.tooManyCalls":265,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":77,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":252,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":259,"org.easymock.tests2.MockedExceptionTest.testRealException":202,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":232,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":101,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":82,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":302,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":61,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":318,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":287,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":33,"org.easymock.tests2.UsageConstraintsTest.testContains":142,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":31,"org.easymock.tests2.UsageConstraintsTest.testFind":134,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":258,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":121,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":11,"org.easymock.tests.MockTypeTest.fromEasyMockClass":100,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":221,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":122,"org.easymock.tests.UsageExpectAndReturnTest.object":234,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":79,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":14,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":22,"org.easymock.tests2.UsageStrictMockTest.range":88,"org.easymock.tests2.UsageConstraintsTest.lessThan":155,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":186,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":274,"org.easymock.tests.UsageTest.exactCallCountByLastCall":269,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":253,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":179,"org.easymock.tests2.CaptureTest.testCaptureRightOne":165,"org.easymock.tests2.UsageConstraintsTest.testOr":137,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":328,"org.easymock.tests.UsageRangeTest.combination":250,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":270,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":240,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":9,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":322,"org.easymock.tests.UsageTest.wrongArguments":103,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":55,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":229,"org.easymock.tests2.EasyMockSupportTest.testVerify":190,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":237,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":321,"org.easymock.tests.UsageVarargTest.varargShortAccepted":276,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":263,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":126,"org.easymock.tests2.UsageConstraintsTest.cmpTo":141,"org.easymock.tests.UsageVarargTest.varargCharAccepted":273,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":124,"org.easymock.tests2.UsageTest.openCallCountByLastCall":195,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":196,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":189,"org.easymock.tests2.CaptureTest.testCaptureFromStub":166,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":23,"org.easymock.tests.UsageTest.unexpectedCallWithArray":102,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":98,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":304,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":316,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":94,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":261,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":238,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":223,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":58,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":16,"org.easymock.tests2.UsageConstraintsTest.constraints":132,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":303,"org.easymock.samples.ExampleTest.addAndChangeDocument":114,"org.easymock.tests.CapturesMatcherTest.test":255,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":241,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":115,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":222,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":43,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":294,"org.easymock.tests2.UsageTest.resumeIfFailure":198,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":162,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":283,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":230,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":52,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":284,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":78,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":271,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":184}}]

[{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[0,1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[63,64,65,66,67,68,69,70,71,72],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:32","sourceCode":"new java.util.concurrent.locks.ReentrantLock()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[92,4,4,5,5,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,73,112,113,114,9,12,22,28,115,31,116,117,118,32,119,120,33,121,122,123,124,125,126,127,128,129,43],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[130,131,132],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[133],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.EasyMock:2124","failures":[63,67,69,134,71,72],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[31,135,136,137,138,139,39,40,43,44],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[31,40],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[140],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:747","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[141,68],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[142],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:172","failures":[143,125],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[31,144,135,136,137,138,145,139,39,40,146,43,44],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[147,148,149],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:89","failures":[112,113,150,151,123],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[135,136,137,145,152,39,44],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[92,4,4,5,5,93,94,142,95,96,97,153,98,154,155,156,157,158,130,159,160,161,162,99,163,164,165,166,167,168,169,143,170,171,100,101,102,103,172,173,174,175,104,176,105,106,107,108,109,110,111,177,178,73,112,113,114,179,180,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,181,182,115,31,116,117,118,32,119,120,33,121,37,122,183,38,184,123,124,125,39,126,40,127,128,42,129,185,186,43,44,187],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"hashCodeMethod"}},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[188,189,190,191],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:60","failures":[32,33,34,35,36,37,38,39,41,42,44],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[192,31,193,116],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[194,179,133],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:305","failures":[195,196,197],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[198,199,200,201,202,203,204,205,206,207,208],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[209,210,211,212,213,214],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"o"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":202,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":39,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":81,"org.easymock.tests2.SerializationTest.testAllMockedMethod":116,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":195,"org.easymock.tests.MockingTest.testPartialClassMocking":101,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":214,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":142,"org.easymock.tests.MockClassControlTest.testToString":163,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":56,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":16,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":192,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":12,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":141,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":135,"org.easymock.tests.UsageStrictMockTest.range":87,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":53,"org.easymock.samples.ConstructorCalledMockTest.testTax":4,"org.easymock.samples.ExampleTest.answerVsDelegate":63,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":117,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":143,"org.easymock.tests2.UsageConstraintsTest.testNull":203,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":77,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":107,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":125,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":168,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":6,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":209,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":23,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":93,"org.easymock.tests2.CaptureTest.testCapture_2617107":199,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":121,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":152,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":61,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":124,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":1,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":130,"org.easymock.tests2.SerializationTest.testClass":31,"org.easymock.tests.LimitationsTest.mockNativeMethod":104,"org.easymock.tests2.AnswerTest.answer":67,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":97,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":206,"org.easymock.tests2.CaptureTest.testAnd":198,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":46,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":73,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":38,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":48,"org.easymock.tests2.MockedExceptionTest.testMockedException":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":11,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":86,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":74,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":103,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":105,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":126,"org.easymock.tests.MockingTest.testNicePartialClassMocking":102,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":109,"org.easymock.tests.LimitationsTest.mockFinalMethod":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":144,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":197,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":205,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":33,"org.easymock.tests.MockingTest.testTwoMocks":100,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":196,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":34,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":75,"org.easymock.tests.UsageStrictMockTest.differentMethods":88,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":49,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":55,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":157,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":133,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":62,"org.easymock.tests2.MockBuilderTest.testCreateMockString":129,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":8,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":69,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":187,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":22,"org.easymock.samples.PartialClassMockTest.testGetArea":92,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":194,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":17,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":173,"org.easymock.tests.LimitationsTest.privateConstructor":175,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":36,"org.easymock.tests2.UsageConstraintsTest.testNotNull":208,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":181,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":147,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":123,"org.easymock.tests2.MockBuilderTest.testCreateMock":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":25,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":45,"org.easymock.tests2.CallbackTest.callback":66,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":50,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":177,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":213,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":76,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":27,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":82,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":119,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":131,"org.easymock.tests2.EasyMockSupportClassTest.testAll":9,"org.easymock.tests.MockClassControlTest.testEquals":167,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":96,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":210,"org.easymock.tests.MockingTest.testStrictClassMocking":170,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":140,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":120,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":32,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":70,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":137,"org.easymock.samples.BasicClassMockTest.testPrintContent":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":29,"org.easymock.tests2.AnswerTest.stubAnswer":134,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":58,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":139,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":10,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":114,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":161,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":179,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":43,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":110,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":5,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":60,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":98,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":185,"org.easymock.tests2.SerializationTest.test":193,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":40,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":132,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":156,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":14,"org.easymock.tests.GenericTest.testPackageScope":95,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":85,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":128,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":59,"org.easymock.tests.GenericTest.testBridgedEquals":153,"org.easymock.tests2.UsageStrictMockTest.differentMethods":91,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":42,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":0,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":178,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":79,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":78,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":26,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":80,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":52,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":65,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":118,"org.easymock.tests.MockingTest.testNiceClassMocking":172,"org.easymock.tests.MockingTest.testClassMocking":171,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":151,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":115,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":184,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":71,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":149,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":108,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":72,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":186,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":207,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":158,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":111,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":122,"org.easymock.tests2.UsageStrictMockTest.range":90,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":51,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":136,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":57,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":189,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":150,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":89,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":138,"org.easymock.tests2.CaptureTest.testCaptureRightOne":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":18,"org.easymock.tests2.UsageConstraintsTest.testOr":204,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":44,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":106,"org.easymock.tests2.MockBuilderTest.testWithConstructor":37,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":54,"org.easymock.tests.MockClassControlTest.testHashCode":166,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":15,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":19,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":64,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":2,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":159,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":154,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":68,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":148,"org.easymock.tests.DefaultClassInstantiatorTest.object":155,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":183,"org.easymock.tests.UsageTest.unexpectedCallWithArray":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":20,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":212,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":41,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":47,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":83,"org.easymock.tests2.UsageConstraintsTest.constraints":201,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":112,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":28,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":164,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":169,"org.easymock.tests.LimitationsTest.abstractClass":174}}]

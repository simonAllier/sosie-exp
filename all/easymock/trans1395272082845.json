[{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[0,1,2,3],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[4,5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"failures":[6,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[8,9,10,11,12,13,14,15,16,17],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[18,19,20,21,22,23,24,25,26,4,27],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[28,29,30,31,32,33],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[34,35,36],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[37,8,38,39],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[40],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"failures":[41,42,43],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[44],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[45,34,35,36],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:205","failures":[46,47,48,8,49,50,14,51,15,52,16,17,53],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:105","failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,0,1,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,30,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,31,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,45,241,242,243,244,245,246,247,248,249,250,251,2,3,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,18,270,19,271,272,273,274,275,276,277,20,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,38,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,35,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,21,22,377,378,23,379,24,25,380,26,381,382,383,384,385,44,36,386,387,4,5,388,389,390,27,391,392,393,394,395,396],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[28,29,30,31,32,33],"status":-1,"binaryOperator":"int < (java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:58","sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[86,87,88,90],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:54","failures":[377],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[263,384],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"expected"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[397],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockStatement:43","sourceCode":"org.junit.runners.model.Statement.evaluate()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.LastControl:85","failures":[],"status":0,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[398,54,56,57,59,63,94,95,96,97,98,99,102,103,105,106,107,109,110,111,112,113,114,115,116,117,144,179,181,182,399,400,401,224,225,226,227,246,247,248,249,250,264,265,402,403,404,269,405,34,406,407,408,409,410,284,411,412,413,414,415,416,417,418,322,419,420,330,421,422,423,424,425,350,352,353,359,360,16],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[384],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:80","sourceCode":"return org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType())","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[398,54,55,56,57,58,59,61,62,63,64,46,47,426,427,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,428,429,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,118,119,430,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,156,157,30,158,159,160,161,162,163,164,165,166,167,168,169,177,178,31,179,180,181,182,399,400,401,214,216,217,222,223,224,225,226,227,228,246,247,248,249,250,252,253,254,256,257,259,260,261,262,263,264,265,402,403,269,405,34,406,407,409,18,270,19,271,272,273,274,275,276,277,20,278,279,280,281,282,283,284,285,411,412,413,414,286,289,291,294,295,296,8,38,39,297,298,299,300,301,302,303,305,306,307,308,309,315,415,416,417,418,322,419,420,329,330,331,333,422,423,424,425,431,336,337,338,339,340,35,341,342,344,345,347,348,349,350,351,352,353,359,360,362,368,375,376,21,22,378,23,379,24,25,380,381,382,383,384,385,44,36,386,387,4,5,388,390,27,391,392,394,395,396,16],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.Range:83","failures":[93,138,145,148,149,150,151,156,157,158,159,160,161,162,163,168,31,179,180,181,182,223,263,270,19,272,273,274,275,276,280,286,291,295,324,325,326,327,330,336,338,339,341,342,344,345,347,350,351,352,353,362,23,381,36,27],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[397],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[398,46,46,47,47,426,427,432,428,429,433,397,430,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,399,400,401,456,234,457,458,402,459,403,404,405,34,406,6,407,48,460,461,408,409,410,462,463,464,465,466,411,467,468,412,469,470,471,472,473,474,475,476,477,413,478,479,480,481,482,414,483,484,287,288,289,8,39,485,486,415,416,417,418,419,420,487,49,488,421,489,50,490,422,7,423,14,424,15,491,425,52,492,431,493,494,16,17,53],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[93,150,151,157,158,161,162,31,179,182,324,325,326,327,338,339,344,345,350,353],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[14,495,16,17],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[121],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[283],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"shouldBeUsedInOneThread"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"this.org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[6,463,287,487,7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.internal.matchers.Null:35","failures":[23],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":22,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":156,"org.easymock.tests2.UsageTest.argumentsOrdered":345,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":307,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":198,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":35,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":65,"org.easymock.tests2.DelegateToTest.testReturnException":329,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":165,"org.easymock.tests.MockingTest.testPartialClassMocking":399,"org.easymock.tests.MockClassControlTest.testToString":445,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":323,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":90,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":472,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":412,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":66,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":360,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":9,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":380,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":144,"org.easymock.tests2.UsageTest.wrongArguments":339,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":321,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":128,"org.easymock.samples.ExampleTest.answerVsDelegate":55,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":452,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":187,"org.easymock.tests2.UsageConstraintsTest.testNull":23,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":405,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":450,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":306,"org.easymock.tests2.CaptureTest.testPrimitive":271,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":148,"org.easymock.tests.UsageTest.moreThanOneArgument":157,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":85,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":269,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":226,"org.easymock.tests.UsageTest.argumentsOrdered":162,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":121,"org.easymock.tests.UsageVarargTest.varargIntAccepted":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":203,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":246,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":487,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":373,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":190,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":250,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":43,"org.easymock.tests.ReplayStateInvalidUsageTest.times":242,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":315,"org.easymock.tests2.AnswerTest.answer":291,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":26,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":205,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":358,"org.easymock.tests2.CaptureTest.testAnd":18,"org.easymock.tests2.UsageTest.strictResetToDefault":337,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":461,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":50,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":225,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":116,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":301,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":125,"org.easymock.tests2.DelegateToTest.testDelegate":333,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":81,"org.easymock.tests.LimitationsTest.mockFinalMethod":459,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":134,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":266,"org.easymock.tests2.CaptureTest.testCapture1_2446744":272,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":79,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":356,"org.easymock.tests.UsageThrowableTest.throwError":136,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":237,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":153,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":374,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":484,"org.easymock.samples.PartialClassMockTest.testGetArea":398,"org.easymock.tests.MockingTest.testInterfaceMocking":185,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":238,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":247,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":473,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":67,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":234,"org.easymock.tests2.UsageTest.niceToStrict":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":188,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":40,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":422,"org.easymock.tests2.MockBuilderTest.testCreateMock":491,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":480,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":318,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":32,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":75,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":302,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":3,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":212,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":126,"org.easymock.tests.UsageOverloadedMethodTest.overloading":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":482,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":477,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":385,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":173,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":105,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":221,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":384,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":277,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":255,"org.easymock.tests.MockClassControlTest.testEquals":449,"org.easymock.tests2.EasyMockSupportClassTest.testAll":411,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":429,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":132,"org.easymock.tests2.CaptureTest.testCaptureAll":270,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":357,"org.easymock.tests.MockNameTest.defaultName":92,"org.easymock.tests2.UsageConstraintsTest.testMatches":44,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":227,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":235,"org.easymock.samples.ExampleTest.voteForRemovals":59,"org.easymock.tests.UsageVarargTest.allKinds":263,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":149,"org.easymock.samples.BasicClassMockTest.testPrintContent":427,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":133,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":142,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":348,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":169,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":370,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":441,"org.easymock.tests2.UsageConstraintsTest.greaterThan":386,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":467,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":115,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":410,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":442,"org.easymock.samples.ExampleTest.voteForRemoval":56,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":462,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":282,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":154,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":6,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":430,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":336,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":195,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":299,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":465,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":164,"org.easymock.tests2.CaptureTest.testCaptureFirst":280,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":194,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":300,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":347,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":176,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":101,"org.easymock.tests2.CaptureTest.testCapture2_2446744":279,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":284,"org.easymock.tests2.UsageTest.moreThanOneArgument":338,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":425,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":206,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":262,"org.easymock.tests.GenericTest.testBridgedEquals":397,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":219,"org.easymock.tests.UsageExpectAndReturnTest.longType":97,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":130,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":297,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":492,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":84,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":389,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":120,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":82,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":0,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":224,"org.easymock.tests.UsageCallCountTest.tooManyCalls":220,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":41,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":481,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":102,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":320,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":71,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":141,"org.easymock.tests.MockingTest.testNiceClassMocking":456,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":416,"org.easymock.tests.MockingTest.testClassMocking":454,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":488,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":213,"org.easymock.tests2.UsageConstraintsTest.testContains":383,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":289,"org.easymock.tests2.UsageConstraintsTest.testFind":378,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":223,"org.easymock.tests.MockTypeTest.fromEasyMockClass":152,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":396,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":177,"org.easymock.tests.UsageExpectAndReturnTest.object":104,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":407,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":319,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":305,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":10,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":257,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":232,"org.easymock.tests.UsageTest.exactCallCountByLastCall":163,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":193,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":122,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":89,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":17,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":110,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":252,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":172,"org.easymock.tests.MockClassControlTest.testHashCode":448,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":364,"org.easymock.tests2.EasyMockSupportTest.testVerify":309,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":475,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":42,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":123,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":170,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":2,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":355,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":393,"org.easymock.tests.UsageVarargTest.varargCharAccepted":256,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":434,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":211,"org.easymock.tests2.UsageTest.openCallCountByLastCall":341,"org.easymock.tests.DefaultClassInstantiatorTest.object":435,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":308,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":251,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":476,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":73,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":139,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":313,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":363,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":447,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":408,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":72,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":111,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":135,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":446,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":414,"org.easymock.tests2.UsageTest.resumeIfFailure":346,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":451,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":167,"org.easymock.tests2.StubTest.stubWithReturnValue":362,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":14,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":390,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":103,"org.easymock.tests2.SerializationTest.testAllMockedMethod":39,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":204,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":33,"org.easymock.samples.SupportTest.voteForRemovals":63,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":432,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":366,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":78,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":37,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":210,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":292,"org.easymock.tests.UsageExpectAndThrowTest.object":76,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":91,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":5,"org.easymock.tests2.DelegateToTest.testWrongClass":331,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":264,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":265,"org.easymock.tests.UsageStrictMockTest.range":181,"org.easymock.samples.ConstructorCalledMockTest.testTax":46,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":334,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":304,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":415,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":77,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":464,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":161,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":244,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":127,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":28,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":88,"org.easymock.tests2.CaptureTest.testCaptureNone":276,"org.easymock.tests.UsageUnorderedTest.message":93,"org.easymock.tests.UsageVerifyTest.twoReturns":151,"org.easymock.tests.UsageVarargTest.varargByteAccepted":261,"org.easymock.tests2.ThreadingTest.testThreadSafe":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":478,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":217,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":426,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":233,"org.easymock.tests2.CaptureTest.testCapture_2617107":19,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":268,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":208,"org.easymock.tests2.UsageConstraintsTest.any":381,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":241,"org.easymock.tests2.StubTest.stub":361,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":166,"org.easymock.tests.UsageExpectAndThrowTest.longType":69,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":209,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":439,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":45,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":351,"org.easymock.tests2.SerializationTest.testClass":8,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":368,"org.easymock.tests.LimitationsTest.mockNativeMethod":402,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":433,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":113,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":312,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":354,"org.easymock.tests2.NameTest.nameForMocksControl":327,"org.easymock.tests2.MockedExceptionTest.testMockedException":288,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":468,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":160,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":401,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":395,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":70,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":403,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":424,"org.easymock.tests.MockingTest.testNicePartialClassMocking":400,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":406,"org.easymock.tests2.CaptureTest.testCaptureLast":275,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":310,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":267,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":420,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":25,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":388,"org.easymock.tests.MockingTest.testTwoMocks":455,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":94,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":74,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":344,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":391,"org.easymock.samples.ExampleTest.removeNonExistingDocument":60,"org.easymock.tests.UsageStrictMockTest.differentMethods":182,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":239,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":317,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":365,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":437,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":283,"org.easymock.tests2.MockBuilderTest.testCreateMockString":431,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":443,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":469,"org.easymock.tests.UsageExpectAndThrowTest.floatType":68,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":466,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":294,"org.easymock.tests.UsageVerifyTest.twoThrows":150,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":53,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":413,"org.easymock.samples.ExampleTest.voteAgainstRemoval":57,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":199,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":409,"org.easymock.tests.LimitationsTest.privateConstructor":458,"org.easymock.tests2.UsageConstraintsTest.testNotNull":27,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":143,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":287,"org.easymock.tests2.UsageTest.defaultResetToNice":343,"org.easymock.samples.ExampleTest.voteAgainstRemovals":54,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":200,"org.easymock.tests.UsageVarargTest.differentLength":258,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":311,"org.easymock.tests2.CallbackTest.callback":286,"org.easymock.tests2.UsageConstraintsTest.equals":377,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":48,"org.easymock.tests.UsageTest.openCallCountByLastCall":159,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":375,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":146,"org.easymock.tests.UsageCallCountTest.tooFewCalls":215,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":418,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":129,"org.easymock.tests.UsageThrowableTest.throwCheckedException":140,"org.easymock.tests.MockingTest.testStrictClassMocking":453,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":29,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":419,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":119,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":417,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":316,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":243,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":322,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":296,"org.easymock.tests.ObjectMethodsTest.testHashCode":231,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":285,"org.easymock.tests2.NameTest.nameForNiceMock":326,"org.easymock.tests2.DependencyTest.testInterfaceMocking":359,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":11,"org.easymock.samples.ExampleTest.addDocument":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":479,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":483,"org.easymock.tests2.DelegateToTest.testStubDelegate":330,"org.easymock.tests2.AnswerTest.stubAnswer":295,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":179,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":51,"org.easymock.tests.UsageVarargTest.varargLongAccepted":260,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":197,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":112,"org.easymock.tests.UsageExpectAndReturnTest.floatType":96,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":16,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":47,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":387,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":174,"org.easymock.tests.UsageThrowableTest.noUpperLimit":137,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":372,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":376,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":493,"org.easymock.tests2.SerializationTest.test":38,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":273,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":436,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":95,"org.easymock.tests2.UsageConstraintsTest.testSame":379,"org.easymock.samples.SupportTest.addDocument":62,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":470,"org.easymock.tests.GenericTest.testPackageScope":428,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":192,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":371,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":186,"org.easymock.tests2.NameTest.nameForMock":324,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":106,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":52,"org.easymock.tests2.UsageStrictMockTest.differentMethods":353,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":460,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":98,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":80,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":229,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":117,"org.easymock.tests2.MockedExceptionTest.testRealException":290,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":202,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":335,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":495,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":201,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":350,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":145,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":245,"org.easymock.tests2.NameTest.nameForStrictMock":325,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":490,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":394,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":34,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":494,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":438,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":4,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":421,"org.easymock.tests2.UsageStrictMockTest.range":352,"org.easymock.tests2.UsageConstraintsTest.lessThan":392,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":485,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":367,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":12,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":196,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":474,"org.easymock.tests2.CaptureTest.testCaptureRightOne":20,"org.easymock.tests2.UsageConstraintsTest.testOr":24,"org.easymock.tests.UsageRangeTest.combination":114,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":404,"org.easymock.tests.UsageTest.wrongArguments":158,"org.easymock.tests2.MockBuilderTest.testWithConstructor":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":471,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":444,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":189,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":107,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":440,"org.easymock.tests.UsageVarargTest.varargShortAccepted":259,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":218,"org.easymock.tests2.UsageConstraintsTest.cmpTo":382,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":191,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":342,"org.easymock.tests2.CaptureTest.testCaptureFromStub":278,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":236,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":489,"org.easymock.tests.UsageTest.unexpectedCallWithArray":30,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":31,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":216,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":108,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":180,"org.easymock.tests2.UsageConstraintsTest.constraints":21,"org.easymock.samples.ExampleTest.addAndChangeDocument":61,"org.easymock.tests.UsageStrictMockTest.testVerify":184,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":64,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":178,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":131,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":274,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":486,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":248,"org.easymock.tests.LimitationsTest.abstractClass":457,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":100,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":175,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":249,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":253,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":303}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.Injector:132","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[33],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:138","sourceCode":"java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[34,9,10,17,31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[35,36,36,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,4,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,8,10,95,96,97,98,99,100,101,11,12,102,103,104,15,16,17,18,105,33,106,1,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,26,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,30,31,32,203,204,205,206],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"clazz"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[207,208,209,210,211,23],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:225","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[212,213,214,215],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[134,141,145,216],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Same:37","failures":[126],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[17,18,31,32],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[217,218],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:226","sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"mockClass"}},{"transplant":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[35,219,220,221,36,37,222,223,38,39,224,40,41,225,42,226,227,228,229,230,231,43,232,45,233,233,234,235,236,237,238,239,240,241,242,243,244,245,246,3,247,46,47,48,49,50,51,52,53,55,4,209,5,56,57,6,7,58,59,248,60,249,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,8,9,10,250,251,252,253,254,255,256,257,258,259,260,95,97,98,99,100,261,0,101,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,103,104,282,283,284,285,286,287,288,289,290,291,210,16,292,17,18,293,107,108,109,110,111,112,113,114,115,116,117,118,294,295,296,119,297,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,298,142,143,144,145,146,147,148,149,150,151,152,153,154,299,155,156,300,301,157,158,159,160,161,162,163,164,165,166,167,302,303,168,304,305,306,307,308,309,212,169,170,213,171,172,310,173,311,174,175,26,27,176,312,177,178,179,28,29,180,181,182,183,313,184,314,315,316,185,186,187,188,189,190,214,191,317,192,193,194,195,196,197,198,199,200,201,2,202,318,319,320,30,321,31,32,322,203,204,205,206],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[323,324],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[325],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[49,70,71,78,85,104],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[326,0,327,1,2],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"threadSafe"}},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[238,53,55,57,9,0,262,263,266,268,269,270,271,273,274,275,276,278,279,280,281,328,174,178,202],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[133],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[68,317],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:56","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[221,222,329,330,331,332,333,334,335,336,337,338],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:760","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[339,340,341,34,3,4,8,9,10,16,17,18,26,30,31,32],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[207,208,209,210,211,23],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:322","sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","type":"CtForEachImpl"},"failures":[63,64,9],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[342,343,344],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[68,317],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[323,324],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[120,137,142,345],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":123,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":55,"org.easymock.tests2.UsageTest.argumentsOrdered":29,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":237,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":312,"org.easymock.tests2.StubTest.stubWithReturnValue":202,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":221,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":79,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":142,"org.easymock.tests2.SerializationTest.testAllMockedMethod":302,"org.easymock.tests2.DelegateToTest.testReturnException":303,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":235,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":106,"org.easymock.tests.MockingTest.testPartialClassMocking":67,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":23,"org.easymock.samples.SupportTest.voteForRemovals":38,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":217,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":323,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":54,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":274,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":215,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":262,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":204,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":1,"org.easymock.tests.UsageExpectAndThrowTest.object":272,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":339,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":140,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":165,"org.easymock.tests2.DelegateToTest.testWrongClass":304,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":103,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":104,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":129,"org.easymock.tests2.UsageTest.wrongArguments":27,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":99,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":338,"org.easymock.tests.UsageStrictMockTest.range":17,"org.easymock.samples.ConstructorCalledMockTest.testTax":36,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":288,"org.easymock.samples.ExampleTest.answerVsDelegate":224,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":114,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":195,"org.easymock.tests2.UsageConstraintsTest.testNull":125,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":273,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":188,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":116,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":171,"org.easymock.tests2.CaptureTest.testPrimitive":155,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":101,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":281,"org.easymock.tests.UsageTest.moreThanOneArgument":4,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":6,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":287,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":187,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":207,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":48,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":33,"org.easymock.tests2.CaptureTest.testCaptureNone":158,"org.easymock.tests.UsageUnorderedTest.message":3,"org.easymock.tests.UsageVerifyTest.twoReturns":10,"org.easymock.tests.UsageVarargTest.varargByteAccepted":258,"org.easymock.tests2.ThreadingTest.testThreadSafe":147,"org.easymock.tests.UsageTest.argumentsOrdered":7,"org.easymock.tests.UsageVarargTest.varargIntAccepted":252,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":243,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":327,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":24,"org.easymock.tests2.CaptureTest.testCapture_2617107":299,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":90,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":25,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":212,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":0,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":213,"org.easymock.tests2.UsageConstraintsTest.any":130,"org.easymock.tests2.StubTest.stub":2,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":94,"org.easymock.tests.UsageExpectAndThrowTest.longType":265,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":236,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":342,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":21,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":321,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":146,"org.easymock.tests2.SerializationTest.testClass":166,"org.easymock.tests.LimitationsTest.mockNativeMethod":45,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":152,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":89,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":44,"org.easymock.tests2.AnswerTest.answer":183,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":309,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":336,"org.easymock.tests2.CaptureTest.testAnd":153,"org.easymock.tests2.UsageTest.strictResetToDefault":175,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":322,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":317,"org.easymock.tests2.MockedExceptionTest.testMockedException":296,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":47,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":97,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":111,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":57,"org.easymock.tests2.DelegateToTest.testDelegate":305,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":266,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":69,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":185,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":172,"org.easymock.tests.MockingTest.testNicePartialClassMocking":68,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":277,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":190,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":334,"org.easymock.tests2.CaptureTest.testCaptureLast":157,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":238,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":12,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":201,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":128,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":231,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":141,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":11,"org.easymock.tests2.CaptureTest.testCapture1_2446744":156,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":70,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":275,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":307,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":270,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":28,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":144,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":326,"org.easymock.tests.UsageThrowableTest.throwError":60,"org.easymock.tests.UsageStrictMockTest.differentMethods":18,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":331,"org.easymock.tests2.ConstraintsToStringTest.andToString":22,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":149,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":333,"org.easymock.tests2.MockBuilderTest.testCreateMockString":311,"org.easymock.tests.UsageExpectAndThrowTest.floatType":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":50,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":136,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":313,"org.easymock.tests.UsageVerifyTest.twoThrows":9,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":205,"org.easymock.samples.PartialClassMockTest.testGetArea":35,"org.easymock.tests2.CompareToTest.testLessOrEqual":345,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":91,"org.easymock.samples.ExampleTest.voteAgainstRemoval":41,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":105,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":193,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":263,"org.easymock.tests2.UsageTest.niceToStrict":176,"org.easymock.tests2.UsageConstraintsTest.testNotNull":143,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":295,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":66,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":170,"org.easymock.tests2.MockBuilderTest.testCreateMock":310,"org.easymock.tests2.UsageTest.defaultResetToNice":179,"org.easymock.samples.ExampleTest.voteAgainstRemovals":39,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":85,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":335,"org.easymock.tests.UsageVarargTest.differentLength":255,"org.easymock.tests2.CallbackTest.callback":318,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":337,"org.easymock.tests.UsageTest.openCallCountByLastCall":56,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":271,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":211,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":112,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":120,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":286,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":261,"org.easymock.tests.UsageCallCountTest.tooFewCalls":241,"org.easymock.tests.UsageOverloadedMethodTest.overloading":52,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":284,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":134,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":198,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":81,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":51,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":343,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":133,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":159,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":289,"org.easymock.tests.UsageThrowableTest.throwCheckedException":63,"org.easymock.tests2.EasyMockSupportClassTest.testAll":203,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":232,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":279,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":208,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":308,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":229,"org.easymock.tests2.CaptureTest.testCaptureAll":154,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":248,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":200,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":197,"org.easymock.tests2.UsageConstraintsTest.testMatches":135,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":199,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":314,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":49,"org.easymock.samples.ExampleTest.voteForRemovals":42,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":151,"org.easymock.tests.UsageVarargTest.allKinds":260,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":8,"org.easymock.tests2.DependencyTest.testInterfaceMocking":164,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":230,"org.easymock.samples.BasicClassMockTest.testPrintContent":220,"org.easymock.samples.ExampleTest.addDocument":225,"org.easymock.tests2.DelegateToTest.testStubDelegate":168,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":65,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":319,"org.easymock.tests2.AnswerTest.stubAnswer":184,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":239,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":16,"org.easymock.tests2.UsageConstraintsTest.greaterThan":137,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":96,"org.easymock.tests.UsageVarargTest.varargLongAccepted":257,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":194,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":293,"org.easymock.samples.ExampleTest.voteForRemoval":40,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":148,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":88,"org.easymock.tests.UsageExpectAndReturnTest.floatType":72,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":214,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":182,"org.easymock.tests2.ConstraintsToStringTest.orToString":19,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":37,"org.easymock.tests.UsageThrowableTest.noUpperLimit":249,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":14,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":138,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":247,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":121,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":174,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":300,"org.easymock.tests2.SerializationTest.test":167,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":344,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":109,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":61,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":71,"org.easymock.tests2.UsageConstraintsTest.testSame":126,"org.easymock.samples.SupportTest.addDocument":223,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":234,"org.easymock.tests2.CaptureTest.testCaptureFirst":163,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":110,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":181,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":285,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":77,"org.easymock.tests.GenericTest.testPackageScope":43,"org.easymock.tests2.UsageTest.moreThanOneArgument":26,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":150,"org.easymock.tests2.CaptureTest.testCapture2_2446744":162,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":173,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":332,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":259,"org.easymock.tests.GenericTest.testBridgedEquals":218,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":245,"org.easymock.tests.UsageExpectAndReturnTest.longType":73,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":227,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":107,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":280,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":82,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":298,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":102,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":278,"org.easymock.tests2.UsageStrictMockTest.differentMethods":32,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":46,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":74,"org.easymock.tests.UsageCallCountTest.tooManyCalls":246,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":276,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":98,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":240,"org.easymock.tests2.MockedExceptionTest.testRealException":297,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":78,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":267,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":30,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":64,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":100,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":196,"org.easymock.tests2.UsageConstraintsTest.testContains":132,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":119,"org.easymock.tests2.UsageConstraintsTest.testFind":124,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":53,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":315,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":189,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":316,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":290,"org.easymock.tests.UsageExpectAndReturnTest.object":80,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":340,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":139,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":191,"org.easymock.tests.ErrorMessageTest.testGetters":341,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":169,"org.easymock.tests2.UsageStrictMockTest.range":31,"org.easymock.tests2.UsageConstraintsTest.lessThan":145,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":115,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":254,"org.easymock.tests.UsageTest.exactCallCountByLastCall":58,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":325,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":59,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":108,"org.easymock.tests2.CaptureTest.testCaptureRightOne":160,"org.easymock.tests2.UsageConstraintsTest.testOr":127,"org.easymock.tests.UsageRangeTest.combination":95,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":250,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":86,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":186,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":283,"org.easymock.tests.UsageTest.wrongArguments":5,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":330,"org.easymock.tests2.EasyMockSupportTest.testVerify":294,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":75,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":83,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":282,"org.easymock.tests.UsageVarargTest.varargShortAccepted":256,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":306,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":244,"org.easymock.tests2.UsageConstraintsTest.cmpTo":131,"org.easymock.tests.UsageVarargTest.varargCharAccepted":253,"org.easymock.tests2.CompareToTest.testLessThan":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":328,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":320,"org.easymock.tests2.UsageTest.openCallCountByLastCall":177,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":178,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":118,"org.easymock.tests2.CaptureTest.testCaptureFromStub":161,"org.easymock.tests.UsageTest.unexpectedCallWithArray":209,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":269,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":210,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":62,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":242,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":324,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":329,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":84,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":292,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":192,"org.easymock.tests2.UsageConstraintsTest.constraints":122,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":268,"org.easymock.samples.ExampleTest.addAndChangeDocument":226,"org.easymock.tests2.ConstraintsToStringTest.notToString":20,"org.easymock.tests.CapturesMatcherTest.test":233,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":87,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":222,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":206,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":228,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":301,"org.easymock.tests2.UsageTest.resumeIfFailure":180,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":92,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":76,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":93,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":15,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":251,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":34,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":113}}]

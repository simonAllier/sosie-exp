[{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:142","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[30,31,32,33,34,35,0,1,2,36,37,3,4,38,39,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,10,94,95,96,97,98,11,12,13,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,16,17,147,18,19,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,20,21,174,175,176,177,178,22,23,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,24,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,26,276,277,27,278,28,29,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[30,31,32,33,34,35,0,36,37,38,303,304,305,306,307,308,309,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,71,72,79,80,81,82,83,84,310,85,86,87,88,89,311,91,92,93,9,10,94,95,96,97,98,11,12,13,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,312,134,135,136,137,138,139,140,313,314,17,18,19,149,150,315,316,317,318,319,320,321,322,323,151,152,153,154,155,157,159,160,161,162,164,165,166,166,167,167,171,172,173,20,174,176,177,178,179,180,182,183,185,186,188,190,191,192,193,194,195,196,197,199,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,227,228,229,230,231,324,325,232,233,234,239,240,241,242,243,244,245,246,247,248,249,250,24,326,251,252,253,327,254,255,256,258,259,260,261,262,263,264,265,266,267,268,269,270,272,273,274,275,26,27,28,29,280,281,282,283,284,285,286,287,288,289,290,292,293,296,297,298,299,300,301,302],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[35,37,307,308,309,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,89,93,12,119,121,122,123,124,125,126,138,172,177,281],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[1,2,3,4,328,90,10,12,13,16,18,21,22,23,28],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[88,329,160,251,253,327,254],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,330,331,328,8,9,10,11,12,13,17,18,19,332,333,334,335,336,337,20,27,28,29],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[304,305,306,338,339],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[207],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"method","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1039","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[218,219,225,226,230,231,340,282],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[341,342,312,157,181,343,182,344,183,184,185,186,187,188,345,189,198,346,255],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:117","failures":[87,160,231,232,234,243,244,250],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[347],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[348,349],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[212],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[341,342,312,157,181,343,182,344,183,184,185,186,187,188,345,189,198,346,255],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[350,351,352,353,354,355,356,357,255,358],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[359,360],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:345","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:945","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[204,221,224],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[38,42,43,45,50,55,79,80,81,82,83,84,87,361,88,89,362,311,91,92,8,9,94,95,98,11,12,13,101,102,104,109,114,119,121,122,123,124,125,126,132,138,140,17,18,19,149,150,315,151,152,153,154,155,157,159,160,161,162,164,171,172,173,174,178,180,182,183,185,186,188,190,191,192,193,194,195,196,197,199,201,202,203,207,208,209,210,212,213,214,215,217,218,220,221,223,224,225,226,227,228,231,234,241,248,249,24,251,253,254,255,256,258,259,260,261,262,263,264,265,266,267,268,269,270,272,273,274,275,26,27,28,29,282,283,284,285,286,287,288,289,290,291,292,293,296,297,298,299,302],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:243","failures":[30,31,32,33,303,81,82,83,84,310,85,86,91,94,99,100,101,102,103,104,107,108,110,111,112,114,115,116,117,118,132,312,140,17,18,19,149,150,316,317,318,151,152,153,154,155,157,159,161,162,164,171,182,183,185,186,188,190,191,192,193,194,195,196,197,199,201,202,203,248,252,258,272,273,274,275,27,28,29,282,283,284,285,286,287,288],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:108","sourceCode":"if (org.easymock.TestSubject != null) {\n    org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"f":"f"}},{"position":"org.easymock.internal.RecordState:108","failures":[35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,89,93,97,12,119,121,122,123,124,125,126,138,172,177,281],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[174],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[363,364,365,366,367,368],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[3,22,369],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[289,291,292,293,294,295,296,298,370,299,300,302],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:278","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:37","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(int.int, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:70","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","type":"CtForEachImpl"},"failures":[156,158,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[371,376,379,384],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":207,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":35,"org.easymock.tests2.UsageTest.argumentsOrdered":23,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":269,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":375,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":175,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":158,"org.easymock.tests2.DelegateToTest.testReturnException":251,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":135,"org.easymock.tests.MockingTest.testPartialClassMocking":81,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":303,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":40,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":273,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":191,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":352,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":213,"org.easymock.tests2.UsageTest.wrongArguments":21,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":94,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":386,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":143,"org.easymock.samples.ExampleTest.answerVsDelegate":160,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":342,"org.easymock.tests2.UsageConstraintsTest.testNull":209,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":195,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":268,"org.easymock.tests2.CaptureTest.testPrimitive":292,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":98,"org.easymock.tests.UsageTest.moreThanOneArgument":0,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":59,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":194,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":32,"org.easymock.tests.UsageTest.argumentsOrdered":4,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":319,"org.easymock.tests.UsageVarargTest.varargIntAccepted":62,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":337,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":151,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":181,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":356,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":329,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":155,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":26,"org.easymock.tests2.AnswerTest.answer":231,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":238,"org.easymock.tests2.CaptureTest.testAnd":289,"org.easymock.tests2.UsageTest.strictResetToDefault":173,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":200,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":31,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":85,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":263,"org.easymock.tests2.DelegateToTest.testDelegate":254,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":323,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":55,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":138,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":131,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":8,"org.easymock.tests2.CaptureTest.testCapture1_2446744":293,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":53,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":236,"org.easymock.tests.UsageThrowableTest.throwError":119,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":378,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":34,"org.easymock.samples.PartialClassMockTest.testGetArea":157,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":152,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":316,"org.easymock.tests2.UsageTest.niceToStrict":174,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":41,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":183,"org.easymock.tests2.MockBuilderTest.testCreateMock":187,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":385,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":49,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":333,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":264,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":309,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":141,"org.easymock.tests.UsageOverloadedMethodTest.overloading":92,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":89,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":218,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":110,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":91,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":217,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":298,"org.easymock.tests2.EasyMockSupportClassTest.testAll":272,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":133,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":57,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":129,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":237,"org.easymock.tests2.CaptureTest.testCaptureAll":290,"org.easymock.tests.MockNameTest.defaultName":7,"org.easymock.tests2.UsageConstraintsTest.testMatches":219,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":33,"org.easymock.samples.ExampleTest.voteForRemovals":164,"org.easymock.tests.UsageVarargTest.allKinds":70,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":11,"org.easymock.samples.BasicClassMockTest.testPrintContent":169,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":130,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":125,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":276,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":139,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":327,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":376,"org.easymock.tests2.UsageConstraintsTest.greaterThan":221,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":357,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":310,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":203,"org.easymock.samples.ExampleTest.voteForRemoval":161,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":368,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":246,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":198,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":172,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":339,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":261,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":121,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":134,"org.easymock.tests2.CaptureTest.testCaptureFirst":302,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":326,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":262,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":180,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":90,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":106,"org.easymock.tests2.UsageTest.moreThanOneArgument":20,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":248,"org.easymock.tests2.CaptureTest.testCapture2_2446744":301,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":188,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":69,"org.easymock.tests.GenericTest.testBridgedEquals":349,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":77,"org.easymock.tests.UsageExpectAndReturnTest.longType":102,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":127,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":259,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":58,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":345,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":226,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":318,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":56,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":30,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":305,"org.easymock.tests.UsageCallCountTest.tooManyCalls":78,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":72,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":107,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":45,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":124,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":283,"org.easymock.tests2.UsageConstraintsTest.testContains":216,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":343,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":241,"org.easymock.tests2.UsageConstraintsTest.testFind":208,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":93,"org.easymock.tests.MockTypeTest.fromEasyMockClass":5,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":145,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":244,"org.easymock.tests.UsageExpectAndReturnTest.object":109,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":267,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":64,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":353,"org.easymock.tests.UsageTest.exactCallCountByLastCall":38,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":347,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":79,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":320,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":358,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":115,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":60,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":88,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":372,"org.easymock.tests2.EasyMockSupportTest.testVerify":271,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":321,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":87,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":308,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":235,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":340,"org.easymock.tests.UsageVarargTest.varargCharAccepted":63,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":277,"org.easymock.tests2.UsageTest.openCallCountByLastCall":176,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":270,"org.easymock.tests.DefaultClassInstantiatorTest.object":363,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":307,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":14,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":328,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":47,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":122,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":371,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":201,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":46,"org.easymock.tests.CapturesMatcherTest.test":39,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":116,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":275,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":335,"org.easymock.tests2.UsageTest.resumeIfFailure":179,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":341,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":137,"org.easymock.tests2.StubTest.stubWithReturnValue":281,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":350,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":108,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":227,"org.easymock.tests2.SerializationTest.testAllMockedMethod":257,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":313,"org.easymock.samples.SupportTest.voteForRemovals":171,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":348,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":52,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":314,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":324,"org.easymock.tests.UsageExpectAndThrowTest.object":50,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":224,"org.easymock.tests2.DelegateToTest.testWrongClass":253,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":149,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":150,"org.easymock.samples.ConstructorCalledMockTest.testTax":166,"org.easymock.tests.UsageStrictMockTest.range":18,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":25,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":266,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":282,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":51,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":185,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":3,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":142,"org.easymock.tests2.CaptureTest.testCaptureNone":297,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":317,"org.easymock.tests.UsageUnorderedTest.message":10,"org.easymock.tests.UsageVerifyTest.twoReturns":13,"org.easymock.tests.UsageVarargTest.varargByteAccepted":68,"org.easymock.tests2.ThreadingTest.testThreadSafe":245,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":75,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":168,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":15,"org.easymock.tests2.CaptureTest.testCapture_2617107":291,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":97,"org.easymock.tests2.UsageConstraintsTest.any":214,"org.easymock.tests2.StubTest.stub":280,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":306,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":136,"org.easymock.tests.UsageExpectAndThrowTest.longType":43,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":359,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":278,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":24,"org.easymock.tests2.SerializationTest.testClass":255,"org.easymock.tests.LimitationsTest.mockNativeMethod":140,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":118,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":312,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":381,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":279,"org.easymock.tests2.MockedExceptionTest.testMockedException":240,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":382,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":37,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":44,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":83,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":192,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":186,"org.easymock.tests.MockingTest.testNicePartialClassMocking":82,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":197,"org.easymock.tests2.CaptureTest.testCaptureLast":296,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":351,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":379,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":9,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":212,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":288,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":225,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":99,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":48,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":22,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":229,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":384,"org.easymock.tests.UsageStrictMockTest.differentMethods":19,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":373,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":365,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":247,"org.easymock.tests2.ConstraintsToStringTest.andToString":336,"org.easymock.tests2.MockBuilderTest.testCreateMockString":189,"org.easymock.tests.UsageExpectAndThrowTest.floatType":42,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":220,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":232,"org.easymock.tests.UsageVerifyTest.twoThrows":12,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":274,"org.easymock.samples.ExampleTest.voteAgainstRemoval":162,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":315,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":202,"org.easymock.tests2.UsageConstraintsTest.testNotNull":228,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":126,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":239,"org.easymock.tests2.UsageTest.defaultResetToNice":178,"org.easymock.samples.ExampleTest.voteAgainstRemovals":159,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":114,"org.easymock.tests.UsageVarargTest.differentLength":65,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":380,"org.easymock.tests2.CallbackTest.callback":250,"org.easymock.tests2.UsageConstraintsTest.equals":369,"org.easymock.tests.UsageTest.openCallCountByLastCall":36,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":204,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":96,"org.easymock.tests.UsageCallCountTest.tooFewCalls":73,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":285,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":144,"org.easymock.tests.UsageThrowableTest.throwCheckedException":123,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":330,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":80,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":287,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":284,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":383,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":286,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":234,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":355,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":249,"org.easymock.tests2.DependencyTest.testInterfaceMocking":190,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":354,"org.easymock.samples.ExampleTest.addDocument":163,"org.easymock.tests2.DelegateToTest.testStubDelegate":252,"org.easymock.tests2.AnswerTest.stubAnswer":233,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":17,"org.easymock.tests.UsageVarargTest.varargLongAccepted":67,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":148,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":117,"org.easymock.tests.UsageExpectAndReturnTest.floatType":101,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":258,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":167,"org.easymock.tests2.ConstraintsToStringTest.orToString":332,"org.easymock.tests.UsageThrowableTest.noUpperLimit":120,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":222,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":362,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":205,"org.easymock.tests2.SerializationTest.test":256,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":294,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":360,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":364,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":100,"org.easymock.tests2.UsageConstraintsTest.testSame":210,"org.easymock.samples.SupportTest.addDocument":170,"org.easymock.tests.GenericTest.testPackageScope":132,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":322,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":377,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":111,"org.easymock.tests2.UsageStrictMockTest.differentMethods":29,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":103,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":54,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":86,"org.easymock.tests2.MockedExceptionTest.testRealException":242,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":6,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":331,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":27,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":95,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":243,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":196,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":223,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":366,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":182,"org.easymock.tests2.UsageStrictMockTest.range":28,"org.easymock.tests2.UsageConstraintsTest.lessThan":230,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":374,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":260,"org.easymock.tests2.CaptureTest.testCaptureRightOne":299,"org.easymock.tests2.UsageConstraintsTest.testOr":211,"org.easymock.tests.UsageRangeTest.combination":84,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":193,"org.easymock.tests.UsageTest.wrongArguments":2,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":104,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":112,"org.easymock.tests.UsageVarargTest.varargShortAccepted":66,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":367,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":76,"org.easymock.tests2.UsageConstraintsTest.cmpTo":215,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":325,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":177,"org.easymock.tests2.CaptureTest.testCaptureFromStub":300,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":344,"org.easymock.tests.UsageTest.unexpectedCallWithArray":1,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":16,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":74,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":113,"org.easymock.tests2.CaptureTest.testCapture":370,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":147,"org.easymock.tests2.UsageConstraintsTest.constraints":206,"org.easymock.samples.ExampleTest.addAndChangeDocument":165,"org.easymock.tests2.ConstraintsToStringTest.notToString":334,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":156,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":146,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":128,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":295,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":153,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":346,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":105,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":154,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":311,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":61,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":265}}]

[{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:83","failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:51","failures":[25,17,18,20,24],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[26,27,28,29,30,31],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:322","sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","type":"CtForEachImpl"},"failures":[32,33,34,35,36,37,17],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[38,39],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[40,41,42],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"delegateTo"}},{"position":"org.easymock.internal.MockBuilder:201","failures":[43,44,45,46,47,48,48,49,49,50,51,52,53,54,55,56,57,0,58,59,60,61,62,63,64,65,66,67,68,69,2,70],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[71,72],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:582","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,69],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[100,101,3,7,8],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[102,103,104,105,106,107,108,109,110,111],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:879","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[112,113],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1725","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:303","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"failures":[114,115,116,117,118,119,120,121,70,122,123,124,125],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[1,2,4,5,6,7,8],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[1,2,4,5,6,7,8],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[126,0,127,128],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:51","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[129,32,33,130,131,34,35,132,133,134,135,136,137,138,139,140,141,36,37,142,143,114,115,116,117,118,119,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,120,163,46,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,16,209,210,121,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,17,18,226,227,72,228,229,230,20,231,47,232,233,234,235,236,237,48,48,49,49,238,239,240,241,242,243,244,245,52,53,246,247,55,56,57,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,102,112,273,274,275,276,277,278,279,280,0,127,59,62,63,64,67,281,282,283,284,285,286,287,288,289,290,39,291,292,293,294,80,87,295,296,297,298,299,300,301,302,303,304,305,93,69,70,122,123,124,306,307,308,309,310,311,312,125,313,314,41,315,42,316,317,318,319,104,320,106,109,110,321,322,323,324,111,325,24,326],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[16,327,25,17,18,20,24],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:920","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[275,276],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:328","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:295","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:32","sourceCode":"new java.util.concurrent.locks.ReentrantLock()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1543","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[328],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[126,0,127,128],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":260,"org.easymock.tests2.UsageTest.argumentsOrdered":23,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":155,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":304,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":81,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":40,"org.easymock.tests2.StubTest.stubWithReturnValue":125,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":1,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":277,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":195,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":73,"org.easymock.tests2.SerializationTest.testAllMockedMethod":128,"org.easymock.tests2.DelegateToTest.testReturnException":315,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":115,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":164,"org.easymock.tests.MockingTest.testPartialClassMocking":206,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":101,"org.easymock.samples.SupportTest.voteForRemovals":238,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":45,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":78,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":160,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":54,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":178,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":126,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":55,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":165,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":166,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":39,"org.easymock.tests.UsageExpectAndThrowTest.object":176,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":314,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":275,"org.easymock.tests2.DelegateToTest.testWrongClass":316,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":4,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":148,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":149,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":266,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":209,"org.easymock.tests2.UsageTest.wrongArguments":21,"org.easymock.samples.ConstructorCalledMockTest.testTax":48,"org.easymock.tests.UsageStrictMockTest.range":20,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":99,"org.easymock.samples.ExampleTest.answerVsDelegate":233,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":301,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":248,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":44,"org.easymock.tests2.UsageConstraintsTest.testNull":262,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":242,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":177,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":303,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":63,"org.easymock.tests2.CaptureTest.testPrimitive":320,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":212,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests.UsageTest.moreThanOneArgument":156,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":185,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":241,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":219,"org.easymock.tests2.CaptureTest.testCaptureNone":110,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":134,"org.easymock.tests.UsageUnorderedTest.message":16,"org.easymock.tests.UsageVerifyTest.twoReturns":18,"org.easymock.tests2.ThreadingTest.testThreadSafe":307,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":226,"org.easymock.tests.UsageTest.argumentsOrdered":15,"org.easymock.tests2.CaptureTest.testCapture_2617107":105,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":150,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":58,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":8,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":211,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":85,"org.easymock.tests2.UsageConstraintsTest.any":267,"org.easymock.tests2.StubTest.stub":312,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":35,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":154,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":116,"org.easymock.tests.UsageExpectAndThrowTest.longType":169,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":80,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":93,"org.easymock.tests.LimitationsTest.mockNativeMethod":161,"org.easymock.tests2.AnswerTest.answer":290,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":205,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":46,"org.easymock.tests2.CaptureTest.testAnd":319,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":90,"org.easymock.tests2.UsageTest.strictResetToDefault":282,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":92,"org.easymock.tests2.MockedExceptionTest.testMockedException":122,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":298,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":215,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":158,"org.easymock.tests2.DelegateToTest.testDelegate":318,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":229,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":208,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":170,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":239,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":64,"org.easymock.tests.MockingTest.testNicePartialClassMocking":207,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":181,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":244,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":88,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":3,"org.easymock.tests2.CaptureTest.testCaptureLast":109,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":118,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":223,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":265,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":254,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":276,"org.easymock.tests2.CaptureTest.testCapture1_2446744":106,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":186,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":179,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":174,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":22,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":279,"org.easymock.tests.UsageThrowableTest.throwError":138,"org.easymock.tests.UsageStrictMockTest.differentMethods":231,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":95,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":77,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":28,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":309,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":86,"org.easymock.tests2.MockBuilderTest.testCreateMockString":68,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":221,"org.easymock.tests.UsageExpectAndThrowTest.floatType":168,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":102,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":292,"org.easymock.tests.UsageVerifyTest.twoThrows":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":56,"org.easymock.samples.PartialClassMockTest.testGetArea":47,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":151,"org.easymock.samples.ExampleTest.voteAgainstRemoval":235,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":132,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":133,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":53,"org.easymock.tests2.UsageTest.niceToStrict":284,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":167,"org.easymock.tests2.UsageConstraintsTest.testNotNull":278,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":70,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":143,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":62,"org.easymock.tests2.UsageTest.defaultResetToNice":287,"org.easymock.samples.ExampleTest.voteAgainstRemovals":232,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":201,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":89,"org.easymock.tests2.CallbackTest.callback":306,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":51,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":96,"org.easymock.tests.UsageTest.openCallCountByLastCall":157,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":175,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":299,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":257,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":33,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":121,"org.easymock.tests.UsageOverloadedMethodTest.overloading":136,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":271,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":146,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":251,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":197,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":135,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":270,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":321,"org.easymock.tests.UsageThrowableTest.throwCheckedException":36,"org.easymock.tests2.EasyMockSupportClassTest.testAll":247,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":183,"org.easymock.tests2.CaptureTest.testCaptureAll":104,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":253,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":120,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":250,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":94,"org.easymock.tests2.UsageConstraintsTest.testMatches":272,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":252,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":294,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":220,"org.easymock.samples.ExampleTest.voteForRemovals":236,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":7,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":311,"org.easymock.tests2.DependencyTest.testInterfaceMocking":313,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":225,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":6,"org.easymock.tests2.DelegateToTest.testStubDelegate":42,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":142,"org.easymock.tests2.AnswerTest.stubAnswer":293,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":317,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":82,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":119,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":230,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":9,"org.easymock.tests2.UsageConstraintsTest.greaterThan":112,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":65,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":214,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":246,"org.easymock.samples.ExampleTest.voteForRemoval":234,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":31,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":308,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":204,"org.easymock.tests.UsageExpectAndReturnTest.floatType":188,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":69,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":50,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":49,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":273,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":84,"org.easymock.tests.UsageThrowableTest.noUpperLimit":139,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":281,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":258,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":224,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":107,"org.easymock.tests2.SerializationTest.test":127,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":66,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":328,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":296,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":27,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":140,"org.easymock.tests2.UsageConstraintsTest.testSame":263,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":187,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":114,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":41,"org.easymock.tests2.CaptureTest.testCaptureFirst":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":38,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":297,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":289,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":10,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":193,"org.easymock.tests.GenericTest.testPackageScope":163,"org.easymock.tests2.CaptureTest.testCapture2_2446744":324,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":310,"org.easymock.tests2.UsageTest.moreThanOneArgument":283,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":71,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":67,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":83,"org.easymock.tests.UsageExpectAndReturnTest.longType":189,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":87,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":198,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":184,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":222,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":103,"org.easymock.tests2.UsageStrictMockTest.differentMethods":326,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":182,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":217,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":34,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":190,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":180,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":216,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":130,"org.easymock.tests2.MockedExceptionTest.testRealException":124,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":194,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":98,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":100,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":325,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":171,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":210,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":37,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":249,"org.easymock.tests2.UsageConstraintsTest.testContains":269,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":123,"org.easymock.tests2.UsageConstraintsTest.testFind":261,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":137,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":61,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":255,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":243,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":256,"org.easymock.tests.UsageExpectAndReturnTest.object":196,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":327,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":274,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":29,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":245,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":59,"org.easymock.tests2.UsageStrictMockTest.range":24,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":97,"org.easymock.tests2.UsageConstraintsTest.lessThan":280,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":302,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":5,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":79,"org.easymock.tests.UsageTest.exactCallCountByLastCall":159,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":162,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":295,"org.easymock.tests2.CaptureTest.testCaptureRightOne":322,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":227,"org.easymock.tests2.UsageConstraintsTest.testOr":264,"org.easymock.tests.UsageRangeTest.combination":213,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":2,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":240,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":202,"org.easymock.tests.UsageTest.wrongArguments":13,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":145,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":76,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":191,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":199,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":72,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":30,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":32,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":144,"org.easymock.tests2.UsageConstraintsTest.cmpTo":268,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":291,"org.easymock.tests2.UsageTest.openCallCountByLastCall":285,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":286,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":305,"org.easymock.tests.DefaultClassInstantiatorTest.object":26,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":129,"org.easymock.tests2.CaptureTest.testCaptureFromStub":323,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":60,"org.easymock.tests.UsageTest.unexpectedCallWithArray":12,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":11,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":173,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":19,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":141,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":91,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":75,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":200,"org.easymock.tests2.UsageConstraintsTest.constraints":259,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":52,"org.easymock.samples.ExampleTest.addAndChangeDocument":237,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":172,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":203,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":131,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":57,"org.easymock.tests2.CompareToTest.testGreateThan":113,"org.easymock.tests2.UsageTest.resumeIfFailure":288,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":108,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":152,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":192,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":43,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":147,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":153,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":300,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":25}}]

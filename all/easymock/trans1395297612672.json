[{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:223","failures":[361],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:169","sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[6,8,9,13,14,26,43,45,46,47,48,49,50,86,87,89,92,93,94,146,489,490,491,225,229,230,231,283,285,286,287,288,289,308,310,311,312,313,317,318,320,334,335,336,337,340,352,392,394,427,431,432,435,458,474,488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer","m":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[45,492,493,88,494,495],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[496,497,498,499,500,330,331,347,350,485],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[412,414,415,416,417,418,419,421,501,422,423,425],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"failures":[502],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:212","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[15,19],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:125","sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","type":"CtAssignmentImpl"},"failures":[1,2,8,9,10,11,12,13,14,16,17,21,22,23,24,25,26,41,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,87,88,89,90,91,92,93,94,122,503,503,123,124,125,126,127,128,129,130,131,132,133,135,136,139,140,141,142,144,145,146,147,148,149,150,151,165,166,168,172,173,174,175,176,177,191,192,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,227,228,229,230,231,232,233,234,235,245,246,247,248,249,250,251,252,253,254,255,257,258,259,260,261,262,263,264,265,266,272,281,282,283,284,285,286,287,288,289,290,291,299,300,301,302,304,305,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,338,340,344,345,346,348,351,352,354,358,361,371,377,380,381,382,383,384,385,386,388,391,392,393,394,397,400,401,402,403,405,407,408,409,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,445,452,453,454,455,456,457,458,459,461,462,463,464,465,466,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[29,110,117],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Contains:40","failures":[504],"status":-1,"binaryOperator":"(\"contains(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"this.java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[1,2,8,9,10,11,12,13,14,16,17,21,22,23,24,25,26,41,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,87,88,89,90,91,92,93,94,122,123,124,125,126,127,128,129,130,131,132,133,135,136,139,140,141,142,144,145,146,147,148,149,150,151,165,166,168,172,173,174,175,176,177,191,192,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,227,228,229,230,231,232,233,234,235,245,246,247,248,249,250,251,252,253,254,255,257,258,259,260,261,262,263,264,265,266,272,281,282,283,284,285,286,287,288,289,290,291,299,300,301,302,304,305,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,328,329,330,338,340,344,345,346,348,351,352,354,358,361,371,377,380,381,382,383,384,385,386,388,391,392,393,394,397,400,401,402,403,405,407,408,409,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,445,452,453,454,455,456,457,458,459,461,462,463,464,465,466,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lock":"lock"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[2,23,37,102,119,120,121,172,173,174,175,176,177,291,321,322,323,324],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[26,45,46,49,87,89,92,93,230,231,285,288,310,311,317,318,334,335,336,337],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"minimum"}},{"transplant":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[503,123,505,412,413,414,415,416,417,418,419,420,421,501,422,423,424,425,426],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:136","failures":[1,21,22,25,46,123,124,125,126,127,191,192,245,246,247,248,249,258,258,259,259,285,423,456,457,461,462,463,464,470,472,473,475,476,482,483,484],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[8,48,49,90,91,204,225,229,287,288,314,315,457,458,461,463,464,470,473,476,483],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.EasyMock:1952","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[92,140,151,251,317,460,462,463,482,483],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"otherArgument":"o","myArgument":"o"}},{"position":"org.easymock.internal.RecordState:173","failures":[408],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1421","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[26,46,48,49,87,489,490,506,491,229,230,231,285,287,288,310],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[507,508],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1349","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[394],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[496,497,498,509,510,331,347],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[258,259,330,511,512],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[307],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Injector:129","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[394],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[412,413,414,415,422,423,458,459,461,462,463,464,465,466,467,468,477,478,482,483],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1848","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[412,414,422,458,465],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[101,398],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[497,498,500,330,485],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"ret":"ret","clazz":"clazz"}},{"position":"org.easymock.Capture:82","failures":[412,414,415,416,417,418,419,421,501,422,423,425],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[413,424],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[513,514,512],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:176","sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockRule:38","sourceCode":"return new org.easymock.internal.EasyMockStatement(org.junit.runners.model.Statement , java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.StartsWith:40","failures":[515],"status":-1,"binaryOperator":"(\"startsWith(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[16,17,18,41,122,164,165,166,168,183,188,195,258,258,259,259,260,263,264,516,517,518,299,300,301,302,305,306,323,330,338,519,340,341,344,345,346,348,351,352,520,354,358,361,371,377,380,381,383,384,385,386,388,391,392,393,394,485,487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":459,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":86,"org.easymock.tests2.UsageTest.argumentsOrdered":318,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":436,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":105,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":313,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":261,"org.easymock.tests2.DelegateToTest.testReturnException":407,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":173,"org.easymock.tests.MockingTest.testPartialClassMocking":165,"org.easymock.tests.MockClassControlTest.testToString":196,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":333,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":84,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":396,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":365,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":205,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":361,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":489,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":282,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":496,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":466,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":21,"org.easymock.tests2.UsageTest.wrongArguments":311,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":451,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":234,"org.easymock.samples.ExampleTest.answerVsDelegate":251,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":188,"org.easymock.tests2.UsageConstraintsTest.testNull":462,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":170,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":383,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":435,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":201,"org.easymock.tests2.CaptureTest.testPrimitive":415,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":25,"org.easymock.tests.UsageTest.moreThanOneArgument":87,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":224,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":382,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":247,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":178,"org.easymock.tests.UsageTest.argumentsOrdered":93,"org.easymock.tests.UsageVarargTest.varargIntAccepted":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":110,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":123,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":510,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":338,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":277,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":294,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":97,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":127,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":445,"org.easymock.tests.ReplayStateInvalidUsageTest.times":35,"org.easymock.tests2.DependencyTest.testClassMocking":279,"org.easymock.tests2.AnswerTest.answer":397,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":112,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":455,"org.easymock.tests2.CaptureTest.testAnd":412,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":185,"org.easymock.tests2.UsageTest.strictResetToDefault":309,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":391,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":342,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":430,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":227,"org.easymock.tests2.DelegateToTest.testDelegate":411,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":182,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":220,"org.easymock.tests.LimitationsTest.mockFinalMethod":42,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":176,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":132,"org.easymock.tests2.DependencyTest.testClassMockingSupport":280,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":80,"org.easymock.tests2.CaptureTest.testCapture1_2446744":416,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":387,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":218,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":453,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":29,"org.easymock.tests.UsageThrowableTest.throwError":52,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":187,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":20,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":278,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":249,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":0,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":511,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":379,"org.easymock.samples.PartialClassMockTest.testGetArea":260,"org.easymock.tests.MockingTest.testInterfaceMocking":167,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":30,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":124,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":153,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":160,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":206,"org.easymock.tests2.UsageTest.niceToStrict":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":366,"org.easymock.tests2.ThreadingTest.testChangeDefault":507,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":512,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":95,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":344,"org.easymock.tests2.MockBuilderTest.testCreateMock":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":374,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":448,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":494,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":214,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":431,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":184,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":5,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":6,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":232,"org.easymock.tests.UsageOverloadedMethodTest.overloading":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":376,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":472,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":136,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":71,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":202,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":471,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":421,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":143,"org.easymock.tests.MockClassControlTest.testEquals":200,"org.easymock.tests2.EasyMockSupportClassTest.testAll":358,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":17,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":222,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":516,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":454,"org.easymock.tests2.CaptureTest.testCaptureAll":413,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":130,"org.easymock.tests.MockNameTest.defaultName":193,"org.easymock.tests2.UsageConstraintsTest.testMatches":473,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":27,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":248,"org.easymock.samples.ExampleTest.voteForRemovals":255,"org.easymock.tests.UsageVarargTest.allKinds":151,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":131,"org.easymock.samples.BasicClassMockTest.testPrintContent":264,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":58,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":283,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":410,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":177,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":274,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":500,"org.easymock.tests2.UsageConstraintsTest.greaterThan":475,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":359,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":226,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":394,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":244,"org.easymock.samples.ExampleTest.voteForRemoval":252,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":395,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":326,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":189,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":295,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":386,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":122,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":308,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":350,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":102,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":428,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":356,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":172,"org.easymock.tests2.CaptureTest.testCaptureFirst":425,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":101,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":429,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":320,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":139,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":67,"org.easymock.tests2.CaptureTest.testCapture2_2446744":424,"org.easymock.tests2.UsageTest.moreThanOneArgument":310,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":113,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":352,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":150,"org.easymock.tests.GenericTest.testBridgedEquals":19,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":13,"org.easymock.tests.UsageExpectAndReturnTest.longType":63,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":426,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":128,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":520,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":223,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":480,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":161,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":221,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":120,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":245,"org.easymock.tests.UsageCallCountTest.tooManyCalls":14,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":375,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":68,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":450,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":210,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":57,"org.easymock.tests.MockingTest.testNiceClassMocking":171,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":300,"org.easymock.tests.MockingTest.testClassMocking":163,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":519,"org.easymock.tests2.UsageConstraintsTest.testContains":470,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":7,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":323,"org.easymock.tests2.UsageConstraintsTest.testFind":461,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":204,"org.easymock.tests.MockTypeTest.fromEasyMockClass":186,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":405,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":43,"org.easymock.tests.UsageExpectAndReturnTest.object":70,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":388,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":449,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":434,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":497,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":145,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":158,"org.easymock.tests.UsageTest.exactCallCountByLastCall":94,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":100,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":179,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":331,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":140,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":76,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":135,"org.easymock.tests.MockClassControlTest.testHashCode":199,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":268,"org.easymock.tests2.EasyMockSupportTest.testVerify":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":368,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":180,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":133,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":4,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":452,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":439,"org.easymock.tests.UsageVarargTest.varargCharAccepted":144,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":236,"org.easymock.tests2.CaptureTest.testCaptureMultiple":505,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":118,"org.easymock.tests2.UsageTest.openCallCountByLastCall":314,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":513,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":437,"org.easymock.tests.DefaultClassInstantiatorTest.object":237,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":3,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":156,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":369,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":55,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":443,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":267,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":392,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":198,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":211,"org.easymock.tests.CapturesMatcherTest.test":503,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":77,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":119,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":377,"org.easymock.tests2.UsageTest.resumeIfFailure":319,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":183,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":293,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":175,"org.easymock.tests2.StubTest.stubWithReturnValue":291,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":347,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":481,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":69,"org.easymock.tests2.SerializationTest.testAllMockedMethod":487,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":111,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":495,"org.easymock.samples.SupportTest.voteForRemovals":266,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":15,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":270,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":217,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":117,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":398,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":85,"org.easymock.tests.UsageExpectAndThrowTest.object":215,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":478,"org.easymock.tests2.DelegateToTest.testWrongClass":409,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":191,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":192,"org.easymock.tests.UsageStrictMockTest.range":48,"org.easymock.samples.ConstructorCalledMockTest.testTax":258,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":297,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":433,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":299,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":216,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":346,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":37,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":355,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":233,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":492,"org.easymock.tests2.CaptureTest.testCaptureNone":420,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":154,"org.easymock.tests.UsageUnorderedTest.message":26,"org.easymock.tests.UsageVerifyTest.twoReturns":231,"org.easymock.tests.UsageVarargTest.varargByteAccepted":149,"org.easymock.tests2.ThreadingTest.testThreadSafe":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":372,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":11,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":159,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":263,"org.easymock.tests2.CaptureTest.testCapture_2617107":414,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":115,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":24,"org.easymock.tests2.UsageConstraintsTest.any":468,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":34,"org.easymock.tests2.StubTest.stub":290,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":121,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":116,"org.easymock.tests.UsageExpectAndThrowTest.longType":208,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":241,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":33,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":286,"org.easymock.tests2.SerializationTest.testClass":485,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":272,"org.easymock.tests.LimitationsTest.mockNativeMethod":41,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":18,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":79,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":518,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":442,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":289,"org.easymock.tests2.NameTest.nameForMocksControl":337,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":444,"org.easymock.tests2.MockedExceptionTest.testMockedException":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":360,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":91,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":404,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":168,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":209,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":380,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":348,"org.easymock.tests.MockingTest.testNicePartialClassMocking":166,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":385,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":440,"org.easymock.tests2.CaptureTest.testCaptureLast":419,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":81,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":465,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":306,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":479,"org.easymock.tests.MockingTest.testTwoMocks":164,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":307,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":60,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":213,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":317,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":483,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":508,"org.easymock.samples.ExampleTest.removeNonExistingDocument":256,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":447,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":31,"org.easymock.tests.UsageStrictMockTest.differentMethods":49,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":269,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":239,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":327,"org.easymock.tests2.MockBuilderTest.testCreateMockString":354,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":194,"org.easymock.tests.UsageExpectAndThrowTest.floatType":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":362,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":474,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":357,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":400,"org.easymock.tests.UsageVerifyTest.twoThrows":230,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":332,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":371,"org.easymock.samples.ExampleTest.voteAgainstRemoval":253,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":106,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":393,"org.easymock.tests.LimitationsTest.privateConstructor":40,"org.easymock.tests2.UsageConstraintsTest.testNotNull":482,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":59,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":321,"org.easymock.tests2.UsageTest.defaultResetToNice":316,"org.easymock.samples.ExampleTest.voteAgainstRemovals":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":107,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":75,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":441,"org.easymock.tests.UsageVarargTest.differentLength":146,"org.easymock.tests2.CallbackTest.callback":488,"org.easymock.tests2.UsageConstraintsTest.equals":460,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":389,"org.easymock.tests.UsageTest.openCallCountByLastCall":90,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":515,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":456,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":23,"org.easymock.tests.UsageCallCountTest.tooFewCalls":9,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":302,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":235,"org.easymock.tests.UsageThrowableTest.throwCheckedException":56,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":493,"org.easymock.tests.MockingTest.testStrictClassMocking":162,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":2,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":305,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":446,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":301,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":36,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":304,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":402,"org.easymock.tests.ObjectMethodsTest.testHashCode":157,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":509,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":329,"org.easymock.tests2.NameTest.nameForNiceMock":336,"org.easymock.tests2.DependencyTest.testInterfaceMocking":281,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":498,"org.easymock.samples.ExampleTest.addDocument":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":373,"org.easymock.tests2.DelegateToTest.testStubDelegate":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":378,"org.easymock.tests2.AnswerTest.stubAnswer":401,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":46,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":349,"org.easymock.tests.UsageVarargTest.varargLongAccepted":148,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":104,"org.easymock.tests.UsageExpectAndReturnTest.floatType":62,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":78,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":330,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":259,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":476,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":137,"org.easymock.tests.UsageThrowableTest.noUpperLimit":53,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":276,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":457,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":292,"org.easymock.tests2.SerializationTest.test":486,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":417,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":238,"org.easymock.tests2.UsageConstraintsTest.testSame":463,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":61,"org.easymock.samples.SupportTest.addDocument":265,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":303,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":363,"org.easymock.tests.GenericTest.testPackageScope":16,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":99,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":275,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":169,"org.easymock.tests2.NameTest.nameForMock":334,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":72,"org.easymock.tests2.UsageStrictMockTest.differentMethods":288,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":353,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":390,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":64,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":219,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":155,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":228,"org.easymock.tests2.MockedExceptionTest.testRealException":324,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":109,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":108,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":285,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":22,"org.easymock.tests2.NameTest.nameForStrictMock":335,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":343,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":514,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":403,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":384,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":296,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":490,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":477,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":240,"org.easymock.tests.ErrorMessageTest.testGetters":506,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":340,"org.easymock.tests2.UsageStrictMockTest.range":287,"org.easymock.tests2.UsageConstraintsTest.lessThan":484,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":271,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":499,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":103,"org.easymock.tests2.CaptureTest.testCaptureRightOne":422,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":367,"org.easymock.tests2.UsageConstraintsTest.testOr":464,"org.easymock.tests.UsageRangeTest.combination":225,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":381,"org.easymock.tests.UsageTest.wrongArguments":89,"org.easymock.tests2.MockBuilderTest.testWithConstructor":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":364,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":195,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":96,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":73,"org.easymock.tests.UsageVarargTest.varargShortAccepted":147,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":242,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":12,"org.easymock.tests2.UsageConstraintsTest.cmpTo":469,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":98,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":315,"org.easymock.tests2.CaptureTest.testCaptureFromStub":423,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":28,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":341,"org.easymock.tests.UsageTest.unexpectedCallWithArray":88,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":45,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":10,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":502,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":74,"org.easymock.tests2.CaptureTest.testCapture":501,"org.easymock.tests2.UsageConstraintsTest.constraints":458,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":47,"org.easymock.samples.ExampleTest.addAndChangeDocument":257,"org.easymock.tests2.ConstraintsToStringTest.containsToString":504,"org.easymock.tests.UsageStrictMockTest.testVerify":51,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":262,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":44,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":129,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":418,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":517,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":125,"org.easymock.tests.LimitationsTest.abstractClass":39,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":66,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":138,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":126,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":491,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":432,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":141}}]
